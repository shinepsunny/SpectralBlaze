-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fwd_fft_Row_Wise_Synch_Pipeline_VITIS_LOOP_307_6_VITIS_LOOP_310_7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    c_fft_row_op_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    c_fft_row_op_st_empty_n : IN STD_LOGIC;
    c_fft_row_op_st_read : OUT STD_LOGIC;
    c_row_op_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_row_op_st_full_n : IN STD_LOGIC;
    c_row_op_st_write : OUT STD_LOGIC;
    Row_Buffer_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    Row_Buffer_full_n : IN STD_LOGIC;
    Row_Buffer_write : OUT STD_LOGIC;
    i_op_assign_9 : IN STD_LOGIC_VECTOR (7 downto 0);
    bound5 : IN STD_LOGIC_VECTOR (39 downto 0);
    empty : IN STD_LOGIC_VECTOR (7 downto 0);
    ctrl1_reg_load_cast1 : IN STD_LOGIC_VECTOR (7 downto 0);
    select_ln284_4 : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of fwd_fft_Row_Wise_Synch_Pipeline_VITIS_LOOP_307_6_VITIS_LOOP_310_7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv40_0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv40_1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal or_ln284_reg_287 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1057_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal c_fft_row_op_st_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal c_row_op_st_blk_n : STD_LOGIC;
    signal Row_Buffer_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_cast_fu_124_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_reg_278 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln284_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_60 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_2_fu_218_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal y_1_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1057_fu_201_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_9_cast_fu_128_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten8_fu_68 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln1057_fu_155_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal y_fu_167_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1057_5_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i7_not_mid1_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i7_not37_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln284_fu_188_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln310_fu_212_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fwd_fft_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component fwd_fft_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten8_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten8_fu_68 <= ap_const_lv40_0;
                elsif (((icmp_ln1057_fu_150_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten8_fu_68 <= add_ln1057_fu_155_p2;
                end if;
            end if; 
        end if;
    end process;

    x_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_60 <= ap_const_lv8_0;
                elsif (((icmp_ln1057_fu_150_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    x_fu_60 <= x_2_fu_218_p3;
                end if;
            end if; 
        end if;
    end process;

    y_1_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    y_1_fu_64 <= i_op_assign_9_cast_fu_128_p1;
                elsif (((icmp_ln1057_fu_150_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    y_1_fu_64 <= select_ln1057_fu_201_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_fu_150_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_ln284_reg_287 <= or_ln284_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    p_cast_reg_278(7 downto 0) <= p_cast_fu_124_p1(7 downto 0);
            end if;
        end if;
    end process;
    p_cast_reg_278(31 downto 8) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    Row_Buffer_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, Row_Buffer_full_n, or_ln284_reg_287, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln284_reg_287 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Row_Buffer_blk_n <= Row_Buffer_full_n;
        else 
            Row_Buffer_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Row_Buffer_din <= c_fft_row_op_st_dout;

    Row_Buffer_write_assign_proc : process(ap_enable_reg_pp0_iter2, or_ln284_reg_287, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln284_reg_287 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Row_Buffer_write <= ap_const_logic_1;
        else 
            Row_Buffer_write <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1057_fu_155_p2 <= std_logic_vector(unsigned(indvar_flatten8_fu_68) + unsigned(ap_const_lv40_1));
    add_ln310_fu_212_p2 <= std_logic_vector(unsigned(x_fu_60) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, c_fft_row_op_st_empty_n, c_row_op_st_full_n, Row_Buffer_full_n, or_ln284_reg_287)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((c_row_op_st_full_n = ap_const_logic_0) or (c_fft_row_op_st_empty_n = ap_const_logic_0) or ((or_ln284_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = Row_Buffer_full_n))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, c_fft_row_op_st_empty_n, c_row_op_st_full_n, Row_Buffer_full_n, or_ln284_reg_287)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((c_row_op_st_full_n = ap_const_logic_0) or (c_fft_row_op_st_empty_n = ap_const_logic_0) or ((or_ln284_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = Row_Buffer_full_n))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, c_fft_row_op_st_empty_n, c_row_op_st_full_n, Row_Buffer_full_n, or_ln284_reg_287)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((c_row_op_st_full_n = ap_const_logic_0) or (c_fft_row_op_st_empty_n = ap_const_logic_0) or ((or_ln284_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = Row_Buffer_full_n))));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter2_assign_proc : process(c_fft_row_op_st_empty_n, c_row_op_st_full_n, Row_Buffer_full_n, or_ln284_reg_287)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((c_row_op_st_full_n = ap_const_logic_0) or (c_fft_row_op_st_empty_n = ap_const_logic_0) or ((or_ln284_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = Row_Buffer_full_n)));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1057_fu_150_p2)
    begin
        if (((icmp_ln1057_fu_150_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    c_fft_row_op_st_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, c_fft_row_op_st_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            c_fft_row_op_st_blk_n <= c_fft_row_op_st_empty_n;
        else 
            c_fft_row_op_st_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    c_fft_row_op_st_read_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            c_fft_row_op_st_read <= ap_const_logic_1;
        else 
            c_fft_row_op_st_read <= ap_const_logic_0;
        end if; 
    end process;


    c_row_op_st_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, c_row_op_st_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            c_row_op_st_blk_n <= c_row_op_st_full_n;
        else 
            c_row_op_st_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    c_row_op_st_din <= c_fft_row_op_st_dout;

    c_row_op_st_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            c_row_op_st_write <= ap_const_logic_1;
        else 
            c_row_op_st_write <= ap_const_logic_0;
        end if; 
    end process;

    cmp_i_i7_not37_fu_178_p2 <= "1" when (signed(y_1_fu_64) < signed(p_cast_reg_278)) else "0";
    cmp_i_i7_not_mid1_fu_173_p2 <= "1" when (signed(y_fu_167_p2) < signed(p_cast_reg_278)) else "0";
    i_op_assign_9_cast_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_9),32));
    icmp_ln1057_5_fu_183_p2 <= "1" when (x_fu_60 = ctrl1_reg_load_cast1) else "0";
    icmp_ln1057_fu_150_p2 <= "1" when (indvar_flatten8_fu_68 = bound5) else "0";
    or_ln284_fu_196_p2 <= (select_ln284_fu_188_p3 or select_ln284_4);
    p_cast_fu_124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty),32));
    select_ln1057_fu_201_p3 <= 
        y_fu_167_p2 when (icmp_ln1057_5_fu_183_p2(0) = '1') else 
        y_1_fu_64;
    select_ln284_fu_188_p3 <= 
        cmp_i_i7_not_mid1_fu_173_p2 when (icmp_ln1057_5_fu_183_p2(0) = '1') else 
        cmp_i_i7_not37_fu_178_p2;
    x_2_fu_218_p3 <= 
        ap_const_lv8_1 when (icmp_ln1057_5_fu_183_p2(0) = '1') else 
        add_ln310_fu_212_p2;
    y_fu_167_p2 <= std_logic_vector(unsigned(y_1_fu_64) + unsigned(ap_const_lv32_1));
end behav;
