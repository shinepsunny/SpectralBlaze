-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Rd_Mem_VITIS_LOOP_305_5_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctrl1_reg : IN STD_LOGIC_VECTOR (31 downto 0);
    layer2_reg : IN STD_LOGIC_VECTOR (31 downto 0);
    pny_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    burst_buffer2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    burst_buffer2_ce0 : OUT STD_LOGIC;
    burst_buffer2_we0 : OUT STD_LOGIC;
    burst_buffer2_d0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    in_r : IN STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of Rd_Mem_VITIS_LOOP_305_5_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv69_0 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv17_7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000111";
    constant ap_const_lv69_1 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_cast_fu_121_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast_reg_359 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_131_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_364 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln290_fu_184_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln290_reg_381 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal mul_i_i116_fu_194_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_i_i116_reg_386 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_332_p2 : STD_LOGIC_VECTOR (68 downto 0);
    signal bound_reg_397 : STD_LOGIC_VECTOR (68 downto 0);
    signal cmp_i_i_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i_reg_402 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1057_1_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_1_reg_410 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln279_fu_245_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln279_reg_415 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln319_fu_261_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln319_reg_420 : STD_LOGIC_VECTOR (5 downto 0);
    signal cmp_i_i_mid1_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i_mid1_reg_425 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal zext_ln319_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal select_ln279_2_fu_307_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifs_fu_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln308_fu_279_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal lsy_fu_76 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln279_1_fu_253_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_fu_80 : STD_LOGIC_VECTOR (68 downto 0);
    signal add_ln1057_fu_225_p2 : STD_LOGIC_VECTOR (68 downto 0);
    signal tmp_cast_fu_141_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_fu_145_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_fu_151_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_i_i116_fu_194_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_i_i116_fu_194_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lsy_1_cast_i_fu_206_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_i_i_i_fu_210_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln305_fu_234_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lsy_1_cast_i_mid1_fu_265_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_i_i_i_mid1_fu_269_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_cast_fu_300_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_fu_312_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln319_fu_321_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_332_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_332_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_332_ce : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_332_p00 : STD_LOGIC_VECTOR (68 downto 0);
    signal grp_fu_332_p10 : STD_LOGIC_VECTOR (68 downto 0);
    signal mul_i_i116_fu_194_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_i_i116_fu_194_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component Rd_Mem_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Rd_Mem_mul_mul_8ns_14ns_69_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (68 downto 0) );
    end component;



begin
    mul_8ns_8ns_16_1_1_U12 : component Rd_Mem_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_i_i116_fu_194_p0,
        din1 => mul_i_i116_fu_194_p1,
        dout => mul_i_i116_fu_194_p2);

    mul_mul_8ns_14ns_69_4_1_U13 : component Rd_Mem_mul_mul_8ns_14ns_69_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 14,
        dout_WIDTH => 69)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_332_p0,
        din1 => grp_fu_332_p1,
        ce => grp_fu_332_ce,
        dout => grp_fu_332_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ifs_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ifs_fu_72 <= ap_const_lv64_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1057_fu_220_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ifs_fu_72 <= add_ln308_fu_279_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_fu_80 <= ap_const_lv69_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1057_fu_220_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_fu_80 <= add_ln1057_fu_225_p2;
            end if; 
        end if;
    end process;

    lsy_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                lsy_fu_76 <= ap_const_lv8_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1057_fu_220_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                lsy_fu_76 <= select_ln279_1_fu_253_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                bound_reg_397 <= grp_fu_332_p2;
                mul_i_i116_reg_386 <= mul_i_i116_fu_194_p2;
                    zext_ln290_reg_381(15 downto 0) <= zext_ln290_fu_184_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_fu_220_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cmp_i_i_mid1_reg_425 <= cmp_i_i_mid1_fu_274_p2;
                icmp_ln1057_1_reg_410 <= icmp_ln1057_1_fu_240_p2;
                select_ln279_reg_415 <= select_ln279_fu_245_p3;
                trunc_ln319_reg_420 <= trunc_ln319_fu_261_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cmp_i_i_reg_402 <= cmp_i_i_fu_215_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                p_cast_reg_359 <= ctrl1_reg(31 downto 24);
                tmp_reg_364 <= layer2_reg(31 downto 16);
            end if;
        end if;
    end process;
    zext_ln290_reg_381(63 downto 16) <= "000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln1057_fu_220_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1057_fu_220_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1057_fu_220_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_i_i_i_fu_210_p2 <= std_logic_vector(unsigned(mul_i_i116_reg_386) + unsigned(lsy_1_cast_i_fu_206_p1));
    add_i_i_i_mid1_fu_269_p2 <= std_logic_vector(unsigned(mul_i_i116_reg_386) + unsigned(lsy_1_cast_i_mid1_fu_265_p1));
    add_ln1057_fu_225_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_80) + unsigned(ap_const_lv69_1));
    add_ln305_fu_234_p2 <= std_logic_vector(unsigned(lsy_fu_76) + unsigned(ap_const_lv8_1));
    add_ln308_fu_279_p2 <= std_logic_vector(unsigned(select_ln279_fu_245_p3) + unsigned(ap_const_lv64_8));
    add_ln319_fu_321_p2 <= std_logic_vector(unsigned(tmp_2_cast_fu_300_p3) + unsigned(tmp_3_fu_312_p4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln1057_fu_220_p2)
    begin
        if ((icmp_ln1057_fu_220_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    burst_buffer2_address0 <= zext_ln319_fu_327_p1(11 - 1 downto 0);

    burst_buffer2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            burst_buffer2_ce0 <= ap_const_logic_1;
        else 
            burst_buffer2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    burst_buffer2_d0 <= in_r;

    burst_buffer2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, select_ln279_2_fu_307_p3)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (select_ln279_2_fu_307_p3 = ap_const_lv1_1))) then 
            burst_buffer2_we0 <= ap_const_logic_1;
        else 
            burst_buffer2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cmp_i_i_fu_215_p2 <= "1" when (unsigned(add_i_i_i_fu_210_p2) < unsigned(tmp_reg_364)) else "0";
    cmp_i_i_mid1_fu_274_p2 <= "1" when (unsigned(add_i_i_i_mid1_fu_269_p2) < unsigned(tmp_reg_364)) else "0";
    empty_fu_145_p2 <= std_logic_vector(unsigned(tmp_cast_fu_141_p1) + unsigned(ap_const_lv17_7));

    grp_fu_332_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state1) and ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))))) then 
            grp_fu_332_ce <= ap_const_logic_0;
        else 
            grp_fu_332_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_332_p0 <= grp_fu_332_p00(8 - 1 downto 0);
    grp_fu_332_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast_fu_121_p4),69));
    grp_fu_332_p1 <= grp_fu_332_p10(14 - 1 downto 0);
    grp_fu_332_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_151_p4),69));
    icmp_ln1057_1_fu_240_p2 <= "1" when (signed(ifs_fu_72) < signed(zext_ln290_reg_381)) else "0";
    icmp_ln1057_fu_220_p2 <= "1" when (indvar_flatten_fu_80 = bound_reg_397) else "0";
    lsy_1_cast_i_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lsy_fu_76),16));
    lsy_1_cast_i_mid1_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln305_fu_234_p2),16));
    mul_i_i116_fu_194_p0 <= mul_i_i116_fu_194_p00(8 - 1 downto 0);
    mul_i_i116_fu_194_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pny_2),16));
    mul_i_i116_fu_194_p1 <= mul_i_i116_fu_194_p10(8 - 1 downto 0);
    mul_i_i116_fu_194_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast_reg_359),16));
    p_cast_fu_121_p4 <= ctrl1_reg(31 downto 24);
    select_ln279_1_fu_253_p3 <= 
        lsy_fu_76 when (icmp_ln1057_1_fu_240_p2(0) = '1') else 
        add_ln305_fu_234_p2;
    select_ln279_2_fu_307_p3 <= 
        cmp_i_i_reg_402 when (icmp_ln1057_1_reg_410(0) = '1') else 
        cmp_i_i_mid1_reg_425;
    select_ln279_fu_245_p3 <= 
        ifs_fu_72 when (icmp_ln1057_1_fu_240_p2(0) = '1') else 
        ap_const_lv64_0;
    tmp_1_fu_151_p4 <= empty_fu_145_p2(16 downto 3);
    tmp_2_cast_fu_300_p3 <= (trunc_ln319_reg_420 & ap_const_lv5_0);
    tmp_3_fu_312_p4 <= select_ln279_reg_415(13 downto 3);
    tmp_cast_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_131_p4),17));
    tmp_fu_131_p4 <= layer2_reg(31 downto 16);
    trunc_ln319_fu_261_p1 <= select_ln279_1_fu_253_p3(6 - 1 downto 0);
    zext_ln290_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_364),64));
    zext_ln319_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln319_fu_321_p2),64));
end behav;
