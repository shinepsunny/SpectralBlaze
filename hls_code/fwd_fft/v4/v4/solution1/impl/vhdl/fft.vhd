-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    input_data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_data_ce0 : OUT STD_LOGIC;
    input_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_data_we0 : OUT STD_LOGIC;
    input_data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_data_ce1 : OUT STD_LOGIC;
    input_data_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_data_we1 : OUT STD_LOGIC;
    out_data_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    out_data_6_ce0 : OUT STD_LOGIC;
    out_data_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_data_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_data_6_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_data_6_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    out_data_6_ce1 : OUT STD_LOGIC;
    out_data_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_data_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_data_6_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ctrl1_reg : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of fft is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fft_fft,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7cg-fbvb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.614000,HLS_SYN_LAT=65,HLS_SYN_TPT=11,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=8722,HLS_SYN_LUT=9557,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal out_data_1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_1_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_1_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_2_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_2_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_2_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_2_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_3_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_3_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_3_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_3_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_4_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_4_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_4_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_4_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_5_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_5_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_5_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_5_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_1_U0_ap_start : STD_LOGIC;
    signal fft_stage_1_U0_ap_done : STD_LOGIC;
    signal fft_stage_1_U0_ap_continue : STD_LOGIC;
    signal fft_stage_1_U0_ap_idle : STD_LOGIC;
    signal fft_stage_1_U0_ap_ready : STD_LOGIC;
    signal fft_stage_1_U0_input_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_1_U0_input_data_ce0 : STD_LOGIC;
    signal fft_stage_1_U0_input_data_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_1_U0_input_data_ce1 : STD_LOGIC;
    signal fft_stage_1_U0_OUT_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_1_U0_OUT_r_ce0 : STD_LOGIC;
    signal fft_stage_1_U0_OUT_r_we0 : STD_LOGIC;
    signal fft_stage_1_U0_OUT_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_1_U0_OUT_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_1_U0_OUT_r_ce1 : STD_LOGIC;
    signal fft_stage_1_U0_OUT_r_we1 : STD_LOGIC;
    signal fft_stage_1_U0_OUT_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_1_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_ctrl1_reg_c18_channel : STD_LOGIC;
    signal ctrl1_reg_c18_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_reg_c18_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_reg_c18_channel : STD_LOGIC;
    signal ap_channel_done_out_data_1 : STD_LOGIC;
    signal fft_stage_1_U0_OUT_r_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_1 : STD_LOGIC;
    signal fft_stage6_U0_ap_start : STD_LOGIC;
    signal fft_stage6_U0_ap_done : STD_LOGIC;
    signal fft_stage6_U0_ap_continue : STD_LOGIC;
    signal fft_stage6_U0_ap_idle : STD_LOGIC;
    signal fft_stage6_U0_ap_ready : STD_LOGIC;
    signal fft_stage6_U0_IN_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage6_U0_IN_r_ce0 : STD_LOGIC;
    signal fft_stage6_U0_IN_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage6_U0_IN_r_ce1 : STD_LOGIC;
    signal fft_stage6_U0_OUT_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage6_U0_OUT_r_ce0 : STD_LOGIC;
    signal fft_stage6_U0_OUT_r_we0 : STD_LOGIC;
    signal fft_stage6_U0_OUT_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage6_U0_OUT_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage6_U0_OUT_r_ce1 : STD_LOGIC;
    signal fft_stage6_U0_OUT_r_we1 : STD_LOGIC;
    signal fft_stage6_U0_OUT_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage6_U0_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_ctrl1_reg_c17_channel : STD_LOGIC;
    signal ctrl1_reg_c17_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_reg_c17_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_reg_c17_channel : STD_LOGIC;
    signal ap_channel_done_out_data_2 : STD_LOGIC;
    signal fft_stage6_U0_OUT_r_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_2 : STD_LOGIC;
    signal fft_stage7_U0_ap_start : STD_LOGIC;
    signal fft_stage7_U0_ap_done : STD_LOGIC;
    signal fft_stage7_U0_ap_continue : STD_LOGIC;
    signal fft_stage7_U0_ap_idle : STD_LOGIC;
    signal fft_stage7_U0_ap_ready : STD_LOGIC;
    signal fft_stage7_U0_IN_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage7_U0_IN_r_ce0 : STD_LOGIC;
    signal fft_stage7_U0_IN_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage7_U0_IN_r_ce1 : STD_LOGIC;
    signal fft_stage7_U0_OUT_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage7_U0_OUT_r_ce0 : STD_LOGIC;
    signal fft_stage7_U0_OUT_r_we0 : STD_LOGIC;
    signal fft_stage7_U0_OUT_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage7_U0_OUT_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage7_U0_OUT_r_ce1 : STD_LOGIC;
    signal fft_stage7_U0_OUT_r_we1 : STD_LOGIC;
    signal fft_stage7_U0_OUT_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage7_U0_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_ctrl1_reg_c16_channel : STD_LOGIC;
    signal ctrl1_reg_c16_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_reg_c16_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_reg_c16_channel : STD_LOGIC;
    signal ap_channel_done_out_data_3 : STD_LOGIC;
    signal fft_stage7_U0_OUT_r_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_3 : STD_LOGIC;
    signal fft_stage8_U0_ap_start : STD_LOGIC;
    signal fft_stage8_U0_ap_done : STD_LOGIC;
    signal fft_stage8_U0_ap_continue : STD_LOGIC;
    signal fft_stage8_U0_ap_idle : STD_LOGIC;
    signal fft_stage8_U0_ap_ready : STD_LOGIC;
    signal fft_stage8_U0_IN_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage8_U0_IN_r_ce0 : STD_LOGIC;
    signal fft_stage8_U0_IN_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage8_U0_IN_r_ce1 : STD_LOGIC;
    signal fft_stage8_U0_OUT_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage8_U0_OUT_r_ce0 : STD_LOGIC;
    signal fft_stage8_U0_OUT_r_we0 : STD_LOGIC;
    signal fft_stage8_U0_OUT_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage8_U0_OUT_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage8_U0_OUT_r_ce1 : STD_LOGIC;
    signal fft_stage8_U0_OUT_r_we1 : STD_LOGIC;
    signal fft_stage8_U0_OUT_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage8_U0_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_ctrl1_reg_c15_channel : STD_LOGIC;
    signal ctrl1_reg_c15_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_reg_c15_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_reg_c15_channel : STD_LOGIC;
    signal ap_channel_done_out_data_4 : STD_LOGIC;
    signal fft_stage8_U0_OUT_r_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_4 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_4 : STD_LOGIC;
    signal fft_stage9_U0_ap_start : STD_LOGIC;
    signal fft_stage9_U0_ap_done : STD_LOGIC;
    signal fft_stage9_U0_ap_continue : STD_LOGIC;
    signal fft_stage9_U0_ap_idle : STD_LOGIC;
    signal fft_stage9_U0_ap_ready : STD_LOGIC;
    signal fft_stage9_U0_IN_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage9_U0_IN_r_ce0 : STD_LOGIC;
    signal fft_stage9_U0_IN_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage9_U0_IN_r_ce1 : STD_LOGIC;
    signal fft_stage9_U0_OUT_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage9_U0_OUT_r_ce0 : STD_LOGIC;
    signal fft_stage9_U0_OUT_r_we0 : STD_LOGIC;
    signal fft_stage9_U0_OUT_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage9_U0_OUT_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage9_U0_OUT_r_ce1 : STD_LOGIC;
    signal fft_stage9_U0_OUT_r_we1 : STD_LOGIC;
    signal fft_stage9_U0_OUT_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage9_U0_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_ctrl1_reg_c_channel : STD_LOGIC;
    signal ctrl1_reg_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_reg_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_reg_c_channel : STD_LOGIC;
    signal ap_channel_done_out_data_5 : STD_LOGIC;
    signal fft_stage9_U0_OUT_r_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_5 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_5 : STD_LOGIC;
    signal fft_stage_2_U0_ap_start : STD_LOGIC;
    signal fft_stage_2_U0_ap_done : STD_LOGIC;
    signal fft_stage_2_U0_ap_continue : STD_LOGIC;
    signal fft_stage_2_U0_ap_idle : STD_LOGIC;
    signal fft_stage_2_U0_ap_ready : STD_LOGIC;
    signal fft_stage_2_U0_IN_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_2_U0_IN_r_ce0 : STD_LOGIC;
    signal fft_stage_2_U0_IN_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_2_U0_IN_r_ce1 : STD_LOGIC;
    signal fft_stage_2_U0_out_data_6_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_2_U0_out_data_6_ce0 : STD_LOGIC;
    signal fft_stage_2_U0_out_data_6_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fft_stage_2_U0_out_data_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_2_U0_out_data_6_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_2_U0_out_data_6_ce1 : STD_LOGIC;
    signal fft_stage_2_U0_out_data_6_we1 : STD_LOGIC_VECTOR (3 downto 0);
    signal fft_stage_2_U0_out_data_6_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_1_i_full_n : STD_LOGIC;
    signal out_data_1_t_empty_n : STD_LOGIC;
    signal out_data_2_i_full_n : STD_LOGIC;
    signal out_data_2_t_empty_n : STD_LOGIC;
    signal out_data_3_i_full_n : STD_LOGIC;
    signal out_data_3_t_empty_n : STD_LOGIC;
    signal out_data_4_i_full_n : STD_LOGIC;
    signal out_data_4_t_empty_n : STD_LOGIC;
    signal out_data_5_i_full_n : STD_LOGIC;
    signal out_data_5_t_empty_n : STD_LOGIC;
    signal ctrl1_reg_c18_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_reg_c18_channel_empty_n : STD_LOGIC;
    signal ctrl1_reg_c17_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ctrl1_reg_c17_channel_empty_n : STD_LOGIC;
    signal ctrl1_reg_c16_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ctrl1_reg_c16_channel_empty_n : STD_LOGIC;
    signal ctrl1_reg_c15_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ctrl1_reg_c15_channel_empty_n : STD_LOGIC;
    signal ctrl1_reg_c_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ctrl1_reg_c_channel_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fft_fft_stage_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        input_data_ce0 : OUT STD_LOGIC;
        input_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        input_data_ce1 : OUT STD_LOGIC;
        input_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce0 : OUT STD_LOGIC;
        OUT_r_we0 : OUT STD_LOGIC;
        OUT_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce1 : OUT STD_LOGIC;
        OUT_r_we1 : OUT STD_LOGIC;
        OUT_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_reg : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fft_stage6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        IN_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce0 : OUT STD_LOGIC;
        IN_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        IN_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce1 : OUT STD_LOGIC;
        IN_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce0 : OUT STD_LOGIC;
        OUT_r_we0 : OUT STD_LOGIC;
        OUT_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce1 : OUT STD_LOGIC;
        OUT_r_we1 : OUT STD_LOGIC;
        OUT_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft_fft_stage7 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        IN_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce0 : OUT STD_LOGIC;
        IN_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        IN_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce1 : OUT STD_LOGIC;
        IN_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce0 : OUT STD_LOGIC;
        OUT_r_we0 : OUT STD_LOGIC;
        OUT_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce1 : OUT STD_LOGIC;
        OUT_r_we1 : OUT STD_LOGIC;
        OUT_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft_fft_stage8 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        IN_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce0 : OUT STD_LOGIC;
        IN_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        IN_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce1 : OUT STD_LOGIC;
        IN_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce0 : OUT STD_LOGIC;
        OUT_r_we0 : OUT STD_LOGIC;
        OUT_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce1 : OUT STD_LOGIC;
        OUT_r_we1 : OUT STD_LOGIC;
        OUT_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft_fft_stage9 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        IN_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce0 : OUT STD_LOGIC;
        IN_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        IN_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce1 : OUT STD_LOGIC;
        IN_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce0 : OUT STD_LOGIC;
        OUT_r_we0 : OUT STD_LOGIC;
        OUT_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce1 : OUT STD_LOGIC;
        OUT_r_we1 : OUT STD_LOGIC;
        OUT_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft_fft_stage_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        IN_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce0 : OUT STD_LOGIC;
        IN_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        IN_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce1 : OUT STD_LOGIC;
        IN_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_data_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        out_data_6_ce0 : OUT STD_LOGIC;
        out_data_6_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_data_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_data_6_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        out_data_6_ce1 : OUT STD_LOGIC;
        out_data_6_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_data_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft_out_data_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_we1 : IN STD_LOGIC;
        i_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_we1 : IN STD_LOGIC;
        t_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component fft_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fft_fifo_w16_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    out_data_1_U : component fft_out_data_1
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage_1_U0_OUT_r_address0,
        i_ce0 => fft_stage_1_U0_OUT_r_ce0,
        i_we0 => fft_stage_1_U0_OUT_r_we0,
        i_d0 => fft_stage_1_U0_OUT_r_d0,
        i_q0 => out_data_1_i_q0,
        i_address1 => fft_stage_1_U0_OUT_r_address1,
        i_ce1 => fft_stage_1_U0_OUT_r_ce1,
        i_we1 => fft_stage_1_U0_OUT_r_we1,
        i_d1 => fft_stage_1_U0_OUT_r_d1,
        i_q1 => out_data_1_i_q1,
        t_address0 => fft_stage6_U0_IN_r_address0,
        t_ce0 => fft_stage6_U0_IN_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_1_t_q0,
        t_address1 => fft_stage6_U0_IN_r_address1,
        t_ce1 => fft_stage6_U0_IN_r_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => out_data_1_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_1_i_full_n,
        i_write => ap_channel_done_out_data_1,
        t_empty_n => out_data_1_t_empty_n,
        t_read => fft_stage6_U0_ap_ready);

    out_data_2_U : component fft_out_data_1
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage6_U0_OUT_r_address0,
        i_ce0 => fft_stage6_U0_OUT_r_ce0,
        i_we0 => fft_stage6_U0_OUT_r_we0,
        i_d0 => fft_stage6_U0_OUT_r_d0,
        i_q0 => out_data_2_i_q0,
        i_address1 => fft_stage6_U0_OUT_r_address1,
        i_ce1 => fft_stage6_U0_OUT_r_ce1,
        i_we1 => fft_stage6_U0_OUT_r_we1,
        i_d1 => fft_stage6_U0_OUT_r_d1,
        i_q1 => out_data_2_i_q1,
        t_address0 => fft_stage7_U0_IN_r_address0,
        t_ce0 => fft_stage7_U0_IN_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_2_t_q0,
        t_address1 => fft_stage7_U0_IN_r_address1,
        t_ce1 => fft_stage7_U0_IN_r_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => out_data_2_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_2_i_full_n,
        i_write => ap_channel_done_out_data_2,
        t_empty_n => out_data_2_t_empty_n,
        t_read => fft_stage7_U0_ap_ready);

    out_data_3_U : component fft_out_data_1
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage7_U0_OUT_r_address0,
        i_ce0 => fft_stage7_U0_OUT_r_ce0,
        i_we0 => fft_stage7_U0_OUT_r_we0,
        i_d0 => fft_stage7_U0_OUT_r_d0,
        i_q0 => out_data_3_i_q0,
        i_address1 => fft_stage7_U0_OUT_r_address1,
        i_ce1 => fft_stage7_U0_OUT_r_ce1,
        i_we1 => fft_stage7_U0_OUT_r_we1,
        i_d1 => fft_stage7_U0_OUT_r_d1,
        i_q1 => out_data_3_i_q1,
        t_address0 => fft_stage8_U0_IN_r_address0,
        t_ce0 => fft_stage8_U0_IN_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_3_t_q0,
        t_address1 => fft_stage8_U0_IN_r_address1,
        t_ce1 => fft_stage8_U0_IN_r_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => out_data_3_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_3_i_full_n,
        i_write => ap_channel_done_out_data_3,
        t_empty_n => out_data_3_t_empty_n,
        t_read => fft_stage8_U0_ap_ready);

    out_data_4_U : component fft_out_data_1
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage8_U0_OUT_r_address0,
        i_ce0 => fft_stage8_U0_OUT_r_ce0,
        i_we0 => fft_stage8_U0_OUT_r_we0,
        i_d0 => fft_stage8_U0_OUT_r_d0,
        i_q0 => out_data_4_i_q0,
        i_address1 => fft_stage8_U0_OUT_r_address1,
        i_ce1 => fft_stage8_U0_OUT_r_ce1,
        i_we1 => fft_stage8_U0_OUT_r_we1,
        i_d1 => fft_stage8_U0_OUT_r_d1,
        i_q1 => out_data_4_i_q1,
        t_address0 => fft_stage9_U0_IN_r_address0,
        t_ce0 => fft_stage9_U0_IN_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_4_t_q0,
        t_address1 => fft_stage9_U0_IN_r_address1,
        t_ce1 => fft_stage9_U0_IN_r_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => out_data_4_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_4_i_full_n,
        i_write => ap_channel_done_out_data_4,
        t_empty_n => out_data_4_t_empty_n,
        t_read => fft_stage9_U0_ap_ready);

    out_data_5_U : component fft_out_data_1
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage9_U0_OUT_r_address0,
        i_ce0 => fft_stage9_U0_OUT_r_ce0,
        i_we0 => fft_stage9_U0_OUT_r_we0,
        i_d0 => fft_stage9_U0_OUT_r_d0,
        i_q0 => out_data_5_i_q0,
        i_address1 => fft_stage9_U0_OUT_r_address1,
        i_ce1 => fft_stage9_U0_OUT_r_ce1,
        i_we1 => fft_stage9_U0_OUT_r_we1,
        i_d1 => fft_stage9_U0_OUT_r_d1,
        i_q1 => out_data_5_i_q1,
        t_address0 => fft_stage_2_U0_IN_r_address0,
        t_ce0 => fft_stage_2_U0_IN_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_5_t_q0,
        t_address1 => fft_stage_2_U0_IN_r_address1,
        t_ce1 => fft_stage_2_U0_IN_r_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => out_data_5_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_5_i_full_n,
        i_write => ap_channel_done_out_data_5,
        t_empty_n => out_data_5_t_empty_n,
        t_read => fft_stage_2_U0_ap_ready);

    fft_stage_1_U0 : component fft_fft_stage_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_1_U0_ap_start,
        ap_done => fft_stage_1_U0_ap_done,
        ap_continue => fft_stage_1_U0_ap_continue,
        ap_idle => fft_stage_1_U0_ap_idle,
        ap_ready => fft_stage_1_U0_ap_ready,
        input_data_address0 => fft_stage_1_U0_input_data_address0,
        input_data_ce0 => fft_stage_1_U0_input_data_ce0,
        input_data_q0 => input_data_q0,
        input_data_address1 => fft_stage_1_U0_input_data_address1,
        input_data_ce1 => fft_stage_1_U0_input_data_ce1,
        input_data_q1 => input_data_q1,
        OUT_r_address0 => fft_stage_1_U0_OUT_r_address0,
        OUT_r_ce0 => fft_stage_1_U0_OUT_r_ce0,
        OUT_r_we0 => fft_stage_1_U0_OUT_r_we0,
        OUT_r_d0 => fft_stage_1_U0_OUT_r_d0,
        OUT_r_address1 => fft_stage_1_U0_OUT_r_address1,
        OUT_r_ce1 => fft_stage_1_U0_OUT_r_ce1,
        OUT_r_we1 => fft_stage_1_U0_OUT_r_we1,
        OUT_r_d1 => fft_stage_1_U0_OUT_r_d1,
        ctrl1_reg => ctrl1_reg,
        ap_return => fft_stage_1_U0_ap_return);

    fft_stage6_U0 : component fft_fft_stage6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage6_U0_ap_start,
        ap_done => fft_stage6_U0_ap_done,
        ap_continue => fft_stage6_U0_ap_continue,
        ap_idle => fft_stage6_U0_ap_idle,
        ap_ready => fft_stage6_U0_ap_ready,
        IN_r_address0 => fft_stage6_U0_IN_r_address0,
        IN_r_ce0 => fft_stage6_U0_IN_r_ce0,
        IN_r_q0 => out_data_1_t_q0,
        IN_r_address1 => fft_stage6_U0_IN_r_address1,
        IN_r_ce1 => fft_stage6_U0_IN_r_ce1,
        IN_r_q1 => out_data_1_t_q1,
        OUT_r_address0 => fft_stage6_U0_OUT_r_address0,
        OUT_r_ce0 => fft_stage6_U0_OUT_r_ce0,
        OUT_r_we0 => fft_stage6_U0_OUT_r_we0,
        OUT_r_d0 => fft_stage6_U0_OUT_r_d0,
        OUT_r_address1 => fft_stage6_U0_OUT_r_address1,
        OUT_r_ce1 => fft_stage6_U0_OUT_r_ce1,
        OUT_r_we1 => fft_stage6_U0_OUT_r_we1,
        OUT_r_d1 => fft_stage6_U0_OUT_r_d1,
        p_read => ctrl1_reg_c18_channel_dout,
        ap_return => fft_stage6_U0_ap_return);

    fft_stage7_U0 : component fft_fft_stage7
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage7_U0_ap_start,
        ap_done => fft_stage7_U0_ap_done,
        ap_continue => fft_stage7_U0_ap_continue,
        ap_idle => fft_stage7_U0_ap_idle,
        ap_ready => fft_stage7_U0_ap_ready,
        IN_r_address0 => fft_stage7_U0_IN_r_address0,
        IN_r_ce0 => fft_stage7_U0_IN_r_ce0,
        IN_r_q0 => out_data_2_t_q0,
        IN_r_address1 => fft_stage7_U0_IN_r_address1,
        IN_r_ce1 => fft_stage7_U0_IN_r_ce1,
        IN_r_q1 => out_data_2_t_q1,
        OUT_r_address0 => fft_stage7_U0_OUT_r_address0,
        OUT_r_ce0 => fft_stage7_U0_OUT_r_ce0,
        OUT_r_we0 => fft_stage7_U0_OUT_r_we0,
        OUT_r_d0 => fft_stage7_U0_OUT_r_d0,
        OUT_r_address1 => fft_stage7_U0_OUT_r_address1,
        OUT_r_ce1 => fft_stage7_U0_OUT_r_ce1,
        OUT_r_we1 => fft_stage7_U0_OUT_r_we1,
        OUT_r_d1 => fft_stage7_U0_OUT_r_d1,
        p_read => ctrl1_reg_c17_channel_dout,
        ap_return => fft_stage7_U0_ap_return);

    fft_stage8_U0 : component fft_fft_stage8
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage8_U0_ap_start,
        ap_done => fft_stage8_U0_ap_done,
        ap_continue => fft_stage8_U0_ap_continue,
        ap_idle => fft_stage8_U0_ap_idle,
        ap_ready => fft_stage8_U0_ap_ready,
        IN_r_address0 => fft_stage8_U0_IN_r_address0,
        IN_r_ce0 => fft_stage8_U0_IN_r_ce0,
        IN_r_q0 => out_data_3_t_q0,
        IN_r_address1 => fft_stage8_U0_IN_r_address1,
        IN_r_ce1 => fft_stage8_U0_IN_r_ce1,
        IN_r_q1 => out_data_3_t_q1,
        OUT_r_address0 => fft_stage8_U0_OUT_r_address0,
        OUT_r_ce0 => fft_stage8_U0_OUT_r_ce0,
        OUT_r_we0 => fft_stage8_U0_OUT_r_we0,
        OUT_r_d0 => fft_stage8_U0_OUT_r_d0,
        OUT_r_address1 => fft_stage8_U0_OUT_r_address1,
        OUT_r_ce1 => fft_stage8_U0_OUT_r_ce1,
        OUT_r_we1 => fft_stage8_U0_OUT_r_we1,
        OUT_r_d1 => fft_stage8_U0_OUT_r_d1,
        p_read => ctrl1_reg_c16_channel_dout,
        ap_return => fft_stage8_U0_ap_return);

    fft_stage9_U0 : component fft_fft_stage9
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage9_U0_ap_start,
        ap_done => fft_stage9_U0_ap_done,
        ap_continue => fft_stage9_U0_ap_continue,
        ap_idle => fft_stage9_U0_ap_idle,
        ap_ready => fft_stage9_U0_ap_ready,
        IN_r_address0 => fft_stage9_U0_IN_r_address0,
        IN_r_ce0 => fft_stage9_U0_IN_r_ce0,
        IN_r_q0 => out_data_4_t_q0,
        IN_r_address1 => fft_stage9_U0_IN_r_address1,
        IN_r_ce1 => fft_stage9_U0_IN_r_ce1,
        IN_r_q1 => out_data_4_t_q1,
        OUT_r_address0 => fft_stage9_U0_OUT_r_address0,
        OUT_r_ce0 => fft_stage9_U0_OUT_r_ce0,
        OUT_r_we0 => fft_stage9_U0_OUT_r_we0,
        OUT_r_d0 => fft_stage9_U0_OUT_r_d0,
        OUT_r_address1 => fft_stage9_U0_OUT_r_address1,
        OUT_r_ce1 => fft_stage9_U0_OUT_r_ce1,
        OUT_r_we1 => fft_stage9_U0_OUT_r_we1,
        OUT_r_d1 => fft_stage9_U0_OUT_r_d1,
        p_read => ctrl1_reg_c15_channel_dout,
        ap_return => fft_stage9_U0_ap_return);

    fft_stage_2_U0 : component fft_fft_stage_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_2_U0_ap_start,
        ap_done => fft_stage_2_U0_ap_done,
        ap_continue => fft_stage_2_U0_ap_continue,
        ap_idle => fft_stage_2_U0_ap_idle,
        ap_ready => fft_stage_2_U0_ap_ready,
        IN_r_address0 => fft_stage_2_U0_IN_r_address0,
        IN_r_ce0 => fft_stage_2_U0_IN_r_ce0,
        IN_r_q0 => out_data_5_t_q0,
        IN_r_address1 => fft_stage_2_U0_IN_r_address1,
        IN_r_ce1 => fft_stage_2_U0_IN_r_ce1,
        IN_r_q1 => out_data_5_t_q1,
        out_data_6_address0 => fft_stage_2_U0_out_data_6_address0,
        out_data_6_ce0 => fft_stage_2_U0_out_data_6_ce0,
        out_data_6_we0 => fft_stage_2_U0_out_data_6_we0,
        out_data_6_d0 => fft_stage_2_U0_out_data_6_d0,
        out_data_6_address1 => fft_stage_2_U0_out_data_6_address1,
        out_data_6_ce1 => fft_stage_2_U0_out_data_6_ce1,
        out_data_6_we1 => fft_stage_2_U0_out_data_6_we1,
        out_data_6_d1 => fft_stage_2_U0_out_data_6_d1,
        p_read => ctrl1_reg_c_channel_dout);

    ctrl1_reg_c18_channel_U : component fft_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_1_U0_ap_return,
        if_full_n => ctrl1_reg_c18_channel_full_n,
        if_write => ap_channel_done_ctrl1_reg_c18_channel,
        if_dout => ctrl1_reg_c18_channel_dout,
        if_empty_n => ctrl1_reg_c18_channel_empty_n,
        if_read => fft_stage6_U0_ap_ready);

    ctrl1_reg_c17_channel_U : component fft_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage6_U0_ap_return,
        if_full_n => ctrl1_reg_c17_channel_full_n,
        if_write => ap_channel_done_ctrl1_reg_c17_channel,
        if_dout => ctrl1_reg_c17_channel_dout,
        if_empty_n => ctrl1_reg_c17_channel_empty_n,
        if_read => fft_stage7_U0_ap_ready);

    ctrl1_reg_c16_channel_U : component fft_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage7_U0_ap_return,
        if_full_n => ctrl1_reg_c16_channel_full_n,
        if_write => ap_channel_done_ctrl1_reg_c16_channel,
        if_dout => ctrl1_reg_c16_channel_dout,
        if_empty_n => ctrl1_reg_c16_channel_empty_n,
        if_read => fft_stage8_U0_ap_ready);

    ctrl1_reg_c15_channel_U : component fft_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage8_U0_ap_return,
        if_full_n => ctrl1_reg_c15_channel_full_n,
        if_write => ap_channel_done_ctrl1_reg_c15_channel,
        if_dout => ctrl1_reg_c15_channel_dout,
        if_empty_n => ctrl1_reg_c15_channel_empty_n,
        if_read => fft_stage9_U0_ap_ready);

    ctrl1_reg_c_channel_U : component fft_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage9_U0_ap_return,
        if_full_n => ctrl1_reg_c_channel_full_n,
        if_write => ap_channel_done_ctrl1_reg_c_channel,
        if_dout => ctrl1_reg_c_channel_dout,
        if_empty_n => ctrl1_reg_c_channel_empty_n,
        if_read => fft_stage_2_U0_ap_ready);





    ap_sync_reg_channel_write_ctrl1_reg_c15_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_reg_c15_channel <= ap_const_logic_0;
            else
                if (((fft_stage8_U0_ap_done and fft_stage8_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_reg_c15_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_reg_c15_channel <= ap_sync_channel_write_ctrl1_reg_c15_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_reg_c16_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_reg_c16_channel <= ap_const_logic_0;
            else
                if (((fft_stage7_U0_ap_done and fft_stage7_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_reg_c16_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_reg_c16_channel <= ap_sync_channel_write_ctrl1_reg_c16_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_reg_c17_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_reg_c17_channel <= ap_const_logic_0;
            else
                if (((fft_stage6_U0_ap_done and fft_stage6_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_reg_c17_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_reg_c17_channel <= ap_sync_channel_write_ctrl1_reg_c17_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_reg_c18_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_reg_c18_channel <= ap_const_logic_0;
            else
                if (((fft_stage_1_U0_ap_done and fft_stage_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_reg_c18_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_reg_c18_channel <= ap_sync_channel_write_ctrl1_reg_c18_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_reg_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_reg_c_channel <= ap_const_logic_0;
            else
                if (((fft_stage9_U0_ap_done and fft_stage9_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_reg_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_reg_c_channel <= ap_sync_channel_write_ctrl1_reg_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_1 <= ap_const_logic_0;
            else
                if (((fft_stage_1_U0_ap_done and fft_stage_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_1 <= ap_sync_channel_write_out_data_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_2 <= ap_const_logic_0;
            else
                if (((fft_stage6_U0_ap_done and fft_stage6_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_2 <= ap_sync_channel_write_out_data_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_3 <= ap_const_logic_0;
            else
                if (((fft_stage7_U0_ap_done and fft_stage7_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_3 <= ap_sync_channel_write_out_data_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_4 <= ap_const_logic_0;
            else
                if (((fft_stage8_U0_ap_done and fft_stage8_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_4 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_4 <= ap_sync_channel_write_out_data_4;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_5 <= ap_const_logic_0;
            else
                if (((fft_stage9_U0_ap_done and fft_stage9_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_5 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_5 <= ap_sync_channel_write_out_data_5;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_ctrl1_reg_c15_channel <= (fft_stage8_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_reg_c15_channel xor ap_const_logic_1));
    ap_channel_done_ctrl1_reg_c16_channel <= (fft_stage7_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_reg_c16_channel xor ap_const_logic_1));
    ap_channel_done_ctrl1_reg_c17_channel <= (fft_stage6_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_reg_c17_channel xor ap_const_logic_1));
    ap_channel_done_ctrl1_reg_c18_channel <= (fft_stage_1_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_reg_c18_channel xor ap_const_logic_1));
    ap_channel_done_ctrl1_reg_c_channel <= (fft_stage9_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_reg_c_channel xor ap_const_logic_1));
    ap_channel_done_out_data_1 <= (fft_stage_1_U0_ap_done and (ap_sync_reg_channel_write_out_data_1 xor ap_const_logic_1));
    ap_channel_done_out_data_2 <= (fft_stage6_U0_ap_done and (ap_sync_reg_channel_write_out_data_2 xor ap_const_logic_1));
    ap_channel_done_out_data_3 <= (fft_stage7_U0_ap_done and (ap_sync_reg_channel_write_out_data_3 xor ap_const_logic_1));
    ap_channel_done_out_data_4 <= (fft_stage8_U0_ap_done and (ap_sync_reg_channel_write_out_data_4 xor ap_const_logic_1));
    ap_channel_done_out_data_5 <= (fft_stage9_U0_ap_done and (ap_sync_reg_channel_write_out_data_5 xor ap_const_logic_1));
    ap_done <= fft_stage_2_U0_ap_done;
    ap_idle <= (fft_stage_2_U0_ap_idle and fft_stage_1_U0_ap_idle and fft_stage9_U0_ap_idle and fft_stage8_U0_ap_idle and fft_stage7_U0_ap_idle and fft_stage6_U0_ap_idle and (ctrl1_reg_c_channel_empty_n xor ap_const_logic_1) and (ctrl1_reg_c15_channel_empty_n xor ap_const_logic_1) and (ctrl1_reg_c16_channel_empty_n xor ap_const_logic_1) and (ctrl1_reg_c17_channel_empty_n xor ap_const_logic_1) and (ctrl1_reg_c18_channel_empty_n xor ap_const_logic_1) and (out_data_5_t_empty_n xor ap_const_logic_1) and (out_data_4_t_empty_n xor ap_const_logic_1) and (out_data_3_t_empty_n xor ap_const_logic_1) and (out_data_2_t_empty_n xor ap_const_logic_1) and (out_data_1_t_empty_n xor ap_const_logic_1));
    ap_ready <= fft_stage_1_U0_ap_ready;
    ap_sync_channel_write_ctrl1_reg_c15_channel <= ((ctrl1_reg_c15_channel_full_n and ap_channel_done_ctrl1_reg_c15_channel) or ap_sync_reg_channel_write_ctrl1_reg_c15_channel);
    ap_sync_channel_write_ctrl1_reg_c16_channel <= ((ctrl1_reg_c16_channel_full_n and ap_channel_done_ctrl1_reg_c16_channel) or ap_sync_reg_channel_write_ctrl1_reg_c16_channel);
    ap_sync_channel_write_ctrl1_reg_c17_channel <= ((ctrl1_reg_c17_channel_full_n and ap_channel_done_ctrl1_reg_c17_channel) or ap_sync_reg_channel_write_ctrl1_reg_c17_channel);
    ap_sync_channel_write_ctrl1_reg_c18_channel <= ((ctrl1_reg_c18_channel_full_n and ap_channel_done_ctrl1_reg_c18_channel) or ap_sync_reg_channel_write_ctrl1_reg_c18_channel);
    ap_sync_channel_write_ctrl1_reg_c_channel <= ((ctrl1_reg_c_channel_full_n and ap_channel_done_ctrl1_reg_c_channel) or ap_sync_reg_channel_write_ctrl1_reg_c_channel);
    ap_sync_channel_write_out_data_1 <= ((fft_stage_1_U0_OUT_r_full_n and ap_channel_done_out_data_1) or ap_sync_reg_channel_write_out_data_1);
    ap_sync_channel_write_out_data_2 <= ((fft_stage6_U0_OUT_r_full_n and ap_channel_done_out_data_2) or ap_sync_reg_channel_write_out_data_2);
    ap_sync_channel_write_out_data_3 <= ((fft_stage7_U0_OUT_r_full_n and ap_channel_done_out_data_3) or ap_sync_reg_channel_write_out_data_3);
    ap_sync_channel_write_out_data_4 <= ((fft_stage8_U0_OUT_r_full_n and ap_channel_done_out_data_4) or ap_sync_reg_channel_write_out_data_4);
    ap_sync_channel_write_out_data_5 <= ((fft_stage9_U0_OUT_r_full_n and ap_channel_done_out_data_5) or ap_sync_reg_channel_write_out_data_5);
    fft_stage6_U0_OUT_r_full_n <= out_data_2_i_full_n;
    fft_stage6_U0_ap_continue <= (ap_sync_channel_write_out_data_2 and ap_sync_channel_write_ctrl1_reg_c17_channel);
    fft_stage6_U0_ap_start <= (out_data_1_t_empty_n and ctrl1_reg_c18_channel_empty_n);
    fft_stage7_U0_OUT_r_full_n <= out_data_3_i_full_n;
    fft_stage7_U0_ap_continue <= (ap_sync_channel_write_out_data_3 and ap_sync_channel_write_ctrl1_reg_c16_channel);
    fft_stage7_U0_ap_start <= (out_data_2_t_empty_n and ctrl1_reg_c17_channel_empty_n);
    fft_stage8_U0_OUT_r_full_n <= out_data_4_i_full_n;
    fft_stage8_U0_ap_continue <= (ap_sync_channel_write_out_data_4 and ap_sync_channel_write_ctrl1_reg_c15_channel);
    fft_stage8_U0_ap_start <= (out_data_3_t_empty_n and ctrl1_reg_c16_channel_empty_n);
    fft_stage9_U0_OUT_r_full_n <= out_data_5_i_full_n;
    fft_stage9_U0_ap_continue <= (ap_sync_channel_write_out_data_5 and ap_sync_channel_write_ctrl1_reg_c_channel);
    fft_stage9_U0_ap_start <= (out_data_4_t_empty_n and ctrl1_reg_c15_channel_empty_n);
    fft_stage_1_U0_OUT_r_full_n <= out_data_1_i_full_n;
    fft_stage_1_U0_ap_continue <= (ap_sync_channel_write_out_data_1 and ap_sync_channel_write_ctrl1_reg_c18_channel);
    fft_stage_1_U0_ap_start <= ap_start;
    fft_stage_2_U0_ap_continue <= ap_const_logic_1;
    fft_stage_2_U0_ap_start <= (out_data_5_t_empty_n and ctrl1_reg_c_channel_empty_n);
    input_data_address0 <= fft_stage_1_U0_input_data_address0;
    input_data_address1 <= fft_stage_1_U0_input_data_address1;
    input_data_ce0 <= fft_stage_1_U0_input_data_ce0;
    input_data_ce1 <= fft_stage_1_U0_input_data_ce1;
    input_data_d0 <= ap_const_lv32_0;
    input_data_d1 <= ap_const_lv32_0;
    input_data_we0 <= ap_const_logic_0;
    input_data_we1 <= ap_const_logic_0;
    out_data_6_address0 <= fft_stage_2_U0_out_data_6_address0;
    out_data_6_address1 <= fft_stage_2_U0_out_data_6_address1;
    out_data_6_ce0 <= fft_stage_2_U0_out_data_6_ce0;
    out_data_6_ce1 <= fft_stage_2_U0_out_data_6_ce1;
    out_data_6_d0 <= fft_stage_2_U0_out_data_6_d0;
    out_data_6_d1 <= fft_stage_2_U0_out_data_6_d1;
    out_data_6_we0 <= fft_stage_2_U0_out_data_6_we0;
    out_data_6_we1 <= fft_stage_2_U0_out_data_6_we1;
end behav;
