-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Rd_Mem_Rd_Mem_Pipeline_VITIS_LOOP_319_5_VITIS_LOOP_322_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    mul_i_i135 : IN STD_LOGIC_VECTOR (15 downto 0);
    trunc_ln : IN STD_LOGIC_VECTOR (15 downto 0);
    bound : IN STD_LOGIC_VECTOR (68 downto 0);
    burst_buffer2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    burst_buffer2_ce0 : OUT STD_LOGIC;
    burst_buffer2_we0 : OUT STD_LOGIC;
    burst_buffer2_d0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    in_r : IN STD_LOGIC_VECTOR (63 downto 0);
    zext_ln287 : IN STD_LOGIC_VECTOR (15 downto 0);
    rd_ptr_4_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    rd_ptr_4_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of Rd_Mem_Rd_Mem_Pipeline_VITIS_LOOP_319_5_VITIS_LOOP_322_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv69_0 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111101000";
    constant ap_const_lv69_1 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal select_ln319_2_reg_477 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal select_ln319_2_reg_477_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln319_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln287_cast_fu_182_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_cast_reg_463 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln319_reg_468 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln319_reg_468_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln319_reg_468_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln319_reg_468_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln319_reg_468_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln319_reg_468_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln319_reg_468_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln319_reg_468_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal burst_buffer2_addr_1_reg_472 : STD_LOGIC_VECTOR (10 downto 0);
    signal burst_buffer2_addr_1_reg_472_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal burst_buffer2_addr_1_reg_472_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal burst_buffer2_addr_1_reg_472_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal burst_buffer2_addr_1_reg_472_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal burst_buffer2_addr_1_reg_472_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal burst_buffer2_addr_1_reg_472_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal burst_buffer2_addr_1_reg_472_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal burst_buffer2_addr_1_reg_472_pp0_iter9_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln319_2_fu_308_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln319_2_reg_477_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln319_2_reg_477_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln319_2_reg_477_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln319_2_reg_477_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln319_2_reg_477_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln319_2_reg_477_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln319_2_reg_477_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln328_2_fu_335_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln328_2_reg_481 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln328_2_reg_481_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln328_2_reg_481_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln328_2_reg_481_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln328_2_reg_481_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln328_2_reg_481_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln328_2_reg_481_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln328_2_reg_481_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln328_2_reg_481_pp0_iter9_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln328_8_reg_486 : STD_LOGIC_VECTOR (59 downto 0);
    signal gmem_addr_read_reg_497 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln333_fu_289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln328_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln328_1_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ifs_fu_96 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln322_fu_373_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal lsy_fu_100 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln319_1_fu_263_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten7_fu_104 : STD_LOGIC_VECTOR (68 downto 0);
    signal add_ln319_1_fu_231_p2 : STD_LOGIC_VECTOR (68 downto 0);
    signal rd_ptr_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal rd_ptr_1_fu_319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal lsy_1_cast_fu_212_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_i_i_fu_216_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1057_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln319_fu_251_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln319_fu_240_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln328_fu_271_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_cast_fu_275_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln319_fu_259_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln333_fu_283_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal lsy_1_cast_mid1_fu_294_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_i_i_mid1_fu_298_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal cmp_i43_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i43_mid1_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_325_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln1_fu_341_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln328_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln328_fu_353_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_489 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component Rd_Mem_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Rd_Mem_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ifs_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    ifs_fu_96 <= ap_const_lv64_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln319_fu_226_p2 = ap_const_lv1_0))) then 
                    ifs_fu_96 <= add_ln322_fu_373_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten7_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten7_fu_104 <= ap_const_lv69_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln319_fu_226_p2 = ap_const_lv1_0))) then 
                    indvar_flatten7_fu_104 <= add_ln319_1_fu_231_p2;
                end if;
            end if; 
        end if;
    end process;

    lsy_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    lsy_fu_100 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln319_fu_226_p2 = ap_const_lv1_0))) then 
                    lsy_fu_100 <= select_ln319_1_fu_263_p3;
                end if;
            end if; 
        end if;
    end process;

    rd_ptr_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    rd_ptr_fu_108 <= ap_const_lv32_3E8;
                elsif ((ap_const_boolean_1 = ap_condition_489)) then 
                    rd_ptr_fu_108 <= rd_ptr_1_fu_319_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln319_2_fu_308_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln319_fu_226_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln328_2_reg_481 <= add_ln328_2_fu_335_p2;
                trunc_ln328_8_reg_486 <= add_ln328_fu_353_p2(63 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln328_2_reg_481_pp0_iter2_reg <= add_ln328_2_reg_481;
                add_ln328_2_reg_481_pp0_iter3_reg <= add_ln328_2_reg_481_pp0_iter2_reg;
                add_ln328_2_reg_481_pp0_iter4_reg <= add_ln328_2_reg_481_pp0_iter3_reg;
                add_ln328_2_reg_481_pp0_iter5_reg <= add_ln328_2_reg_481_pp0_iter4_reg;
                add_ln328_2_reg_481_pp0_iter6_reg <= add_ln328_2_reg_481_pp0_iter5_reg;
                add_ln328_2_reg_481_pp0_iter7_reg <= add_ln328_2_reg_481_pp0_iter6_reg;
                add_ln328_2_reg_481_pp0_iter8_reg <= add_ln328_2_reg_481_pp0_iter7_reg;
                add_ln328_2_reg_481_pp0_iter9_reg <= add_ln328_2_reg_481_pp0_iter8_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                burst_buffer2_addr_1_reg_472_pp0_iter2_reg <= burst_buffer2_addr_1_reg_472;
                burst_buffer2_addr_1_reg_472_pp0_iter3_reg <= burst_buffer2_addr_1_reg_472_pp0_iter2_reg;
                burst_buffer2_addr_1_reg_472_pp0_iter4_reg <= burst_buffer2_addr_1_reg_472_pp0_iter3_reg;
                burst_buffer2_addr_1_reg_472_pp0_iter5_reg <= burst_buffer2_addr_1_reg_472_pp0_iter4_reg;
                burst_buffer2_addr_1_reg_472_pp0_iter6_reg <= burst_buffer2_addr_1_reg_472_pp0_iter5_reg;
                burst_buffer2_addr_1_reg_472_pp0_iter7_reg <= burst_buffer2_addr_1_reg_472_pp0_iter6_reg;
                burst_buffer2_addr_1_reg_472_pp0_iter8_reg <= burst_buffer2_addr_1_reg_472_pp0_iter7_reg;
                burst_buffer2_addr_1_reg_472_pp0_iter9_reg <= burst_buffer2_addr_1_reg_472_pp0_iter8_reg;
                icmp_ln319_reg_468_pp0_iter2_reg <= icmp_ln319_reg_468;
                icmp_ln319_reg_468_pp0_iter3_reg <= icmp_ln319_reg_468_pp0_iter2_reg;
                icmp_ln319_reg_468_pp0_iter4_reg <= icmp_ln319_reg_468_pp0_iter3_reg;
                icmp_ln319_reg_468_pp0_iter5_reg <= icmp_ln319_reg_468_pp0_iter4_reg;
                icmp_ln319_reg_468_pp0_iter6_reg <= icmp_ln319_reg_468_pp0_iter5_reg;
                icmp_ln319_reg_468_pp0_iter7_reg <= icmp_ln319_reg_468_pp0_iter6_reg;
                icmp_ln319_reg_468_pp0_iter8_reg <= icmp_ln319_reg_468_pp0_iter7_reg;
                select_ln319_2_reg_477_pp0_iter2_reg <= select_ln319_2_reg_477;
                select_ln319_2_reg_477_pp0_iter3_reg <= select_ln319_2_reg_477_pp0_iter2_reg;
                select_ln319_2_reg_477_pp0_iter4_reg <= select_ln319_2_reg_477_pp0_iter3_reg;
                select_ln319_2_reg_477_pp0_iter5_reg <= select_ln319_2_reg_477_pp0_iter4_reg;
                select_ln319_2_reg_477_pp0_iter6_reg <= select_ln319_2_reg_477_pp0_iter5_reg;
                select_ln319_2_reg_477_pp0_iter7_reg <= select_ln319_2_reg_477_pp0_iter6_reg;
                select_ln319_2_reg_477_pp0_iter8_reg <= select_ln319_2_reg_477_pp0_iter7_reg;
                select_ln319_2_reg_477_pp0_iter9_reg <= select_ln319_2_reg_477_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln319_reg_468 <= icmp_ln319_fu_226_p2;
                    zext_ln287_cast_reg_463(15 downto 0) <= zext_ln287_cast_fu_182_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln319_fu_226_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                burst_buffer2_addr_1_reg_472 <= zext_ln333_fu_289_p1(11 - 1 downto 0);
                select_ln319_2_reg_477 <= select_ln319_2_fu_308_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln319_2_reg_477_pp0_iter8_reg = ap_const_lv1_1))) then
                gmem_addr_read_reg_497 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    zext_ln287_cast_reg_463(63 downto 16) <= "000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_i_i_fu_216_p2 <= std_logic_vector(unsigned(lsy_1_cast_fu_212_p1) + unsigned(mul_i_i135));
    add_i_i_mid1_fu_298_p2 <= std_logic_vector(unsigned(lsy_1_cast_mid1_fu_294_p1) + unsigned(mul_i_i135));
    add_ln319_1_fu_231_p2 <= std_logic_vector(unsigned(indvar_flatten7_fu_104) + unsigned(ap_const_lv69_1));
    add_ln319_fu_240_p2 <= std_logic_vector(unsigned(lsy_fu_100) + unsigned(ap_const_lv8_1));
    add_ln322_fu_373_p2 <= std_logic_vector(unsigned(select_ln319_fu_251_p3) + unsigned(ap_const_lv64_8));
    add_ln328_2_fu_335_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_275_p3) + unsigned(tmp_6_fu_325_p4));
    add_ln328_fu_353_p2 <= std_logic_vector(signed(sext_ln328_fu_349_p1) + signed(in_r));
    add_ln333_fu_283_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_275_p3) + unsigned(trunc_ln319_fu_259_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter9, m_axi_gmem_RVALID, select_ln319_2_reg_477_pp0_iter8_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (select_ln319_2_reg_477_pp0_iter8_reg = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter9, m_axi_gmem_RVALID, ap_block_state4_io, select_ln319_2_reg_477_pp0_iter8_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (select_ln319_2_reg_477_pp0_iter8_reg = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter9, m_axi_gmem_RVALID, ap_block_state4_io, select_ln319_2_reg_477_pp0_iter8_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (select_ln319_2_reg_477_pp0_iter8_reg = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter9_assign_proc : process(m_axi_gmem_RVALID, select_ln319_2_reg_477_pp0_iter8_reg)
    begin
                ap_block_state11_pp0_stage0_iter9 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (select_ln319_2_reg_477_pp0_iter8_reg = ap_const_lv1_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_gmem_ARREADY, select_ln319_2_reg_477)
    begin
                ap_block_state4_io <= ((m_axi_gmem_ARREADY = ap_const_logic_0) and (select_ln319_2_reg_477 = ap_const_lv1_1));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_489_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln319_fu_226_p2, select_ln319_2_fu_308_p3)
    begin
                ap_condition_489 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (select_ln319_2_fu_308_p3 = ap_const_lv1_1) and (icmp_ln319_fu_226_p2 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln319_fu_226_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln319_fu_226_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter9_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    burst_buffer2_address0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0, burst_buffer2_addr_1_reg_472_pp0_iter9_reg, select_ln319_2_reg_477_pp0_iter9_reg, zext_ln328_fu_394_p1)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((select_ln319_2_reg_477_pp0_iter9_reg = ap_const_lv1_1)) then 
                burst_buffer2_address0 <= zext_ln328_fu_394_p1(11 - 1 downto 0);
            elsif ((select_ln319_2_reg_477_pp0_iter9_reg = ap_const_lv1_0)) then 
                burst_buffer2_address0 <= burst_buffer2_addr_1_reg_472_pp0_iter9_reg;
            else 
                burst_buffer2_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            burst_buffer2_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    burst_buffer2_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, select_ln319_2_reg_477_pp0_iter9_reg)
    begin
        if ((((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (select_ln319_2_reg_477_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (select_ln319_2_reg_477_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            burst_buffer2_ce0 <= ap_const_logic_1;
        else 
            burst_buffer2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    burst_buffer2_d0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0, select_ln319_2_reg_477_pp0_iter9_reg, gmem_addr_read_reg_497)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((select_ln319_2_reg_477_pp0_iter9_reg = ap_const_lv1_1)) then 
                burst_buffer2_d0 <= gmem_addr_read_reg_497;
            elsif ((select_ln319_2_reg_477_pp0_iter9_reg = ap_const_lv1_0)) then 
                burst_buffer2_d0 <= ap_const_lv128_lc_1;
            else 
                burst_buffer2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            burst_buffer2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    burst_buffer2_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, select_ln319_2_reg_477_pp0_iter9_reg)
    begin
        if ((((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (select_ln319_2_reg_477_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (select_ln319_2_reg_477_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            burst_buffer2_we0 <= ap_const_logic_1;
        else 
            burst_buffer2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cmp_i43_fu_221_p2 <= "1" when (unsigned(add_i_i_fu_216_p2) < unsigned(trunc_ln)) else "0";
    cmp_i43_mid1_fu_303_p2 <= "1" when (unsigned(add_i_i_mid1_fu_298_p2) < unsigned(trunc_ln)) else "0";

    gmem_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem_ARREADY, select_ln319_2_reg_477, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (select_ln319_2_reg_477 = ap_const_lv1_1))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter9, m_axi_gmem_RVALID, select_ln319_2_reg_477_pp0_iter8_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (select_ln319_2_reg_477_pp0_iter8_reg = ap_const_lv1_1))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln1057_fu_246_p2 <= "1" when (signed(ifs_fu_96) < signed(zext_ln287_cast_reg_463)) else "0";
    icmp_ln319_fu_226_p2 <= "1" when (indvar_flatten7_fu_104 = bound) else "0";
    lsy_1_cast_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lsy_fu_100),16));
    lsy_1_cast_mid1_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln319_fu_240_p2),16));
    m_axi_gmem_ARADDR <= sext_ln328_1_fu_398_p1;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter2, select_ln319_2_reg_477, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln319_2_reg_477 = ap_const_lv1_1))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_enable_reg_pp0_iter9, select_ln319_2_reg_477_pp0_iter8_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln319_2_reg_477_pp0_iter8_reg = ap_const_lv1_1))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv128_lc_1;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv16_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    rd_ptr_1_fu_319_p2 <= std_logic_vector(unsigned(rd_ptr_fu_108) + unsigned(ap_const_lv32_1));
    rd_ptr_4_out <= rd_ptr_fu_108;

    rd_ptr_4_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln319_reg_468_pp0_iter8_reg)
    begin
        if (((icmp_ln319_reg_468_pp0_iter8_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            rd_ptr_4_out_ap_vld <= ap_const_logic_1;
        else 
            rd_ptr_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln319_1_fu_263_p3 <= 
        lsy_fu_100 when (icmp_ln1057_fu_246_p2(0) = '1') else 
        add_ln319_fu_240_p2;
    select_ln319_2_fu_308_p3 <= 
        cmp_i43_fu_221_p2 when (icmp_ln1057_fu_246_p2(0) = '1') else 
        cmp_i43_mid1_fu_303_p2;
    select_ln319_fu_251_p3 <= 
        ifs_fu_96 when (icmp_ln1057_fu_246_p2(0) = '1') else 
        ap_const_lv64_0;
        sext_ln328_1_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln328_8_reg_486),64));

        sext_ln328_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1_fu_341_p3),64));

    shl_ln1_fu_341_p3 <= (rd_ptr_fu_108 & ap_const_lv4_0);
    tmp_5_cast_fu_275_p3 <= (trunc_ln328_fu_271_p1 & ap_const_lv5_0);
    tmp_6_fu_325_p4 <= select_ln319_fu_251_p3(13 downto 3);
    trunc_ln319_fu_259_p1 <= select_ln319_fu_251_p3(11 - 1 downto 0);
    trunc_ln328_fu_271_p1 <= select_ln319_1_fu_263_p3(6 - 1 downto 0);
    zext_ln287_cast_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln287),64));
    zext_ln328_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln328_2_reg_481_pp0_iter9_reg),64));
    zext_ln333_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln333_fu_283_p2),64));
end behav;
