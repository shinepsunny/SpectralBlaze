-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fwd_fft_VITIS_LOOP_188_8_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctrl1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ctrl1_reg_empty_n : IN STD_LOGIC;
    ctrl1_reg_read : OUT STD_LOGIC;
    out_fft3_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    out_fft3_empty_n : IN STD_LOGIC;
    out_fft3_read : OUT STD_LOGIC;
    c_fft_row_op_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_fft_row_op_st_full_n : IN STD_LOGIC;
    c_fft_row_op_st_write : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    Row_Buffer_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    Row_Buffer_full_n : IN STD_LOGIC;
    Row_Buffer_write : OUT STD_LOGIC );
end;


architecture behav of fwd_fft_VITIS_LOOP_188_8_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ctrl1_reg_blk_n : STD_LOGIC;
    signal out_fft3_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln1057_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fft_row_op_st_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal Row_Buffer_blk_n : STD_LOGIC;
    signal or_ln193_reg_257 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln154_fu_130_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln154_reg_252 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln193_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln188_fu_197_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln188_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln191_fu_203_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln191_reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln191_1_reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_124_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_i_i_reg_289 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_127_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv3_i_i_reg_294 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_fu_76 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal tmp_i_fu_231_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_124_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_127_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_138_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctrl2_reg_load_cast_cast_fu_142_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal pny_cast_fu_134_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_i_i_fu_146_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln_fu_158_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1061_fu_168_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp_i_i_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln193_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln174_2_fu_228_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln174_fu_225_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fwd_fft_sptohp_32ns_16_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    sptohp_32ns_16_2_no_dsp_1_U111 : component fwd_fft_sptohp_32ns_16_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_124_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_124_p1);

    sptohp_32ns_16_2_no_dsp_1_U112 : component fwd_fft_sptohp_32ns_16_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_127_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_127_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((icmp_ln1057_fu_192_p2 = ap_const_lv1_0) and (out_fft3_empty_n = ap_const_logic_0))) and (icmp_ln1057_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    x_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_fu_76 <= ap_const_lv8_0;
            elsif ((not(((c_fft_row_op_st_full_n = ap_const_logic_0) or ((or_ln193_reg_257 = ap_const_lv1_0) and (ap_const_logic_0 = Row_Buffer_full_n)))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                x_fu_76 <= add_ln188_reg_264;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln188_reg_264 <= add_ln188_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                conv3_i_i_reg_294 <= grp_fu_127_p1;
                conv_i_i_reg_289 <= grp_fu_124_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                or_ln193_reg_257 <= or_ln193_fu_178_p2;
                trunc_ln154_reg_252 <= trunc_ln154_fu_130_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_fu_192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln191_1_reg_274 <= out_fft3_dout(63 downto 32);
                trunc_ln191_reg_269 <= trunc_ln191_fu_203_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ctrl1_reg_empty_n, out_fft3_empty_n, c_fft_row_op_st_full_n, Row_Buffer_full_n, ap_CS_fsm_state2, icmp_ln1057_fu_192_p2, ap_CS_fsm_state5, or_ln193_reg_257)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln1057_fu_192_p2 = ap_const_lv1_0) and (out_fft3_empty_n = ap_const_logic_0))) and (icmp_ln1057_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((icmp_ln1057_fu_192_p2 = ap_const_lv1_0) and (out_fft3_empty_n = ap_const_logic_0))) and (icmp_ln1057_fu_192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if ((not(((c_fft_row_op_st_full_n = ap_const_logic_0) or ((or_ln193_reg_257 = ap_const_lv1_0) and (ap_const_logic_0 = Row_Buffer_full_n)))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    Row_Buffer_blk_n_assign_proc : process(Row_Buffer_full_n, ap_CS_fsm_state5, or_ln193_reg_257)
    begin
        if (((or_ln193_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            Row_Buffer_blk_n <= Row_Buffer_full_n;
        else 
            Row_Buffer_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Row_Buffer_din <= tmp_i_fu_231_p3;

    Row_Buffer_write_assign_proc : process(c_fft_row_op_st_full_n, Row_Buffer_full_n, ap_CS_fsm_state5, or_ln193_reg_257)
    begin
        if ((not(((c_fft_row_op_st_full_n = ap_const_logic_0) or ((or_ln193_reg_257 = ap_const_lv1_0) and (ap_const_logic_0 = Row_Buffer_full_n)))) and (or_ln193_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            Row_Buffer_write <= ap_const_logic_1;
        else 
            Row_Buffer_write <= ap_const_logic_0;
        end if; 
    end process;

    add_ln188_fu_197_p2 <= std_logic_vector(unsigned(x_fu_76) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, ctrl1_reg_empty_n)
    begin
        if (((ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(out_fft3_empty_n, icmp_ln1057_fu_192_p2)
    begin
        if (((icmp_ln1057_fu_192_p2 = ap_const_lv1_0) and (out_fft3_empty_n = ap_const_logic_0))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(c_fft_row_op_st_full_n, Row_Buffer_full_n, or_ln193_reg_257)
    begin
        if (((c_fft_row_op_st_full_n = ap_const_logic_0) or ((or_ln193_reg_257 = ap_const_lv1_0) and (ap_const_logic_0 = Row_Buffer_full_n)))) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, ctrl1_reg_empty_n)
    begin
                ap_block_state1 <= ((ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(out_fft3_empty_n, icmp_ln1057_fu_192_p2)
    begin
                ap_block_state2 <= ((icmp_ln1057_fu_192_p2 = ap_const_lv1_0) and (out_fft3_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(c_fft_row_op_st_full_n, Row_Buffer_full_n, or_ln193_reg_257)
    begin
                ap_block_state5 <= ((c_fft_row_op_st_full_n = ap_const_logic_0) or ((or_ln193_reg_257 = ap_const_lv1_0) and (ap_const_logic_0 = Row_Buffer_full_n)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, out_fft3_empty_n, ap_CS_fsm_state2, icmp_ln1057_fu_192_p2)
    begin
        if ((not(((icmp_ln1057_fu_192_p2 = ap_const_lv1_0) and (out_fft3_empty_n = ap_const_logic_0))) and (icmp_ln1057_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(out_fft3_empty_n, ap_CS_fsm_state2, icmp_ln1057_fu_192_p2)
    begin
        if ((not(((icmp_ln1057_fu_192_p2 = ap_const_lv1_0) and (out_fft3_empty_n = ap_const_logic_0))) and (icmp_ln1057_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln174_2_fu_228_p1 <= conv3_i_i_reg_294;
    bitcast_ln174_fu_225_p1 <= conv_i_i_reg_289;

    c_fft_row_op_st_blk_n_assign_proc : process(c_fft_row_op_st_full_n, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c_fft_row_op_st_blk_n <= c_fft_row_op_st_full_n;
        else 
            c_fft_row_op_st_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    c_fft_row_op_st_din <= tmp_i_fu_231_p3;

    c_fft_row_op_st_write_assign_proc : process(c_fft_row_op_st_full_n, Row_Buffer_full_n, ap_CS_fsm_state5, or_ln193_reg_257)
    begin
        if ((not(((c_fft_row_op_st_full_n = ap_const_logic_0) or ((or_ln193_reg_257 = ap_const_lv1_0) and (ap_const_logic_0 = Row_Buffer_full_n)))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            c_fft_row_op_st_write <= ap_const_logic_1;
        else 
            c_fft_row_op_st_write <= ap_const_logic_0;
        end if; 
    end process;

    cmp_i_i_fu_152_p2 <= "1" when (pny_cast_fu_134_p1 = sub_i_i_fu_146_p2) else "0";

    ctrl1_reg_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl1_reg_blk_n <= ctrl1_reg_empty_n;
        else 
            ctrl1_reg_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ctrl1_reg_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n)
    begin
        if ((not(((ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl1_reg_read <= ap_const_logic_1;
        else 
            ctrl1_reg_read <= ap_const_logic_0;
        end if; 
    end process;

    ctrl2_reg_load_cast_cast_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_138_p1),9));
    empty_fu_138_p1 <= p_read1(8 - 1 downto 0);
    grp_fu_124_p0 <= trunc_ln191_reg_269;
    grp_fu_127_p0 <= trunc_ln191_1_reg_274;
    icmp_ln1057_fu_192_p2 <= "1" when (x_fu_76 = trunc_ln154_reg_252) else "0";
    icmp_ln193_fu_172_p2 <= "1" when (signed(zext_ln1061_fu_168_p1) > signed(p_read2)) else "0";
    lshr_ln_fu_158_p4 <= ctrl1_reg_dout(31 downto 24);
    or_ln193_fu_178_p2 <= (icmp_ln193_fu_172_p2 or cmp_i_i_fu_152_p2);

    out_fft3_blk_n_assign_proc : process(out_fft3_empty_n, ap_CS_fsm_state2, icmp_ln1057_fu_192_p2)
    begin
        if (((icmp_ln1057_fu_192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_fft3_blk_n <= out_fft3_empty_n;
        else 
            out_fft3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_fft3_read_assign_proc : process(out_fft3_empty_n, ap_CS_fsm_state2, icmp_ln1057_fu_192_p2)
    begin
        if ((not(((icmp_ln1057_fu_192_p2 = ap_const_lv1_0) and (out_fft3_empty_n = ap_const_logic_0))) and (icmp_ln1057_fu_192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_fft3_read <= ap_const_logic_1;
        else 
            out_fft3_read <= ap_const_logic_0;
        end if; 
    end process;

    pny_cast_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),9));
    sub_i_i_fu_146_p2 <= std_logic_vector(unsigned(ctrl2_reg_load_cast_cast_fu_142_p1) + unsigned(ap_const_lv9_1FF));
    tmp_i_fu_231_p3 <= (bitcast_ln174_2_fu_228_p1 & bitcast_ln174_fu_225_p1);
    trunc_ln154_fu_130_p1 <= ctrl1_reg_dout(8 - 1 downto 0);
    trunc_ln191_fu_203_p1 <= out_fft3_dout(32 - 1 downto 0);
    zext_ln1061_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_158_p4),32));
end behav;
