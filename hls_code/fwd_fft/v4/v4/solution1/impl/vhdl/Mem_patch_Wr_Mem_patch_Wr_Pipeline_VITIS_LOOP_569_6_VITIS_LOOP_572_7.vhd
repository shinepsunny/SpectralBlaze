-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Mem_patch_Wr_Mem_patch_Wr_Pipeline_VITIS_LOOP_569_6_VITIS_LOOP_572_7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bound6 : IN STD_LOGIC_VECTOR (69 downto 0);
    zext_ln554 : IN STD_LOGIC_VECTOR (7 downto 0);
    ifmap_CF_M_real_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifmap_CF_M_real_ce0 : OUT STD_LOGIC;
    ifmap_CF_M_real_q0 : IN STD_LOGIC_VECTOR (1023 downto 0);
    ifmap_CF_M_imag_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifmap_CF_M_imag_ce0 : OUT STD_LOGIC;
    ifmap_CF_M_imag_q0 : IN STD_LOGIC_VECTOR (1023 downto 0);
    fft_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    fft_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of Mem_patch_Wr_Mem_patch_Wr_Pipeline_VITIS_LOOP_569_6_VITIS_LOOP_572_7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv70_0 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv70_1 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv12_F : STD_LOGIC_VECTOR (11 downto 0) := "000000001111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv32_3FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111111";
    constant ap_const_lv1024_lc_3 : STD_LOGIC_VECTOR (1023 downto

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1057_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln554_cast_fu_129_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln554_cast_reg_1149 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln578_fu_217_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln578_reg_1168 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_221_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_reg_1176 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_60_fu_225_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_60_reg_1181 : STD_LOGIC_VECTOR (6 downto 0);
    signal ifmap_CF_M_real_load_reg_1186 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ifmap_CF_M_imag_load_reg_1198 : STD_LOGIC_VECTOR (1023 downto 0);
    signal icmp_ln578_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln578_reg_1210 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_269_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_reg_1217 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln578_1_fu_276_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln578_1_reg_1224 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_1_fu_280_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_1_reg_1230 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln578_1_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln578_1_reg_1235 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_292_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_reg_1242 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln578_3_fu_299_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln578_3_reg_1249 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_5_fu_303_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_5_reg_1255 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln578_2_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln578_2_reg_1260 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_342_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_reg_1267 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln578_5_fu_350_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln578_5_reg_1274 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_9_fu_354_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_9_reg_1280 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln578_3_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln578_3_reg_1285 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_366_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_reg_1292 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln578_7_fu_374_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln578_7_reg_1299 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_13_fu_378_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_13_reg_1305 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln578_4_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln578_4_reg_1310 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_417_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_reg_1317 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln578_9_fu_425_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln578_9_reg_1324 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_17_fu_429_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_17_reg_1330 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln578_5_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln578_5_reg_1335 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_441_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_reg_1342 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln578_11_fu_449_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln578_11_reg_1349 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_21_fu_453_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_21_reg_1355 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln578_6_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln578_6_reg_1360 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_492_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_15_reg_1367 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln578_13_fu_500_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln578_13_reg_1374 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_25_fu_504_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_25_reg_1380 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln578_7_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln578_7_reg_1385 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_516_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_17_reg_1392 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln578_15_fu_524_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln578_15_reg_1399 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_29_fu_528_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_29_reg_1405 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1057_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal x_fu_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln572_fu_229_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal y_fu_76 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1057_3_fu_209_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten9_fu_80 : STD_LOGIC_VECTOR (69 downto 0);
    signal add_ln1057_fu_156_p2 : STD_LOGIC_VECTOR (69 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln1057_1_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln569_fu_181_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1057_fu_187_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1057_1_fu_191_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1057_2_fu_195_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1057_fu_173_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_250_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_61_fu_257_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln578_fu_309_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_322_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_64_fu_330_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_63_fu_318_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_62_fu_314_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln578_1_fu_384_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_397_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_67_fu_405_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_66_fu_393_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_65_fu_389_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln578_2_fu_459_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_472_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_70_fu_480_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_69_fu_468_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_68_fu_464_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln578_fu_543_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_2_fu_547_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_fu_534_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln578_fu_551_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln578_2_fu_564_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_3_fu_569_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln578_1_fu_558_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln578_fu_575_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln578_1_fu_579_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln578_fu_583_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln578_1_fu_589_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln578_fu_595_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal sub_ln578_4_fu_614_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_6_fu_618_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_fu_605_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln578_3_fu_622_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln578_5_fu_635_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_7_fu_640_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln578_4_fu_629_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln578_2_fu_646_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln578_3_fu_650_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln578_2_fu_654_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln578_3_fu_660_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln578_1_fu_666_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal sub_ln578_8_fu_685_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_10_fu_689_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_676_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln578_6_fu_693_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln578_8_fu_706_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_11_fu_711_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln578_7_fu_700_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln578_4_fu_717_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln578_5_fu_721_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln578_4_fu_725_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln578_5_fu_731_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln578_2_fu_737_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal sub_ln578_12_fu_756_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_14_fu_760_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_fu_747_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln578_9_fu_764_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln578_11_fu_777_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_15_fu_782_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln578_10_fu_771_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln578_6_fu_788_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln578_7_fu_792_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln578_6_fu_796_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln578_7_fu_802_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln578_3_fu_808_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal sub_ln578_16_fu_827_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_18_fu_831_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_818_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln578_12_fu_835_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln578_14_fu_848_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_19_fu_853_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln578_13_fu_842_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln578_8_fu_859_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln578_9_fu_863_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln578_8_fu_867_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln578_9_fu_873_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln578_4_fu_879_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal sub_ln578_20_fu_898_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_22_fu_902_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_889_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln578_15_fu_906_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln578_17_fu_919_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_23_fu_924_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln578_16_fu_913_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln578_10_fu_930_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln578_11_fu_934_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln578_10_fu_938_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln578_11_fu_944_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln578_5_fu_950_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal sub_ln578_24_fu_969_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_26_fu_973_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_fu_960_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln578_18_fu_977_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln578_20_fu_990_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_27_fu_995_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln578_19_fu_984_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln578_12_fu_1001_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln578_13_fu_1005_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln578_12_fu_1009_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln578_13_fu_1015_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln578_6_fu_1021_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal sub_ln578_28_fu_1040_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_30_fu_1044_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_18_fu_1031_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln578_21_fu_1048_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln578_23_fu_1061_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln578_31_fu_1066_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln578_22_fu_1055_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln578_14_fu_1072_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln578_15_fu_1076_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln578_14_fu_1080_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln578_15_fu_1086_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln578_7_fu_1092_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal trunc_ln578_16_fu_1098_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln578_14_fu_1027_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln578_12_fu_956_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln578_10_fu_885_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln578_8_fu_814_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln578_6_fu_743_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln578_4_fu_672_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln578_2_fu_601_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Mem_patch_Wr_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Mem_patch_Wr_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten9_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten9_fu_80 <= ap_const_lv70_0;
                elsif (((icmp_ln1057_fu_151_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten9_fu_80 <= add_ln1057_fu_156_p2;
                end if;
            end if; 
        end if;
    end process;

    x_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_72 <= ap_const_lv64_0;
                elsif (((icmp_ln1057_fu_151_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    x_fu_72 <= add_ln572_fu_229_p2;
                end if;
            end if; 
        end if;
    end process;

    y_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_76 <= ap_const_lv8_0;
                elsif (((icmp_ln1057_fu_151_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    y_fu_76 <= select_ln1057_3_fu_209_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                    zext_ln554_cast_reg_1149(7 downto 0) <= zext_ln554_cast_fu_129_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_fu_151_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_60_reg_1181 <= empty_60_fu_225_p1;
                empty_reg_1176 <= empty_fu_221_p1;
                trunc_ln578_reg_1168 <= trunc_ln578_fu_217_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln578_1_reg_1235 <= icmp_ln578_1_fu_286_p2;
                icmp_ln578_2_reg_1260 <= icmp_ln578_2_fu_336_p2;
                icmp_ln578_3_reg_1285 <= icmp_ln578_3_fu_360_p2;
                icmp_ln578_4_reg_1310 <= icmp_ln578_4_fu_411_p2;
                icmp_ln578_5_reg_1335 <= icmp_ln578_5_fu_435_p2;
                icmp_ln578_6_reg_1360 <= icmp_ln578_6_fu_486_p2;
                icmp_ln578_7_reg_1385 <= icmp_ln578_7_fu_510_p2;
                icmp_ln578_reg_1210 <= icmp_ln578_fu_263_p2;
                ifmap_CF_M_imag_load_reg_1198 <= ifmap_CF_M_imag_q0;
                ifmap_CF_M_real_load_reg_1186 <= ifmap_CF_M_real_q0;
                    sub_ln578_13_reg_1305(10 downto 5) <= sub_ln578_13_fu_378_p2(10 downto 5);
                    sub_ln578_17_reg_1330(10 downto 4) <= sub_ln578_17_fu_429_p2(10 downto 4);
                    sub_ln578_1_reg_1230(10 downto 4) <= sub_ln578_1_fu_280_p2(10 downto 4);
                    sub_ln578_21_reg_1355(10 downto 4) <= sub_ln578_21_fu_453_p2(10 downto 4);
                    sub_ln578_25_reg_1380(10 downto 6) <= sub_ln578_25_fu_504_p2(10 downto 6);
                    sub_ln578_29_reg_1405(10 downto 6) <= sub_ln578_29_fu_528_p2(10 downto 6);
                    sub_ln578_5_reg_1255(10 downto 4) <= sub_ln578_5_fu_303_p2(10 downto 4);
                    sub_ln578_9_reg_1280(10 downto 5) <= sub_ln578_9_fu_354_p2(10 downto 5);
                    tmp_10_reg_1317(4) <= tmp_10_fu_417_p3(4);    tmp_10_reg_1317(10 downto 6) <= tmp_10_fu_417_p3(10 downto 6);
                    tmp_12_reg_1342(4) <= tmp_12_fu_441_p3(4);    tmp_12_reg_1342(10 downto 6) <= tmp_12_fu_441_p3(10 downto 6);
                    tmp_15_reg_1367(10 downto 6) <= tmp_15_fu_492_p3(10 downto 6);
                    tmp_17_reg_1392(10 downto 6) <= tmp_17_fu_516_p3(10 downto 6);
                    tmp_2_reg_1242(10 downto 4) <= tmp_2_fu_292_p3(10 downto 4);
                    tmp_5_reg_1267(10 downto 5) <= tmp_5_fu_342_p3(10 downto 5);
                    tmp_7_reg_1292(10 downto 5) <= tmp_7_fu_366_p3(10 downto 5);
                    tmp_reg_1217(10 downto 4) <= tmp_fu_269_p3(10 downto 4);
                    trunc_ln578_11_reg_1349(4) <= trunc_ln578_11_fu_449_p1(4);    trunc_ln578_11_reg_1349(10 downto 6) <= trunc_ln578_11_fu_449_p1(10 downto 6);
                    trunc_ln578_13_reg_1374(10 downto 6) <= trunc_ln578_13_fu_500_p1(10 downto 6);
                    trunc_ln578_15_reg_1399(10 downto 6) <= trunc_ln578_15_fu_524_p1(10 downto 6);
                    trunc_ln578_1_reg_1224(10 downto 4) <= trunc_ln578_1_fu_276_p1(10 downto 4);
                    trunc_ln578_3_reg_1249(10 downto 4) <= trunc_ln578_3_fu_299_p1(10 downto 4);
                    trunc_ln578_5_reg_1274(10 downto 5) <= trunc_ln578_5_fu_350_p1(10 downto 5);
                    trunc_ln578_7_reg_1299(10 downto 5) <= trunc_ln578_7_fu_374_p1(10 downto 5);
                    trunc_ln578_9_reg_1324(4) <= trunc_ln578_9_fu_425_p1(4);    trunc_ln578_9_reg_1324(10 downto 6) <= trunc_ln578_9_fu_425_p1(10 downto 6);
            end if;
        end if;
    end process;
    zext_ln554_cast_reg_1149(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    tmp_reg_1217(3 downto 0) <= "0000";
    trunc_ln578_1_reg_1224(3 downto 0) <= "1111";
    sub_ln578_1_reg_1230(3 downto 0) <= "1111";
    tmp_2_reg_1242(3 downto 0) <= "0000";
    trunc_ln578_3_reg_1249(3 downto 0) <= "1111";
    sub_ln578_5_reg_1255(3 downto 0) <= "1111";
    tmp_5_reg_1267(4 downto 0) <= "10000";
    trunc_ln578_5_reg_1274(4 downto 0) <= "11111";
    sub_ln578_9_reg_1280(4 downto 0) <= "01111";
    tmp_7_reg_1292(4 downto 0) <= "10000";
    trunc_ln578_7_reg_1299(4 downto 0) <= "11111";
    sub_ln578_13_reg_1305(4 downto 0) <= "01111";
    tmp_10_reg_1317(3 downto 0) <= "0000";
    tmp_10_reg_1317(5) <= '1';
    trunc_ln578_9_reg_1324(3 downto 0) <= "1111";
    trunc_ln578_9_reg_1324(5) <= '1';
    sub_ln578_17_reg_1330(3 downto 0) <= "1111";
    tmp_12_reg_1342(3 downto 0) <= "0000";
    tmp_12_reg_1342(5) <= '1';
    trunc_ln578_11_reg_1349(3 downto 0) <= "1111";
    trunc_ln578_11_reg_1349(5) <= '1';
    sub_ln578_21_reg_1355(3 downto 0) <= "1111";
    tmp_15_reg_1367(5 downto 0) <= "110000";
    trunc_ln578_13_reg_1374(5 downto 0) <= "111111";
    sub_ln578_25_reg_1380(5 downto 0) <= "001111";
    tmp_17_reg_1392(5 downto 0) <= "110000";
    trunc_ln578_15_reg_1399(5 downto 0) <= "111111";
    sub_ln578_29_reg_1405(5 downto 0) <= "001111";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1057_fu_156_p2 <= std_logic_vector(unsigned(indvar_flatten9_fu_80) + unsigned(ap_const_lv70_1));
    add_ln569_fu_181_p2 <= std_logic_vector(unsigned(y_fu_76) + unsigned(ap_const_lv8_1));
    add_ln572_fu_229_p2 <= std_logic_vector(unsigned(select_ln1057_fu_173_p3) + unsigned(ap_const_lv64_4));
    and_ln578_1_fu_666_p2 <= (lshr_ln578_3_fu_660_p2 and lshr_ln578_2_fu_654_p2);
    and_ln578_2_fu_737_p2 <= (lshr_ln578_5_fu_731_p2 and lshr_ln578_4_fu_725_p2);
    and_ln578_3_fu_808_p2 <= (lshr_ln578_7_fu_802_p2 and lshr_ln578_6_fu_796_p2);
    and_ln578_4_fu_879_p2 <= (lshr_ln578_9_fu_873_p2 and lshr_ln578_8_fu_867_p2);
    and_ln578_5_fu_950_p2 <= (lshr_ln578_11_fu_944_p2 and lshr_ln578_10_fu_938_p2);
    and_ln578_6_fu_1021_p2 <= (lshr_ln578_13_fu_1015_p2 and lshr_ln578_12_fu_1009_p2);
    and_ln578_7_fu_1092_p2 <= (lshr_ln578_15_fu_1086_p2 and lshr_ln578_14_fu_1080_p2);
    and_ln578_fu_595_p2 <= (lshr_ln578_fu_583_p2 and lshr_ln578_1_fu_589_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1057_fu_151_p2)
    begin
        if (((icmp_ln1057_fu_151_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_60_fu_225_p1 <= select_ln1057_fu_173_p3(7 - 1 downto 0);
    empty_61_fu_257_p2 <= (tmp_s_fu_250_p3 or ap_const_lv12_F);
    empty_62_fu_314_p1 <= or_ln578_fu_309_p2(7 - 1 downto 0);
    empty_63_fu_318_p1 <= or_ln578_fu_309_p2(7 - 1 downto 0);
    empty_64_fu_330_p2 <= (tmp_4_fu_322_p3 or ap_const_lv12_F);
    empty_65_fu_389_p1 <= or_ln578_1_fu_384_p2(7 - 1 downto 0);
    empty_66_fu_393_p1 <= or_ln578_1_fu_384_p2(7 - 1 downto 0);
    empty_67_fu_405_p2 <= (tmp_9_fu_397_p3 or ap_const_lv12_F);
    empty_68_fu_464_p1 <= or_ln578_2_fu_459_p2(7 - 1 downto 0);
    empty_69_fu_468_p1 <= or_ln578_2_fu_459_p2(7 - 1 downto 0);
    empty_70_fu_480_p2 <= (tmp_14_fu_472_p3 or ap_const_lv12_F);
    empty_fu_221_p1 <= select_ln1057_fu_173_p3(7 - 1 downto 0);
    fft_out <= (((((((trunc_ln578_16_fu_1098_p1 & trunc_ln578_14_fu_1027_p1) & trunc_ln578_12_fu_956_p1) & trunc_ln578_10_fu_885_p1) & trunc_ln578_8_fu_814_p1) & trunc_ln578_6_fu_743_p1) & trunc_ln578_4_fu_672_p1) & trunc_ln578_2_fu_601_p1);

    fft_out_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            fft_out_ap_vld <= ap_const_logic_1;
        else 
            fft_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1057_1_fu_168_p2 <= "1" when (signed(x_fu_72) < signed(zext_ln554_cast_reg_1149)) else "0";
    icmp_ln1057_fu_151_p2 <= "1" when (indvar_flatten9_fu_80 = bound6) else "0";
    icmp_ln578_1_fu_286_p2 <= "1" when (unsigned(tmp_s_fu_250_p3) > unsigned(empty_61_fu_257_p2)) else "0";
    icmp_ln578_2_fu_336_p2 <= "1" when (unsigned(tmp_4_fu_322_p3) > unsigned(empty_64_fu_330_p2)) else "0";
    icmp_ln578_3_fu_360_p2 <= "1" when (unsigned(tmp_4_fu_322_p3) > unsigned(empty_64_fu_330_p2)) else "0";
    icmp_ln578_4_fu_411_p2 <= "1" when (unsigned(tmp_9_fu_397_p3) > unsigned(empty_67_fu_405_p2)) else "0";
    icmp_ln578_5_fu_435_p2 <= "1" when (unsigned(tmp_9_fu_397_p3) > unsigned(empty_67_fu_405_p2)) else "0";
    icmp_ln578_6_fu_486_p2 <= "1" when (unsigned(tmp_14_fu_472_p3) > unsigned(empty_70_fu_480_p2)) else "0";
    icmp_ln578_7_fu_510_p2 <= "1" when (unsigned(tmp_14_fu_472_p3) > unsigned(empty_70_fu_480_p2)) else "0";
    icmp_ln578_fu_263_p2 <= "1" when (unsigned(tmp_s_fu_250_p3) > unsigned(empty_61_fu_257_p2)) else "0";
    ifmap_CF_M_imag_address0 <= zext_ln1057_fu_203_p1(6 - 1 downto 0);

    ifmap_CF_M_imag_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ifmap_CF_M_imag_ce0 <= ap_const_logic_1;
        else 
            ifmap_CF_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifmap_CF_M_real_address0 <= zext_ln1057_fu_203_p1(6 - 1 downto 0);

    ifmap_CF_M_real_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ifmap_CF_M_real_ce0 <= ap_const_logic_1;
        else 
            ifmap_CF_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln578_10_fu_938_p2 <= std_logic_vector(shift_right(unsigned(select_ln578_16_fu_913_p3),to_integer(unsigned('0' & zext_ln578_10_fu_930_p1(31-1 downto 0)))));
    lshr_ln578_11_fu_944_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_3),to_integer(unsigned('0' & zext_ln578_11_fu_934_p1(31-1 downto 0)))));
    lshr_ln578_12_fu_1009_p2 <= std_logic_vector(shift_right(unsigned(select_ln578_19_fu_984_p3),to_integer(unsigned('0' & zext_ln578_12_fu_1001_p1(31-1 downto 0)))));
    lshr_ln578_13_fu_1015_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_3),to_integer(unsigned('0' & zext_ln578_13_fu_1005_p1(31-1 downto 0)))));
    lshr_ln578_14_fu_1080_p2 <= std_logic_vector(shift_right(unsigned(select_ln578_22_fu_1055_p3),to_integer(unsigned('0' & zext_ln578_14_fu_1072_p1(31-1 downto 0)))));
    lshr_ln578_15_fu_1086_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_3),to_integer(unsigned('0' & zext_ln578_15_fu_1076_p1(31-1 downto 0)))));
    lshr_ln578_1_fu_589_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_3),to_integer(unsigned('0' & zext_ln578_1_fu_579_p1(31-1 downto 0)))));
    lshr_ln578_2_fu_654_p2 <= std_logic_vector(shift_right(unsigned(select_ln578_4_fu_629_p3),to_integer(unsigned('0' & zext_ln578_2_fu_646_p1(31-1 downto 0)))));
    lshr_ln578_3_fu_660_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_3),to_integer(unsigned('0' & zext_ln578_3_fu_650_p1(31-1 downto 0)))));
    lshr_ln578_4_fu_725_p2 <= std_logic_vector(shift_right(unsigned(select_ln578_7_fu_700_p3),to_integer(unsigned('0' & zext_ln578_4_fu_717_p1(31-1 downto 0)))));
    lshr_ln578_5_fu_731_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_3),to_integer(unsigned('0' & zext_ln578_5_fu_721_p1(31-1 downto 0)))));
    lshr_ln578_6_fu_796_p2 <= std_logic_vector(shift_right(unsigned(select_ln578_10_fu_771_p3),to_integer(unsigned('0' & zext_ln578_6_fu_788_p1(31-1 downto 0)))));
    lshr_ln578_7_fu_802_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_3),to_integer(unsigned('0' & zext_ln578_7_fu_792_p1(31-1 downto 0)))));
    lshr_ln578_8_fu_867_p2 <= std_logic_vector(shift_right(unsigned(select_ln578_13_fu_842_p3),to_integer(unsigned('0' & zext_ln578_8_fu_859_p1(31-1 downto 0)))));
    lshr_ln578_9_fu_873_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_3),to_integer(unsigned('0' & zext_ln578_9_fu_863_p1(31-1 downto 0)))));
    lshr_ln578_fu_583_p2 <= std_logic_vector(shift_right(unsigned(select_ln578_1_fu_558_p3),to_integer(unsigned('0' & zext_ln578_fu_575_p1(31-1 downto 0)))));
    or_ln578_1_fu_384_p2 <= (trunc_ln578_reg_1168 or ap_const_lv8_2);
    or_ln578_2_fu_459_p2 <= (trunc_ln578_reg_1168 or ap_const_lv8_3);
    or_ln578_fu_309_p2 <= (trunc_ln578_reg_1168 or ap_const_lv8_1);
    select_ln1057_2_fu_195_p3 <= 
        trunc_ln1057_fu_187_p1 when (icmp_ln1057_1_fu_168_p2(0) = '1') else 
        trunc_ln1057_1_fu_191_p1;
    select_ln1057_3_fu_209_p3 <= 
        y_fu_76 when (icmp_ln1057_1_fu_168_p2(0) = '1') else 
        add_ln569_fu_181_p2;
    select_ln1057_fu_173_p3 <= 
        x_fu_72 when (icmp_ln1057_1_fu_168_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln578_10_fu_771_p3 <= 
        tmp_8_fu_747_p4 when (icmp_ln578_3_reg_1285(0) = '1') else 
        ifmap_CF_M_imag_load_reg_1198;
    select_ln578_11_fu_777_p3 <= 
        sub_ln578_13_reg_1305 when (icmp_ln578_3_reg_1285(0) = '1') else 
        tmp_7_reg_1292;
    select_ln578_12_fu_835_p3 <= 
        sub_ln578_16_fu_827_p2 when (icmp_ln578_4_reg_1310(0) = '1') else 
        sub_ln578_18_fu_831_p2;
    select_ln578_13_fu_842_p3 <= 
        tmp_11_fu_818_p4 when (icmp_ln578_4_reg_1310(0) = '1') else 
        ifmap_CF_M_real_load_reg_1186;
    select_ln578_14_fu_848_p3 <= 
        sub_ln578_17_reg_1330 when (icmp_ln578_4_reg_1310(0) = '1') else 
        tmp_10_reg_1317;
    select_ln578_15_fu_906_p3 <= 
        sub_ln578_20_fu_898_p2 when (icmp_ln578_5_reg_1335(0) = '1') else 
        sub_ln578_22_fu_902_p2;
    select_ln578_16_fu_913_p3 <= 
        tmp_13_fu_889_p4 when (icmp_ln578_5_reg_1335(0) = '1') else 
        ifmap_CF_M_imag_load_reg_1198;
    select_ln578_17_fu_919_p3 <= 
        sub_ln578_21_reg_1355 when (icmp_ln578_5_reg_1335(0) = '1') else 
        tmp_12_reg_1342;
    select_ln578_18_fu_977_p3 <= 
        sub_ln578_24_fu_969_p2 when (icmp_ln578_6_reg_1360(0) = '1') else 
        sub_ln578_26_fu_973_p2;
    select_ln578_19_fu_984_p3 <= 
        tmp_16_fu_960_p4 when (icmp_ln578_6_reg_1360(0) = '1') else 
        ifmap_CF_M_real_load_reg_1186;
    select_ln578_1_fu_558_p3 <= 
        tmp_1_fu_534_p4 when (icmp_ln578_reg_1210(0) = '1') else 
        ifmap_CF_M_real_load_reg_1186;
    select_ln578_20_fu_990_p3 <= 
        sub_ln578_25_reg_1380 when (icmp_ln578_6_reg_1360(0) = '1') else 
        tmp_15_reg_1367;
    select_ln578_21_fu_1048_p3 <= 
        sub_ln578_28_fu_1040_p2 when (icmp_ln578_7_reg_1385(0) = '1') else 
        sub_ln578_30_fu_1044_p2;
    select_ln578_22_fu_1055_p3 <= 
        tmp_18_fu_1031_p4 when (icmp_ln578_7_reg_1385(0) = '1') else 
        ifmap_CF_M_imag_load_reg_1198;
    select_ln578_23_fu_1061_p3 <= 
        sub_ln578_29_reg_1405 when (icmp_ln578_7_reg_1385(0) = '1') else 
        tmp_17_reg_1392;
    select_ln578_2_fu_564_p3 <= 
        sub_ln578_1_reg_1230 when (icmp_ln578_reg_1210(0) = '1') else 
        tmp_reg_1217;
    select_ln578_3_fu_622_p3 <= 
        sub_ln578_4_fu_614_p2 when (icmp_ln578_1_reg_1235(0) = '1') else 
        sub_ln578_6_fu_618_p2;
    select_ln578_4_fu_629_p3 <= 
        tmp_3_fu_605_p4 when (icmp_ln578_1_reg_1235(0) = '1') else 
        ifmap_CF_M_imag_load_reg_1198;
    select_ln578_5_fu_635_p3 <= 
        sub_ln578_5_reg_1255 when (icmp_ln578_1_reg_1235(0) = '1') else 
        tmp_2_reg_1242;
    select_ln578_6_fu_693_p3 <= 
        sub_ln578_8_fu_685_p2 when (icmp_ln578_2_reg_1260(0) = '1') else 
        sub_ln578_10_fu_689_p2;
    select_ln578_7_fu_700_p3 <= 
        tmp_6_fu_676_p4 when (icmp_ln578_2_reg_1260(0) = '1') else 
        ifmap_CF_M_real_load_reg_1186;
    select_ln578_8_fu_706_p3 <= 
        sub_ln578_9_reg_1280 when (icmp_ln578_2_reg_1260(0) = '1') else 
        tmp_5_reg_1267;
    select_ln578_9_fu_764_p3 <= 
        sub_ln578_12_fu_756_p2 when (icmp_ln578_3_reg_1285(0) = '1') else 
        sub_ln578_14_fu_760_p2;
    select_ln578_fu_551_p3 <= 
        sub_ln578_fu_543_p2 when (icmp_ln578_reg_1210(0) = '1') else 
        sub_ln578_2_fu_547_p2;
    sub_ln578_10_fu_689_p2 <= std_logic_vector(unsigned(trunc_ln578_5_reg_1274) - unsigned(tmp_5_reg_1267));
    sub_ln578_11_fu_711_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln578_6_fu_693_p3));
    sub_ln578_12_fu_756_p2 <= std_logic_vector(unsigned(tmp_7_reg_1292) - unsigned(trunc_ln578_7_reg_1299));
    sub_ln578_13_fu_378_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_7_fu_366_p3));
    sub_ln578_14_fu_760_p2 <= std_logic_vector(unsigned(trunc_ln578_7_reg_1299) - unsigned(tmp_7_reg_1292));
    sub_ln578_15_fu_782_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln578_9_fu_764_p3));
    sub_ln578_16_fu_827_p2 <= std_logic_vector(unsigned(tmp_10_reg_1317) - unsigned(trunc_ln578_9_reg_1324));
    sub_ln578_17_fu_429_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_10_fu_417_p3));
    sub_ln578_18_fu_831_p2 <= std_logic_vector(unsigned(trunc_ln578_9_reg_1324) - unsigned(tmp_10_reg_1317));
    sub_ln578_19_fu_853_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln578_12_fu_835_p3));
    sub_ln578_1_fu_280_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_fu_269_p3));
    sub_ln578_20_fu_898_p2 <= std_logic_vector(unsigned(tmp_12_reg_1342) - unsigned(trunc_ln578_11_reg_1349));
    sub_ln578_21_fu_453_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_12_fu_441_p3));
    sub_ln578_22_fu_902_p2 <= std_logic_vector(unsigned(trunc_ln578_11_reg_1349) - unsigned(tmp_12_reg_1342));
    sub_ln578_23_fu_924_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln578_15_fu_906_p3));
    sub_ln578_24_fu_969_p2 <= std_logic_vector(unsigned(tmp_15_reg_1367) - unsigned(trunc_ln578_13_reg_1374));
    sub_ln578_25_fu_504_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_15_fu_492_p3));
    sub_ln578_26_fu_973_p2 <= std_logic_vector(unsigned(trunc_ln578_13_reg_1374) - unsigned(tmp_15_reg_1367));
    sub_ln578_27_fu_995_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln578_18_fu_977_p3));
    sub_ln578_28_fu_1040_p2 <= std_logic_vector(unsigned(tmp_17_reg_1392) - unsigned(trunc_ln578_15_reg_1399));
    sub_ln578_29_fu_528_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_17_fu_516_p3));
    sub_ln578_2_fu_547_p2 <= std_logic_vector(unsigned(trunc_ln578_1_reg_1224) - unsigned(tmp_reg_1217));
    sub_ln578_30_fu_1044_p2 <= std_logic_vector(unsigned(trunc_ln578_15_reg_1399) - unsigned(tmp_17_reg_1392));
    sub_ln578_31_fu_1066_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln578_21_fu_1048_p3));
    sub_ln578_3_fu_569_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln578_fu_551_p3));
    sub_ln578_4_fu_614_p2 <= std_logic_vector(unsigned(tmp_2_reg_1242) - unsigned(trunc_ln578_3_reg_1249));
    sub_ln578_5_fu_303_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_2_fu_292_p3));
    sub_ln578_6_fu_618_p2 <= std_logic_vector(unsigned(trunc_ln578_3_reg_1249) - unsigned(tmp_2_reg_1242));
    sub_ln578_7_fu_640_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln578_3_fu_622_p3));
    sub_ln578_8_fu_685_p2 <= std_logic_vector(unsigned(tmp_5_reg_1267) - unsigned(trunc_ln578_5_reg_1274));
    sub_ln578_9_fu_354_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_5_fu_342_p3));
    sub_ln578_fu_543_p2 <= std_logic_vector(unsigned(tmp_reg_1217) - unsigned(trunc_ln578_1_reg_1224));
    tmp_10_fu_417_p3 <= (empty_66_fu_393_p1 & ap_const_lv4_0);
    
    tmp_11_fu_818_p4_proc : process(ifmap_CF_M_real_load_reg_1186)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_11_fu_818_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := ifmap_CF_M_real_load_reg_1186;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_11_fu_818_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_11_fu_818_p4_i) := ifmap_CF_M_real_load_reg_1186(1024-1-tmp_11_fu_818_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_11_fu_818_p4 <= resvalue(1024-1 downto 0);
    end process;

    tmp_12_fu_441_p3 <= (empty_65_fu_389_p1 & ap_const_lv4_0);
    
    tmp_13_fu_889_p4_proc : process(ifmap_CF_M_imag_load_reg_1198)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_13_fu_889_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := ifmap_CF_M_imag_load_reg_1198;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_13_fu_889_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_13_fu_889_p4_i) := ifmap_CF_M_imag_load_reg_1198(1024-1-tmp_13_fu_889_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_13_fu_889_p4 <= resvalue(1024-1 downto 0);
    end process;

    tmp_14_fu_472_p3 <= (or_ln578_2_fu_459_p2 & ap_const_lv4_0);
    tmp_15_fu_492_p3 <= (empty_69_fu_468_p1 & ap_const_lv4_0);
    
    tmp_16_fu_960_p4_proc : process(ifmap_CF_M_real_load_reg_1186)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_16_fu_960_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := ifmap_CF_M_real_load_reg_1186;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_16_fu_960_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_16_fu_960_p4_i) := ifmap_CF_M_real_load_reg_1186(1024-1-tmp_16_fu_960_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_16_fu_960_p4 <= resvalue(1024-1 downto 0);
    end process;

    tmp_17_fu_516_p3 <= (empty_68_fu_464_p1 & ap_const_lv4_0);
    
    tmp_18_fu_1031_p4_proc : process(ifmap_CF_M_imag_load_reg_1198)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_18_fu_1031_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := ifmap_CF_M_imag_load_reg_1198;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_18_fu_1031_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_18_fu_1031_p4_i) := ifmap_CF_M_imag_load_reg_1198(1024-1-tmp_18_fu_1031_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_18_fu_1031_p4 <= resvalue(1024-1 downto 0);
    end process;

    
    tmp_1_fu_534_p4_proc : process(ifmap_CF_M_real_load_reg_1186)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_1_fu_534_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := ifmap_CF_M_real_load_reg_1186;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_1_fu_534_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_1_fu_534_p4_i) := ifmap_CF_M_real_load_reg_1186(1024-1-tmp_1_fu_534_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_1_fu_534_p4 <= resvalue(1024-1 downto 0);
    end process;

    tmp_2_fu_292_p3 <= (empty_reg_1176 & ap_const_lv4_0);
    
    tmp_3_fu_605_p4_proc : process(ifmap_CF_M_imag_load_reg_1198)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_3_fu_605_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := ifmap_CF_M_imag_load_reg_1198;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_3_fu_605_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_3_fu_605_p4_i) := ifmap_CF_M_imag_load_reg_1198(1024-1-tmp_3_fu_605_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_3_fu_605_p4 <= resvalue(1024-1 downto 0);
    end process;

    tmp_4_fu_322_p3 <= (or_ln578_fu_309_p2 & ap_const_lv4_0);
    tmp_5_fu_342_p3 <= (empty_63_fu_318_p1 & ap_const_lv4_0);
    
    tmp_6_fu_676_p4_proc : process(ifmap_CF_M_real_load_reg_1186)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_6_fu_676_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := ifmap_CF_M_real_load_reg_1186;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_6_fu_676_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_6_fu_676_p4_i) := ifmap_CF_M_real_load_reg_1186(1024-1-tmp_6_fu_676_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_6_fu_676_p4 <= resvalue(1024-1 downto 0);
    end process;

    tmp_7_fu_366_p3 <= (empty_62_fu_314_p1 & ap_const_lv4_0);
    
    tmp_8_fu_747_p4_proc : process(ifmap_CF_M_imag_load_reg_1198)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_8_fu_747_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := ifmap_CF_M_imag_load_reg_1198;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_8_fu_747_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_8_fu_747_p4_i) := ifmap_CF_M_imag_load_reg_1198(1024-1-tmp_8_fu_747_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_8_fu_747_p4 <= resvalue(1024-1 downto 0);
    end process;

    tmp_9_fu_397_p3 <= (or_ln578_1_fu_384_p2 & ap_const_lv4_0);
    tmp_fu_269_p3 <= (empty_60_reg_1181 & ap_const_lv4_0);
    tmp_s_fu_250_p3 <= (trunc_ln578_reg_1168 & ap_const_lv4_0);
    trunc_ln1057_1_fu_191_p1 <= add_ln569_fu_181_p2(6 - 1 downto 0);
    trunc_ln1057_fu_187_p1 <= y_fu_76(6 - 1 downto 0);
    trunc_ln578_10_fu_885_p1 <= and_ln578_4_fu_879_p2(16 - 1 downto 0);
    trunc_ln578_11_fu_449_p1 <= empty_67_fu_405_p2(11 - 1 downto 0);
    trunc_ln578_12_fu_956_p1 <= and_ln578_5_fu_950_p2(16 - 1 downto 0);
    trunc_ln578_13_fu_500_p1 <= empty_70_fu_480_p2(11 - 1 downto 0);
    trunc_ln578_14_fu_1027_p1 <= and_ln578_6_fu_1021_p2(16 - 1 downto 0);
    trunc_ln578_15_fu_524_p1 <= empty_70_fu_480_p2(11 - 1 downto 0);
    trunc_ln578_16_fu_1098_p1 <= and_ln578_7_fu_1092_p2(16 - 1 downto 0);
    trunc_ln578_1_fu_276_p1 <= empty_61_fu_257_p2(11 - 1 downto 0);
    trunc_ln578_2_fu_601_p1 <= and_ln578_fu_595_p2(16 - 1 downto 0);
    trunc_ln578_3_fu_299_p1 <= empty_61_fu_257_p2(11 - 1 downto 0);
    trunc_ln578_4_fu_672_p1 <= and_ln578_1_fu_666_p2(16 - 1 downto 0);
    trunc_ln578_5_fu_350_p1 <= empty_64_fu_330_p2(11 - 1 downto 0);
    trunc_ln578_6_fu_743_p1 <= and_ln578_2_fu_737_p2(16 - 1 downto 0);
    trunc_ln578_7_fu_374_p1 <= empty_64_fu_330_p2(11 - 1 downto 0);
    trunc_ln578_8_fu_814_p1 <= and_ln578_3_fu_808_p2(16 - 1 downto 0);
    trunc_ln578_9_fu_425_p1 <= empty_67_fu_405_p2(11 - 1 downto 0);
    trunc_ln578_fu_217_p1 <= select_ln1057_fu_173_p3(8 - 1 downto 0);
    zext_ln1057_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1057_2_fu_195_p3),64));
    zext_ln554_cast_fu_129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln554),64));
    zext_ln578_10_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln578_17_fu_919_p3),1024));
    zext_ln578_11_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln578_23_fu_924_p2),1024));
    zext_ln578_12_fu_1001_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln578_20_fu_990_p3),1024));
    zext_ln578_13_fu_1005_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln578_27_fu_995_p2),1024));
    zext_ln578_14_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln578_23_fu_1061_p3),1024));
    zext_ln578_15_fu_1076_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln578_31_fu_1066_p2),1024));
    zext_ln578_1_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln578_3_fu_569_p2),1024));
    zext_ln578_2_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln578_5_fu_635_p3),1024));
    zext_ln578_3_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln578_7_fu_640_p2),1024));
    zext_ln578_4_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln578_8_fu_706_p3),1024));
    zext_ln578_5_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln578_11_fu_711_p2),1024));
    zext_ln578_6_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln578_11_fu_777_p3),1024));
    zext_ln578_7_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln578_15_fu_782_p2),1024));
    zext_ln578_8_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln578_14_fu_848_p3),1024));
    zext_ln578_9_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln578_19_fu_853_p2),1024));
    zext_ln578_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln578_2_fu_564_p3),1024));
end behav;
