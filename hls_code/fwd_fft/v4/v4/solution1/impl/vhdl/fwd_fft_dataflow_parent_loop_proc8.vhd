-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fwd_fft_dataflow_parent_loop_proc8 is
port (
    ctrl2_reg_load_cast : IN STD_LOGIC_VECTOR (7 downto 0);
    c_fft_col_op_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    c_fft_col_op_st_empty_n : IN STD_LOGIC;
    c_fft_col_op_st_read : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    fft_out : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ctrl2_reg_load_cast_ap_vld : IN STD_LOGIC;
    p_read_ap_vld : IN STD_LOGIC;
    fft_out_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of fwd_fft_dataflow_parent_loop_proc8 is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal dataflow_parent_loop_proc_U0_c_fft_col_op_st_read : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_ap_start : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_ap_done : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_ap_ready : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_ap_idle : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_ap_continue : STD_LOGIC;
    signal loop_dataflow_input_count : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal loop_dataflow_output_count : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal bound_minus_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fwd_fft_dataflow_parent_loop_proc IS
    port (
        ctrl2_reg_load_cast : IN STD_LOGIC_VECTOR (7 downto 0);
        c_fft_col_op_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_fft_col_op_st_empty_n : IN STD_LOGIC;
        c_fft_col_op_st_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        fft_out : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_read_ap_vld : IN STD_LOGIC;
        fft_out_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    dataflow_parent_loop_proc_U0 : component fwd_fft_dataflow_parent_loop_proc
    port map (
        ctrl2_reg_load_cast => ctrl2_reg_load_cast,
        c_fft_col_op_st_dout => c_fft_col_op_st_dout,
        c_fft_col_op_st_empty_n => c_fft_col_op_st_empty_n,
        c_fft_col_op_st_read => dataflow_parent_loop_proc_U0_c_fft_col_op_st_read,
        p_read => p_read,
        m_axi_gmem_AWVALID => dataflow_parent_loop_proc_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR => dataflow_parent_loop_proc_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => dataflow_parent_loop_proc_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => dataflow_parent_loop_proc_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => dataflow_parent_loop_proc_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => dataflow_parent_loop_proc_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => dataflow_parent_loop_proc_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => dataflow_parent_loop_proc_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => dataflow_parent_loop_proc_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => dataflow_parent_loop_proc_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => dataflow_parent_loop_proc_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => dataflow_parent_loop_proc_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => dataflow_parent_loop_proc_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => m_axi_gmem_WREADY,
        m_axi_gmem_WDATA => dataflow_parent_loop_proc_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => dataflow_parent_loop_proc_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => dataflow_parent_loop_proc_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => dataflow_parent_loop_proc_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => dataflow_parent_loop_proc_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => dataflow_parent_loop_proc_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => dataflow_parent_loop_proc_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => dataflow_parent_loop_proc_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => dataflow_parent_loop_proc_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => dataflow_parent_loop_proc_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => dataflow_parent_loop_proc_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => dataflow_parent_loop_proc_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => dataflow_parent_loop_proc_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => dataflow_parent_loop_proc_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => dataflow_parent_loop_proc_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => dataflow_parent_loop_proc_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => dataflow_parent_loop_proc_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => dataflow_parent_loop_proc_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv128_lc_1,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => m_axi_gmem_BVALID,
        m_axi_gmem_BREADY => dataflow_parent_loop_proc_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => m_axi_gmem_BRESP,
        m_axi_gmem_BID => m_axi_gmem_BID,
        m_axi_gmem_BUSER => m_axi_gmem_BUSER,
        fft_out => fft_out,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        p_read_ap_vld => p_read_ap_vld,
        fft_out_ap_vld => fft_out_ap_vld,
        ap_start => dataflow_parent_loop_proc_U0_ap_start,
        ap_done => dataflow_parent_loop_proc_U0_ap_done,
        ap_ready => dataflow_parent_loop_proc_U0_ap_ready,
        ap_idle => dataflow_parent_loop_proc_U0_ap_idle,
        ap_continue => dataflow_parent_loop_proc_U0_ap_continue);





    loop_dataflow_input_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_input_count <= ap_const_lv8_0;
            else
                if ((not((loop_dataflow_input_count = bound_minus_1)) and (ap_start = ap_const_logic_1) and (dataflow_parent_loop_proc_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= std_logic_vector(unsigned(loop_dataflow_input_count) + unsigned(ap_const_lv8_1));
                elsif (((loop_dataflow_input_count = bound_minus_1) and (ap_start = ap_const_logic_1) and (dataflow_parent_loop_proc_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= ap_const_lv8_0;
                end if; 
            end if;
        end if;
    end process;


    loop_dataflow_output_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_output_count <= ap_const_lv8_0;
            else
                if ((not((loop_dataflow_output_count = bound_minus_1)) and (dataflow_parent_loop_proc_U0_ap_continue = ap_const_logic_1) and (dataflow_parent_loop_proc_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= std_logic_vector(unsigned(loop_dataflow_output_count) + unsigned(ap_const_lv8_1));
                elsif (((loop_dataflow_output_count = bound_minus_1) and (dataflow_parent_loop_proc_U0_ap_continue = ap_const_logic_1) and (dataflow_parent_loop_proc_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= ap_const_lv8_0;
                end if; 
            end if;
        end if;
    end process;


    ap_done_assign_proc : process(dataflow_parent_loop_proc_U0_ap_done, loop_dataflow_output_count, bound_minus_1)
    begin
        if (((loop_dataflow_output_count = bound_minus_1) and (dataflow_parent_loop_proc_U0_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(dataflow_parent_loop_proc_U0_ap_idle, ap_start, loop_dataflow_output_count)
    begin
        if (((loop_dataflow_output_count = ap_const_lv8_0) and (ap_start = ap_const_logic_0) and (dataflow_parent_loop_proc_U0_ap_idle = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(dataflow_parent_loop_proc_U0_ap_ready, ap_start, loop_dataflow_input_count, bound_minus_1)
    begin
        if (((loop_dataflow_input_count = bound_minus_1) and (ap_start = ap_const_logic_1) and (dataflow_parent_loop_proc_U0_ap_ready = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_minus_1 <= std_logic_vector(unsigned(ctrl2_reg_load_cast) - unsigned(ap_const_lv8_1));
    c_fft_col_op_st_read <= dataflow_parent_loop_proc_U0_c_fft_col_op_st_read;

    dataflow_parent_loop_proc_U0_ap_continue_assign_proc : process(ap_continue, loop_dataflow_output_count, bound_minus_1)
    begin
        if ((not((loop_dataflow_output_count = bound_minus_1)) or (ap_continue = ap_const_logic_1))) then 
            dataflow_parent_loop_proc_U0_ap_continue <= ap_const_logic_1;
        else 
            dataflow_parent_loop_proc_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    dataflow_parent_loop_proc_U0_ap_start <= ap_start;
    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;
    m_axi_gmem_AWADDR <= dataflow_parent_loop_proc_U0_m_axi_gmem_AWADDR;
    m_axi_gmem_AWBURST <= dataflow_parent_loop_proc_U0_m_axi_gmem_AWBURST;
    m_axi_gmem_AWCACHE <= dataflow_parent_loop_proc_U0_m_axi_gmem_AWCACHE;
    m_axi_gmem_AWID <= dataflow_parent_loop_proc_U0_m_axi_gmem_AWID;
    m_axi_gmem_AWLEN <= dataflow_parent_loop_proc_U0_m_axi_gmem_AWLEN;
    m_axi_gmem_AWLOCK <= dataflow_parent_loop_proc_U0_m_axi_gmem_AWLOCK;
    m_axi_gmem_AWPROT <= dataflow_parent_loop_proc_U0_m_axi_gmem_AWPROT;
    m_axi_gmem_AWQOS <= dataflow_parent_loop_proc_U0_m_axi_gmem_AWQOS;
    m_axi_gmem_AWREGION <= dataflow_parent_loop_proc_U0_m_axi_gmem_AWREGION;
    m_axi_gmem_AWSIZE <= dataflow_parent_loop_proc_U0_m_axi_gmem_AWSIZE;
    m_axi_gmem_AWUSER <= dataflow_parent_loop_proc_U0_m_axi_gmem_AWUSER;
    m_axi_gmem_AWVALID <= dataflow_parent_loop_proc_U0_m_axi_gmem_AWVALID;
    m_axi_gmem_BREADY <= dataflow_parent_loop_proc_U0_m_axi_gmem_BREADY;
    m_axi_gmem_RREADY <= ap_const_logic_0;
    m_axi_gmem_WDATA <= dataflow_parent_loop_proc_U0_m_axi_gmem_WDATA;
    m_axi_gmem_WID <= dataflow_parent_loop_proc_U0_m_axi_gmem_WID;
    m_axi_gmem_WLAST <= dataflow_parent_loop_proc_U0_m_axi_gmem_WLAST;
    m_axi_gmem_WSTRB <= dataflow_parent_loop_proc_U0_m_axi_gmem_WSTRB;
    m_axi_gmem_WUSER <= dataflow_parent_loop_proc_U0_m_axi_gmem_WUSER;
    m_axi_gmem_WVALID <= dataflow_parent_loop_proc_U0_m_axi_gmem_WVALID;
end behav;
