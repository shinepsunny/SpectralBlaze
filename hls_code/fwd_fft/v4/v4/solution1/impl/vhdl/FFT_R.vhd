-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT_R is
port (
    in_stream_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_V_empty_n : IN STD_LOGIC;
    in_stream_V_read : OUT STD_LOGIC;
    out_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_V_full_n : IN STD_LOGIC;
    out_stream_V_write : OUT STD_LOGIC;
    ctrl1_reg : IN STD_LOGIC_VECTOR (31 downto 0);
    ctrl2_reg : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_reg : IN STD_LOGIC_VECTOR (31 downto 0);
    layer2_reg : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of FFT_R is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "FFT_R_FFT_R,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7cg-fbvb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.614000,HLS_SYN_LAT=59214,HLS_SYN_TPT=none,HLS_SYN_MEM=38,HLS_SYN_DSP=0,HLS_SYN_FF=9434,HLS_SYN_LUT=9981,HLS_VERSION=2021_1}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal dataflow_in_loop_VITIS_LOOP_72_1_U0_in_stream_V_read : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_72_1_U0_out_stream_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_VITIS_LOOP_72_1_U0_out_stream_V_write : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_start : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_done : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_ready : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_idle : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_continue : STD_LOGIC;
    signal loop_dataflow_input_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal loop_dataflow_output_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal bound_minus_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component FFT_R_dataflow_in_loop_VITIS_LOOP_72_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        in_stream_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_stream_V_empty_n : IN STD_LOGIC;
        in_stream_V_read : OUT STD_LOGIC;
        ctrl1_reg : IN STD_LOGIC_VECTOR (31 downto 0);
        out_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_stream_V_full_n : IN STD_LOGIC;
        out_stream_V_write : OUT STD_LOGIC;
        ctrl1_reg_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    dataflow_in_loop_VITIS_LOOP_72_1_U0 : component FFT_R_dataflow_in_loop_VITIS_LOOP_72_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        in_stream_V_dout => in_stream_V_dout,
        in_stream_V_empty_n => in_stream_V_empty_n,
        in_stream_V_read => dataflow_in_loop_VITIS_LOOP_72_1_U0_in_stream_V_read,
        ctrl1_reg => ctrl1_reg,
        out_stream_V_din => dataflow_in_loop_VITIS_LOOP_72_1_U0_out_stream_V_din,
        out_stream_V_full_n => out_stream_V_full_n,
        out_stream_V_write => dataflow_in_loop_VITIS_LOOP_72_1_U0_out_stream_V_write,
        ctrl1_reg_ap_vld => ap_const_logic_1,
        ap_start => dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_start,
        ap_done => dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_done,
        ap_ready => dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_ready,
        ap_idle => dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_idle,
        ap_continue => dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_continue);





    loop_dataflow_input_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_input_count <= ap_const_lv32_0;
            else
                if ((not((loop_dataflow_input_count = bound_minus_1)) and (ap_start = ap_const_logic_1) and (dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= std_logic_vector(unsigned(loop_dataflow_input_count) + unsigned(ap_const_lv32_1));
                elsif (((loop_dataflow_input_count = bound_minus_1) and (ap_start = ap_const_logic_1) and (dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= ap_const_lv32_0;
                end if; 
            end if;
        end if;
    end process;


    loop_dataflow_output_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_output_count <= ap_const_lv32_0;
            else
                if ((not((loop_dataflow_output_count = bound_minus_1)) and (dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_continue = ap_const_logic_1) and (dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= std_logic_vector(unsigned(loop_dataflow_output_count) + unsigned(ap_const_lv32_1));
                elsif (((loop_dataflow_output_count = bound_minus_1) and (dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_continue = ap_const_logic_1) and (dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= ap_const_lv32_0;
                end if; 
            end if;
        end if;
    end process;


    ap_done_assign_proc : process(dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_done, loop_dataflow_output_count, bound_minus_1)
    begin
        if (((loop_dataflow_output_count = bound_minus_1) and (dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_idle, ap_start, loop_dataflow_output_count)
    begin
        if (((loop_dataflow_output_count = ap_const_lv32_0) and (ap_start = ap_const_logic_0) and (dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_idle = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_ready, ap_start, loop_dataflow_input_count, bound_minus_1)
    begin
        if (((loop_dataflow_input_count = bound_minus_1) and (ap_start = ap_const_logic_1) and (dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_ready = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_minus_1 <= std_logic_vector(unsigned(n) - unsigned(ap_const_lv32_1));
    dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_continue <= ap_const_logic_1;
    dataflow_in_loop_VITIS_LOOP_72_1_U0_ap_start <= ap_start;
    in_stream_V_read <= dataflow_in_loop_VITIS_LOOP_72_1_U0_in_stream_V_read;
    out_stream_V_din <= dataflow_in_loop_VITIS_LOOP_72_1_U0_out_stream_V_din;
    out_stream_V_write <= dataflow_in_loop_VITIS_LOOP_72_1_U0_out_stream_V_write;
end behav;
