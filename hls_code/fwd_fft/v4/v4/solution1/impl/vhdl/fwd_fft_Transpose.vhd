-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fwd_fft_Transpose is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    c_row_op_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    c_row_op_st_empty_n : IN STD_LOGIC;
    c_row_op_st_read : OUT STD_LOGIC;
    c_row_op_trans_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_row_op_trans_st_full_n : IN STD_LOGIC;
    c_row_op_trans_st_write : OUT STD_LOGIC;
    ctrl1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ctrl1_reg_empty_n : IN STD_LOGIC;
    ctrl1_reg_read : OUT STD_LOGIC;
    ctrl2_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ctrl2_reg_empty_n : IN STD_LOGIC;
    ctrl2_reg_read : OUT STD_LOGIC;
    layer1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_reg_empty_n : IN STD_LOGIC;
    layer1_reg_read : OUT STD_LOGIC;
    ctrl1_reg_c17_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctrl1_reg_c17_full_n : IN STD_LOGIC;
    ctrl1_reg_c17_write : OUT STD_LOGIC;
    ctrl2_reg_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctrl2_reg_c_full_n : IN STD_LOGIC;
    ctrl2_reg_c_write : OUT STD_LOGIC;
    layer1_reg_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer1_reg_c_full_n : IN STD_LOGIC;
    layer1_reg_c_write : OUT STD_LOGIC );
end;


architecture behav of fwd_fft_Transpose is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal ctrl1_reg_blk_n : STD_LOGIC;
    signal ctrl2_reg_blk_n : STD_LOGIC;
    signal layer1_reg_blk_n : STD_LOGIC;
    signal ctrl1_reg_c17_blk_n : STD_LOGIC;
    signal ctrl2_reg_c_blk_n : STD_LOGIC;
    signal layer1_reg_c_blk_n : STD_LOGIC;
    signal empty_fu_93_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_108 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_153_fu_98_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_153_reg_113 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_154_fu_103_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_154_reg_118 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_82_c_row_op_st_read : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_82_c_row_op_trans_st_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_82_c_row_op_trans_st_write : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_82_ap_start : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_82_ap_done : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_82_ap_ready : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_82_ap_idle : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_82_ap_continue : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_82_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call17 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_sync_grp_dataflow_parent_loop_proc28_fu_82_ap_ready : STD_LOGIC;
    signal ap_sync_grp_dataflow_parent_loop_proc28_fu_82_ap_done : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_done : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fwd_fft_dataflow_parent_loop_proc28 IS
    port (
        layer1_reg_load_cast : IN STD_LOGIC_VECTOR (15 downto 0);
        ctrl2_reg_load_cast : IN STD_LOGIC_VECTOR (7 downto 0);
        c_row_op_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_row_op_st_empty_n : IN STD_LOGIC;
        c_row_op_st_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        c_row_op_trans_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_row_op_trans_st_full_n : IN STD_LOGIC;
        c_row_op_trans_st_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ctrl2_reg_load_cast_ap_vld : IN STD_LOGIC;
        p_read_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    grp_dataflow_parent_loop_proc28_fu_82 : component fwd_fft_dataflow_parent_loop_proc28
    port map (
        layer1_reg_load_cast => empty_153_reg_113,
        ctrl2_reg_load_cast => empty_154_reg_118,
        c_row_op_st_dout => c_row_op_st_dout,
        c_row_op_st_empty_n => c_row_op_st_empty_n,
        c_row_op_st_read => grp_dataflow_parent_loop_proc28_fu_82_c_row_op_st_read,
        p_read => empty_reg_108,
        c_row_op_trans_st_din => grp_dataflow_parent_loop_proc28_fu_82_c_row_op_trans_st_din,
        c_row_op_trans_st_full_n => c_row_op_trans_st_full_n,
        c_row_op_trans_st_write => grp_dataflow_parent_loop_proc28_fu_82_c_row_op_trans_st_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ctrl2_reg_load_cast_ap_vld => ap_const_logic_1,
        p_read_ap_vld => ap_const_logic_1,
        ap_start => grp_dataflow_parent_loop_proc28_fu_82_ap_start,
        ap_done => grp_dataflow_parent_loop_proc28_fu_82_ap_done,
        ap_ready => grp_dataflow_parent_loop_proc28_fu_82_ap_ready,
        ap_idle => grp_dataflow_parent_loop_proc28_fu_82_ap_idle,
        ap_continue => grp_dataflow_parent_loop_proc28_fu_82_ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_done <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc28_fu_82_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_ready <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc28_fu_82_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dataflow_parent_loop_proc28_fu_82_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dataflow_parent_loop_proc28_fu_82_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_sync_grp_dataflow_parent_loop_proc28_fu_82_ap_ready = ap_const_logic_0)) or (not(((real_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_c17_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_dataflow_parent_loop_proc28_fu_82_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dataflow_parent_loop_proc28_fu_82_ap_ready = ap_const_logic_1)) then 
                    grp_dataflow_parent_loop_proc28_fu_82_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_153_reg_113 <= empty_153_fu_98_p1;
                empty_154_reg_118 <= empty_154_fu_103_p1;
                empty_reg_108 <= empty_fu_93_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c17_full_n, ctrl2_reg_c_full_n, layer1_reg_c_full_n, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_c17_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c17_full_n, ctrl2_reg_c_full_n, layer1_reg_c_full_n)
    begin
        if (((real_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_c17_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_on_subcall_done)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c17_full_n, ctrl2_reg_c_full_n, layer1_reg_c_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_c17_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call17_assign_proc : process(real_start, ap_done_reg, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c17_full_n, ctrl2_reg_c_full_n, layer1_reg_c_full_n)
    begin
                ap_block_state1_ignore_call17 <= ((real_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_c17_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(ap_sync_grp_dataflow_parent_loop_proc28_fu_82_ap_ready, ap_sync_grp_dataflow_parent_loop_proc28_fu_82_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((ap_sync_grp_dataflow_parent_loop_proc28_fu_82_ap_ready and ap_sync_grp_dataflow_parent_loop_proc28_fu_82_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    ap_sync_grp_dataflow_parent_loop_proc28_fu_82_ap_done <= (grp_dataflow_parent_loop_proc28_fu_82_ap_done or ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_done);
    ap_sync_grp_dataflow_parent_loop_proc28_fu_82_ap_ready <= (grp_dataflow_parent_loop_proc28_fu_82_ap_ready or ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_ready);

    c_row_op_st_read_assign_proc : process(grp_dataflow_parent_loop_proc28_fu_82_c_row_op_st_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_row_op_st_read <= grp_dataflow_parent_loop_proc28_fu_82_c_row_op_st_read;
        else 
            c_row_op_st_read <= ap_const_logic_0;
        end if; 
    end process;

    c_row_op_trans_st_din <= grp_dataflow_parent_loop_proc28_fu_82_c_row_op_trans_st_din;

    c_row_op_trans_st_write_assign_proc : process(grp_dataflow_parent_loop_proc28_fu_82_c_row_op_trans_st_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_row_op_trans_st_write <= grp_dataflow_parent_loop_proc28_fu_82_c_row_op_trans_st_write;
        else 
            c_row_op_trans_st_write <= ap_const_logic_0;
        end if; 
    end process;


    ctrl1_reg_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl1_reg_blk_n <= ctrl1_reg_empty_n;
        else 
            ctrl1_reg_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ctrl1_reg_c17_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_c17_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl1_reg_c17_blk_n <= ctrl1_reg_c17_full_n;
        else 
            ctrl1_reg_c17_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ctrl1_reg_c17_din <= ctrl1_reg_dout;

    ctrl1_reg_c17_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c17_full_n, ctrl2_reg_c_full_n, layer1_reg_c_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_c17_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl1_reg_c17_write <= ap_const_logic_1;
        else 
            ctrl1_reg_c17_write <= ap_const_logic_0;
        end if; 
    end process;


    ctrl1_reg_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c17_full_n, ctrl2_reg_c_full_n, layer1_reg_c_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_c17_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl1_reg_read <= ap_const_logic_1;
        else 
            ctrl1_reg_read <= ap_const_logic_0;
        end if; 
    end process;


    ctrl2_reg_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ctrl2_reg_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl2_reg_blk_n <= ctrl2_reg_empty_n;
        else 
            ctrl2_reg_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ctrl2_reg_c_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ctrl2_reg_c_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl2_reg_c_blk_n <= ctrl2_reg_c_full_n;
        else 
            ctrl2_reg_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ctrl2_reg_c_din <= ctrl2_reg_dout;

    ctrl2_reg_c_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c17_full_n, ctrl2_reg_c_full_n, layer1_reg_c_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_c17_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl2_reg_c_write <= ap_const_logic_1;
        else 
            ctrl2_reg_c_write <= ap_const_logic_0;
        end if; 
    end process;


    ctrl2_reg_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c17_full_n, ctrl2_reg_c_full_n, layer1_reg_c_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_c17_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl2_reg_read <= ap_const_logic_1;
        else 
            ctrl2_reg_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_153_fu_98_p1 <= layer1_reg_dout(16 - 1 downto 0);
    empty_154_fu_103_p1 <= ctrl2_reg_dout(8 - 1 downto 0);
    empty_fu_93_p1 <= ctrl1_reg_dout(8 - 1 downto 0);

    grp_dataflow_parent_loop_proc28_fu_82_ap_continue_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
            grp_dataflow_parent_loop_proc28_fu_82_ap_continue <= ap_const_logic_1;
        else 
            grp_dataflow_parent_loop_proc28_fu_82_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_dataflow_parent_loop_proc28_fu_82_ap_start <= grp_dataflow_parent_loop_proc28_fu_82_ap_start_reg;

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer1_reg_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer1_reg_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer1_reg_blk_n <= layer1_reg_empty_n;
        else 
            layer1_reg_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer1_reg_c_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer1_reg_c_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer1_reg_c_blk_n <= layer1_reg_c_full_n;
        else 
            layer1_reg_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer1_reg_c_din <= layer1_reg_dout;

    layer1_reg_c_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c17_full_n, ctrl2_reg_c_full_n, layer1_reg_c_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_c17_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer1_reg_c_write <= ap_const_logic_1;
        else 
            layer1_reg_c_write <= ap_const_logic_0;
        end if; 
    end process;


    layer1_reg_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c17_full_n, ctrl2_reg_c_full_n, layer1_reg_c_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_c17_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer1_reg_read <= ap_const_logic_1;
        else 
            layer1_reg_read <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
