-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fwd_fft_dataflow_in_loop_VITIS_LOOP_395_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    c_fft_col_op_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    c_fft_col_op_st_empty_n : IN STD_LOGIC;
    c_fft_col_op_st_read : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    fft_out : IN STD_LOGIC_VECTOR (63 downto 0);
    fft_out_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    p_read_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of fwd_fft_dataflow_in_loop_VITIS_LOOP_395_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ifmap_CF_M_real_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ifmap_CF_M_real_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ifmap_CF_M_real_t_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ifmap_CF_M_real_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ifmap_CF_M_real_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ifmap_CF_M_imag_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ifmap_CF_M_imag_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ifmap_CF_M_imag_t_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ifmap_CF_M_imag_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ifmap_CF_M_imag_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_out_c_channel_full_n : STD_LOGIC;
    signal ifmap_gen_y_U0_ap_start : STD_LOGIC;
    signal ifmap_gen_y_U0_ap_done : STD_LOGIC;
    signal ifmap_gen_y_U0_ap_continue : STD_LOGIC;
    signal ifmap_gen_y_U0_ap_idle : STD_LOGIC;
    signal ifmap_gen_y_U0_ap_ready : STD_LOGIC;
    signal ifmap_gen_y_U0_c_fft_col_op_st_read : STD_LOGIC;
    signal ifmap_gen_y_U0_ifmap_CF_M_real_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal ifmap_gen_y_U0_ifmap_CF_M_real_ce0 : STD_LOGIC;
    signal ifmap_gen_y_U0_ifmap_CF_M_real_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ifmap_gen_y_U0_ifmap_CF_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ifmap_gen_y_U0_ifmap_CF_M_imag_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal ifmap_gen_y_U0_ifmap_CF_M_imag_ce0 : STD_LOGIC;
    signal ifmap_gen_y_U0_ifmap_CF_M_imag_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ifmap_gen_y_U0_ifmap_CF_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ifmap_gen_y_U0_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_channel_done_ctrl1_reg_c_channel1 : STD_LOGIC;
    signal ctrl1_reg_c_channel1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_reg_c_channel1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_reg_c_channel1 : STD_LOGIC;
    signal ap_channel_done_ifmap_CF_M_imag : STD_LOGIC;
    signal ifmap_gen_y_U0_ifmap_CF_M_imag_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ifmap_CF_M_imag : STD_LOGIC := '0';
    signal ap_sync_channel_write_ifmap_CF_M_imag : STD_LOGIC;
    signal ap_channel_done_ifmap_CF_M_real : STD_LOGIC;
    signal ifmap_gen_y_U0_ifmap_CF_M_real_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ifmap_CF_M_real : STD_LOGIC := '0';
    signal ap_sync_channel_write_ifmap_CF_M_real : STD_LOGIC;
    signal ifmap_vec_write_U0_ap_start : STD_LOGIC;
    signal ifmap_vec_write_U0_ap_done : STD_LOGIC;
    signal ifmap_vec_write_U0_ap_continue : STD_LOGIC;
    signal ifmap_vec_write_U0_ap_idle : STD_LOGIC;
    signal ifmap_vec_write_U0_ap_ready : STD_LOGIC;
    signal ifmap_vec_write_U0_ifmap_CF_M_real_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal ifmap_vec_write_U0_ifmap_CF_M_real_ce0 : STD_LOGIC;
    signal ifmap_vec_write_U0_ifmap_CF_M_real_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ifmap_vec_write_U0_ifmap_CF_M_real_ce1 : STD_LOGIC;
    signal ifmap_vec_write_U0_ifmap_CF_M_imag_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal ifmap_vec_write_U0_ifmap_CF_M_imag_ce0 : STD_LOGIC;
    signal ifmap_vec_write_U0_ifmap_CF_M_imag_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ifmap_vec_write_U0_ifmap_CF_M_imag_ce1 : STD_LOGIC;
    signal ifmap_vec_write_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal ifmap_vec_write_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal ifmap_vec_write_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal ifmap_vec_write_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal ifmap_vec_write_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ifmap_vec_write_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal ifmap_vec_write_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal ifmap_CF_M_real_i_full_n : STD_LOGIC;
    signal ifmap_CF_M_real_t_empty_n : STD_LOGIC;
    signal ifmap_CF_M_imag_i_full_n : STD_LOGIC;
    signal ifmap_CF_M_imag_t_empty_n : STD_LOGIC;
    signal fft_out_c_channel_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_out_c_channel_empty_n : STD_LOGIC;
    signal ctrl1_reg_c_channel1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal ctrl1_reg_c_channel1_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_ifmap_gen_y_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_ifmap_gen_y_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fwd_fft_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fft_out : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fwd_fft_ifmap_gen_y IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        c_fft_col_op_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_fft_col_op_st_empty_n : IN STD_LOGIC;
        c_fft_col_op_st_read : OUT STD_LOGIC;
        ifmap_CF_M_real_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ifmap_CF_M_real_ce0 : OUT STD_LOGIC;
        ifmap_CF_M_real_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ifmap_CF_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ifmap_CF_M_imag_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ifmap_CF_M_imag_ce0 : OUT STD_LOGIC;
        ifmap_CF_M_imag_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ifmap_CF_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component fwd_fft_ifmap_vec_write IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ifmap_CF_M_real_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ifmap_CF_M_real_ce0 : OUT STD_LOGIC;
        ifmap_CF_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ifmap_CF_M_real_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ifmap_CF_M_real_ce1 : OUT STD_LOGIC;
        ifmap_CF_M_real_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ifmap_CF_M_imag_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ifmap_CF_M_imag_ce0 : OUT STD_LOGIC;
        ifmap_CF_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ifmap_CF_M_imag_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ifmap_CF_M_imag_ce1 : OUT STD_LOGIC;
        ifmap_CF_M_imag_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        p_read : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component fwd_fft_dataflow_in_loop_VITIS_LOOP_395_3_ifmap_CF_M_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC_VECTOR (3 downto 0);
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC_VECTOR (3 downto 0);
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component fwd_fft_fifo_w64_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fwd_fft_fifo_w8_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    ifmap_CF_M_real_U : component fwd_fft_dataflow_in_loop_VITIS_LOOP_395_3_ifmap_CF_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => ifmap_gen_y_U0_ifmap_CF_M_real_address0,
        i_ce0 => ifmap_gen_y_U0_ifmap_CF_M_real_ce0,
        i_we0 => ifmap_gen_y_U0_ifmap_CF_M_real_we0,
        i_d0 => ifmap_gen_y_U0_ifmap_CF_M_real_d0,
        i_q0 => ifmap_CF_M_real_i_q0,
        i_address1 => ap_const_lv11_0,
        i_ce1 => ap_const_logic_0,
        i_q1 => ifmap_CF_M_real_i_q1,
        t_address0 => ifmap_vec_write_U0_ifmap_CF_M_real_address0,
        t_ce0 => ifmap_vec_write_U0_ifmap_CF_M_real_ce0,
        t_we0 => ifmap_CF_M_real_t_we0,
        t_d0 => ap_const_lv32_0,
        t_q0 => ifmap_CF_M_real_t_q0,
        t_address1 => ifmap_vec_write_U0_ifmap_CF_M_real_address1,
        t_ce1 => ifmap_vec_write_U0_ifmap_CF_M_real_ce1,
        t_q1 => ifmap_CF_M_real_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => ifmap_CF_M_real_i_full_n,
        i_write => ap_channel_done_ifmap_CF_M_real,
        t_empty_n => ifmap_CF_M_real_t_empty_n,
        t_read => ifmap_vec_write_U0_ap_ready);

    ifmap_CF_M_imag_U : component fwd_fft_dataflow_in_loop_VITIS_LOOP_395_3_ifmap_CF_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => ifmap_gen_y_U0_ifmap_CF_M_imag_address0,
        i_ce0 => ifmap_gen_y_U0_ifmap_CF_M_imag_ce0,
        i_we0 => ifmap_gen_y_U0_ifmap_CF_M_imag_we0,
        i_d0 => ifmap_gen_y_U0_ifmap_CF_M_imag_d0,
        i_q0 => ifmap_CF_M_imag_i_q0,
        i_address1 => ap_const_lv11_0,
        i_ce1 => ap_const_logic_0,
        i_q1 => ifmap_CF_M_imag_i_q1,
        t_address0 => ifmap_vec_write_U0_ifmap_CF_M_imag_address0,
        t_ce0 => ifmap_vec_write_U0_ifmap_CF_M_imag_ce0,
        t_we0 => ifmap_CF_M_imag_t_we0,
        t_d0 => ap_const_lv32_0,
        t_q0 => ifmap_CF_M_imag_t_q0,
        t_address1 => ifmap_vec_write_U0_ifmap_CF_M_imag_address1,
        t_ce1 => ifmap_vec_write_U0_ifmap_CF_M_imag_ce1,
        t_q1 => ifmap_CF_M_imag_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => ifmap_CF_M_imag_i_full_n,
        i_write => ap_channel_done_ifmap_CF_M_imag,
        t_empty_n => ifmap_CF_M_imag_t_empty_n,
        t_read => ifmap_vec_write_U0_ap_ready);

    entry_proc_U0 : component fwd_fft_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => entry_proc_U0_ap_start,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        fft_out => fft_out,
        ap_return => entry_proc_U0_ap_return);

    ifmap_gen_y_U0 : component fwd_fft_ifmap_gen_y
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ifmap_gen_y_U0_ap_start,
        ap_done => ifmap_gen_y_U0_ap_done,
        ap_continue => ifmap_gen_y_U0_ap_continue,
        ap_idle => ifmap_gen_y_U0_ap_idle,
        ap_ready => ifmap_gen_y_U0_ap_ready,
        c_fft_col_op_st_dout => c_fft_col_op_st_dout,
        c_fft_col_op_st_empty_n => c_fft_col_op_st_empty_n,
        c_fft_col_op_st_read => ifmap_gen_y_U0_c_fft_col_op_st_read,
        ifmap_CF_M_real_address0 => ifmap_gen_y_U0_ifmap_CF_M_real_address0,
        ifmap_CF_M_real_ce0 => ifmap_gen_y_U0_ifmap_CF_M_real_ce0,
        ifmap_CF_M_real_we0 => ifmap_gen_y_U0_ifmap_CF_M_real_we0,
        ifmap_CF_M_real_d0 => ifmap_gen_y_U0_ifmap_CF_M_real_d0,
        ifmap_CF_M_imag_address0 => ifmap_gen_y_U0_ifmap_CF_M_imag_address0,
        ifmap_CF_M_imag_ce0 => ifmap_gen_y_U0_ifmap_CF_M_imag_ce0,
        ifmap_CF_M_imag_we0 => ifmap_gen_y_U0_ifmap_CF_M_imag_we0,
        ifmap_CF_M_imag_d0 => ifmap_gen_y_U0_ifmap_CF_M_imag_d0,
        p_read => p_read,
        ap_return => ifmap_gen_y_U0_ap_return);

    ifmap_vec_write_U0 : component fwd_fft_ifmap_vec_write
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ifmap_vec_write_U0_ap_start,
        ap_done => ifmap_vec_write_U0_ap_done,
        ap_continue => ifmap_vec_write_U0_ap_continue,
        ap_idle => ifmap_vec_write_U0_ap_idle,
        ap_ready => ifmap_vec_write_U0_ap_ready,
        ifmap_CF_M_real_address0 => ifmap_vec_write_U0_ifmap_CF_M_real_address0,
        ifmap_CF_M_real_ce0 => ifmap_vec_write_U0_ifmap_CF_M_real_ce0,
        ifmap_CF_M_real_q0 => ifmap_CF_M_real_t_q0,
        ifmap_CF_M_real_address1 => ifmap_vec_write_U0_ifmap_CF_M_real_address1,
        ifmap_CF_M_real_ce1 => ifmap_vec_write_U0_ifmap_CF_M_real_ce1,
        ifmap_CF_M_real_q1 => ifmap_CF_M_real_t_q1,
        ifmap_CF_M_imag_address0 => ifmap_vec_write_U0_ifmap_CF_M_imag_address0,
        ifmap_CF_M_imag_ce0 => ifmap_vec_write_U0_ifmap_CF_M_imag_ce0,
        ifmap_CF_M_imag_q0 => ifmap_CF_M_imag_t_q0,
        ifmap_CF_M_imag_address1 => ifmap_vec_write_U0_ifmap_CF_M_imag_address1,
        ifmap_CF_M_imag_ce1 => ifmap_vec_write_U0_ifmap_CF_M_imag_ce1,
        ifmap_CF_M_imag_q1 => ifmap_CF_M_imag_t_q1,
        m_axi_gmem_AWVALID => ifmap_vec_write_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR => ifmap_vec_write_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => ifmap_vec_write_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => ifmap_vec_write_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => ifmap_vec_write_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => ifmap_vec_write_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => ifmap_vec_write_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => ifmap_vec_write_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => ifmap_vec_write_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => ifmap_vec_write_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => ifmap_vec_write_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => ifmap_vec_write_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => ifmap_vec_write_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => m_axi_gmem_WREADY,
        m_axi_gmem_WDATA => ifmap_vec_write_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => ifmap_vec_write_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => ifmap_vec_write_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => ifmap_vec_write_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => ifmap_vec_write_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => ifmap_vec_write_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => ifmap_vec_write_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => ifmap_vec_write_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => ifmap_vec_write_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => ifmap_vec_write_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => ifmap_vec_write_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => ifmap_vec_write_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => ifmap_vec_write_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => ifmap_vec_write_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => ifmap_vec_write_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => ifmap_vec_write_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => ifmap_vec_write_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => ifmap_vec_write_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv128_lc_1,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => m_axi_gmem_BVALID,
        m_axi_gmem_BREADY => ifmap_vec_write_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => m_axi_gmem_BRESP,
        m_axi_gmem_BID => m_axi_gmem_BID,
        m_axi_gmem_BUSER => m_axi_gmem_BUSER,
        p_read => fft_out_c_channel_dout,
        p_read1 => ctrl1_reg_c_channel1_dout);

    fft_out_c_channel_U : component fwd_fft_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_ap_return,
        if_full_n => fft_out_c_channel_full_n,
        if_write => entry_proc_U0_ap_done,
        if_dout => fft_out_c_channel_dout,
        if_empty_n => fft_out_c_channel_empty_n,
        if_read => ifmap_vec_write_U0_ap_ready);

    ctrl1_reg_c_channel1_U : component fwd_fft_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ifmap_gen_y_U0_ap_return,
        if_full_n => ctrl1_reg_c_channel1_full_n,
        if_write => ap_channel_done_ctrl1_reg_c_channel1,
        if_dout => ctrl1_reg_c_channel1_dout,
        if_empty_n => ctrl1_reg_c_channel1_empty_n,
        if_read => ifmap_vec_write_U0_ap_ready);





    ap_sync_reg_channel_write_ctrl1_reg_c_channel1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_reg_c_channel1 <= ap_const_logic_0;
            else
                if (((ifmap_gen_y_U0_ap_done and ifmap_gen_y_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_reg_c_channel1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_reg_c_channel1 <= ap_sync_channel_write_ctrl1_reg_c_channel1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ifmap_CF_M_imag_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ifmap_CF_M_imag <= ap_const_logic_0;
            else
                if (((ifmap_gen_y_U0_ap_done and ifmap_gen_y_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ifmap_CF_M_imag <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ifmap_CF_M_imag <= ap_sync_channel_write_ifmap_CF_M_imag;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ifmap_CF_M_real_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ifmap_CF_M_real <= ap_const_logic_0;
            else
                if (((ifmap_gen_y_U0_ap_done and ifmap_gen_y_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ifmap_CF_M_real <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ifmap_CF_M_real <= ap_sync_channel_write_ifmap_CF_M_real;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_ifmap_gen_y_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_ifmap_gen_y_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_ifmap_gen_y_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_ifmap_gen_y_U0_ap_ready <= ap_sync_ifmap_gen_y_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_ctrl1_reg_c_channel1 <= (ifmap_gen_y_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_reg_c_channel1 xor ap_const_logic_1));
    ap_channel_done_ifmap_CF_M_imag <= (ifmap_gen_y_U0_ap_done and (ap_sync_reg_channel_write_ifmap_CF_M_imag xor ap_const_logic_1));
    ap_channel_done_ifmap_CF_M_real <= (ifmap_gen_y_U0_ap_done and (ap_sync_reg_channel_write_ifmap_CF_M_real xor ap_const_logic_1));
    ap_done <= ifmap_vec_write_U0_ap_done;
    ap_idle <= (ifmap_vec_write_U0_ap_idle and ifmap_gen_y_U0_ap_idle and (ctrl1_reg_c_channel1_empty_n xor ap_const_logic_1) and (fft_out_c_channel_empty_n xor ap_const_logic_1) and (ifmap_CF_M_imag_t_empty_n xor ap_const_logic_1) and (ifmap_CF_M_real_t_empty_n xor ap_const_logic_1) and entry_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_channel_write_ctrl1_reg_c_channel1 <= ((ctrl1_reg_c_channel1_full_n and ap_channel_done_ctrl1_reg_c_channel1) or ap_sync_reg_channel_write_ctrl1_reg_c_channel1);
    ap_sync_channel_write_ifmap_CF_M_imag <= ((ifmap_gen_y_U0_ifmap_CF_M_imag_full_n and ap_channel_done_ifmap_CF_M_imag) or ap_sync_reg_channel_write_ifmap_CF_M_imag);
    ap_sync_channel_write_ifmap_CF_M_real <= ((ifmap_gen_y_U0_ifmap_CF_M_real_full_n and ap_channel_done_ifmap_CF_M_real) or ap_sync_reg_channel_write_ifmap_CF_M_real);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_ifmap_gen_y_U0_ap_ready <= (ifmap_gen_y_U0_ap_ready or ap_sync_reg_ifmap_gen_y_U0_ap_ready);
    ap_sync_ready <= (ap_sync_ifmap_gen_y_U0_ap_ready and ap_sync_entry_proc_U0_ap_ready);
    c_fft_col_op_st_read <= ifmap_gen_y_U0_c_fft_col_op_st_read;
    entry_proc_U0_ap_continue <= fft_out_c_channel_full_n;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    ifmap_CF_M_imag_t_we0 <= (0=>ap_const_logic_0, others=>'-');
    ifmap_CF_M_real_t_we0 <= (0=>ap_const_logic_0, others=>'-');
    ifmap_gen_y_U0_ap_continue <= (ap_sync_channel_write_ifmap_CF_M_real and ap_sync_channel_write_ifmap_CF_M_imag and ap_sync_channel_write_ctrl1_reg_c_channel1);
    ifmap_gen_y_U0_ap_start <= ((ap_sync_reg_ifmap_gen_y_U0_ap_ready xor ap_const_logic_1) and ap_start);
    ifmap_gen_y_U0_ifmap_CF_M_imag_full_n <= ifmap_CF_M_imag_i_full_n;
    ifmap_gen_y_U0_ifmap_CF_M_real_full_n <= ifmap_CF_M_real_i_full_n;
    ifmap_vec_write_U0_ap_continue <= ap_continue;
    ifmap_vec_write_U0_ap_start <= (ifmap_CF_M_real_t_empty_n and ifmap_CF_M_imag_t_empty_n and fft_out_c_channel_empty_n and ctrl1_reg_c_channel1_empty_n);
    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;
    m_axi_gmem_AWADDR <= ifmap_vec_write_U0_m_axi_gmem_AWADDR;
    m_axi_gmem_AWBURST <= ifmap_vec_write_U0_m_axi_gmem_AWBURST;
    m_axi_gmem_AWCACHE <= ifmap_vec_write_U0_m_axi_gmem_AWCACHE;
    m_axi_gmem_AWID <= ifmap_vec_write_U0_m_axi_gmem_AWID;
    m_axi_gmem_AWLEN <= ifmap_vec_write_U0_m_axi_gmem_AWLEN;
    m_axi_gmem_AWLOCK <= ifmap_vec_write_U0_m_axi_gmem_AWLOCK;
    m_axi_gmem_AWPROT <= ifmap_vec_write_U0_m_axi_gmem_AWPROT;
    m_axi_gmem_AWQOS <= ifmap_vec_write_U0_m_axi_gmem_AWQOS;
    m_axi_gmem_AWREGION <= ifmap_vec_write_U0_m_axi_gmem_AWREGION;
    m_axi_gmem_AWSIZE <= ifmap_vec_write_U0_m_axi_gmem_AWSIZE;
    m_axi_gmem_AWUSER <= ifmap_vec_write_U0_m_axi_gmem_AWUSER;
    m_axi_gmem_AWVALID <= ifmap_vec_write_U0_m_axi_gmem_AWVALID;
    m_axi_gmem_BREADY <= ifmap_vec_write_U0_m_axi_gmem_BREADY;
    m_axi_gmem_RREADY <= ap_const_logic_0;
    m_axi_gmem_WDATA <= ifmap_vec_write_U0_m_axi_gmem_WDATA;
    m_axi_gmem_WID <= ifmap_vec_write_U0_m_axi_gmem_WID;
    m_axi_gmem_WLAST <= ifmap_vec_write_U0_m_axi_gmem_WLAST;
    m_axi_gmem_WSTRB <= ifmap_vec_write_U0_m_axi_gmem_WSTRB;
    m_axi_gmem_WUSER <= ifmap_vec_write_U0_m_axi_gmem_WUSER;
    m_axi_gmem_WVALID <= ifmap_vec_write_U0_m_axi_gmem_WVALID;
end behav;
