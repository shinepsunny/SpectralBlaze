-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT_R_dataflow_in_loop_VITIS_LOOP_91_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    in_stream_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_V_empty_n : IN STD_LOGIC;
    in_stream_V_read : OUT STD_LOGIC;
    ctrl1_reg : IN STD_LOGIC_VECTOR (31 downto 0);
    out_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_V_full_n : IN STD_LOGIC;
    out_stream_V_write : OUT STD_LOGIC;
    ctrl1_reg_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of FFT_R_dataflow_in_loop_VITIS_LOOP_91_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal input_data1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_data1_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_data1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_data1_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_12_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_12_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_12_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_12_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_23_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_23_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_23_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_23_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_34_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_34_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_34_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_34_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_45_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_45_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_45_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_45_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_56_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_56_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_56_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_56_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_67_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_67_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_2_buf_U0_ap_start : STD_LOGIC;
    signal stream_2_buf_U0_ap_done : STD_LOGIC;
    signal stream_2_buf_U0_ap_continue : STD_LOGIC;
    signal stream_2_buf_U0_ap_idle : STD_LOGIC;
    signal stream_2_buf_U0_ap_ready : STD_LOGIC;
    signal stream_2_buf_U0_in_stream_V_read : STD_LOGIC;
    signal stream_2_buf_U0_input_buffer_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal stream_2_buf_U0_input_buffer_ce0 : STD_LOGIC;
    signal stream_2_buf_U0_input_buffer_we0 : STD_LOGIC;
    signal stream_2_buf_U0_input_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_2_buf_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_ctrl1_reg_c6_channel : STD_LOGIC;
    signal ctrl1_reg_c6_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_reg_c6_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_reg_c6_channel : STD_LOGIC;
    signal ap_channel_done_input_data1 : STD_LOGIC;
    signal stream_2_buf_U0_input_buffer_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_input_data1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_input_data1 : STD_LOGIC;
    signal fft_stage_0_0_U0_ap_start : STD_LOGIC;
    signal fft_stage_0_0_U0_ap_done : STD_LOGIC;
    signal fft_stage_0_0_U0_ap_continue : STD_LOGIC;
    signal fft_stage_0_0_U0_ap_idle : STD_LOGIC;
    signal fft_stage_0_0_U0_ap_ready : STD_LOGIC;
    signal fft_stage_0_0_U0_IN_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_0_0_U0_IN_r_ce0 : STD_LOGIC;
    signal fft_stage_0_0_U0_IN_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_0_0_U0_IN_r_ce1 : STD_LOGIC;
    signal fft_stage_0_0_U0_OUT_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_0_0_U0_OUT_r_ce0 : STD_LOGIC;
    signal fft_stage_0_0_U0_OUT_r_we0 : STD_LOGIC;
    signal fft_stage_0_0_U0_OUT_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_0_0_U0_OUT_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_0_0_U0_OUT_r_ce1 : STD_LOGIC;
    signal fft_stage_0_0_U0_OUT_r_we1 : STD_LOGIC;
    signal fft_stage_0_0_U0_OUT_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_0_0_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_ctrl1_reg_c5_channel : STD_LOGIC;
    signal ctrl1_reg_c5_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_reg_c5_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_reg_c5_channel : STD_LOGIC;
    signal ap_channel_done_out_data_12 : STD_LOGIC;
    signal fft_stage_0_0_U0_OUT_r_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_12 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_12 : STD_LOGIC;
    signal fft_stage_1_0_U0_ap_start : STD_LOGIC;
    signal fft_stage_1_0_U0_ap_done : STD_LOGIC;
    signal fft_stage_1_0_U0_ap_continue : STD_LOGIC;
    signal fft_stage_1_0_U0_ap_idle : STD_LOGIC;
    signal fft_stage_1_0_U0_ap_ready : STD_LOGIC;
    signal fft_stage_1_0_U0_IN_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_1_0_U0_IN_r_ce0 : STD_LOGIC;
    signal fft_stage_1_0_U0_IN_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_1_0_U0_IN_r_ce1 : STD_LOGIC;
    signal fft_stage_1_0_U0_OUT_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_1_0_U0_OUT_r_ce0 : STD_LOGIC;
    signal fft_stage_1_0_U0_OUT_r_we0 : STD_LOGIC;
    signal fft_stage_1_0_U0_OUT_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_1_0_U0_OUT_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_1_0_U0_OUT_r_ce1 : STD_LOGIC;
    signal fft_stage_1_0_U0_OUT_r_we1 : STD_LOGIC;
    signal fft_stage_1_0_U0_OUT_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_1_0_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_ctrl1_reg_c4_channel : STD_LOGIC;
    signal ctrl1_reg_c4_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_reg_c4_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_reg_c4_channel : STD_LOGIC;
    signal ap_channel_done_out_data_23 : STD_LOGIC;
    signal fft_stage_1_0_U0_OUT_r_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_23 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_23 : STD_LOGIC;
    signal fft_stage_2_0_U0_ap_start : STD_LOGIC;
    signal fft_stage_2_0_U0_ap_done : STD_LOGIC;
    signal fft_stage_2_0_U0_ap_continue : STD_LOGIC;
    signal fft_stage_2_0_U0_ap_idle : STD_LOGIC;
    signal fft_stage_2_0_U0_ap_ready : STD_LOGIC;
    signal fft_stage_2_0_U0_IN_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_2_0_U0_IN_r_ce0 : STD_LOGIC;
    signal fft_stage_2_0_U0_IN_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_2_0_U0_IN_r_ce1 : STD_LOGIC;
    signal fft_stage_2_0_U0_OUT_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_2_0_U0_OUT_r_ce0 : STD_LOGIC;
    signal fft_stage_2_0_U0_OUT_r_we0 : STD_LOGIC;
    signal fft_stage_2_0_U0_OUT_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_2_0_U0_OUT_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_2_0_U0_OUT_r_ce1 : STD_LOGIC;
    signal fft_stage_2_0_U0_OUT_r_we1 : STD_LOGIC;
    signal fft_stage_2_0_U0_OUT_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_2_0_U0_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_ctrl1_reg_c3_channel : STD_LOGIC;
    signal ctrl1_reg_c3_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_reg_c3_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_reg_c3_channel : STD_LOGIC;
    signal ap_channel_done_out_data_34 : STD_LOGIC;
    signal fft_stage_2_0_U0_OUT_r_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_34 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_34 : STD_LOGIC;
    signal fft_stage_3_0_U0_ap_start : STD_LOGIC;
    signal fft_stage_3_0_U0_ap_done : STD_LOGIC;
    signal fft_stage_3_0_U0_ap_continue : STD_LOGIC;
    signal fft_stage_3_0_U0_ap_idle : STD_LOGIC;
    signal fft_stage_3_0_U0_ap_ready : STD_LOGIC;
    signal fft_stage_3_0_U0_IN_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_3_0_U0_IN_r_ce0 : STD_LOGIC;
    signal fft_stage_3_0_U0_IN_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_3_0_U0_IN_r_ce1 : STD_LOGIC;
    signal fft_stage_3_0_U0_OUT_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_3_0_U0_OUT_r_ce0 : STD_LOGIC;
    signal fft_stage_3_0_U0_OUT_r_we0 : STD_LOGIC;
    signal fft_stage_3_0_U0_OUT_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_3_0_U0_OUT_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_3_0_U0_OUT_r_ce1 : STD_LOGIC;
    signal fft_stage_3_0_U0_OUT_r_we1 : STD_LOGIC;
    signal fft_stage_3_0_U0_OUT_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_3_0_U0_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_ctrl1_reg_c2_channel : STD_LOGIC;
    signal ctrl1_reg_c2_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_reg_c2_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_reg_c2_channel : STD_LOGIC;
    signal ap_channel_done_out_data_45 : STD_LOGIC;
    signal fft_stage_3_0_U0_OUT_r_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_45 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_45 : STD_LOGIC;
    signal fft_stage_4_0_U0_ap_start : STD_LOGIC;
    signal fft_stage_4_0_U0_ap_done : STD_LOGIC;
    signal fft_stage_4_0_U0_ap_continue : STD_LOGIC;
    signal fft_stage_4_0_U0_ap_idle : STD_LOGIC;
    signal fft_stage_4_0_U0_ap_ready : STD_LOGIC;
    signal fft_stage_4_0_U0_IN_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_4_0_U0_IN_r_ce0 : STD_LOGIC;
    signal fft_stage_4_0_U0_IN_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_4_0_U0_IN_r_ce1 : STD_LOGIC;
    signal fft_stage_4_0_U0_OUT_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_4_0_U0_OUT_r_ce0 : STD_LOGIC;
    signal fft_stage_4_0_U0_OUT_r_we0 : STD_LOGIC;
    signal fft_stage_4_0_U0_OUT_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_4_0_U0_OUT_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_4_0_U0_OUT_r_ce1 : STD_LOGIC;
    signal fft_stage_4_0_U0_OUT_r_we1 : STD_LOGIC;
    signal fft_stage_4_0_U0_OUT_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_4_0_U0_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_ctrl1_reg_c1_channel : STD_LOGIC;
    signal ctrl1_reg_c1_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_reg_c1_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_reg_c1_channel : STD_LOGIC;
    signal ap_channel_done_out_data_56 : STD_LOGIC;
    signal fft_stage_4_0_U0_OUT_r_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_56 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_56 : STD_LOGIC;
    signal fft_stage_5_0_U0_ap_start : STD_LOGIC;
    signal fft_stage_5_0_U0_ap_done : STD_LOGIC;
    signal fft_stage_5_0_U0_ap_continue : STD_LOGIC;
    signal fft_stage_5_0_U0_ap_idle : STD_LOGIC;
    signal fft_stage_5_0_U0_ap_ready : STD_LOGIC;
    signal fft_stage_5_0_U0_IN_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_5_0_U0_IN_r_ce0 : STD_LOGIC;
    signal fft_stage_5_0_U0_IN_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_5_0_U0_IN_r_ce1 : STD_LOGIC;
    signal fft_stage_5_0_U0_OUT_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_5_0_U0_OUT_r_ce0 : STD_LOGIC;
    signal fft_stage_5_0_U0_OUT_r_we0 : STD_LOGIC;
    signal fft_stage_5_0_U0_OUT_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_5_0_U0_OUT_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage_5_0_U0_OUT_r_ce1 : STD_LOGIC;
    signal fft_stage_5_0_U0_OUT_r_we1 : STD_LOGIC;
    signal fft_stage_5_0_U0_OUT_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_5_0_U0_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_channel_done_ctrl1_reg_c_channel : STD_LOGIC;
    signal ctrl1_reg_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_reg_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_reg_c_channel : STD_LOGIC;
    signal ap_channel_done_out_data_67 : STD_LOGIC;
    signal fft_stage_5_0_U0_OUT_r_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_67 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_67 : STD_LOGIC;
    signal buf_2_stream_U0_ap_start : STD_LOGIC;
    signal buf_2_stream_U0_ap_done : STD_LOGIC;
    signal buf_2_stream_U0_ap_continue : STD_LOGIC;
    signal buf_2_stream_U0_ap_idle : STD_LOGIC;
    signal buf_2_stream_U0_ap_ready : STD_LOGIC;
    signal buf_2_stream_U0_out_stream_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_2_stream_U0_out_stream_V_write : STD_LOGIC;
    signal buf_2_stream_U0_output_buffer_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_2_stream_U0_output_buffer_ce0 : STD_LOGIC;
    signal input_data1_i_full_n : STD_LOGIC;
    signal input_data1_t_empty_n : STD_LOGIC;
    signal out_data_12_i_full_n : STD_LOGIC;
    signal out_data_12_t_empty_n : STD_LOGIC;
    signal out_data_23_i_full_n : STD_LOGIC;
    signal out_data_23_t_empty_n : STD_LOGIC;
    signal out_data_34_i_full_n : STD_LOGIC;
    signal out_data_34_t_empty_n : STD_LOGIC;
    signal out_data_45_i_full_n : STD_LOGIC;
    signal out_data_45_t_empty_n : STD_LOGIC;
    signal out_data_56_i_full_n : STD_LOGIC;
    signal out_data_56_t_empty_n : STD_LOGIC;
    signal out_data_67_i_full_n : STD_LOGIC;
    signal out_data_67_t_empty_n : STD_LOGIC;
    signal ctrl1_reg_c6_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_reg_c6_channel_empty_n : STD_LOGIC;
    signal ctrl1_reg_c5_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_reg_c5_channel_empty_n : STD_LOGIC;
    signal ctrl1_reg_c4_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_reg_c4_channel_empty_n : STD_LOGIC;
    signal ctrl1_reg_c3_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ctrl1_reg_c3_channel_empty_n : STD_LOGIC;
    signal ctrl1_reg_c2_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ctrl1_reg_c2_channel_empty_n : STD_LOGIC;
    signal ctrl1_reg_c1_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ctrl1_reg_c1_channel_empty_n : STD_LOGIC;
    signal ctrl1_reg_c_channel_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal ctrl1_reg_c_channel_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component FFT_R_stream_2_buf IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_stream_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_stream_V_empty_n : IN STD_LOGIC;
        in_stream_V_read : OUT STD_LOGIC;
        input_buffer_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        input_buffer_ce0 : OUT STD_LOGIC;
        input_buffer_we0 : OUT STD_LOGIC;
        input_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_reg : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_R_fft_stage_0_0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        IN_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce0 : OUT STD_LOGIC;
        IN_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        IN_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce1 : OUT STD_LOGIC;
        IN_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce0 : OUT STD_LOGIC;
        OUT_r_we0 : OUT STD_LOGIC;
        OUT_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce1 : OUT STD_LOGIC;
        OUT_r_we1 : OUT STD_LOGIC;
        OUT_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_R_fft_stage_1_0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        IN_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce0 : OUT STD_LOGIC;
        IN_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        IN_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce1 : OUT STD_LOGIC;
        IN_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce0 : OUT STD_LOGIC;
        OUT_r_we0 : OUT STD_LOGIC;
        OUT_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce1 : OUT STD_LOGIC;
        OUT_r_we1 : OUT STD_LOGIC;
        OUT_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_R_fft_stage_2_0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        IN_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce0 : OUT STD_LOGIC;
        IN_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        IN_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce1 : OUT STD_LOGIC;
        IN_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce0 : OUT STD_LOGIC;
        OUT_r_we0 : OUT STD_LOGIC;
        OUT_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce1 : OUT STD_LOGIC;
        OUT_r_we1 : OUT STD_LOGIC;
        OUT_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component FFT_R_fft_stage_3_0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        IN_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce0 : OUT STD_LOGIC;
        IN_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        IN_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce1 : OUT STD_LOGIC;
        IN_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce0 : OUT STD_LOGIC;
        OUT_r_we0 : OUT STD_LOGIC;
        OUT_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce1 : OUT STD_LOGIC;
        OUT_r_we1 : OUT STD_LOGIC;
        OUT_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component FFT_R_fft_stage_4_0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        IN_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce0 : OUT STD_LOGIC;
        IN_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        IN_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce1 : OUT STD_LOGIC;
        IN_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce0 : OUT STD_LOGIC;
        OUT_r_we0 : OUT STD_LOGIC;
        OUT_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce1 : OUT STD_LOGIC;
        OUT_r_we1 : OUT STD_LOGIC;
        OUT_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component FFT_R_fft_stage_5_0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        IN_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce0 : OUT STD_LOGIC;
        IN_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        IN_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce1 : OUT STD_LOGIC;
        IN_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce0 : OUT STD_LOGIC;
        OUT_r_we0 : OUT STD_LOGIC;
        OUT_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce1 : OUT STD_LOGIC;
        OUT_r_we1 : OUT STD_LOGIC;
        OUT_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component FFT_R_buf_2_stream IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_stream_V_full_n : IN STD_LOGIC;
        out_stream_V_write : OUT STD_LOGIC;
        output_buffer_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_buffer_ce0 : OUT STD_LOGIC;
        output_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component FFT_R_dataflow_in_loop_VITIS_LOOP_91_1_input_data1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component FFT_R_dataflow_in_loop_VITIS_LOOP_91_1_out_data_12 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_we1 : IN STD_LOGIC;
        i_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_we1 : IN STD_LOGIC;
        t_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component FFT_R_dataflow_in_loop_VITIS_LOOP_91_1_out_data_67 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_we1 : IN STD_LOGIC;
        i_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_we1 : IN STD_LOGIC;
        t_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component FFT_R_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FFT_R_fifo_w16_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FFT_R_fifo_w8_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    input_data1_U : component FFT_R_dataflow_in_loop_VITIS_LOOP_91_1_input_data1
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => stream_2_buf_U0_input_buffer_address0,
        i_ce0 => stream_2_buf_U0_input_buffer_ce0,
        i_we0 => stream_2_buf_U0_input_buffer_we0,
        i_d0 => stream_2_buf_U0_input_buffer_d0,
        i_q0 => input_data1_i_q0,
        i_address1 => ap_const_lv6_0,
        i_ce1 => ap_const_logic_0,
        i_q1 => input_data1_i_q1,
        t_address0 => fft_stage_0_0_U0_IN_r_address0,
        t_ce0 => fft_stage_0_0_U0_IN_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => input_data1_t_q0,
        t_address1 => fft_stage_0_0_U0_IN_r_address1,
        t_ce1 => fft_stage_0_0_U0_IN_r_ce1,
        t_q1 => input_data1_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => input_data1_i_full_n,
        i_write => ap_channel_done_input_data1,
        t_empty_n => input_data1_t_empty_n,
        t_read => fft_stage_0_0_U0_ap_ready);

    out_data_12_U : component FFT_R_dataflow_in_loop_VITIS_LOOP_91_1_out_data_12
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage_0_0_U0_OUT_r_address0,
        i_ce0 => fft_stage_0_0_U0_OUT_r_ce0,
        i_we0 => fft_stage_0_0_U0_OUT_r_we0,
        i_d0 => fft_stage_0_0_U0_OUT_r_d0,
        i_q0 => out_data_12_i_q0,
        i_address1 => fft_stage_0_0_U0_OUT_r_address1,
        i_ce1 => fft_stage_0_0_U0_OUT_r_ce1,
        i_we1 => fft_stage_0_0_U0_OUT_r_we1,
        i_d1 => fft_stage_0_0_U0_OUT_r_d1,
        i_q1 => out_data_12_i_q1,
        t_address0 => fft_stage_1_0_U0_IN_r_address0,
        t_ce0 => fft_stage_1_0_U0_IN_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_12_t_q0,
        t_address1 => fft_stage_1_0_U0_IN_r_address1,
        t_ce1 => fft_stage_1_0_U0_IN_r_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => out_data_12_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_12_i_full_n,
        i_write => ap_channel_done_out_data_12,
        t_empty_n => out_data_12_t_empty_n,
        t_read => fft_stage_1_0_U0_ap_ready);

    out_data_23_U : component FFT_R_dataflow_in_loop_VITIS_LOOP_91_1_out_data_12
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage_1_0_U0_OUT_r_address0,
        i_ce0 => fft_stage_1_0_U0_OUT_r_ce0,
        i_we0 => fft_stage_1_0_U0_OUT_r_we0,
        i_d0 => fft_stage_1_0_U0_OUT_r_d0,
        i_q0 => out_data_23_i_q0,
        i_address1 => fft_stage_1_0_U0_OUT_r_address1,
        i_ce1 => fft_stage_1_0_U0_OUT_r_ce1,
        i_we1 => fft_stage_1_0_U0_OUT_r_we1,
        i_d1 => fft_stage_1_0_U0_OUT_r_d1,
        i_q1 => out_data_23_i_q1,
        t_address0 => fft_stage_2_0_U0_IN_r_address0,
        t_ce0 => fft_stage_2_0_U0_IN_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_23_t_q0,
        t_address1 => fft_stage_2_0_U0_IN_r_address1,
        t_ce1 => fft_stage_2_0_U0_IN_r_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => out_data_23_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_23_i_full_n,
        i_write => ap_channel_done_out_data_23,
        t_empty_n => out_data_23_t_empty_n,
        t_read => fft_stage_2_0_U0_ap_ready);

    out_data_34_U : component FFT_R_dataflow_in_loop_VITIS_LOOP_91_1_out_data_12
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage_2_0_U0_OUT_r_address0,
        i_ce0 => fft_stage_2_0_U0_OUT_r_ce0,
        i_we0 => fft_stage_2_0_U0_OUT_r_we0,
        i_d0 => fft_stage_2_0_U0_OUT_r_d0,
        i_q0 => out_data_34_i_q0,
        i_address1 => fft_stage_2_0_U0_OUT_r_address1,
        i_ce1 => fft_stage_2_0_U0_OUT_r_ce1,
        i_we1 => fft_stage_2_0_U0_OUT_r_we1,
        i_d1 => fft_stage_2_0_U0_OUT_r_d1,
        i_q1 => out_data_34_i_q1,
        t_address0 => fft_stage_3_0_U0_IN_r_address0,
        t_ce0 => fft_stage_3_0_U0_IN_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_34_t_q0,
        t_address1 => fft_stage_3_0_U0_IN_r_address1,
        t_ce1 => fft_stage_3_0_U0_IN_r_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => out_data_34_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_34_i_full_n,
        i_write => ap_channel_done_out_data_34,
        t_empty_n => out_data_34_t_empty_n,
        t_read => fft_stage_3_0_U0_ap_ready);

    out_data_45_U : component FFT_R_dataflow_in_loop_VITIS_LOOP_91_1_out_data_12
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage_3_0_U0_OUT_r_address0,
        i_ce0 => fft_stage_3_0_U0_OUT_r_ce0,
        i_we0 => fft_stage_3_0_U0_OUT_r_we0,
        i_d0 => fft_stage_3_0_U0_OUT_r_d0,
        i_q0 => out_data_45_i_q0,
        i_address1 => fft_stage_3_0_U0_OUT_r_address1,
        i_ce1 => fft_stage_3_0_U0_OUT_r_ce1,
        i_we1 => fft_stage_3_0_U0_OUT_r_we1,
        i_d1 => fft_stage_3_0_U0_OUT_r_d1,
        i_q1 => out_data_45_i_q1,
        t_address0 => fft_stage_4_0_U0_IN_r_address0,
        t_ce0 => fft_stage_4_0_U0_IN_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_45_t_q0,
        t_address1 => fft_stage_4_0_U0_IN_r_address1,
        t_ce1 => fft_stage_4_0_U0_IN_r_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => out_data_45_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_45_i_full_n,
        i_write => ap_channel_done_out_data_45,
        t_empty_n => out_data_45_t_empty_n,
        t_read => fft_stage_4_0_U0_ap_ready);

    out_data_56_U : component FFT_R_dataflow_in_loop_VITIS_LOOP_91_1_out_data_12
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage_4_0_U0_OUT_r_address0,
        i_ce0 => fft_stage_4_0_U0_OUT_r_ce0,
        i_we0 => fft_stage_4_0_U0_OUT_r_we0,
        i_d0 => fft_stage_4_0_U0_OUT_r_d0,
        i_q0 => out_data_56_i_q0,
        i_address1 => fft_stage_4_0_U0_OUT_r_address1,
        i_ce1 => fft_stage_4_0_U0_OUT_r_ce1,
        i_we1 => fft_stage_4_0_U0_OUT_r_we1,
        i_d1 => fft_stage_4_0_U0_OUT_r_d1,
        i_q1 => out_data_56_i_q1,
        t_address0 => fft_stage_5_0_U0_IN_r_address0,
        t_ce0 => fft_stage_5_0_U0_IN_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_56_t_q0,
        t_address1 => fft_stage_5_0_U0_IN_r_address1,
        t_ce1 => fft_stage_5_0_U0_IN_r_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => out_data_56_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_56_i_full_n,
        i_write => ap_channel_done_out_data_56,
        t_empty_n => out_data_56_t_empty_n,
        t_read => fft_stage_5_0_U0_ap_ready);

    out_data_67_U : component FFT_R_dataflow_in_loop_VITIS_LOOP_91_1_out_data_67
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage_5_0_U0_OUT_r_address0,
        i_ce0 => fft_stage_5_0_U0_OUT_r_ce0,
        i_we0 => fft_stage_5_0_U0_OUT_r_we0,
        i_d0 => fft_stage_5_0_U0_OUT_r_d0,
        i_q0 => out_data_67_i_q0,
        i_address1 => fft_stage_5_0_U0_OUT_r_address1,
        i_ce1 => fft_stage_5_0_U0_OUT_r_ce1,
        i_we1 => fft_stage_5_0_U0_OUT_r_we1,
        i_d1 => fft_stage_5_0_U0_OUT_r_d1,
        t_address0 => buf_2_stream_U0_output_buffer_address0,
        t_ce0 => buf_2_stream_U0_output_buffer_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_67_t_q0,
        t_address1 => ap_const_lv6_0,
        t_ce1 => ap_const_logic_0,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_67_i_full_n,
        i_write => ap_channel_done_out_data_67,
        t_empty_n => out_data_67_t_empty_n,
        t_read => buf_2_stream_U0_ap_ready);

    stream_2_buf_U0 : component FFT_R_stream_2_buf
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => stream_2_buf_U0_ap_start,
        ap_done => stream_2_buf_U0_ap_done,
        ap_continue => stream_2_buf_U0_ap_continue,
        ap_idle => stream_2_buf_U0_ap_idle,
        ap_ready => stream_2_buf_U0_ap_ready,
        in_stream_V_dout => in_stream_V_dout,
        in_stream_V_empty_n => in_stream_V_empty_n,
        in_stream_V_read => stream_2_buf_U0_in_stream_V_read,
        input_buffer_address0 => stream_2_buf_U0_input_buffer_address0,
        input_buffer_ce0 => stream_2_buf_U0_input_buffer_ce0,
        input_buffer_we0 => stream_2_buf_U0_input_buffer_we0,
        input_buffer_d0 => stream_2_buf_U0_input_buffer_d0,
        ctrl1_reg => ctrl1_reg,
        ap_return => stream_2_buf_U0_ap_return);

    fft_stage_0_0_U0 : component FFT_R_fft_stage_0_0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_0_0_U0_ap_start,
        ap_done => fft_stage_0_0_U0_ap_done,
        ap_continue => fft_stage_0_0_U0_ap_continue,
        ap_idle => fft_stage_0_0_U0_ap_idle,
        ap_ready => fft_stage_0_0_U0_ap_ready,
        IN_r_address0 => fft_stage_0_0_U0_IN_r_address0,
        IN_r_ce0 => fft_stage_0_0_U0_IN_r_ce0,
        IN_r_q0 => input_data1_t_q0,
        IN_r_address1 => fft_stage_0_0_U0_IN_r_address1,
        IN_r_ce1 => fft_stage_0_0_U0_IN_r_ce1,
        IN_r_q1 => input_data1_t_q1,
        OUT_r_address0 => fft_stage_0_0_U0_OUT_r_address0,
        OUT_r_ce0 => fft_stage_0_0_U0_OUT_r_ce0,
        OUT_r_we0 => fft_stage_0_0_U0_OUT_r_we0,
        OUT_r_d0 => fft_stage_0_0_U0_OUT_r_d0,
        OUT_r_address1 => fft_stage_0_0_U0_OUT_r_address1,
        OUT_r_ce1 => fft_stage_0_0_U0_OUT_r_ce1,
        OUT_r_we1 => fft_stage_0_0_U0_OUT_r_we1,
        OUT_r_d1 => fft_stage_0_0_U0_OUT_r_d1,
        p_read => ctrl1_reg_c6_channel_dout,
        ap_return => fft_stage_0_0_U0_ap_return);

    fft_stage_1_0_U0 : component FFT_R_fft_stage_1_0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_1_0_U0_ap_start,
        ap_done => fft_stage_1_0_U0_ap_done,
        ap_continue => fft_stage_1_0_U0_ap_continue,
        ap_idle => fft_stage_1_0_U0_ap_idle,
        ap_ready => fft_stage_1_0_U0_ap_ready,
        IN_r_address0 => fft_stage_1_0_U0_IN_r_address0,
        IN_r_ce0 => fft_stage_1_0_U0_IN_r_ce0,
        IN_r_q0 => out_data_12_t_q0,
        IN_r_address1 => fft_stage_1_0_U0_IN_r_address1,
        IN_r_ce1 => fft_stage_1_0_U0_IN_r_ce1,
        IN_r_q1 => out_data_12_t_q1,
        OUT_r_address0 => fft_stage_1_0_U0_OUT_r_address0,
        OUT_r_ce0 => fft_stage_1_0_U0_OUT_r_ce0,
        OUT_r_we0 => fft_stage_1_0_U0_OUT_r_we0,
        OUT_r_d0 => fft_stage_1_0_U0_OUT_r_d0,
        OUT_r_address1 => fft_stage_1_0_U0_OUT_r_address1,
        OUT_r_ce1 => fft_stage_1_0_U0_OUT_r_ce1,
        OUT_r_we1 => fft_stage_1_0_U0_OUT_r_we1,
        OUT_r_d1 => fft_stage_1_0_U0_OUT_r_d1,
        p_read => ctrl1_reg_c5_channel_dout,
        ap_return => fft_stage_1_0_U0_ap_return);

    fft_stage_2_0_U0 : component FFT_R_fft_stage_2_0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_2_0_U0_ap_start,
        ap_done => fft_stage_2_0_U0_ap_done,
        ap_continue => fft_stage_2_0_U0_ap_continue,
        ap_idle => fft_stage_2_0_U0_ap_idle,
        ap_ready => fft_stage_2_0_U0_ap_ready,
        IN_r_address0 => fft_stage_2_0_U0_IN_r_address0,
        IN_r_ce0 => fft_stage_2_0_U0_IN_r_ce0,
        IN_r_q0 => out_data_23_t_q0,
        IN_r_address1 => fft_stage_2_0_U0_IN_r_address1,
        IN_r_ce1 => fft_stage_2_0_U0_IN_r_ce1,
        IN_r_q1 => out_data_23_t_q1,
        OUT_r_address0 => fft_stage_2_0_U0_OUT_r_address0,
        OUT_r_ce0 => fft_stage_2_0_U0_OUT_r_ce0,
        OUT_r_we0 => fft_stage_2_0_U0_OUT_r_we0,
        OUT_r_d0 => fft_stage_2_0_U0_OUT_r_d0,
        OUT_r_address1 => fft_stage_2_0_U0_OUT_r_address1,
        OUT_r_ce1 => fft_stage_2_0_U0_OUT_r_ce1,
        OUT_r_we1 => fft_stage_2_0_U0_OUT_r_we1,
        OUT_r_d1 => fft_stage_2_0_U0_OUT_r_d1,
        p_read => ctrl1_reg_c4_channel_dout,
        ap_return => fft_stage_2_0_U0_ap_return);

    fft_stage_3_0_U0 : component FFT_R_fft_stage_3_0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_3_0_U0_ap_start,
        ap_done => fft_stage_3_0_U0_ap_done,
        ap_continue => fft_stage_3_0_U0_ap_continue,
        ap_idle => fft_stage_3_0_U0_ap_idle,
        ap_ready => fft_stage_3_0_U0_ap_ready,
        IN_r_address0 => fft_stage_3_0_U0_IN_r_address0,
        IN_r_ce0 => fft_stage_3_0_U0_IN_r_ce0,
        IN_r_q0 => out_data_34_t_q0,
        IN_r_address1 => fft_stage_3_0_U0_IN_r_address1,
        IN_r_ce1 => fft_stage_3_0_U0_IN_r_ce1,
        IN_r_q1 => out_data_34_t_q1,
        OUT_r_address0 => fft_stage_3_0_U0_OUT_r_address0,
        OUT_r_ce0 => fft_stage_3_0_U0_OUT_r_ce0,
        OUT_r_we0 => fft_stage_3_0_U0_OUT_r_we0,
        OUT_r_d0 => fft_stage_3_0_U0_OUT_r_d0,
        OUT_r_address1 => fft_stage_3_0_U0_OUT_r_address1,
        OUT_r_ce1 => fft_stage_3_0_U0_OUT_r_ce1,
        OUT_r_we1 => fft_stage_3_0_U0_OUT_r_we1,
        OUT_r_d1 => fft_stage_3_0_U0_OUT_r_d1,
        p_read => ctrl1_reg_c3_channel_dout,
        ap_return => fft_stage_3_0_U0_ap_return);

    fft_stage_4_0_U0 : component FFT_R_fft_stage_4_0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_4_0_U0_ap_start,
        ap_done => fft_stage_4_0_U0_ap_done,
        ap_continue => fft_stage_4_0_U0_ap_continue,
        ap_idle => fft_stage_4_0_U0_ap_idle,
        ap_ready => fft_stage_4_0_U0_ap_ready,
        IN_r_address0 => fft_stage_4_0_U0_IN_r_address0,
        IN_r_ce0 => fft_stage_4_0_U0_IN_r_ce0,
        IN_r_q0 => out_data_45_t_q0,
        IN_r_address1 => fft_stage_4_0_U0_IN_r_address1,
        IN_r_ce1 => fft_stage_4_0_U0_IN_r_ce1,
        IN_r_q1 => out_data_45_t_q1,
        OUT_r_address0 => fft_stage_4_0_U0_OUT_r_address0,
        OUT_r_ce0 => fft_stage_4_0_U0_OUT_r_ce0,
        OUT_r_we0 => fft_stage_4_0_U0_OUT_r_we0,
        OUT_r_d0 => fft_stage_4_0_U0_OUT_r_d0,
        OUT_r_address1 => fft_stage_4_0_U0_OUT_r_address1,
        OUT_r_ce1 => fft_stage_4_0_U0_OUT_r_ce1,
        OUT_r_we1 => fft_stage_4_0_U0_OUT_r_we1,
        OUT_r_d1 => fft_stage_4_0_U0_OUT_r_d1,
        p_read => ctrl1_reg_c2_channel_dout,
        ap_return => fft_stage_4_0_U0_ap_return);

    fft_stage_5_0_U0 : component FFT_R_fft_stage_5_0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_5_0_U0_ap_start,
        ap_done => fft_stage_5_0_U0_ap_done,
        ap_continue => fft_stage_5_0_U0_ap_continue,
        ap_idle => fft_stage_5_0_U0_ap_idle,
        ap_ready => fft_stage_5_0_U0_ap_ready,
        IN_r_address0 => fft_stage_5_0_U0_IN_r_address0,
        IN_r_ce0 => fft_stage_5_0_U0_IN_r_ce0,
        IN_r_q0 => out_data_56_t_q0,
        IN_r_address1 => fft_stage_5_0_U0_IN_r_address1,
        IN_r_ce1 => fft_stage_5_0_U0_IN_r_ce1,
        IN_r_q1 => out_data_56_t_q1,
        OUT_r_address0 => fft_stage_5_0_U0_OUT_r_address0,
        OUT_r_ce0 => fft_stage_5_0_U0_OUT_r_ce0,
        OUT_r_we0 => fft_stage_5_0_U0_OUT_r_we0,
        OUT_r_d0 => fft_stage_5_0_U0_OUT_r_d0,
        OUT_r_address1 => fft_stage_5_0_U0_OUT_r_address1,
        OUT_r_ce1 => fft_stage_5_0_U0_OUT_r_ce1,
        OUT_r_we1 => fft_stage_5_0_U0_OUT_r_we1,
        OUT_r_d1 => fft_stage_5_0_U0_OUT_r_d1,
        p_read => ctrl1_reg_c1_channel_dout,
        ap_return => fft_stage_5_0_U0_ap_return);

    buf_2_stream_U0 : component FFT_R_buf_2_stream
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => buf_2_stream_U0_ap_start,
        ap_done => buf_2_stream_U0_ap_done,
        ap_continue => buf_2_stream_U0_ap_continue,
        ap_idle => buf_2_stream_U0_ap_idle,
        ap_ready => buf_2_stream_U0_ap_ready,
        out_stream_V_din => buf_2_stream_U0_out_stream_V_din,
        out_stream_V_full_n => out_stream_V_full_n,
        out_stream_V_write => buf_2_stream_U0_out_stream_V_write,
        output_buffer_address0 => buf_2_stream_U0_output_buffer_address0,
        output_buffer_ce0 => buf_2_stream_U0_output_buffer_ce0,
        output_buffer_q0 => out_data_67_t_q0,
        p_read => ctrl1_reg_c_channel_dout);

    ctrl1_reg_c6_channel_U : component FFT_R_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => stream_2_buf_U0_ap_return,
        if_full_n => ctrl1_reg_c6_channel_full_n,
        if_write => ap_channel_done_ctrl1_reg_c6_channel,
        if_dout => ctrl1_reg_c6_channel_dout,
        if_empty_n => ctrl1_reg_c6_channel_empty_n,
        if_read => fft_stage_0_0_U0_ap_ready);

    ctrl1_reg_c5_channel_U : component FFT_R_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_0_0_U0_ap_return,
        if_full_n => ctrl1_reg_c5_channel_full_n,
        if_write => ap_channel_done_ctrl1_reg_c5_channel,
        if_dout => ctrl1_reg_c5_channel_dout,
        if_empty_n => ctrl1_reg_c5_channel_empty_n,
        if_read => fft_stage_1_0_U0_ap_ready);

    ctrl1_reg_c4_channel_U : component FFT_R_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_1_0_U0_ap_return,
        if_full_n => ctrl1_reg_c4_channel_full_n,
        if_write => ap_channel_done_ctrl1_reg_c4_channel,
        if_dout => ctrl1_reg_c4_channel_dout,
        if_empty_n => ctrl1_reg_c4_channel_empty_n,
        if_read => fft_stage_2_0_U0_ap_ready);

    ctrl1_reg_c3_channel_U : component FFT_R_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_2_0_U0_ap_return,
        if_full_n => ctrl1_reg_c3_channel_full_n,
        if_write => ap_channel_done_ctrl1_reg_c3_channel,
        if_dout => ctrl1_reg_c3_channel_dout,
        if_empty_n => ctrl1_reg_c3_channel_empty_n,
        if_read => fft_stage_3_0_U0_ap_ready);

    ctrl1_reg_c2_channel_U : component FFT_R_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_3_0_U0_ap_return,
        if_full_n => ctrl1_reg_c2_channel_full_n,
        if_write => ap_channel_done_ctrl1_reg_c2_channel,
        if_dout => ctrl1_reg_c2_channel_dout,
        if_empty_n => ctrl1_reg_c2_channel_empty_n,
        if_read => fft_stage_4_0_U0_ap_ready);

    ctrl1_reg_c1_channel_U : component FFT_R_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_4_0_U0_ap_return,
        if_full_n => ctrl1_reg_c1_channel_full_n,
        if_write => ap_channel_done_ctrl1_reg_c1_channel,
        if_dout => ctrl1_reg_c1_channel_dout,
        if_empty_n => ctrl1_reg_c1_channel_empty_n,
        if_read => fft_stage_5_0_U0_ap_ready);

    ctrl1_reg_c_channel_U : component FFT_R_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_5_0_U0_ap_return,
        if_full_n => ctrl1_reg_c_channel_full_n,
        if_write => ap_channel_done_ctrl1_reg_c_channel,
        if_dout => ctrl1_reg_c_channel_dout,
        if_empty_n => ctrl1_reg_c_channel_empty_n,
        if_read => buf_2_stream_U0_ap_ready);





    ap_sync_reg_channel_write_ctrl1_reg_c1_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_reg_c1_channel <= ap_const_logic_0;
            else
                if (((fft_stage_4_0_U0_ap_done and fft_stage_4_0_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_reg_c1_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_reg_c1_channel <= ap_sync_channel_write_ctrl1_reg_c1_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_reg_c2_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_reg_c2_channel <= ap_const_logic_0;
            else
                if (((fft_stage_3_0_U0_ap_done and fft_stage_3_0_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_reg_c2_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_reg_c2_channel <= ap_sync_channel_write_ctrl1_reg_c2_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_reg_c3_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_reg_c3_channel <= ap_const_logic_0;
            else
                if (((fft_stage_2_0_U0_ap_done and fft_stage_2_0_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_reg_c3_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_reg_c3_channel <= ap_sync_channel_write_ctrl1_reg_c3_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_reg_c4_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_reg_c4_channel <= ap_const_logic_0;
            else
                if (((fft_stage_1_0_U0_ap_done and fft_stage_1_0_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_reg_c4_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_reg_c4_channel <= ap_sync_channel_write_ctrl1_reg_c4_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_reg_c5_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_reg_c5_channel <= ap_const_logic_0;
            else
                if (((fft_stage_0_0_U0_ap_done and fft_stage_0_0_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_reg_c5_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_reg_c5_channel <= ap_sync_channel_write_ctrl1_reg_c5_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_reg_c6_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_reg_c6_channel <= ap_const_logic_0;
            else
                if (((stream_2_buf_U0_ap_done and stream_2_buf_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_reg_c6_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_reg_c6_channel <= ap_sync_channel_write_ctrl1_reg_c6_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_reg_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_reg_c_channel <= ap_const_logic_0;
            else
                if (((fft_stage_5_0_U0_ap_done and fft_stage_5_0_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_reg_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_reg_c_channel <= ap_sync_channel_write_ctrl1_reg_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_input_data1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_input_data1 <= ap_const_logic_0;
            else
                if (((stream_2_buf_U0_ap_done and stream_2_buf_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_input_data1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_input_data1 <= ap_sync_channel_write_input_data1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_12 <= ap_const_logic_0;
            else
                if (((fft_stage_0_0_U0_ap_done and fft_stage_0_0_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_12 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_12 <= ap_sync_channel_write_out_data_12;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_23 <= ap_const_logic_0;
            else
                if (((fft_stage_1_0_U0_ap_done and fft_stage_1_0_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_23 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_23 <= ap_sync_channel_write_out_data_23;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_34 <= ap_const_logic_0;
            else
                if (((fft_stage_2_0_U0_ap_done and fft_stage_2_0_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_34 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_34 <= ap_sync_channel_write_out_data_34;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_45 <= ap_const_logic_0;
            else
                if (((fft_stage_3_0_U0_ap_done and fft_stage_3_0_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_45 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_45 <= ap_sync_channel_write_out_data_45;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_56_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_56 <= ap_const_logic_0;
            else
                if (((fft_stage_4_0_U0_ap_done and fft_stage_4_0_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_56 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_56 <= ap_sync_channel_write_out_data_56;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_67_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_67 <= ap_const_logic_0;
            else
                if (((fft_stage_5_0_U0_ap_done and fft_stage_5_0_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_67 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_67 <= ap_sync_channel_write_out_data_67;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_ctrl1_reg_c1_channel <= (fft_stage_4_0_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_reg_c1_channel xor ap_const_logic_1));
    ap_channel_done_ctrl1_reg_c2_channel <= (fft_stage_3_0_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_reg_c2_channel xor ap_const_logic_1));
    ap_channel_done_ctrl1_reg_c3_channel <= (fft_stage_2_0_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_reg_c3_channel xor ap_const_logic_1));
    ap_channel_done_ctrl1_reg_c4_channel <= (fft_stage_1_0_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_reg_c4_channel xor ap_const_logic_1));
    ap_channel_done_ctrl1_reg_c5_channel <= (fft_stage_0_0_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_reg_c5_channel xor ap_const_logic_1));
    ap_channel_done_ctrl1_reg_c6_channel <= (stream_2_buf_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_reg_c6_channel xor ap_const_logic_1));
    ap_channel_done_ctrl1_reg_c_channel <= (fft_stage_5_0_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_reg_c_channel xor ap_const_logic_1));
    ap_channel_done_input_data1 <= (stream_2_buf_U0_ap_done and (ap_sync_reg_channel_write_input_data1 xor ap_const_logic_1));
    ap_channel_done_out_data_12 <= (fft_stage_0_0_U0_ap_done and (ap_sync_reg_channel_write_out_data_12 xor ap_const_logic_1));
    ap_channel_done_out_data_23 <= (fft_stage_1_0_U0_ap_done and (ap_sync_reg_channel_write_out_data_23 xor ap_const_logic_1));
    ap_channel_done_out_data_34 <= (fft_stage_2_0_U0_ap_done and (ap_sync_reg_channel_write_out_data_34 xor ap_const_logic_1));
    ap_channel_done_out_data_45 <= (fft_stage_3_0_U0_ap_done and (ap_sync_reg_channel_write_out_data_45 xor ap_const_logic_1));
    ap_channel_done_out_data_56 <= (fft_stage_4_0_U0_ap_done and (ap_sync_reg_channel_write_out_data_56 xor ap_const_logic_1));
    ap_channel_done_out_data_67 <= (fft_stage_5_0_U0_ap_done and (ap_sync_reg_channel_write_out_data_67 xor ap_const_logic_1));
    ap_done <= buf_2_stream_U0_ap_done;
    ap_idle <= (stream_2_buf_U0_ap_idle and fft_stage_5_0_U0_ap_idle and fft_stage_4_0_U0_ap_idle and fft_stage_3_0_U0_ap_idle and fft_stage_2_0_U0_ap_idle and fft_stage_1_0_U0_ap_idle and fft_stage_0_0_U0_ap_idle and (ctrl1_reg_c_channel_empty_n xor ap_const_logic_1) and (ctrl1_reg_c1_channel_empty_n xor ap_const_logic_1) and (ctrl1_reg_c2_channel_empty_n xor ap_const_logic_1) and (ctrl1_reg_c3_channel_empty_n xor ap_const_logic_1) and (ctrl1_reg_c4_channel_empty_n xor ap_const_logic_1) and (ctrl1_reg_c5_channel_empty_n xor ap_const_logic_1) and (ctrl1_reg_c6_channel_empty_n xor ap_const_logic_1) and (out_data_67_t_empty_n xor ap_const_logic_1) and (out_data_56_t_empty_n xor ap_const_logic_1) and (out_data_45_t_empty_n xor ap_const_logic_1) and (out_data_34_t_empty_n xor ap_const_logic_1) and (out_data_23_t_empty_n xor ap_const_logic_1) and (out_data_12_t_empty_n xor ap_const_logic_1) and (input_data1_t_empty_n xor ap_const_logic_1) and buf_2_stream_U0_ap_idle);
    ap_ready <= stream_2_buf_U0_ap_ready;
    ap_sync_channel_write_ctrl1_reg_c1_channel <= ((ctrl1_reg_c1_channel_full_n and ap_channel_done_ctrl1_reg_c1_channel) or ap_sync_reg_channel_write_ctrl1_reg_c1_channel);
    ap_sync_channel_write_ctrl1_reg_c2_channel <= ((ctrl1_reg_c2_channel_full_n and ap_channel_done_ctrl1_reg_c2_channel) or ap_sync_reg_channel_write_ctrl1_reg_c2_channel);
    ap_sync_channel_write_ctrl1_reg_c3_channel <= ((ctrl1_reg_c3_channel_full_n and ap_channel_done_ctrl1_reg_c3_channel) or ap_sync_reg_channel_write_ctrl1_reg_c3_channel);
    ap_sync_channel_write_ctrl1_reg_c4_channel <= ((ctrl1_reg_c4_channel_full_n and ap_channel_done_ctrl1_reg_c4_channel) or ap_sync_reg_channel_write_ctrl1_reg_c4_channel);
    ap_sync_channel_write_ctrl1_reg_c5_channel <= ((ctrl1_reg_c5_channel_full_n and ap_channel_done_ctrl1_reg_c5_channel) or ap_sync_reg_channel_write_ctrl1_reg_c5_channel);
    ap_sync_channel_write_ctrl1_reg_c6_channel <= ((ctrl1_reg_c6_channel_full_n and ap_channel_done_ctrl1_reg_c6_channel) or ap_sync_reg_channel_write_ctrl1_reg_c6_channel);
    ap_sync_channel_write_ctrl1_reg_c_channel <= ((ctrl1_reg_c_channel_full_n and ap_channel_done_ctrl1_reg_c_channel) or ap_sync_reg_channel_write_ctrl1_reg_c_channel);
    ap_sync_channel_write_input_data1 <= ((stream_2_buf_U0_input_buffer_full_n and ap_channel_done_input_data1) or ap_sync_reg_channel_write_input_data1);
    ap_sync_channel_write_out_data_12 <= ((fft_stage_0_0_U0_OUT_r_full_n and ap_channel_done_out_data_12) or ap_sync_reg_channel_write_out_data_12);
    ap_sync_channel_write_out_data_23 <= ((fft_stage_1_0_U0_OUT_r_full_n and ap_channel_done_out_data_23) or ap_sync_reg_channel_write_out_data_23);
    ap_sync_channel_write_out_data_34 <= ((fft_stage_2_0_U0_OUT_r_full_n and ap_channel_done_out_data_34) or ap_sync_reg_channel_write_out_data_34);
    ap_sync_channel_write_out_data_45 <= ((fft_stage_3_0_U0_OUT_r_full_n and ap_channel_done_out_data_45) or ap_sync_reg_channel_write_out_data_45);
    ap_sync_channel_write_out_data_56 <= ((fft_stage_4_0_U0_OUT_r_full_n and ap_channel_done_out_data_56) or ap_sync_reg_channel_write_out_data_56);
    ap_sync_channel_write_out_data_67 <= ((fft_stage_5_0_U0_OUT_r_full_n and ap_channel_done_out_data_67) or ap_sync_reg_channel_write_out_data_67);
    buf_2_stream_U0_ap_continue <= ap_continue;
    buf_2_stream_U0_ap_start <= (out_data_67_t_empty_n and ctrl1_reg_c_channel_empty_n);
    fft_stage_0_0_U0_OUT_r_full_n <= out_data_12_i_full_n;
    fft_stage_0_0_U0_ap_continue <= (ap_sync_channel_write_out_data_12 and ap_sync_channel_write_ctrl1_reg_c5_channel);
    fft_stage_0_0_U0_ap_start <= (input_data1_t_empty_n and ctrl1_reg_c6_channel_empty_n);
    fft_stage_1_0_U0_OUT_r_full_n <= out_data_23_i_full_n;
    fft_stage_1_0_U0_ap_continue <= (ap_sync_channel_write_out_data_23 and ap_sync_channel_write_ctrl1_reg_c4_channel);
    fft_stage_1_0_U0_ap_start <= (out_data_12_t_empty_n and ctrl1_reg_c5_channel_empty_n);
    fft_stage_2_0_U0_OUT_r_full_n <= out_data_34_i_full_n;
    fft_stage_2_0_U0_ap_continue <= (ap_sync_channel_write_out_data_34 and ap_sync_channel_write_ctrl1_reg_c3_channel);
    fft_stage_2_0_U0_ap_start <= (out_data_23_t_empty_n and ctrl1_reg_c4_channel_empty_n);
    fft_stage_3_0_U0_OUT_r_full_n <= out_data_45_i_full_n;
    fft_stage_3_0_U0_ap_continue <= (ap_sync_channel_write_out_data_45 and ap_sync_channel_write_ctrl1_reg_c2_channel);
    fft_stage_3_0_U0_ap_start <= (out_data_34_t_empty_n and ctrl1_reg_c3_channel_empty_n);
    fft_stage_4_0_U0_OUT_r_full_n <= out_data_56_i_full_n;
    fft_stage_4_0_U0_ap_continue <= (ap_sync_channel_write_out_data_56 and ap_sync_channel_write_ctrl1_reg_c1_channel);
    fft_stage_4_0_U0_ap_start <= (out_data_45_t_empty_n and ctrl1_reg_c2_channel_empty_n);
    fft_stage_5_0_U0_OUT_r_full_n <= out_data_67_i_full_n;
    fft_stage_5_0_U0_ap_continue <= (ap_sync_channel_write_out_data_67 and ap_sync_channel_write_ctrl1_reg_c_channel);
    fft_stage_5_0_U0_ap_start <= (out_data_56_t_empty_n and ctrl1_reg_c1_channel_empty_n);
    in_stream_V_read <= stream_2_buf_U0_in_stream_V_read;
    out_stream_V_din <= buf_2_stream_U0_out_stream_V_din;
    out_stream_V_write <= buf_2_stream_U0_out_stream_V_write;
    stream_2_buf_U0_ap_continue <= (ap_sync_channel_write_input_data1 and ap_sync_channel_write_ctrl1_reg_c6_channel);
    stream_2_buf_U0_ap_start <= ap_start;
    stream_2_buf_U0_input_buffer_full_n <= input_data1_i_full_n;
end behav;
