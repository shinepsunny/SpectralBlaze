-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity patch_gen_VITIS_LOOP_230_3_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctrl1_reg : IN STD_LOGIC_VECTOR (31 downto 0);
    ctrl2_reg : IN STD_LOGIC_VECTOR (31 downto 0);
    pny_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    layer2_reg : IN STD_LOGIC_VECTOR (31 downto 0);
    burst_buffer11_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    burst_buffer11_ce0 : OUT STD_LOGIC;
    burst_buffer11_we0 : OUT STD_LOGIC;
    burst_buffer11_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    burst_buffer22_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    burst_buffer22_ce0 : OUT STD_LOGIC;
    burst_buffer22_we0 : OUT STD_LOGIC;
    burst_buffer22_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    in1_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in1_TVALID : IN STD_LOGIC;
    in1_TREADY : OUT STD_LOGIC;
    in1_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    in1_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    in1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in2_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in2_TVALID : IN STD_LOGIC;
    in2_TREADY : OUT STD_LOGIC;
    in2_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    in2_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    in2_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of patch_gen_VITIS_LOOP_230_3_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in1_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln1057_5_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln239_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in2_TDATA_blk_n : STD_LOGIC;
    signal p_cast1_fu_204_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast1_reg_416 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_214_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_422 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln230_fu_222_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln230_reg_427 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_i_i268_fu_226_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_i_i268_reg_432 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast_reg_437 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_cast_fu_254_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_cast_reg_443 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln230_fu_267_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln230_reg_452 : STD_LOGIC_VECTOR (7 downto 0);
    signal cmp_i_not_i_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_not_i_reg_457 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pnx_3_fu_302_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal pnx_3_reg_465 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal lhs_fu_312_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_reg_470 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1057_4_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lsx_fu_326_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_predicate_op65_read_state4 : BOOLEAN;
    signal ap_predicate_op74_read_state4 : BOOLEAN;
    signal ap_block_state4 : BOOLEAN;
    signal pnx_reg_182 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_reg_193 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln241_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln246_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lsy_fu_86 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal bitcast_ln246_fu_370_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln247_fu_394_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_i_i268_fu_226_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_i_i268_fu_226_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln241_fu_250_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lsy_cast_i_fu_273_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_i_i251_i_fu_277_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_fu_312_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_fu_312_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1525_fu_332_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_fu_336_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln239_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln241_1_fu_351_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln241_fu_355_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln246_fu_375_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln246_fu_379_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal lhs_fu_312_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_i_i268_fu_226_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_i_i268_fu_226_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component patch_gen_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    mul_8ns_8ns_16_1_1_U1 : component patch_gen_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_i_i268_fu_226_p0,
        din1 => mul_i_i268_fu_226_p1,
        dout => mul_i_i268_fu_226_p2);

    mul_8ns_8ns_16_1_1_U2 : component patch_gen_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => lhs_fu_312_p0,
        din1 => lhs_fu_312_p1,
        dout => lhs_fu_312_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln1057_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if (((icmp_ln1057_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_0_preg <= ctrl1_reg;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if (((icmp_ln1057_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_1_preg <= ctrl2_reg;
                end if; 
            end if;
        end if;
    end process;


    lsy_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                lsy_fu_86 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1057_4_fu_297_p2 = ap_const_lv1_1))) then 
                lsy_fu_86 <= add_ln230_reg_452;
            end if; 
        end if;
    end process;

    pnx_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((in2_TVALID = ap_const_logic_0) and (ap_predicate_op74_read_state4 = ap_const_boolean_1)) or ((in1_TVALID = ap_const_logic_0) and (ap_predicate_op65_read_state4 = ap_const_boolean_1)))) and (icmp_ln1057_5_fu_321_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                pnx_reg_182 <= pnx_3_reg_465;
            elsif (((icmp_ln1057_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                pnx_reg_182 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    rhs_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((in2_TVALID = ap_const_logic_0) and (ap_predicate_op74_read_state4 = ap_const_boolean_1)) or ((in1_TVALID = ap_const_logic_0) and (ap_predicate_op65_read_state4 = ap_const_boolean_1)))) and (icmp_ln1057_5_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rhs_reg_193 <= lsx_fu_326_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1057_4_fu_297_p2 = ap_const_lv1_0))) then 
                rhs_reg_193 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln230_reg_452 <= add_ln230_fu_267_p2;
                    tmp_cast_reg_443(13 downto 8) <= tmp_cast_fu_254_p3(13 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                cmp_i_not_i_reg_457 <= cmp_i_not_i_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_reg_422 <= empty_fu_214_p1;
                mul_i_i268_reg_432 <= mul_i_i268_fu_226_p2;
                p_cast1_reg_416 <= ctrl1_reg(31 downto 24);
                p_cast_reg_437 <= layer2_reg(31 downto 16);
                    zext_ln230_reg_427(7 downto 0) <= zext_ln230_fu_222_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1057_4_fu_297_p2 = ap_const_lv1_0))) then
                lhs_reg_470 <= lhs_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                pnx_3_reg_465 <= pnx_3_fu_302_p2;
            end if;
        end if;
    end process;
    zext_ln230_reg_427(15 downto 8) <= "00000000";
    tmp_cast_reg_443(7 downto 0) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in1_TVALID, in2_TVALID, ap_CS_fsm_state4, icmp_ln1057_5_fu_321_p2, ap_CS_fsm_state2, icmp_ln1057_fu_262_p2, ap_CS_fsm_state3, icmp_ln1057_4_fu_297_p2, ap_predicate_op65_read_state4, ap_predicate_op74_read_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln1057_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1057_4_fu_297_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not((((in2_TVALID = ap_const_logic_0) and (ap_predicate_op74_read_state4 = ap_const_boolean_1)) or ((in1_TVALID = ap_const_logic_0) and (ap_predicate_op65_read_state4 = ap_const_boolean_1)))) and (icmp_ln1057_5_fu_321_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not((((in2_TVALID = ap_const_logic_0) and (ap_predicate_op74_read_state4 = ap_const_boolean_1)) or ((in1_TVALID = ap_const_logic_0) and (ap_predicate_op65_read_state4 = ap_const_boolean_1)))) and (icmp_ln1057_5_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_i_i251_i_fu_277_p2 <= std_logic_vector(unsigned(mul_i_i268_reg_432) + unsigned(lsy_cast_i_fu_273_p1));
    add_ln230_fu_267_p2 <= std_logic_vector(unsigned(lsy_fu_86) + unsigned(ap_const_lv8_1));
    add_ln241_fu_355_p2 <= std_logic_vector(unsigned(tmp_cast_reg_443) + unsigned(trunc_ln241_1_fu_351_p1));
    add_ln246_fu_379_p2 <= std_logic_vector(unsigned(tmp_cast_reg_443) + unsigned(trunc_ln246_fu_375_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(in1_TVALID, in2_TVALID, ap_predicate_op65_read_state4, ap_predicate_op74_read_state4)
    begin
        if ((((in2_TVALID = ap_const_logic_0) and (ap_predicate_op74_read_state4 = ap_const_boolean_1)) or ((in1_TVALID = ap_const_logic_0) and (ap_predicate_op65_read_state4 = ap_const_boolean_1)))) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state4_assign_proc : process(in1_TVALID, in2_TVALID, ap_predicate_op65_read_state4, ap_predicate_op74_read_state4)
    begin
                ap_block_state4 <= (((in2_TVALID = ap_const_logic_0) and (ap_predicate_op74_read_state4 = ap_const_boolean_1)) or ((in1_TVALID = ap_const_logic_0) and (ap_predicate_op65_read_state4 = ap_const_boolean_1)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln1057_fu_262_p2)
    begin
        if (((icmp_ln1057_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op65_read_state4_assign_proc : process(icmp_ln1057_5_fu_321_p2, or_ln239_fu_346_p2)
    begin
                ap_predicate_op65_read_state4 <= ((or_ln239_fu_346_p2 = ap_const_lv1_1) and (icmp_ln1057_5_fu_321_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op74_read_state4_assign_proc : process(icmp_ln1057_5_fu_321_p2, or_ln239_fu_346_p2)
    begin
                ap_predicate_op74_read_state4 <= ((or_ln239_fu_346_p2 = ap_const_lv1_1) and (icmp_ln1057_5_fu_321_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln1057_fu_262_p2)
    begin
        if (((icmp_ln1057_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ctrl1_reg, ap_CS_fsm_state2, icmp_ln1057_fu_262_p2, ap_return_0_preg)
    begin
        if (((icmp_ln1057_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return_0 <= ctrl1_reg;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ctrl2_reg, ap_CS_fsm_state2, icmp_ln1057_fu_262_p2, ap_return_1_preg)
    begin
        if (((icmp_ln1057_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return_1 <= ctrl2_reg;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    bitcast_ln246_fu_370_p1 <= in1_TDATA;
    bitcast_ln247_fu_394_p1 <= in2_TDATA;

    burst_buffer11_address0_assign_proc : process(ap_CS_fsm_state4, icmp_ln1057_5_fu_321_p2, or_ln239_fu_346_p2, zext_ln241_fu_360_p1, zext_ln246_fu_384_p1)
    begin
        if (((icmp_ln1057_5_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
            if ((or_ln239_fu_346_p2 = ap_const_lv1_1)) then 
                burst_buffer11_address0 <= zext_ln246_fu_384_p1(14 - 1 downto 0);
            elsif ((or_ln239_fu_346_p2 = ap_const_lv1_0)) then 
                burst_buffer11_address0 <= zext_ln241_fu_360_p1(14 - 1 downto 0);
            else 
                burst_buffer11_address0 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            burst_buffer11_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    burst_buffer11_ce0_assign_proc : process(in1_TVALID, in2_TVALID, ap_CS_fsm_state4, icmp_ln1057_5_fu_321_p2, or_ln239_fu_346_p2, ap_predicate_op65_read_state4, ap_predicate_op74_read_state4)
    begin
        if (((not((((in2_TVALID = ap_const_logic_0) and (ap_predicate_op74_read_state4 = ap_const_boolean_1)) or ((in1_TVALID = ap_const_logic_0) and (ap_predicate_op65_read_state4 = ap_const_boolean_1)))) and (or_ln239_fu_346_p2 = ap_const_lv1_1) and (icmp_ln1057_5_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not((((in2_TVALID = ap_const_logic_0) and (ap_predicate_op74_read_state4 = ap_const_boolean_1)) or ((in1_TVALID = ap_const_logic_0) and (ap_predicate_op65_read_state4 = ap_const_boolean_1)))) and (or_ln239_fu_346_p2 = ap_const_lv1_0) and (icmp_ln1057_5_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            burst_buffer11_ce0 <= ap_const_logic_1;
        else 
            burst_buffer11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    burst_buffer11_d0_assign_proc : process(ap_CS_fsm_state4, icmp_ln1057_5_fu_321_p2, or_ln239_fu_346_p2, bitcast_ln246_fu_370_p1)
    begin
        if (((icmp_ln1057_5_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
            if ((or_ln239_fu_346_p2 = ap_const_lv1_1)) then 
                burst_buffer11_d0 <= bitcast_ln246_fu_370_p1;
            elsif ((or_ln239_fu_346_p2 = ap_const_lv1_0)) then 
                burst_buffer11_d0 <= ap_const_lv16_0;
            else 
                burst_buffer11_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            burst_buffer11_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    burst_buffer11_we0_assign_proc : process(in1_TVALID, in2_TVALID, ap_CS_fsm_state4, icmp_ln1057_5_fu_321_p2, or_ln239_fu_346_p2, ap_predicate_op65_read_state4, ap_predicate_op74_read_state4)
    begin
        if (((not((((in2_TVALID = ap_const_logic_0) and (ap_predicate_op74_read_state4 = ap_const_boolean_1)) or ((in1_TVALID = ap_const_logic_0) and (ap_predicate_op65_read_state4 = ap_const_boolean_1)))) and (or_ln239_fu_346_p2 = ap_const_lv1_1) and (icmp_ln1057_5_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not((((in2_TVALID = ap_const_logic_0) and (ap_predicate_op74_read_state4 = ap_const_boolean_1)) or ((in1_TVALID = ap_const_logic_0) and (ap_predicate_op65_read_state4 = ap_const_boolean_1)))) and (or_ln239_fu_346_p2 = ap_const_lv1_0) and (icmp_ln1057_5_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            burst_buffer11_we0 <= ap_const_logic_1;
        else 
            burst_buffer11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    burst_buffer22_address0_assign_proc : process(ap_CS_fsm_state4, icmp_ln1057_5_fu_321_p2, or_ln239_fu_346_p2, zext_ln241_fu_360_p1, zext_ln246_fu_384_p1)
    begin
        if (((icmp_ln1057_5_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
            if ((or_ln239_fu_346_p2 = ap_const_lv1_1)) then 
                burst_buffer22_address0 <= zext_ln246_fu_384_p1(14 - 1 downto 0);
            elsif ((or_ln239_fu_346_p2 = ap_const_lv1_0)) then 
                burst_buffer22_address0 <= zext_ln241_fu_360_p1(14 - 1 downto 0);
            else 
                burst_buffer22_address0 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            burst_buffer22_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    burst_buffer22_ce0_assign_proc : process(in1_TVALID, in2_TVALID, ap_CS_fsm_state4, icmp_ln1057_5_fu_321_p2, or_ln239_fu_346_p2, ap_predicate_op65_read_state4, ap_predicate_op74_read_state4)
    begin
        if (((not((((in2_TVALID = ap_const_logic_0) and (ap_predicate_op74_read_state4 = ap_const_boolean_1)) or ((in1_TVALID = ap_const_logic_0) and (ap_predicate_op65_read_state4 = ap_const_boolean_1)))) and (or_ln239_fu_346_p2 = ap_const_lv1_1) and (icmp_ln1057_5_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not((((in2_TVALID = ap_const_logic_0) and (ap_predicate_op74_read_state4 = ap_const_boolean_1)) or ((in1_TVALID = ap_const_logic_0) and (ap_predicate_op65_read_state4 = ap_const_boolean_1)))) and (or_ln239_fu_346_p2 = ap_const_lv1_0) and (icmp_ln1057_5_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            burst_buffer22_ce0 <= ap_const_logic_1;
        else 
            burst_buffer22_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    burst_buffer22_d0_assign_proc : process(ap_CS_fsm_state4, icmp_ln1057_5_fu_321_p2, or_ln239_fu_346_p2, bitcast_ln247_fu_394_p1)
    begin
        if (((icmp_ln1057_5_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
            if ((or_ln239_fu_346_p2 = ap_const_lv1_1)) then 
                burst_buffer22_d0 <= bitcast_ln247_fu_394_p1;
            elsif ((or_ln239_fu_346_p2 = ap_const_lv1_0)) then 
                burst_buffer22_d0 <= ap_const_lv16_0;
            else 
                burst_buffer22_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            burst_buffer22_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    burst_buffer22_we0_assign_proc : process(in1_TVALID, in2_TVALID, ap_CS_fsm_state4, icmp_ln1057_5_fu_321_p2, or_ln239_fu_346_p2, ap_predicate_op65_read_state4, ap_predicate_op74_read_state4)
    begin
        if (((not((((in2_TVALID = ap_const_logic_0) and (ap_predicate_op74_read_state4 = ap_const_boolean_1)) or ((in1_TVALID = ap_const_logic_0) and (ap_predicate_op65_read_state4 = ap_const_boolean_1)))) and (or_ln239_fu_346_p2 = ap_const_lv1_1) and (icmp_ln1057_5_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not((((in2_TVALID = ap_const_logic_0) and (ap_predicate_op74_read_state4 = ap_const_boolean_1)) or ((in1_TVALID = ap_const_logic_0) and (ap_predicate_op65_read_state4 = ap_const_boolean_1)))) and (or_ln239_fu_346_p2 = ap_const_lv1_0) and (icmp_ln1057_5_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            burst_buffer22_we0 <= ap_const_logic_1;
        else 
            burst_buffer22_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cmp_i_not_i_fu_282_p2 <= "1" when (unsigned(add_i_i251_i_fu_277_p2) < unsigned(p_cast_reg_437)) else "0";
    empty_fu_214_p1 <= ctrl2_reg(8 - 1 downto 0);
    icmp_ln1057_4_fu_297_p2 <= "1" when (pnx_reg_182 = empty_reg_422) else "0";
    icmp_ln1057_5_fu_321_p2 <= "1" when (rhs_reg_193 = p_cast1_reg_416) else "0";
    icmp_ln1057_fu_262_p2 <= "1" when (lsy_fu_86 = p_cast1_reg_416) else "0";
    icmp_ln239_fu_341_p2 <= "1" when (unsigned(ret_fu_336_p2) < unsigned(p_cast_reg_437)) else "0";

    in1_TDATA_blk_n_assign_proc : process(in1_TVALID, ap_CS_fsm_state4, icmp_ln1057_5_fu_321_p2, or_ln239_fu_346_p2)
    begin
        if (((or_ln239_fu_346_p2 = ap_const_lv1_1) and (icmp_ln1057_5_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in1_TDATA_blk_n <= in1_TVALID;
        else 
            in1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in1_TREADY_assign_proc : process(in1_TVALID, in2_TVALID, ap_CS_fsm_state4, ap_predicate_op65_read_state4, ap_predicate_op74_read_state4)
    begin
        if ((not((((in2_TVALID = ap_const_logic_0) and (ap_predicate_op74_read_state4 = ap_const_boolean_1)) or ((in1_TVALID = ap_const_logic_0) and (ap_predicate_op65_read_state4 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_predicate_op65_read_state4 = ap_const_boolean_1))) then 
            in1_TREADY <= ap_const_logic_1;
        else 
            in1_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in2_TDATA_blk_n_assign_proc : process(in2_TVALID, ap_CS_fsm_state4, icmp_ln1057_5_fu_321_p2, or_ln239_fu_346_p2)
    begin
        if (((or_ln239_fu_346_p2 = ap_const_lv1_1) and (icmp_ln1057_5_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in2_TDATA_blk_n <= in2_TVALID;
        else 
            in2_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in2_TREADY_assign_proc : process(in1_TVALID, in2_TVALID, ap_CS_fsm_state4, ap_predicate_op65_read_state4, ap_predicate_op74_read_state4)
    begin
        if ((not((((in2_TVALID = ap_const_logic_0) and (ap_predicate_op74_read_state4 = ap_const_boolean_1)) or ((in1_TVALID = ap_const_logic_0) and (ap_predicate_op65_read_state4 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_predicate_op74_read_state4 = ap_const_boolean_1))) then 
            in2_TREADY <= ap_const_logic_1;
        else 
            in2_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    lhs_fu_312_p0 <= lhs_fu_312_p00(8 - 1 downto 0);
    lhs_fu_312_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnx_reg_182),16));
    lhs_fu_312_p1 <= zext_ln230_reg_427(8 - 1 downto 0);
    lsx_fu_326_p2 <= std_logic_vector(unsigned(rhs_reg_193) + unsigned(ap_const_lv8_1));
    lsy_cast_i_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lsy_fu_86),16));
    mul_i_i268_fu_226_p0 <= mul_i_i268_fu_226_p00(8 - 1 downto 0);
    mul_i_i268_fu_226_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pny_2),16));
    mul_i_i268_fu_226_p1 <= mul_i_i268_fu_226_p10(8 - 1 downto 0);
    mul_i_i268_fu_226_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast1_fu_204_p4),16));
    or_ln239_fu_346_p2 <= (icmp_ln239_fu_341_p2 or cmp_i_not_i_reg_457);
    p_cast1_fu_204_p4 <= ctrl1_reg(31 downto 24);
    pnx_3_fu_302_p2 <= std_logic_vector(unsigned(pnx_reg_182) + unsigned(ap_const_lv8_1));
    ret_fu_336_p2 <= std_logic_vector(unsigned(lhs_reg_470) + unsigned(zext_ln1525_fu_332_p1));
    tmp_cast_fu_254_p3 <= (trunc_ln241_fu_250_p1 & ap_const_lv8_0);
    trunc_ln241_1_fu_351_p1 <= ret_fu_336_p2(14 - 1 downto 0);
    trunc_ln241_fu_250_p1 <= lsy_fu_86(6 - 1 downto 0);
    trunc_ln246_fu_375_p1 <= ret_fu_336_p2(14 - 1 downto 0);
    zext_ln1525_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_reg_193),16));
    zext_ln230_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast1_fu_204_p4),16));
    zext_ln241_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln241_fu_355_p2),64));
    zext_ln246_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln246_fu_379_p2),64));
end behav;
