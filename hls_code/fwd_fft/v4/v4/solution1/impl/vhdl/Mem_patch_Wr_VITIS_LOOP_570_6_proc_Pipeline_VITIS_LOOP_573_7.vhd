-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Mem_patch_Wr_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    empty : IN STD_LOGIC_VECTOR (8 downto 0);
    ifmap_CF_M_real1_load : IN STD_LOGIC_VECTOR (1023 downto 0);
    ifmap_CF_M_imag2_load : IN STD_LOGIC_VECTOR (1023 downto 0);
    fft_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    fft_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of Mem_patch_Wr_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv12_F : STD_LOGIC_VECTOR (11 downto 0) := "000000001111";
    constant ap_const_lv32_3FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111111";
    constant ap_const_lv1024_lc_2 : STD_LOGIC_VECTOR (1023 downto

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1057_fu_99_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_cast_fu_87_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1057 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln579_fu_104_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln579_reg_1066 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_116_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_reg_1071 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_1_fu_124_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_1_reg_1078 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_130_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_reg_1083 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_5_fu_138_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_5_reg_1090 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln579_fu_144_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln579_reg_1095 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_158_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_reg_1100 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_9_fu_166_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_9_reg_1107 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_172_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_reg_1112 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_13_fu_180_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_13_reg_1119 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln579_1_fu_186_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln579_1_reg_1124 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_200_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_reg_1129 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_17_fu_208_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_17_reg_1136 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_15_fu_214_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_15_reg_1141 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_21_fu_222_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_21_reg_1148 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln579_2_fu_228_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln579_2_reg_1153 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_242_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_17_reg_1158 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_25_fu_250_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_25_reg_1165 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_19_fu_256_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_19_reg_1170 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_29_fu_264_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_29_reg_1177 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_3_fu_344_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_3_reg_1182 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln579_fu_354_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln579_reg_1187 : STD_LOGIC_VECTOR (1023 downto 0);
    signal sub_ln579_7_fu_410_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_7_reg_1192 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln579_2_fu_420_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln579_2_reg_1197 : STD_LOGIC_VECTOR (1023 downto 0);
    signal sub_ln579_11_fu_489_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_11_reg_1202 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln579_4_fu_499_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln579_4_reg_1207 : STD_LOGIC_VECTOR (1023 downto 0);
    signal sub_ln579_15_fu_555_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_15_reg_1212 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln579_6_fu_565_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln579_6_reg_1217 : STD_LOGIC_VECTOR (1023 downto 0);
    signal sub_ln579_19_fu_634_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_19_reg_1222 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln579_8_fu_644_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln579_8_reg_1227 : STD_LOGIC_VECTOR (1023 downto 0);
    signal sub_ln579_23_fu_700_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_23_reg_1232 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln579_10_fu_710_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln579_10_reg_1237 : STD_LOGIC_VECTOR (1023 downto 0);
    signal sub_ln579_27_fu_779_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_27_reg_1242 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln579_12_fu_789_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln579_12_reg_1247 : STD_LOGIC_VECTOR (1023 downto 0);
    signal sub_ln579_31_fu_845_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_31_reg_1252 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln579_14_fu_855_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln579_14_reg_1257 : STD_LOGIC_VECTOR (1023 downto 0);
    signal x_fu_58 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln573_fu_270_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal empty_68_fu_112_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_67_fu_108_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_71_fu_154_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_70_fu_150_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_74_fu_196_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_73_fu_192_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_77_fu_238_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_76_fu_234_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_281_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_69_fu_288_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln579_1_fu_300_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln579_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln579_fu_313_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_2_fu_318_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_304_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln579_fu_323_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln579_2_fu_338_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln579_1_fu_331_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln579_fu_350_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal trunc_ln579_3_fu_366_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln579_1_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln579_4_fu_379_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_6_fu_384_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_fu_370_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln579_3_fu_389_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln579_5_fu_404_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln579_4_fu_397_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln579_2_fu_416_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_2_fu_426_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_72_fu_433_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln579_5_fu_445_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln579_2_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln579_8_fu_458_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_10_fu_463_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_fu_449_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln579_6_fu_468_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln579_8_fu_483_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln579_7_fu_476_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln579_4_fu_495_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal trunc_ln579_7_fu_511_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln579_3_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln579_12_fu_524_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_14_fu_529_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_fu_515_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln579_9_fu_534_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln579_11_fu_549_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln579_10_fu_542_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln579_6_fu_561_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_3_fu_571_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_75_fu_578_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln579_9_fu_590_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln579_4_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln579_16_fu_603_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_18_fu_608_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_fu_594_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln579_12_fu_613_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln579_14_fu_628_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln579_13_fu_621_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln579_8_fu_640_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal trunc_ln579_11_fu_656_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln579_5_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln579_20_fu_669_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_22_fu_674_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_fu_660_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln579_15_fu_679_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln579_17_fu_694_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln579_16_fu_687_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln579_10_fu_706_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_4_fu_716_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_78_fu_723_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln579_13_fu_735_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln579_6_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln579_24_fu_748_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_26_fu_753_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_18_fu_739_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln579_18_fu_758_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln579_20_fu_773_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln579_19_fu_766_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln579_12_fu_785_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal trunc_ln579_15_fu_801_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln579_7_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln579_28_fu_814_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln579_30_fu_819_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_20_fu_805_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln579_21_fu_824_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln579_23_fu_839_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln579_22_fu_832_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln579_14_fu_851_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln579_1_fu_861_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln579_1_fu_864_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln579_fu_870_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln579_3_fu_879_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln579_3_fu_882_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln579_1_fu_888_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln579_5_fu_897_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln579_5_fu_900_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln579_2_fu_906_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln579_7_fu_915_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln579_7_fu_918_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln579_3_fu_924_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln579_9_fu_933_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln579_9_fu_936_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln579_4_fu_942_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln579_11_fu_951_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln579_11_fu_954_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln579_5_fu_960_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln579_13_fu_969_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln579_13_fu_972_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln579_6_fu_978_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln579_15_fu_987_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln579_15_fu_990_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln579_7_fu_996_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal trunc_ln579_16_fu_1001_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln579_14_fu_983_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln579_12_fu_965_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln579_10_fu_947_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln579_8_fu_929_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln579_6_fu_911_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln579_4_fu_893_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln579_2_fu_875_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Mem_patch_Wr_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Mem_patch_Wr_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    x_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_58 <= ap_const_lv64_0;
                elsif (((icmp_ln1057_fu_99_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    x_fu_58 <= add_ln573_fu_270_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                    p_cast_reg_1057(8 downto 0) <= p_cast_fu_87_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                lshr_ln579_10_reg_1237 <= lshr_ln579_10_fu_710_p2;
                lshr_ln579_12_reg_1247 <= lshr_ln579_12_fu_789_p2;
                lshr_ln579_14_reg_1257 <= lshr_ln579_14_fu_855_p2;
                lshr_ln579_2_reg_1197 <= lshr_ln579_2_fu_420_p2;
                lshr_ln579_4_reg_1207 <= lshr_ln579_4_fu_499_p2;
                lshr_ln579_6_reg_1217 <= lshr_ln579_6_fu_565_p2;
                lshr_ln579_8_reg_1227 <= lshr_ln579_8_fu_644_p2;
                lshr_ln579_reg_1187 <= lshr_ln579_fu_354_p2;
                    sub_ln579_11_reg_1202(10 downto 1) <= sub_ln579_11_fu_489_p2(10 downto 1);
                    sub_ln579_15_reg_1212(10 downto 1) <= sub_ln579_15_fu_555_p2(10 downto 1);
                    sub_ln579_19_reg_1222(10 downto 1) <= sub_ln579_19_fu_634_p2(10 downto 1);
                    sub_ln579_23_reg_1232(10 downto 1) <= sub_ln579_23_fu_700_p2(10 downto 1);
                    sub_ln579_27_reg_1242(10 downto 1) <= sub_ln579_27_fu_779_p2(10 downto 1);
                    sub_ln579_31_reg_1252(10 downto 1) <= sub_ln579_31_fu_845_p2(10 downto 1);
                    sub_ln579_3_reg_1182(10 downto 1) <= sub_ln579_3_fu_344_p2(10 downto 1);
                    sub_ln579_7_reg_1192(10 downto 1) <= sub_ln579_7_fu_410_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_fu_99_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    or_ln579_1_reg_1124(0) <= or_ln579_1_fu_186_p2(0);    or_ln579_1_reg_1124(7 downto 2) <= or_ln579_1_fu_186_p2(7 downto 2);
                    or_ln579_2_reg_1153(7 downto 2) <= or_ln579_2_fu_228_p2(7 downto 2);
                    or_ln579_reg_1095(7 downto 1) <= or_ln579_fu_144_p2(7 downto 1);
                    sub_ln579_13_reg_1119(10 downto 5) <= sub_ln579_13_fu_180_p2(10 downto 5);
                    sub_ln579_17_reg_1136(10 downto 4) <= sub_ln579_17_fu_208_p2(10 downto 4);
                    sub_ln579_1_reg_1078(10 downto 4) <= sub_ln579_1_fu_124_p2(10 downto 4);
                    sub_ln579_21_reg_1148(10 downto 4) <= sub_ln579_21_fu_222_p2(10 downto 4);
                    sub_ln579_25_reg_1165(10 downto 6) <= sub_ln579_25_fu_250_p2(10 downto 6);
                    sub_ln579_29_reg_1177(10 downto 6) <= sub_ln579_29_fu_264_p2(10 downto 6);
                    sub_ln579_5_reg_1090(10 downto 4) <= sub_ln579_5_fu_138_p2(10 downto 4);
                    sub_ln579_9_reg_1107(10 downto 5) <= sub_ln579_9_fu_166_p2(10 downto 5);
                    tmp_11_reg_1112(10 downto 5) <= tmp_11_fu_172_p3(10 downto 5);
                    tmp_13_reg_1129(4) <= tmp_13_fu_200_p3(4);    tmp_13_reg_1129(10 downto 6) <= tmp_13_fu_200_p3(10 downto 6);
                    tmp_15_reg_1141(4) <= tmp_15_fu_214_p3(4);    tmp_15_reg_1141(10 downto 6) <= tmp_15_fu_214_p3(10 downto 6);
                    tmp_17_reg_1158(10 downto 6) <= tmp_17_fu_242_p3(10 downto 6);
                    tmp_19_reg_1170(10 downto 6) <= tmp_19_fu_256_p3(10 downto 6);
                    tmp_5_reg_1071(10 downto 4) <= tmp_5_fu_116_p3(10 downto 4);
                    tmp_7_reg_1083(10 downto 4) <= tmp_7_fu_130_p3(10 downto 4);
                    tmp_9_reg_1100(10 downto 5) <= tmp_9_fu_158_p3(10 downto 5);
                trunc_ln579_reg_1066 <= trunc_ln579_fu_104_p1;
            end if;
        end if;
    end process;
    p_cast_reg_1057(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_5_reg_1071(3 downto 0) <= "0000";
    sub_ln579_1_reg_1078(3 downto 0) <= "1111";
    tmp_7_reg_1083(3 downto 0) <= "0000";
    sub_ln579_5_reg_1090(3 downto 0) <= "1111";
    or_ln579_reg_1095(0) <= '1';
    tmp_9_reg_1100(4 downto 0) <= "10000";
    sub_ln579_9_reg_1107(4 downto 0) <= "01111";
    tmp_11_reg_1112(4 downto 0) <= "10000";
    sub_ln579_13_reg_1119(4 downto 0) <= "01111";
    or_ln579_1_reg_1124(1) <= '1';
    tmp_13_reg_1129(3 downto 0) <= "0000";
    tmp_13_reg_1129(5) <= '1';
    sub_ln579_17_reg_1136(3 downto 0) <= "1111";
    tmp_15_reg_1141(3 downto 0) <= "0000";
    tmp_15_reg_1141(5) <= '1';
    sub_ln579_21_reg_1148(3 downto 0) <= "1111";
    or_ln579_2_reg_1153(1 downto 0) <= "11";
    tmp_17_reg_1158(5 downto 0) <= "110000";
    sub_ln579_25_reg_1165(5 downto 0) <= "001111";
    tmp_19_reg_1170(5 downto 0) <= "110000";
    sub_ln579_29_reg_1177(5 downto 0) <= "001111";
    sub_ln579_3_reg_1182(0) <= '0';
    sub_ln579_7_reg_1192(0) <= '0';
    sub_ln579_11_reg_1202(0) <= '0';
    sub_ln579_15_reg_1212(0) <= '0';
    sub_ln579_19_reg_1222(0) <= '0';
    sub_ln579_23_reg_1232(0) <= '0';
    sub_ln579_27_reg_1242(0) <= '0';
    sub_ln579_31_reg_1252(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln573_fu_270_p2 <= std_logic_vector(unsigned(x_fu_58) + unsigned(ap_const_lv64_4));
    and_ln579_1_fu_888_p2 <= (lshr_ln579_3_fu_882_p2 and lshr_ln579_2_reg_1197);
    and_ln579_2_fu_906_p2 <= (lshr_ln579_5_fu_900_p2 and lshr_ln579_4_reg_1207);
    and_ln579_3_fu_924_p2 <= (lshr_ln579_7_fu_918_p2 and lshr_ln579_6_reg_1217);
    and_ln579_4_fu_942_p2 <= (lshr_ln579_9_fu_936_p2 and lshr_ln579_8_reg_1227);
    and_ln579_5_fu_960_p2 <= (lshr_ln579_11_fu_954_p2 and lshr_ln579_10_reg_1237);
    and_ln579_6_fu_978_p2 <= (lshr_ln579_13_fu_972_p2 and lshr_ln579_12_reg_1247);
    and_ln579_7_fu_996_p2 <= (lshr_ln579_15_fu_990_p2 and lshr_ln579_14_reg_1257);
    and_ln579_fu_870_p2 <= (lshr_ln579_reg_1187 and lshr_ln579_1_fu_864_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1057_fu_99_p2)
    begin
        if (((icmp_ln1057_fu_99_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_67_fu_108_p1 <= x_fu_58(7 - 1 downto 0);
    empty_68_fu_112_p1 <= x_fu_58(7 - 1 downto 0);
    empty_69_fu_288_p2 <= (tmp_1_fu_281_p3 or ap_const_lv12_F);
    empty_70_fu_150_p1 <= or_ln579_fu_144_p2(7 - 1 downto 0);
    empty_71_fu_154_p1 <= or_ln579_fu_144_p2(7 - 1 downto 0);
    empty_72_fu_433_p2 <= (tmp_2_fu_426_p3 or ap_const_lv12_F);
    empty_73_fu_192_p1 <= or_ln579_1_fu_186_p2(7 - 1 downto 0);
    empty_74_fu_196_p1 <= or_ln579_1_fu_186_p2(7 - 1 downto 0);
    empty_75_fu_578_p2 <= (tmp_3_fu_571_p3 or ap_const_lv12_F);
    empty_76_fu_234_p1 <= or_ln579_2_fu_228_p2(7 - 1 downto 0);
    empty_77_fu_238_p1 <= or_ln579_2_fu_228_p2(7 - 1 downto 0);
    empty_78_fu_723_p2 <= (tmp_4_fu_716_p3 or ap_const_lv12_F);
    fft_out <= (((((((trunc_ln579_16_fu_1001_p1 & trunc_ln579_14_fu_983_p1) & trunc_ln579_12_fu_965_p1) & trunc_ln579_10_fu_947_p1) & trunc_ln579_8_fu_929_p1) & trunc_ln579_6_fu_911_p1) & trunc_ln579_4_fu_893_p1) & trunc_ln579_2_fu_875_p1);

    fft_out_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            fft_out_ap_vld <= ap_const_logic_1;
        else 
            fft_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1057_fu_99_p2 <= "1" when (x_fu_58 = p_cast_reg_1057) else "0";
    icmp_ln579_1_fu_360_p2 <= "1" when (unsigned(tmp_1_fu_281_p3) > unsigned(empty_69_fu_288_p2)) else "0";
    icmp_ln579_2_fu_439_p2 <= "1" when (unsigned(tmp_2_fu_426_p3) > unsigned(empty_72_fu_433_p2)) else "0";
    icmp_ln579_3_fu_505_p2 <= "1" when (unsigned(tmp_2_fu_426_p3) > unsigned(empty_72_fu_433_p2)) else "0";
    icmp_ln579_4_fu_584_p2 <= "1" when (unsigned(tmp_3_fu_571_p3) > unsigned(empty_75_fu_578_p2)) else "0";
    icmp_ln579_5_fu_650_p2 <= "1" when (unsigned(tmp_3_fu_571_p3) > unsigned(empty_75_fu_578_p2)) else "0";
    icmp_ln579_6_fu_729_p2 <= "1" when (unsigned(tmp_4_fu_716_p3) > unsigned(empty_78_fu_723_p2)) else "0";
    icmp_ln579_7_fu_795_p2 <= "1" when (unsigned(tmp_4_fu_716_p3) > unsigned(empty_78_fu_723_p2)) else "0";
    icmp_ln579_fu_294_p2 <= "1" when (unsigned(tmp_1_fu_281_p3) > unsigned(empty_69_fu_288_p2)) else "0";
    lshr_ln579_10_fu_710_p2 <= std_logic_vector(shift_right(unsigned(select_ln579_16_fu_687_p3),to_integer(unsigned('0' & zext_ln579_10_fu_706_p1(31-1 downto 0)))));
    lshr_ln579_11_fu_954_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_2),to_integer(unsigned('0' & zext_ln579_11_fu_951_p1(31-1 downto 0)))));
    lshr_ln579_12_fu_789_p2 <= std_logic_vector(shift_right(unsigned(select_ln579_19_fu_766_p3),to_integer(unsigned('0' & zext_ln579_12_fu_785_p1(31-1 downto 0)))));
    lshr_ln579_13_fu_972_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_2),to_integer(unsigned('0' & zext_ln579_13_fu_969_p1(31-1 downto 0)))));
    lshr_ln579_14_fu_855_p2 <= std_logic_vector(shift_right(unsigned(select_ln579_22_fu_832_p3),to_integer(unsigned('0' & zext_ln579_14_fu_851_p1(31-1 downto 0)))));
    lshr_ln579_15_fu_990_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_2),to_integer(unsigned('0' & zext_ln579_15_fu_987_p1(31-1 downto 0)))));
    lshr_ln579_1_fu_864_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_2),to_integer(unsigned('0' & zext_ln579_1_fu_861_p1(31-1 downto 0)))));
    lshr_ln579_2_fu_420_p2 <= std_logic_vector(shift_right(unsigned(select_ln579_4_fu_397_p3),to_integer(unsigned('0' & zext_ln579_2_fu_416_p1(31-1 downto 0)))));
    lshr_ln579_3_fu_882_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_2),to_integer(unsigned('0' & zext_ln579_3_fu_879_p1(31-1 downto 0)))));
    lshr_ln579_4_fu_499_p2 <= std_logic_vector(shift_right(unsigned(select_ln579_7_fu_476_p3),to_integer(unsigned('0' & zext_ln579_4_fu_495_p1(31-1 downto 0)))));
    lshr_ln579_5_fu_900_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_2),to_integer(unsigned('0' & zext_ln579_5_fu_897_p1(31-1 downto 0)))));
    lshr_ln579_6_fu_565_p2 <= std_logic_vector(shift_right(unsigned(select_ln579_10_fu_542_p3),to_integer(unsigned('0' & zext_ln579_6_fu_561_p1(31-1 downto 0)))));
    lshr_ln579_7_fu_918_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_2),to_integer(unsigned('0' & zext_ln579_7_fu_915_p1(31-1 downto 0)))));
    lshr_ln579_8_fu_644_p2 <= std_logic_vector(shift_right(unsigned(select_ln579_13_fu_621_p3),to_integer(unsigned('0' & zext_ln579_8_fu_640_p1(31-1 downto 0)))));
    lshr_ln579_9_fu_936_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_2),to_integer(unsigned('0' & zext_ln579_9_fu_933_p1(31-1 downto 0)))));
    lshr_ln579_fu_354_p2 <= std_logic_vector(shift_right(unsigned(select_ln579_1_fu_331_p3),to_integer(unsigned('0' & zext_ln579_fu_350_p1(31-1 downto 0)))));
    or_ln579_1_fu_186_p2 <= (trunc_ln579_fu_104_p1 or ap_const_lv8_2);
    or_ln579_2_fu_228_p2 <= (trunc_ln579_fu_104_p1 or ap_const_lv8_3);
    or_ln579_fu_144_p2 <= (trunc_ln579_fu_104_p1 or ap_const_lv8_1);
    p_cast_fu_87_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty),64));
    select_ln579_10_fu_542_p3 <= 
        tmp_12_fu_515_p4 when (icmp_ln579_3_fu_505_p2(0) = '1') else 
        ifmap_CF_M_imag2_load;
    select_ln579_11_fu_549_p3 <= 
        sub_ln579_13_reg_1119 when (icmp_ln579_3_fu_505_p2(0) = '1') else 
        tmp_11_reg_1112;
    select_ln579_12_fu_613_p3 <= 
        sub_ln579_16_fu_603_p2 when (icmp_ln579_4_fu_584_p2(0) = '1') else 
        sub_ln579_18_fu_608_p2;
    select_ln579_13_fu_621_p3 <= 
        tmp_14_fu_594_p4 when (icmp_ln579_4_fu_584_p2(0) = '1') else 
        ifmap_CF_M_real1_load;
    select_ln579_14_fu_628_p3 <= 
        sub_ln579_17_reg_1136 when (icmp_ln579_4_fu_584_p2(0) = '1') else 
        tmp_13_reg_1129;
    select_ln579_15_fu_679_p3 <= 
        sub_ln579_20_fu_669_p2 when (icmp_ln579_5_fu_650_p2(0) = '1') else 
        sub_ln579_22_fu_674_p2;
    select_ln579_16_fu_687_p3 <= 
        tmp_16_fu_660_p4 when (icmp_ln579_5_fu_650_p2(0) = '1') else 
        ifmap_CF_M_imag2_load;
    select_ln579_17_fu_694_p3 <= 
        sub_ln579_21_reg_1148 when (icmp_ln579_5_fu_650_p2(0) = '1') else 
        tmp_15_reg_1141;
    select_ln579_18_fu_758_p3 <= 
        sub_ln579_24_fu_748_p2 when (icmp_ln579_6_fu_729_p2(0) = '1') else 
        sub_ln579_26_fu_753_p2;
    select_ln579_19_fu_766_p3 <= 
        tmp_18_fu_739_p4 when (icmp_ln579_6_fu_729_p2(0) = '1') else 
        ifmap_CF_M_real1_load;
    select_ln579_1_fu_331_p3 <= 
        tmp_6_fu_304_p4 when (icmp_ln579_fu_294_p2(0) = '1') else 
        ifmap_CF_M_real1_load;
    select_ln579_20_fu_773_p3 <= 
        sub_ln579_25_reg_1165 when (icmp_ln579_6_fu_729_p2(0) = '1') else 
        tmp_17_reg_1158;
    select_ln579_21_fu_824_p3 <= 
        sub_ln579_28_fu_814_p2 when (icmp_ln579_7_fu_795_p2(0) = '1') else 
        sub_ln579_30_fu_819_p2;
    select_ln579_22_fu_832_p3 <= 
        tmp_20_fu_805_p4 when (icmp_ln579_7_fu_795_p2(0) = '1') else 
        ifmap_CF_M_imag2_load;
    select_ln579_23_fu_839_p3 <= 
        sub_ln579_29_reg_1177 when (icmp_ln579_7_fu_795_p2(0) = '1') else 
        tmp_19_reg_1170;
    select_ln579_2_fu_338_p3 <= 
        sub_ln579_1_reg_1078 when (icmp_ln579_fu_294_p2(0) = '1') else 
        tmp_5_reg_1071;
    select_ln579_3_fu_389_p3 <= 
        sub_ln579_4_fu_379_p2 when (icmp_ln579_1_fu_360_p2(0) = '1') else 
        sub_ln579_6_fu_384_p2;
    select_ln579_4_fu_397_p3 <= 
        tmp_8_fu_370_p4 when (icmp_ln579_1_fu_360_p2(0) = '1') else 
        ifmap_CF_M_imag2_load;
    select_ln579_5_fu_404_p3 <= 
        sub_ln579_5_reg_1090 when (icmp_ln579_1_fu_360_p2(0) = '1') else 
        tmp_7_reg_1083;
    select_ln579_6_fu_468_p3 <= 
        sub_ln579_8_fu_458_p2 when (icmp_ln579_2_fu_439_p2(0) = '1') else 
        sub_ln579_10_fu_463_p2;
    select_ln579_7_fu_476_p3 <= 
        tmp_10_fu_449_p4 when (icmp_ln579_2_fu_439_p2(0) = '1') else 
        ifmap_CF_M_real1_load;
    select_ln579_8_fu_483_p3 <= 
        sub_ln579_9_reg_1107 when (icmp_ln579_2_fu_439_p2(0) = '1') else 
        tmp_9_reg_1100;
    select_ln579_9_fu_534_p3 <= 
        sub_ln579_12_fu_524_p2 when (icmp_ln579_3_fu_505_p2(0) = '1') else 
        sub_ln579_14_fu_529_p2;
    select_ln579_fu_323_p3 <= 
        sub_ln579_fu_313_p2 when (icmp_ln579_fu_294_p2(0) = '1') else 
        sub_ln579_2_fu_318_p2;
    sub_ln579_10_fu_463_p2 <= std_logic_vector(unsigned(trunc_ln579_5_fu_445_p1) - unsigned(tmp_9_reg_1100));
    sub_ln579_11_fu_489_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln579_6_fu_468_p3));
    sub_ln579_12_fu_524_p2 <= std_logic_vector(unsigned(tmp_11_reg_1112) - unsigned(trunc_ln579_7_fu_511_p1));
    sub_ln579_13_fu_180_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_11_fu_172_p3));
    sub_ln579_14_fu_529_p2 <= std_logic_vector(unsigned(trunc_ln579_7_fu_511_p1) - unsigned(tmp_11_reg_1112));
    sub_ln579_15_fu_555_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln579_9_fu_534_p3));
    sub_ln579_16_fu_603_p2 <= std_logic_vector(unsigned(tmp_13_reg_1129) - unsigned(trunc_ln579_9_fu_590_p1));
    sub_ln579_17_fu_208_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_13_fu_200_p3));
    sub_ln579_18_fu_608_p2 <= std_logic_vector(unsigned(trunc_ln579_9_fu_590_p1) - unsigned(tmp_13_reg_1129));
    sub_ln579_19_fu_634_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln579_12_fu_613_p3));
    sub_ln579_1_fu_124_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_5_fu_116_p3));
    sub_ln579_20_fu_669_p2 <= std_logic_vector(unsigned(tmp_15_reg_1141) - unsigned(trunc_ln579_11_fu_656_p1));
    sub_ln579_21_fu_222_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_15_fu_214_p3));
    sub_ln579_22_fu_674_p2 <= std_logic_vector(unsigned(trunc_ln579_11_fu_656_p1) - unsigned(tmp_15_reg_1141));
    sub_ln579_23_fu_700_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln579_15_fu_679_p3));
    sub_ln579_24_fu_748_p2 <= std_logic_vector(unsigned(tmp_17_reg_1158) - unsigned(trunc_ln579_13_fu_735_p1));
    sub_ln579_25_fu_250_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_17_fu_242_p3));
    sub_ln579_26_fu_753_p2 <= std_logic_vector(unsigned(trunc_ln579_13_fu_735_p1) - unsigned(tmp_17_reg_1158));
    sub_ln579_27_fu_779_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln579_18_fu_758_p3));
    sub_ln579_28_fu_814_p2 <= std_logic_vector(unsigned(tmp_19_reg_1170) - unsigned(trunc_ln579_15_fu_801_p1));
    sub_ln579_29_fu_264_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_19_fu_256_p3));
    sub_ln579_2_fu_318_p2 <= std_logic_vector(unsigned(trunc_ln579_1_fu_300_p1) - unsigned(tmp_5_reg_1071));
    sub_ln579_30_fu_819_p2 <= std_logic_vector(unsigned(trunc_ln579_15_fu_801_p1) - unsigned(tmp_19_reg_1170));
    sub_ln579_31_fu_845_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln579_21_fu_824_p3));
    sub_ln579_3_fu_344_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln579_fu_323_p3));
    sub_ln579_4_fu_379_p2 <= std_logic_vector(unsigned(tmp_7_reg_1083) - unsigned(trunc_ln579_3_fu_366_p1));
    sub_ln579_5_fu_138_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_7_fu_130_p3));
    sub_ln579_6_fu_384_p2 <= std_logic_vector(unsigned(trunc_ln579_3_fu_366_p1) - unsigned(tmp_7_reg_1083));
    sub_ln579_7_fu_410_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln579_3_fu_389_p3));
    sub_ln579_8_fu_458_p2 <= std_logic_vector(unsigned(tmp_9_reg_1100) - unsigned(trunc_ln579_5_fu_445_p1));
    sub_ln579_9_fu_166_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_9_fu_158_p3));
    sub_ln579_fu_313_p2 <= std_logic_vector(unsigned(tmp_5_reg_1071) - unsigned(trunc_ln579_1_fu_300_p1));
    
    tmp_10_fu_449_p4_proc : process(ifmap_CF_M_real1_load)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_10_fu_449_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := ifmap_CF_M_real1_load;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_10_fu_449_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_10_fu_449_p4_i) := ifmap_CF_M_real1_load(1024-1-tmp_10_fu_449_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_10_fu_449_p4 <= resvalue(1024-1 downto 0);
    end process;

    tmp_11_fu_172_p3 <= (empty_70_fu_150_p1 & ap_const_lv4_0);
    
    tmp_12_fu_515_p4_proc : process(ifmap_CF_M_imag2_load)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_12_fu_515_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := ifmap_CF_M_imag2_load;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_12_fu_515_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_12_fu_515_p4_i) := ifmap_CF_M_imag2_load(1024-1-tmp_12_fu_515_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_12_fu_515_p4 <= resvalue(1024-1 downto 0);
    end process;

    tmp_13_fu_200_p3 <= (empty_74_fu_196_p1 & ap_const_lv4_0);
    
    tmp_14_fu_594_p4_proc : process(ifmap_CF_M_real1_load)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_14_fu_594_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := ifmap_CF_M_real1_load;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_14_fu_594_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_14_fu_594_p4_i) := ifmap_CF_M_real1_load(1024-1-tmp_14_fu_594_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_14_fu_594_p4 <= resvalue(1024-1 downto 0);
    end process;

    tmp_15_fu_214_p3 <= (empty_73_fu_192_p1 & ap_const_lv4_0);
    
    tmp_16_fu_660_p4_proc : process(ifmap_CF_M_imag2_load)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_16_fu_660_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := ifmap_CF_M_imag2_load;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_16_fu_660_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_16_fu_660_p4_i) := ifmap_CF_M_imag2_load(1024-1-tmp_16_fu_660_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_16_fu_660_p4 <= resvalue(1024-1 downto 0);
    end process;

    tmp_17_fu_242_p3 <= (empty_77_fu_238_p1 & ap_const_lv4_0);
    
    tmp_18_fu_739_p4_proc : process(ifmap_CF_M_real1_load)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_18_fu_739_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := ifmap_CF_M_real1_load;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_18_fu_739_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_18_fu_739_p4_i) := ifmap_CF_M_real1_load(1024-1-tmp_18_fu_739_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_18_fu_739_p4 <= resvalue(1024-1 downto 0);
    end process;

    tmp_19_fu_256_p3 <= (empty_76_fu_234_p1 & ap_const_lv4_0);
    tmp_1_fu_281_p3 <= (trunc_ln579_reg_1066 & ap_const_lv4_0);
    
    tmp_20_fu_805_p4_proc : process(ifmap_CF_M_imag2_load)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_20_fu_805_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := ifmap_CF_M_imag2_load;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_20_fu_805_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_20_fu_805_p4_i) := ifmap_CF_M_imag2_load(1024-1-tmp_20_fu_805_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_20_fu_805_p4 <= resvalue(1024-1 downto 0);
    end process;

    tmp_2_fu_426_p3 <= (or_ln579_reg_1095 & ap_const_lv4_0);
    tmp_3_fu_571_p3 <= (or_ln579_1_reg_1124 & ap_const_lv4_0);
    tmp_4_fu_716_p3 <= (or_ln579_2_reg_1153 & ap_const_lv4_0);
    tmp_5_fu_116_p3 <= (empty_68_fu_112_p1 & ap_const_lv4_0);
    
    tmp_6_fu_304_p4_proc : process(ifmap_CF_M_real1_load)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_6_fu_304_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := ifmap_CF_M_real1_load;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_6_fu_304_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_6_fu_304_p4_i) := ifmap_CF_M_real1_load(1024-1-tmp_6_fu_304_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_6_fu_304_p4 <= resvalue(1024-1 downto 0);
    end process;

    tmp_7_fu_130_p3 <= (empty_67_fu_108_p1 & ap_const_lv4_0);
    
    tmp_8_fu_370_p4_proc : process(ifmap_CF_M_imag2_load)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_8_fu_370_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := ifmap_CF_M_imag2_load;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_8_fu_370_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_8_fu_370_p4_i) := ifmap_CF_M_imag2_load(1024-1-tmp_8_fu_370_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_8_fu_370_p4 <= resvalue(1024-1 downto 0);
    end process;

    tmp_9_fu_158_p3 <= (empty_71_fu_154_p1 & ap_const_lv4_0);
    trunc_ln579_10_fu_947_p1 <= and_ln579_4_fu_942_p2(16 - 1 downto 0);
    trunc_ln579_11_fu_656_p1 <= empty_75_fu_578_p2(11 - 1 downto 0);
    trunc_ln579_12_fu_965_p1 <= and_ln579_5_fu_960_p2(16 - 1 downto 0);
    trunc_ln579_13_fu_735_p1 <= empty_78_fu_723_p2(11 - 1 downto 0);
    trunc_ln579_14_fu_983_p1 <= and_ln579_6_fu_978_p2(16 - 1 downto 0);
    trunc_ln579_15_fu_801_p1 <= empty_78_fu_723_p2(11 - 1 downto 0);
    trunc_ln579_16_fu_1001_p1 <= and_ln579_7_fu_996_p2(16 - 1 downto 0);
    trunc_ln579_1_fu_300_p1 <= empty_69_fu_288_p2(11 - 1 downto 0);
    trunc_ln579_2_fu_875_p1 <= and_ln579_fu_870_p2(16 - 1 downto 0);
    trunc_ln579_3_fu_366_p1 <= empty_69_fu_288_p2(11 - 1 downto 0);
    trunc_ln579_4_fu_893_p1 <= and_ln579_1_fu_888_p2(16 - 1 downto 0);
    trunc_ln579_5_fu_445_p1 <= empty_72_fu_433_p2(11 - 1 downto 0);
    trunc_ln579_6_fu_911_p1 <= and_ln579_2_fu_906_p2(16 - 1 downto 0);
    trunc_ln579_7_fu_511_p1 <= empty_72_fu_433_p2(11 - 1 downto 0);
    trunc_ln579_8_fu_929_p1 <= and_ln579_3_fu_924_p2(16 - 1 downto 0);
    trunc_ln579_9_fu_590_p1 <= empty_75_fu_578_p2(11 - 1 downto 0);
    trunc_ln579_fu_104_p1 <= x_fu_58(8 - 1 downto 0);
    zext_ln579_10_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln579_17_fu_694_p3),1024));
    zext_ln579_11_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln579_23_reg_1232),1024));
    zext_ln579_12_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln579_20_fu_773_p3),1024));
    zext_ln579_13_fu_969_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln579_27_reg_1242),1024));
    zext_ln579_14_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln579_23_fu_839_p3),1024));
    zext_ln579_15_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln579_31_reg_1252),1024));
    zext_ln579_1_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln579_3_reg_1182),1024));
    zext_ln579_2_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln579_5_fu_404_p3),1024));
    zext_ln579_3_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln579_7_reg_1192),1024));
    zext_ln579_4_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln579_8_fu_483_p3),1024));
    zext_ln579_5_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln579_11_reg_1202),1024));
    zext_ln579_6_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln579_11_fu_549_p3),1024));
    zext_ln579_7_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln579_15_reg_1212),1024));
    zext_ln579_8_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln579_14_fu_628_p3),1024));
    zext_ln579_9_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln579_19_reg_1222),1024));
    zext_ln579_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln579_2_fu_338_p3),1024));
end behav;
