-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity FFT_R_fft_stage5_Pipeline_SKIP_X_w_M_real_V18 is 
    generic(
             DataWidth     : integer := 16; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 192
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of FFT_R_fft_stage5_Pipeline_SKIP_X_w_M_real_V18 is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "1000000000000000", 1 to 31=> "0000000000000000", 32 => "1000000000000000", 
    33 to 63=> "0000000000000000", 64 => "1000000000000000", 65 => "0101101010000010", 
    66 => "0000000000000000", 67 => "1010010101111101", 68 to 95=> "0000000000000000", 
    96 => "1000000000000000", 97 => "0111011001000001", 98 => "0101101010000010", 
    99 => "0011000011111011", 100 => "0000000000000000", 101 => "1100111100000100", 
    102 => "1010010101111101", 103 => "1000100110111110", 104 to 127=> "0000000000000000", 
    128 => "1000000000000000", 129 => "0111110110001010", 130 => "0111011001000001", 
    131 => "0110101001101101", 132 => "0101101010000010", 133 => "0100011100011100", 
    134 => "0011000011111011", 135 => "0001100011111000", 136 => "0000000000000000", 
    137 => "1110011100000111", 138 => "1100111100000100", 139 => "1011100011100011", 
    140 => "1010010101111101", 141 => "1001010110010010", 142 => "1000100110111110", 
    143 => "1000001001110101", 144 to 159=> "0000000000000000", 160 => "1000000000000000", 
    161 => "0111111101100010", 162 => "0111110110001010", 163 => "0111101001111101", 
    164 => "0111011001000001", 165 => "0111000011100010", 166 => "0110101001101101", 
    167 => "0110001011110001", 168 => "0101101010000010", 169 => "0101000100110011", 
    170 => "0100011100011100", 171 => "0011110001010110", 172 => "0011000011111011", 
    173 => "0010010100101000", 174 => "0001100011111000", 175 => "0000110010001011", 
    176 => "0000000000000000", 177 => "1111001101110100", 178 => "1110011100000111", 
    179 => "1101101011010111", 180 => "1100111100000100", 181 => "1100001110101001", 
    182 => "1011100011100011", 183 => "1010111011001100", 184 => "1010010101111101", 
    185 => "1001110100001110", 186 => "1001010110010010", 187 => "1000111100011101", 
    188 => "1000100110111110", 189 => "1000010110000010", 190 => "1000001001110101", 
    191 => "1000000010011101" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

