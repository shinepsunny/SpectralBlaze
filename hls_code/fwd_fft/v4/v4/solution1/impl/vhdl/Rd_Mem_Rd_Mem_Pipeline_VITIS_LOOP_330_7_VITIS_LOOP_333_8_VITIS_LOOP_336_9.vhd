-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Rd_Mem_Rd_Mem_Pipeline_VITIS_LOOP_330_7_VITIS_LOOP_333_8_VITIS_LOOP_336_9 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    col_ov_pix_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    col_ov_pix_out_V_full_n : IN STD_LOGIC;
    col_ov_pix_out_V_write : OUT STD_LOGIC;
    bound12 : IN STD_LOGIC_VECTOR (23 downto 0);
    bound4 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_partselect5 : IN STD_LOGIC_VECTOR (7 downto 0);
    cmp_i_i16171 : IN STD_LOGIC_VECTOR (0 downto 0);
    burst_buffer1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    burst_buffer1_ce0 : OUT STD_LOGIC;
    burst_buffer1_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    burst_buffer2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    burst_buffer2_ce0 : OUT STD_LOGIC;
    burst_buffer2_q0 : IN STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of Rd_Mem_Rd_Mem_Pipeline_VITIS_LOOP_330_7_VITIS_LOOP_333_8_VITIS_LOOP_336_9 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv36_F : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000001111";
    constant ap_const_lv65_1 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv58_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1057_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal col_ov_pix_out_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal rd_j_1_load_reg_593 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_load_reg_598 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1057_1_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_1_reg_603 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln281_1_fu_249_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln281_1_reg_608 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln333_fu_256_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln333_reg_613 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln342_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln342_reg_618 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_396_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln_reg_633 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln130_fu_417_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln130_reg_638 : STD_LOGIC_VECTOR (64 downto 0);
    signal icmp_ln130_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln130_reg_643 : STD_LOGIC_VECTOR (0 downto 0);
    signal burst_buffer1_load_reg_648 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln130_fu_460_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln130_reg_653 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln130_fu_486_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln130_reg_659 : STD_LOGIC_VECTOR (127 downto 0);
    signal burst_buffer2_load_reg_665 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln54_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_fu_94 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_1_fu_302_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal rd_i_1_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal rd_i_fu_445_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rd_j_1_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal rd_j_fu_282_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_fu_106 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1057_1_fu_262_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten7_fu_110 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1057_2_fu_316_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten25_fu_114 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1057_1_fu_213_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln1057_2_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln281_fu_236_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal rd_j_2_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln336_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln336_fu_290_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1057_fu_310_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln54_1_fu_355_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln54_fu_352_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln281_2_fu_358_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1057_fu_365_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_cast_fu_372_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln54_2_fu_380_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln54_fu_384_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln130_fu_403_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln130_1_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln130_1_fu_413_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_fu_423_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal add_ln343_fu_439_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln130_fu_457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln130_2_fu_464_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln130_fu_467_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln130_fu_473_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln130_1_fu_480_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln130_fu_492_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln130_fu_496_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln130_1_fu_505_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln130_1_fu_509_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln130_1_fu_514_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln130_fu_501_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Rd_Mem_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Rd_Mem_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten25_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten25_fu_114 <= ap_const_lv24_0;
                elsif (((icmp_ln1057_fu_208_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten25_fu_114 <= add_ln1057_1_fu_213_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten7_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten7_fu_110 <= ap_const_lv16_0;
                elsif (((icmp_ln1057_fu_208_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten7_fu_110 <= select_ln1057_2_fu_316_p3;
                end if;
            end if; 
        end if;
    end process;

    rd_i_1_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    rd_i_1_fu_98 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    rd_i_1_fu_98 <= rd_i_fu_445_p3;
                end if;
            end if; 
        end if;
    end process;

    rd_j_1_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    rd_j_1_fu_102 <= ap_const_lv32_0;
                elsif (((icmp_ln1057_fu_208_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    rd_j_1_fu_102 <= rd_j_fu_282_p3;
                end if;
            end if; 
        end if;
    end process;

    x_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_94 <= ap_const_lv8_0;
                elsif (((icmp_ln1057_fu_208_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    x_fu_94 <= x_1_fu_302_p3;
                end if;
            end if; 
        end if;
    end process;

    y_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_106 <= ap_const_lv8_0;
                elsif (((icmp_ln1057_fu_208_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    y_fu_106 <= select_ln1057_1_fu_262_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                    add_ln130_reg_638(64 downto 4) <= add_ln130_fu_417_p2(64 downto 4);
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                burst_buffer1_load_reg_648 <= burst_buffer1_q0;
                burst_buffer2_load_reg_665 <= burst_buffer2_q0;
                icmp_ln130_reg_643 <= icmp_ln130_fu_433_p2;
                    shl_ln_reg_633(35 downto 4) <= shl_ln_fu_396_p3(35 downto 4);
                sub_ln130_reg_659 <= sub_ln130_fu_486_p2;
                    zext_ln130_reg_653(63 downto 4) <= zext_ln130_fu_460_p1(63 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_fu_208_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln333_reg_613 <= add_ln333_fu_256_p2;
                icmp_ln1057_1_reg_603 <= icmp_ln1057_1_fu_231_p2;
                icmp_ln342_reg_618 <= icmp_ln342_fu_276_p2;
                rd_j_1_load_reg_593 <= rd_j_1_fu_102;
                select_ln281_1_reg_608 <= select_ln281_1_fu_249_p3;
                y_load_reg_598 <= y_fu_106;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    shl_ln_reg_633(3 downto 0) <= "0000";
    add_ln130_reg_638(3 downto 0) <= "0000";
    zext_ln130_reg_653(3 downto 0) <= "0000";
    zext_ln130_reg_653(127 downto 64) <= "0000000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1057_1_fu_213_p2 <= std_logic_vector(unsigned(indvar_flatten25_fu_114) + unsigned(ap_const_lv24_1));
    add_ln1057_fu_310_p2 <= std_logic_vector(unsigned(indvar_flatten7_fu_110) + unsigned(ap_const_lv16_1));
    add_ln130_fu_417_p2 <= std_logic_vector(unsigned(zext_ln130_1_fu_413_p1) + unsigned(ap_const_lv65_1));
    add_ln333_fu_256_p2 <= std_logic_vector(unsigned(select_ln281_fu_236_p3) + unsigned(ap_const_lv8_1));
    add_ln336_fu_290_p2 <= std_logic_vector(unsigned(x_fu_94) + unsigned(ap_const_lv8_1));
    add_ln343_fu_439_p2 <= std_logic_vector(unsigned(rd_i_1_fu_98) + unsigned(ap_const_lv32_1));
    add_ln54_fu_384_p2 <= std_logic_vector(unsigned(tmp_3_cast_fu_372_p3) + unsigned(trunc_ln54_2_fu_380_p1));
    and_ln130_1_fu_505_p2 <= (sub_ln130_reg_659 and burst_buffer2_load_reg_665);
    and_ln130_fu_492_p2 <= (sub_ln130_reg_659 and burst_buffer1_load_reg_648);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter4, col_ov_pix_out_V_full_n)
    begin
                ap_block_pp0_stage0_01001 <= ((col_ov_pix_out_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, col_ov_pix_out_V_full_n)
    begin
                ap_block_pp0_stage0_11001 <= ((col_ov_pix_out_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, col_ov_pix_out_V_full_n)
    begin
                ap_block_pp0_stage0_subdone <= ((col_ov_pix_out_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter4_assign_proc : process(col_ov_pix_out_V_full_n)
    begin
                ap_block_state5_pp0_stage0_iter4 <= (col_ov_pix_out_V_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1057_fu_208_p2)
    begin
        if (((icmp_ln1057_fu_208_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    burst_buffer1_address0 <= zext_ln54_fu_390_p1(11 - 1 downto 0);

    burst_buffer1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            burst_buffer1_ce0 <= ap_const_logic_1;
        else 
            burst_buffer1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    burst_buffer2_address0 <= zext_ln54_fu_390_p1(11 - 1 downto 0);

    burst_buffer2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            burst_buffer2_ce0 <= ap_const_logic_1;
        else 
            burst_buffer2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    col_ov_pix_out_V_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, col_ov_pix_out_V_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            col_ov_pix_out_V_blk_n <= col_ov_pix_out_V_full_n;
        else 
            col_ov_pix_out_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    col_ov_pix_out_V_din <= (trunc_ln130_1_fu_514_p1 & trunc_ln130_fu_501_p1);

    col_ov_pix_out_V_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            col_ov_pix_out_V_write <= ap_const_logic_1;
        else 
            col_ov_pix_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1057_1_fu_231_p2 <= "1" when (indvar_flatten7_fu_110 = bound4) else "0";
    icmp_ln1057_2_fu_244_p2 <= "1" when (x_fu_94 = p_partselect5) else "0";
    icmp_ln1057_fu_208_p2 <= "1" when (indvar_flatten25_fu_114 = bound12) else "0";
    icmp_ln130_fu_433_p2 <= "0" when (tmp_fu_423_p4 = ap_const_lv58_0) else "1";
    icmp_ln342_fu_276_p2 <= "1" when (rd_j_2_fu_270_p2 = ap_const_lv32_8) else "0";
    lshr_ln130_1_fu_509_p2 <= std_logic_vector(shift_right(unsigned(and_ln130_1_fu_505_p2),to_integer(unsigned('0' & zext_ln130_reg_653(31-1 downto 0)))));
    lshr_ln130_fu_496_p2 <= std_logic_vector(shift_right(unsigned(and_ln130_fu_492_p2),to_integer(unsigned('0' & zext_ln130_reg_653(31-1 downto 0)))));
    or_ln130_fu_403_p2 <= (shl_ln_fu_396_p3 or ap_const_lv36_F);
    or_ln336_fu_296_p2 <= (select_ln281_1_fu_249_p3 or icmp_ln1057_1_fu_231_p2);
    rd_i_fu_445_p3 <= 
        add_ln343_fu_439_p2 when (icmp_ln342_reg_618(0) = '1') else 
        rd_i_1_fu_98;
    rd_j_2_fu_270_p2 <= std_logic_vector(unsigned(rd_j_1_fu_102) + unsigned(ap_const_lv32_1));
    rd_j_fu_282_p3 <= 
        ap_const_lv32_0 when (icmp_ln342_fu_276_p2(0) = '1') else 
        rd_j_2_fu_270_p2;
    select_ln1057_1_fu_262_p3 <= 
        add_ln333_fu_256_p2 when (select_ln281_1_fu_249_p3(0) = '1') else 
        select_ln281_fu_236_p3;
    select_ln1057_2_fu_316_p3 <= 
        ap_const_lv16_1 when (icmp_ln1057_1_fu_231_p2(0) = '1') else 
        add_ln1057_fu_310_p2;
    select_ln1057_fu_365_p3 <= 
        trunc_ln54_fu_352_p1 when (select_ln281_1_reg_608(0) = '1') else 
        select_ln281_2_fu_358_p3;
    select_ln130_fu_473_p3 <= 
        ap_const_lv128_lc_1 when (icmp_ln130_reg_643(0) = '1') else 
        shl_ln130_fu_467_p2;
    select_ln281_1_fu_249_p3 <= 
        cmp_i_i16171 when (icmp_ln1057_1_fu_231_p2(0) = '1') else 
        icmp_ln1057_2_fu_244_p2;
    select_ln281_2_fu_358_p3 <= 
        ap_const_lv6_0 when (icmp_ln1057_1_reg_603(0) = '1') else 
        trunc_ln54_1_fu_355_p1;
    select_ln281_fu_236_p3 <= 
        ap_const_lv8_0 when (icmp_ln1057_1_fu_231_p2(0) = '1') else 
        y_fu_106;
        sext_ln130_1_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln130_fu_403_p2),64));

        sext_ln130_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_reg_633),64));

    shl_ln130_1_fu_480_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln130_fu_460_p1(31-1 downto 0)))));
    shl_ln130_fu_467_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln130_2_fu_464_p1(31-1 downto 0)))));
    shl_ln_fu_396_p3 <= (rd_j_1_load_reg_593 & ap_const_lv4_0);
    sub_ln130_fu_486_p2 <= std_logic_vector(unsigned(select_ln130_fu_473_p3) - unsigned(shl_ln130_1_fu_480_p2));
    tmp_3_cast_fu_372_p3 <= (select_ln1057_fu_365_p3 & ap_const_lv5_0);
    tmp_fu_423_p4 <= add_ln130_fu_417_p2(64 downto 7);
    trunc_ln130_1_fu_514_p1 <= lshr_ln130_1_fu_509_p2(16 - 1 downto 0);
    trunc_ln130_fu_501_p1 <= lshr_ln130_fu_496_p2(16 - 1 downto 0);
    trunc_ln54_1_fu_355_p1 <= y_load_reg_598(6 - 1 downto 0);
    trunc_ln54_2_fu_380_p1 <= rd_i_1_fu_98(11 - 1 downto 0);
    trunc_ln54_fu_352_p1 <= add_ln333_reg_613(6 - 1 downto 0);
    x_1_fu_302_p3 <= 
        ap_const_lv8_1 when (or_ln336_fu_296_p2(0) = '1') else 
        add_ln336_fu_290_p2;
    zext_ln130_1_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln130_1_fu_409_p1),65));
    zext_ln130_2_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_reg_638),128));
    zext_ln130_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln130_fu_457_p1),128));
    zext_ln54_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_fu_384_p2),64));
end behav;
