-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Mem_patch_Wr_Mem_patch_Wr_Pipeline_VITIS_LOOP_561_4_VITIS_LOOP_564_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    c_fft_col_op_st_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    c_fft_col_op_st_V_empty_n : IN STD_LOGIC;
    c_fft_col_op_st_V_read : OUT STD_LOGIC;
    bound : IN STD_LOGIC_VECTOR (15 downto 0);
    p_partselect2 : IN STD_LOGIC_VECTOR (7 downto 0);
    ifmap_CF_M_real_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ifmap_CF_M_real_ce0 : OUT STD_LOGIC;
    ifmap_CF_M_real_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ifmap_CF_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifmap_CF_M_imag_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ifmap_CF_M_imag_ce0 : OUT STD_LOGIC;
    ifmap_CF_M_imag_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ifmap_CF_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Mem_patch_Wr_Mem_patch_Wr_Pipeline_VITIS_LOOP_561_4_VITIS_LOOP_564_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1057_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal c_fft_col_op_st_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln546_fu_220_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln546_reg_553 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln546_reg_553_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln567_fu_236_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln567_reg_559 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln567_reg_559_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln546_fu_270_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln546_reg_564 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln145_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln145_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln145_fu_296_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln145_reg_577 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln145_fu_322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln145_reg_583 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln145_1_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln145_1_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln145_7_fu_334_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln145_7_reg_596 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln145_3_fu_360_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln145_3_reg_602 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln567_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fu_88 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_y_load : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln564_fu_242_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_fu_92 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_x_load : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln546_1_fu_198_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_fu_96 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1057_fu_166_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln145_2_fu_451_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1057_2_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln561_fu_178_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln567_mid2_v_fu_206_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln546_fu_190_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln567_fu_224_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_cast_fu_228_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln546_fu_216_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln145_cast_mid2_v_fu_263_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln145_fu_276_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln145_fu_304_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln145_2_fu_310_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln145_2_fu_300_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln145_3_fu_318_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln145_1_fu_280_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln145_2_fu_342_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln145_6_fu_348_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln145_9_fu_338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln145_10_fu_356_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln145_1_fu_371_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln145_fu_374_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln145_1_fu_380_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln145_1_fu_386_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_400_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln145_4_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln145_5_fu_396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln145_1_fu_415_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln145_fu_421_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln145_3_fu_409_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln145_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_440_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln145_6_fu_447_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln145_8_fu_459_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln145_4_fu_462_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln145_5_fu_468_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln145_3_fu_474_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_488_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln145_11_fu_480_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln145_12_fu_484_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln145_4_fu_503_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln145_1_fu_509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln145_7_fu_497_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln145_2_fu_515_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Mem_patch_Wr_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Mem_patch_Wr_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1057_fu_160_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_96 <= add_ln1057_fu_166_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_96 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;

    x_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1057_fu_160_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    x_fu_92 <= select_ln546_1_fu_198_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_92 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    y_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1057_fu_160_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    y_fu_88 <= add_ln564_fu_242_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_88 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_fu_160_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln567_reg_559 <= add_ln567_fu_236_p2;
                trunc_ln546_reg_553 <= trunc_ln546_fu_220_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln567_reg_559_pp0_iter1_reg <= add_ln567_reg_559;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln145_1_reg_589 <= icmp_ln145_1_fu_328_p2;
                icmp_ln145_reg_570 <= icmp_ln145_fu_290_p2;
                    or_ln546_reg_564(4) <= or_ln546_fu_270_p2(4);
                shl_ln145_3_reg_602 <= shl_ln145_3_fu_360_p2;
                shl_ln145_reg_583 <= shl_ln145_fu_322_p2;
                trunc_ln546_reg_553_pp0_iter1_reg <= trunc_ln546_reg_553;
                    zext_ln145_7_reg_596(4) <= zext_ln145_7_fu_334_p1(4);
                    zext_ln145_reg_577(4) <= zext_ln145_fu_296_p1(4);
            end if;
        end if;
    end process;
    or_ln546_reg_564(3 downto 0) <= "1111";
    zext_ln145_reg_577(3 downto 0) <= "0000";
    zext_ln145_reg_577(5) <= '0';
    zext_ln145_7_reg_596(3 downto 0) <= "0000";
    zext_ln145_7_reg_596(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1057_fu_166_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv16_1));
    add_ln561_fu_178_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_x_load) + unsigned(ap_const_lv8_1));
    add_ln564_fu_242_p2 <= std_logic_vector(unsigned(select_ln546_fu_190_p3) + unsigned(ap_const_lv8_1));
    add_ln567_fu_236_p2 <= std_logic_vector(unsigned(tmp_11_cast_fu_228_p3) + unsigned(zext_ln546_fu_216_p1));
    and_ln145_2_fu_515_p2 <= (shl_ln145_4_fu_503_p2 and lshr_ln145_1_fu_509_p2);
    and_ln145_cast_mid2_v_fu_263_p3 <= (trunc_ln546_reg_553 & ap_const_lv4_0);
    and_ln145_fu_427_p2 <= (shl_ln145_1_fu_415_p2 and lshr_ln145_fu_421_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, c_fft_col_op_st_V_empty_n)
    begin
                ap_block_pp0_stage0_11001 <= ((c_fft_col_op_st_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, c_fft_col_op_st_V_empty_n)
    begin
                ap_block_pp0_stage0_subdone <= ((c_fft_col_op_st_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(c_fft_col_op_st_V_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (c_fft_col_op_st_V_empty_n = ap_const_logic_0);
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1057_fu_160_p2)
    begin
        if (((icmp_ln1057_fu_160_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_96)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_96;
        end if; 
    end process;


    ap_sig_allocacmp_x_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, x_fu_92)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_x_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_x_load <= x_fu_92;
        end if; 
    end process;


    ap_sig_allocacmp_y_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, y_fu_88, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_y_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_y_load <= y_fu_88;
        end if; 
    end process;


    c_fft_col_op_st_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, c_fft_col_op_st_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c_fft_col_op_st_V_blk_n <= c_fft_col_op_st_V_empty_n;
        else 
            c_fft_col_op_st_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    c_fft_col_op_st_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c_fft_col_op_st_V_read <= ap_const_logic_1;
        else 
            c_fft_col_op_st_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1057_2_fu_184_p2 <= "1" when (ap_sig_allocacmp_y_load = p_partselect2) else "0";
    icmp_ln1057_fu_160_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = bound) else "0";
    icmp_ln145_1_fu_328_p2 <= "1" when (unsigned(and_ln145_cast_mid2_v_fu_263_p3) > unsigned(or_ln546_fu_270_p2)) else "0";
    icmp_ln145_fu_290_p2 <= "1" when (unsigned(and_ln145_cast_mid2_v_fu_263_p3) > unsigned(or_ln546_fu_270_p2)) else "0";
    ifmap_CF_M_imag_address0 <= zext_ln567_fu_366_p1(11 - 1 downto 0);

    ifmap_CF_M_imag_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ifmap_CF_M_imag_ce0 <= ap_const_logic_1;
        else 
            ifmap_CF_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifmap_CF_M_imag_d0 <= (select_ln145_7_fu_497_p3 and and_ln145_2_fu_515_p2);

    ifmap_CF_M_imag_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, shl_ln145_2_fu_451_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ifmap_CF_M_imag_we0 <= shl_ln145_2_fu_451_p2;
        else 
            ifmap_CF_M_imag_we0 <= ap_const_lv4_0;
        end if; 
    end process;

    ifmap_CF_M_real_address0 <= zext_ln567_fu_366_p1(11 - 1 downto 0);

    ifmap_CF_M_real_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ifmap_CF_M_real_ce0 <= ap_const_logic_1;
        else 
            ifmap_CF_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifmap_CF_M_real_d0 <= (select_ln145_3_fu_409_p3 and and_ln145_fu_427_p2);

    ifmap_CF_M_real_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, shl_ln145_2_fu_451_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ifmap_CF_M_real_we0 <= shl_ln145_2_fu_451_p2;
        else 
            ifmap_CF_M_real_we0 <= ap_const_lv4_0;
        end if; 
    end process;

    lshr_ln145_1_fu_509_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln145_12_fu_484_p1(31-1 downto 0)))));
    lshr_ln145_fu_421_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln145_5_fu_396_p1(31-1 downto 0)))));
    or_ln546_fu_270_p2 <= (ap_const_lv5_F or and_ln145_cast_mid2_v_fu_263_p3);
    select_ln145_1_fu_380_p3 <= 
        zext_ln145_1_fu_371_p1 when (icmp_ln145_reg_570(0) = '1') else 
        zext_ln145_reg_577;
    select_ln145_2_fu_310_p3 <= 
        xor_ln145_fu_304_p2 when (icmp_ln145_fu_290_p2(0) = '1') else 
        zext_ln145_fu_296_p1;
    select_ln145_3_fu_409_p3 <= 
        tmp_fu_400_p4 when (icmp_ln145_reg_570(0) = '1') else 
        shl_ln145_reg_583;
    select_ln145_4_fu_462_p3 <= 
        zext_ln145_7_reg_596 when (icmp_ln145_1_reg_589(0) = '1') else 
        zext_ln145_8_fu_459_p1;
    select_ln145_5_fu_468_p3 <= 
        zext_ln145_8_fu_459_p1 when (icmp_ln145_1_reg_589(0) = '1') else 
        zext_ln145_7_reg_596;
    select_ln145_6_fu_348_p3 <= 
        xor_ln145_2_fu_342_p2 when (icmp_ln145_1_fu_328_p2(0) = '1') else 
        zext_ln145_7_fu_334_p1;
    select_ln145_7_fu_497_p3 <= 
        tmp_2_fu_488_p4 when (icmp_ln145_1_reg_589(0) = '1') else 
        shl_ln145_3_reg_602;
    select_ln145_fu_374_p3 <= 
        zext_ln145_reg_577 when (icmp_ln145_reg_570(0) = '1') else 
        zext_ln145_1_fu_371_p1;
    select_ln546_1_fu_198_p3 <= 
        add_ln561_fu_178_p2 when (icmp_ln1057_2_fu_184_p2(0) = '1') else 
        ap_sig_allocacmp_x_load;
    select_ln546_fu_190_p3 <= 
        ap_const_lv8_0 when (icmp_ln1057_2_fu_184_p2(0) = '1') else 
        ap_sig_allocacmp_y_load;
    shl_ln145_1_fu_415_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln145_4_fu_392_p1(31-1 downto 0)))));
    shl_ln145_2_fu_451_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_3),to_integer(unsigned('0' & zext_ln145_6_fu_447_p1(4-1 downto 0)))));
    shl_ln145_3_fu_360_p2 <= std_logic_vector(shift_left(unsigned(zext_ln145_9_fu_338_p1),to_integer(unsigned('0' & zext_ln145_10_fu_356_p1(31-1 downto 0)))));
    shl_ln145_4_fu_503_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln145_11_fu_480_p1(31-1 downto 0)))));
    shl_ln145_fu_322_p2 <= std_logic_vector(shift_left(unsigned(zext_ln145_2_fu_300_p1),to_integer(unsigned('0' & zext_ln145_3_fu_318_p1(31-1 downto 0)))));
    tmp_11_cast_fu_228_p3 <= (trunc_ln567_fu_224_p1 & ap_const_lv5_0);
    tmp_1_fu_440_p3 <= (trunc_ln546_reg_553_pp0_iter1_reg & ap_const_lv1_0);
    
    tmp_2_fu_488_p4_proc : process(shl_ln145_3_reg_602)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_2_fu_488_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := shl_ln145_3_reg_602;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_2_fu_488_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_2_fu_488_p4_i) := shl_ln145_3_reg_602(32-1-tmp_2_fu_488_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_2_fu_488_p4 <= resvalue(32-1 downto 0);
    end process;

    
    tmp_fu_400_p4_proc : process(shl_ln145_reg_583)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_fu_400_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := shl_ln145_reg_583;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_fu_400_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_fu_400_p4_i) := shl_ln145_reg_583(32-1-tmp_fu_400_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_400_p4 <= resvalue(32-1 downto 0);
    end process;

    trunc_ln145_1_fu_280_p4 <= c_fft_col_op_st_V_dout(31 downto 16);
    trunc_ln145_fu_276_p1 <= c_fft_col_op_st_V_dout(16 - 1 downto 0);
    trunc_ln546_fu_220_p1 <= select_ln546_1_fu_198_p3(1 - 1 downto 0);
    trunc_ln567_fu_224_p1 <= select_ln546_fu_190_p3(6 - 1 downto 0);
    xor_ln145_1_fu_386_p2 <= (select_ln145_fu_374_p3 xor ap_const_lv6_1F);
    xor_ln145_2_fu_342_p2 <= (zext_ln145_7_fu_334_p1 xor ap_const_lv6_1F);
    xor_ln145_3_fu_474_p2 <= (select_ln145_4_fu_462_p3 xor ap_const_lv6_1F);
    xor_ln145_fu_304_p2 <= (zext_ln145_fu_296_p1 xor ap_const_lv6_1F);
    zext_ln145_10_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln145_6_fu_348_p3),32));
    zext_ln145_11_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln145_5_fu_468_p3),32));
    zext_ln145_12_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln145_3_fu_474_p2),32));
    zext_ln145_1_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln546_reg_564),6));
    zext_ln145_2_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln145_fu_276_p1),32));
    zext_ln145_3_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln145_2_fu_310_p3),32));
    zext_ln145_4_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln145_1_fu_380_p3),32));
    zext_ln145_5_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln145_1_fu_386_p2),32));
    zext_ln145_6_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_440_p3),4));
    zext_ln145_7_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln145_cast_mid2_v_fu_263_p3),6));
    zext_ln145_8_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln546_reg_564),6));
    zext_ln145_9_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln145_1_fu_280_p4),32));
    zext_ln145_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln145_cast_mid2_v_fu_263_p3),6));
    zext_ln546_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln567_mid2_v_fu_206_p4),11));
    zext_ln567_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln567_reg_559_pp0_iter1_reg),64));
    zext_ln567_mid2_v_fu_206_p4 <= select_ln546_1_fu_198_p3(7 downto 1);
end behav;
