-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fwd_fft_fft16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    c_ifmap_col_op_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    c_ifmap_col_op_st_empty_n : IN STD_LOGIC;
    c_ifmap_col_op_st_read : OUT STD_LOGIC;
    c_fft_row_op_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_fft_row_op_st_full_n : IN STD_LOGIC;
    c_fft_row_op_st_write : OUT STD_LOGIC;
    ctrl1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ctrl1_reg_empty_n : IN STD_LOGIC;
    ctrl1_reg_read : OUT STD_LOGIC;
    ctrl1_reg_c191_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctrl1_reg_c191_full_n : IN STD_LOGIC;
    ctrl1_reg_c191_write : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of fwd_fft_fft16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal input_data_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_data_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_data_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_data_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_1_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_1_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_2_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_2_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_2_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_2_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_3_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_3_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_3_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_3_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_4_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_4_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_4_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_4_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_5_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_5_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_5_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_5_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_6_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_6_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_2_buf17_U0_ap_start : STD_LOGIC;
    signal stream_2_buf17_U0_ap_done : STD_LOGIC;
    signal stream_2_buf17_U0_ap_continue : STD_LOGIC;
    signal stream_2_buf17_U0_ap_idle : STD_LOGIC;
    signal stream_2_buf17_U0_ap_ready : STD_LOGIC;
    signal stream_2_buf17_U0_c_ifmap_col_op_st_read : STD_LOGIC;
    signal stream_2_buf17_U0_input_buffer_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal stream_2_buf17_U0_input_buffer_ce0 : STD_LOGIC;
    signal stream_2_buf17_U0_input_buffer_we0 : STD_LOGIC;
    signal stream_2_buf17_U0_input_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_2_buf17_U0_ctrl1_reg_read : STD_LOGIC;
    signal stream_2_buf17_U0_ctrl1_reg_c191_din : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_2_buf17_U0_ctrl1_reg_c191_write : STD_LOGIC;
    signal stream_2_buf17_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_ctrl1_reg_c24_channel : STD_LOGIC;
    signal ctrl1_reg_c24_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_reg_c24_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_reg_c24_channel : STD_LOGIC;
    signal ap_channel_done_input_data : STD_LOGIC;
    signal stream_2_buf17_U0_input_buffer_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_input_data : STD_LOGIC := '0';
    signal ap_sync_channel_write_input_data : STD_LOGIC;
    signal fft_stage1018_U0_ap_start : STD_LOGIC;
    signal fft_stage1018_U0_ap_done : STD_LOGIC;
    signal fft_stage1018_U0_ap_continue : STD_LOGIC;
    signal fft_stage1018_U0_ap_idle : STD_LOGIC;
    signal fft_stage1018_U0_ap_ready : STD_LOGIC;
    signal fft_stage1018_U0_IN_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1018_U0_IN_r_ce0 : STD_LOGIC;
    signal fft_stage1018_U0_IN_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1018_U0_IN_r_ce1 : STD_LOGIC;
    signal fft_stage1018_U0_OUT_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1018_U0_OUT_r_ce0 : STD_LOGIC;
    signal fft_stage1018_U0_OUT_r_we0 : STD_LOGIC;
    signal fft_stage1018_U0_OUT_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage1018_U0_OUT_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1018_U0_OUT_r_ce1 : STD_LOGIC;
    signal fft_stage1018_U0_OUT_r_we1 : STD_LOGIC;
    signal fft_stage1018_U0_OUT_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage1018_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_ctrl1_reg_c23_channel : STD_LOGIC;
    signal ctrl1_reg_c23_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_reg_c23_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_reg_c23_channel : STD_LOGIC;
    signal ap_channel_done_out_data_1 : STD_LOGIC;
    signal fft_stage1018_U0_OUT_r_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_1 : STD_LOGIC;
    signal fft_stage1119_U0_ap_start : STD_LOGIC;
    signal fft_stage1119_U0_ap_done : STD_LOGIC;
    signal fft_stage1119_U0_ap_continue : STD_LOGIC;
    signal fft_stage1119_U0_ap_idle : STD_LOGIC;
    signal fft_stage1119_U0_ap_ready : STD_LOGIC;
    signal fft_stage1119_U0_IN_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1119_U0_IN_r_ce0 : STD_LOGIC;
    signal fft_stage1119_U0_IN_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1119_U0_IN_r_ce1 : STD_LOGIC;
    signal fft_stage1119_U0_OUT_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1119_U0_OUT_r_ce0 : STD_LOGIC;
    signal fft_stage1119_U0_OUT_r_we0 : STD_LOGIC;
    signal fft_stage1119_U0_OUT_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage1119_U0_OUT_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1119_U0_OUT_r_ce1 : STD_LOGIC;
    signal fft_stage1119_U0_OUT_r_we1 : STD_LOGIC;
    signal fft_stage1119_U0_OUT_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage1119_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_ctrl1_reg_c22_channel : STD_LOGIC;
    signal ctrl1_reg_c22_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_reg_c22_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_reg_c22_channel : STD_LOGIC;
    signal ap_channel_done_out_data_2 : STD_LOGIC;
    signal fft_stage1119_U0_OUT_r_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_2 : STD_LOGIC;
    signal fft_stage1220_U0_ap_start : STD_LOGIC;
    signal fft_stage1220_U0_ap_done : STD_LOGIC;
    signal fft_stage1220_U0_ap_continue : STD_LOGIC;
    signal fft_stage1220_U0_ap_idle : STD_LOGIC;
    signal fft_stage1220_U0_ap_ready : STD_LOGIC;
    signal fft_stage1220_U0_IN_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1220_U0_IN_r_ce0 : STD_LOGIC;
    signal fft_stage1220_U0_IN_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1220_U0_IN_r_ce1 : STD_LOGIC;
    signal fft_stage1220_U0_OUT_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1220_U0_OUT_r_ce0 : STD_LOGIC;
    signal fft_stage1220_U0_OUT_r_we0 : STD_LOGIC;
    signal fft_stage1220_U0_OUT_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage1220_U0_OUT_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1220_U0_OUT_r_ce1 : STD_LOGIC;
    signal fft_stage1220_U0_OUT_r_we1 : STD_LOGIC;
    signal fft_stage1220_U0_OUT_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage1220_U0_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_ctrl1_reg_c21_channel : STD_LOGIC;
    signal ctrl1_reg_c21_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_reg_c21_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_reg_c21_channel : STD_LOGIC;
    signal ap_channel_done_out_data_3 : STD_LOGIC;
    signal fft_stage1220_U0_OUT_r_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_3 : STD_LOGIC;
    signal fft_stage1321_U0_ap_start : STD_LOGIC;
    signal fft_stage1321_U0_ap_done : STD_LOGIC;
    signal fft_stage1321_U0_ap_continue : STD_LOGIC;
    signal fft_stage1321_U0_ap_idle : STD_LOGIC;
    signal fft_stage1321_U0_ap_ready : STD_LOGIC;
    signal fft_stage1321_U0_IN_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1321_U0_IN_r_ce0 : STD_LOGIC;
    signal fft_stage1321_U0_IN_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1321_U0_IN_r_ce1 : STD_LOGIC;
    signal fft_stage1321_U0_OUT_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1321_U0_OUT_r_ce0 : STD_LOGIC;
    signal fft_stage1321_U0_OUT_r_we0 : STD_LOGIC;
    signal fft_stage1321_U0_OUT_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage1321_U0_OUT_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1321_U0_OUT_r_ce1 : STD_LOGIC;
    signal fft_stage1321_U0_OUT_r_we1 : STD_LOGIC;
    signal fft_stage1321_U0_OUT_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage1321_U0_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_ctrl1_reg_c20_channel : STD_LOGIC;
    signal ctrl1_reg_c20_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_reg_c20_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_reg_c20_channel : STD_LOGIC;
    signal ap_channel_done_out_data_4 : STD_LOGIC;
    signal fft_stage1321_U0_OUT_r_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_4 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_4 : STD_LOGIC;
    signal fft_stage1422_U0_ap_start : STD_LOGIC;
    signal fft_stage1422_U0_ap_done : STD_LOGIC;
    signal fft_stage1422_U0_ap_continue : STD_LOGIC;
    signal fft_stage1422_U0_ap_idle : STD_LOGIC;
    signal fft_stage1422_U0_ap_ready : STD_LOGIC;
    signal fft_stage1422_U0_IN_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1422_U0_IN_r_ce0 : STD_LOGIC;
    signal fft_stage1422_U0_IN_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1422_U0_IN_r_ce1 : STD_LOGIC;
    signal fft_stage1422_U0_OUT_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1422_U0_OUT_r_ce0 : STD_LOGIC;
    signal fft_stage1422_U0_OUT_r_we0 : STD_LOGIC;
    signal fft_stage1422_U0_OUT_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage1422_U0_OUT_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1422_U0_OUT_r_ce1 : STD_LOGIC;
    signal fft_stage1422_U0_OUT_r_we1 : STD_LOGIC;
    signal fft_stage1422_U0_OUT_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage1422_U0_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_ctrl1_reg_c19_channel : STD_LOGIC;
    signal ctrl1_reg_c19_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_reg_c19_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_reg_c19_channel : STD_LOGIC;
    signal ap_channel_done_out_data_5 : STD_LOGIC;
    signal fft_stage1422_U0_OUT_r_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_5 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_5 : STD_LOGIC;
    signal fft_stage1523_U0_ap_start : STD_LOGIC;
    signal fft_stage1523_U0_ap_done : STD_LOGIC;
    signal fft_stage1523_U0_ap_continue : STD_LOGIC;
    signal fft_stage1523_U0_ap_idle : STD_LOGIC;
    signal fft_stage1523_U0_ap_ready : STD_LOGIC;
    signal fft_stage1523_U0_IN_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1523_U0_IN_r_ce0 : STD_LOGIC;
    signal fft_stage1523_U0_IN_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1523_U0_IN_r_ce1 : STD_LOGIC;
    signal fft_stage1523_U0_OUT_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1523_U0_OUT_r_ce0 : STD_LOGIC;
    signal fft_stage1523_U0_OUT_r_we0 : STD_LOGIC;
    signal fft_stage1523_U0_OUT_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage1523_U0_OUT_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_stage1523_U0_OUT_r_ce1 : STD_LOGIC;
    signal fft_stage1523_U0_OUT_r_we1 : STD_LOGIC;
    signal fft_stage1523_U0_OUT_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage1523_U0_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_channel_done_ctrl1_reg_c_channel : STD_LOGIC;
    signal ctrl1_reg_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_reg_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_reg_c_channel : STD_LOGIC;
    signal ap_channel_done_out_data_6 : STD_LOGIC;
    signal fft_stage1523_U0_OUT_r_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_6 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_6 : STD_LOGIC;
    signal buf_2_stream24_U0_ap_start : STD_LOGIC;
    signal buf_2_stream24_U0_ap_done : STD_LOGIC;
    signal buf_2_stream24_U0_ap_continue : STD_LOGIC;
    signal buf_2_stream24_U0_ap_idle : STD_LOGIC;
    signal buf_2_stream24_U0_ap_ready : STD_LOGIC;
    signal buf_2_stream24_U0_c_fft_row_op_st_din : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_2_stream24_U0_c_fft_row_op_st_write : STD_LOGIC;
    signal buf_2_stream24_U0_output_buffer_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_2_stream24_U0_output_buffer_ce0 : STD_LOGIC;
    signal input_data_i_full_n : STD_LOGIC;
    signal input_data_t_empty_n : STD_LOGIC;
    signal out_data_1_i_full_n : STD_LOGIC;
    signal out_data_1_t_empty_n : STD_LOGIC;
    signal out_data_2_i_full_n : STD_LOGIC;
    signal out_data_2_t_empty_n : STD_LOGIC;
    signal out_data_3_i_full_n : STD_LOGIC;
    signal out_data_3_t_empty_n : STD_LOGIC;
    signal out_data_4_i_full_n : STD_LOGIC;
    signal out_data_4_t_empty_n : STD_LOGIC;
    signal out_data_5_i_full_n : STD_LOGIC;
    signal out_data_5_t_empty_n : STD_LOGIC;
    signal out_data_6_i_full_n : STD_LOGIC;
    signal out_data_6_t_empty_n : STD_LOGIC;
    signal ctrl1_reg_c24_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_reg_c24_channel_empty_n : STD_LOGIC;
    signal ctrl1_reg_c23_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_reg_c23_channel_empty_n : STD_LOGIC;
    signal ctrl1_reg_c22_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_reg_c22_channel_empty_n : STD_LOGIC;
    signal ctrl1_reg_c21_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ctrl1_reg_c21_channel_empty_n : STD_LOGIC;
    signal ctrl1_reg_c20_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ctrl1_reg_c20_channel_empty_n : STD_LOGIC;
    signal ctrl1_reg_c19_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ctrl1_reg_c19_channel_empty_n : STD_LOGIC;
    signal ctrl1_reg_c_channel_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal ctrl1_reg_c_channel_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fwd_fft_stream_2_buf17 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        c_ifmap_col_op_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_ifmap_col_op_st_empty_n : IN STD_LOGIC;
        c_ifmap_col_op_st_read : OUT STD_LOGIC;
        input_buffer_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        input_buffer_ce0 : OUT STD_LOGIC;
        input_buffer_we0 : OUT STD_LOGIC;
        input_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_reg_empty_n : IN STD_LOGIC;
        ctrl1_reg_read : OUT STD_LOGIC;
        ctrl1_reg_c191_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_reg_c191_full_n : IN STD_LOGIC;
        ctrl1_reg_c191_write : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fwd_fft_fft_stage1018 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        IN_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce0 : OUT STD_LOGIC;
        IN_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        IN_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce1 : OUT STD_LOGIC;
        IN_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce0 : OUT STD_LOGIC;
        OUT_r_we0 : OUT STD_LOGIC;
        OUT_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce1 : OUT STD_LOGIC;
        OUT_r_we1 : OUT STD_LOGIC;
        OUT_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fwd_fft_fft_stage1119 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        IN_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce0 : OUT STD_LOGIC;
        IN_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        IN_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce1 : OUT STD_LOGIC;
        IN_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce0 : OUT STD_LOGIC;
        OUT_r_we0 : OUT STD_LOGIC;
        OUT_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce1 : OUT STD_LOGIC;
        OUT_r_we1 : OUT STD_LOGIC;
        OUT_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fwd_fft_fft_stage1220 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        IN_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce0 : OUT STD_LOGIC;
        IN_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        IN_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce1 : OUT STD_LOGIC;
        IN_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce0 : OUT STD_LOGIC;
        OUT_r_we0 : OUT STD_LOGIC;
        OUT_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce1 : OUT STD_LOGIC;
        OUT_r_we1 : OUT STD_LOGIC;
        OUT_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fwd_fft_fft_stage1321 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        IN_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce0 : OUT STD_LOGIC;
        IN_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        IN_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce1 : OUT STD_LOGIC;
        IN_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce0 : OUT STD_LOGIC;
        OUT_r_we0 : OUT STD_LOGIC;
        OUT_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce1 : OUT STD_LOGIC;
        OUT_r_we1 : OUT STD_LOGIC;
        OUT_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fwd_fft_fft_stage1422 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        IN_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce0 : OUT STD_LOGIC;
        IN_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        IN_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce1 : OUT STD_LOGIC;
        IN_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce0 : OUT STD_LOGIC;
        OUT_r_we0 : OUT STD_LOGIC;
        OUT_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce1 : OUT STD_LOGIC;
        OUT_r_we1 : OUT STD_LOGIC;
        OUT_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fwd_fft_fft_stage1523 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        IN_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce0 : OUT STD_LOGIC;
        IN_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        IN_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        IN_r_ce1 : OUT STD_LOGIC;
        IN_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce0 : OUT STD_LOGIC;
        OUT_r_we0 : OUT STD_LOGIC;
        OUT_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        OUT_r_ce1 : OUT STD_LOGIC;
        OUT_r_we1 : OUT STD_LOGIC;
        OUT_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component fwd_fft_buf_2_stream24 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        c_fft_row_op_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_fft_row_op_st_full_n : IN STD_LOGIC;
        c_fft_row_op_st_write : OUT STD_LOGIC;
        output_buffer_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_buffer_ce0 : OUT STD_LOGIC;
        output_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component fwd_fft_fft16_input_data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component fwd_fft_fft16_out_data_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_we1 : IN STD_LOGIC;
        i_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_we1 : IN STD_LOGIC;
        t_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component fwd_fft_fft16_out_data_6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_we1 : IN STD_LOGIC;
        i_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_we1 : IN STD_LOGIC;
        t_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component fwd_fft_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fwd_fft_fifo_w16_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fwd_fft_fifo_w8_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    input_data_U : component fwd_fft_fft16_input_data
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => stream_2_buf17_U0_input_buffer_address0,
        i_ce0 => stream_2_buf17_U0_input_buffer_ce0,
        i_we0 => stream_2_buf17_U0_input_buffer_we0,
        i_d0 => stream_2_buf17_U0_input_buffer_d0,
        i_q0 => input_data_i_q0,
        i_address1 => ap_const_lv6_0,
        i_ce1 => ap_const_logic_0,
        i_q1 => input_data_i_q1,
        t_address0 => fft_stage1018_U0_IN_r_address0,
        t_ce0 => fft_stage1018_U0_IN_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => input_data_t_q0,
        t_address1 => fft_stage1018_U0_IN_r_address1,
        t_ce1 => fft_stage1018_U0_IN_r_ce1,
        t_q1 => input_data_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => input_data_i_full_n,
        i_write => ap_channel_done_input_data,
        t_empty_n => input_data_t_empty_n,
        t_read => fft_stage1018_U0_ap_ready);

    out_data_1_U : component fwd_fft_fft16_out_data_1
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage1018_U0_OUT_r_address0,
        i_ce0 => fft_stage1018_U0_OUT_r_ce0,
        i_we0 => fft_stage1018_U0_OUT_r_we0,
        i_d0 => fft_stage1018_U0_OUT_r_d0,
        i_q0 => out_data_1_i_q0,
        i_address1 => fft_stage1018_U0_OUT_r_address1,
        i_ce1 => fft_stage1018_U0_OUT_r_ce1,
        i_we1 => fft_stage1018_U0_OUT_r_we1,
        i_d1 => fft_stage1018_U0_OUT_r_d1,
        i_q1 => out_data_1_i_q1,
        t_address0 => fft_stage1119_U0_IN_r_address0,
        t_ce0 => fft_stage1119_U0_IN_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_1_t_q0,
        t_address1 => fft_stage1119_U0_IN_r_address1,
        t_ce1 => fft_stage1119_U0_IN_r_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => out_data_1_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_1_i_full_n,
        i_write => ap_channel_done_out_data_1,
        t_empty_n => out_data_1_t_empty_n,
        t_read => fft_stage1119_U0_ap_ready);

    out_data_2_U : component fwd_fft_fft16_out_data_1
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage1119_U0_OUT_r_address0,
        i_ce0 => fft_stage1119_U0_OUT_r_ce0,
        i_we0 => fft_stage1119_U0_OUT_r_we0,
        i_d0 => fft_stage1119_U0_OUT_r_d0,
        i_q0 => out_data_2_i_q0,
        i_address1 => fft_stage1119_U0_OUT_r_address1,
        i_ce1 => fft_stage1119_U0_OUT_r_ce1,
        i_we1 => fft_stage1119_U0_OUT_r_we1,
        i_d1 => fft_stage1119_U0_OUT_r_d1,
        i_q1 => out_data_2_i_q1,
        t_address0 => fft_stage1220_U0_IN_r_address0,
        t_ce0 => fft_stage1220_U0_IN_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_2_t_q0,
        t_address1 => fft_stage1220_U0_IN_r_address1,
        t_ce1 => fft_stage1220_U0_IN_r_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => out_data_2_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_2_i_full_n,
        i_write => ap_channel_done_out_data_2,
        t_empty_n => out_data_2_t_empty_n,
        t_read => fft_stage1220_U0_ap_ready);

    out_data_3_U : component fwd_fft_fft16_out_data_1
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage1220_U0_OUT_r_address0,
        i_ce0 => fft_stage1220_U0_OUT_r_ce0,
        i_we0 => fft_stage1220_U0_OUT_r_we0,
        i_d0 => fft_stage1220_U0_OUT_r_d0,
        i_q0 => out_data_3_i_q0,
        i_address1 => fft_stage1220_U0_OUT_r_address1,
        i_ce1 => fft_stage1220_U0_OUT_r_ce1,
        i_we1 => fft_stage1220_U0_OUT_r_we1,
        i_d1 => fft_stage1220_U0_OUT_r_d1,
        i_q1 => out_data_3_i_q1,
        t_address0 => fft_stage1321_U0_IN_r_address0,
        t_ce0 => fft_stage1321_U0_IN_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_3_t_q0,
        t_address1 => fft_stage1321_U0_IN_r_address1,
        t_ce1 => fft_stage1321_U0_IN_r_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => out_data_3_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_3_i_full_n,
        i_write => ap_channel_done_out_data_3,
        t_empty_n => out_data_3_t_empty_n,
        t_read => fft_stage1321_U0_ap_ready);

    out_data_4_U : component fwd_fft_fft16_out_data_1
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage1321_U0_OUT_r_address0,
        i_ce0 => fft_stage1321_U0_OUT_r_ce0,
        i_we0 => fft_stage1321_U0_OUT_r_we0,
        i_d0 => fft_stage1321_U0_OUT_r_d0,
        i_q0 => out_data_4_i_q0,
        i_address1 => fft_stage1321_U0_OUT_r_address1,
        i_ce1 => fft_stage1321_U0_OUT_r_ce1,
        i_we1 => fft_stage1321_U0_OUT_r_we1,
        i_d1 => fft_stage1321_U0_OUT_r_d1,
        i_q1 => out_data_4_i_q1,
        t_address0 => fft_stage1422_U0_IN_r_address0,
        t_ce0 => fft_stage1422_U0_IN_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_4_t_q0,
        t_address1 => fft_stage1422_U0_IN_r_address1,
        t_ce1 => fft_stage1422_U0_IN_r_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => out_data_4_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_4_i_full_n,
        i_write => ap_channel_done_out_data_4,
        t_empty_n => out_data_4_t_empty_n,
        t_read => fft_stage1422_U0_ap_ready);

    out_data_5_U : component fwd_fft_fft16_out_data_1
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage1422_U0_OUT_r_address0,
        i_ce0 => fft_stage1422_U0_OUT_r_ce0,
        i_we0 => fft_stage1422_U0_OUT_r_we0,
        i_d0 => fft_stage1422_U0_OUT_r_d0,
        i_q0 => out_data_5_i_q0,
        i_address1 => fft_stage1422_U0_OUT_r_address1,
        i_ce1 => fft_stage1422_U0_OUT_r_ce1,
        i_we1 => fft_stage1422_U0_OUT_r_we1,
        i_d1 => fft_stage1422_U0_OUT_r_d1,
        i_q1 => out_data_5_i_q1,
        t_address0 => fft_stage1523_U0_IN_r_address0,
        t_ce0 => fft_stage1523_U0_IN_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_5_t_q0,
        t_address1 => fft_stage1523_U0_IN_r_address1,
        t_ce1 => fft_stage1523_U0_IN_r_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => out_data_5_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_5_i_full_n,
        i_write => ap_channel_done_out_data_5,
        t_empty_n => out_data_5_t_empty_n,
        t_read => fft_stage1523_U0_ap_ready);

    out_data_6_U : component fwd_fft_fft16_out_data_6
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage1523_U0_OUT_r_address0,
        i_ce0 => fft_stage1523_U0_OUT_r_ce0,
        i_we0 => fft_stage1523_U0_OUT_r_we0,
        i_d0 => fft_stage1523_U0_OUT_r_d0,
        i_q0 => out_data_6_i_q0,
        i_address1 => fft_stage1523_U0_OUT_r_address1,
        i_ce1 => fft_stage1523_U0_OUT_r_ce1,
        i_we1 => fft_stage1523_U0_OUT_r_we1,
        i_d1 => fft_stage1523_U0_OUT_r_d1,
        t_address0 => buf_2_stream24_U0_output_buffer_address0,
        t_ce0 => buf_2_stream24_U0_output_buffer_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_6_t_q0,
        t_address1 => ap_const_lv6_0,
        t_ce1 => ap_const_logic_0,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_6_i_full_n,
        i_write => ap_channel_done_out_data_6,
        t_empty_n => out_data_6_t_empty_n,
        t_read => buf_2_stream24_U0_ap_ready);

    stream_2_buf17_U0 : component fwd_fft_stream_2_buf17
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => stream_2_buf17_U0_ap_start,
        ap_done => stream_2_buf17_U0_ap_done,
        ap_continue => stream_2_buf17_U0_ap_continue,
        ap_idle => stream_2_buf17_U0_ap_idle,
        ap_ready => stream_2_buf17_U0_ap_ready,
        c_ifmap_col_op_st_dout => c_ifmap_col_op_st_dout,
        c_ifmap_col_op_st_empty_n => c_ifmap_col_op_st_empty_n,
        c_ifmap_col_op_st_read => stream_2_buf17_U0_c_ifmap_col_op_st_read,
        input_buffer_address0 => stream_2_buf17_U0_input_buffer_address0,
        input_buffer_ce0 => stream_2_buf17_U0_input_buffer_ce0,
        input_buffer_we0 => stream_2_buf17_U0_input_buffer_we0,
        input_buffer_d0 => stream_2_buf17_U0_input_buffer_d0,
        ctrl1_reg_dout => ctrl1_reg_dout,
        ctrl1_reg_empty_n => ctrl1_reg_empty_n,
        ctrl1_reg_read => stream_2_buf17_U0_ctrl1_reg_read,
        ctrl1_reg_c191_din => stream_2_buf17_U0_ctrl1_reg_c191_din,
        ctrl1_reg_c191_full_n => ctrl1_reg_c191_full_n,
        ctrl1_reg_c191_write => stream_2_buf17_U0_ctrl1_reg_c191_write,
        ap_return => stream_2_buf17_U0_ap_return);

    fft_stage1018_U0 : component fwd_fft_fft_stage1018
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage1018_U0_ap_start,
        ap_done => fft_stage1018_U0_ap_done,
        ap_continue => fft_stage1018_U0_ap_continue,
        ap_idle => fft_stage1018_U0_ap_idle,
        ap_ready => fft_stage1018_U0_ap_ready,
        IN_r_address0 => fft_stage1018_U0_IN_r_address0,
        IN_r_ce0 => fft_stage1018_U0_IN_r_ce0,
        IN_r_q0 => input_data_t_q0,
        IN_r_address1 => fft_stage1018_U0_IN_r_address1,
        IN_r_ce1 => fft_stage1018_U0_IN_r_ce1,
        IN_r_q1 => input_data_t_q1,
        OUT_r_address0 => fft_stage1018_U0_OUT_r_address0,
        OUT_r_ce0 => fft_stage1018_U0_OUT_r_ce0,
        OUT_r_we0 => fft_stage1018_U0_OUT_r_we0,
        OUT_r_d0 => fft_stage1018_U0_OUT_r_d0,
        OUT_r_address1 => fft_stage1018_U0_OUT_r_address1,
        OUT_r_ce1 => fft_stage1018_U0_OUT_r_ce1,
        OUT_r_we1 => fft_stage1018_U0_OUT_r_we1,
        OUT_r_d1 => fft_stage1018_U0_OUT_r_d1,
        p_read => ctrl1_reg_c24_channel_dout,
        ap_return => fft_stage1018_U0_ap_return);

    fft_stage1119_U0 : component fwd_fft_fft_stage1119
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage1119_U0_ap_start,
        ap_done => fft_stage1119_U0_ap_done,
        ap_continue => fft_stage1119_U0_ap_continue,
        ap_idle => fft_stage1119_U0_ap_idle,
        ap_ready => fft_stage1119_U0_ap_ready,
        IN_r_address0 => fft_stage1119_U0_IN_r_address0,
        IN_r_ce0 => fft_stage1119_U0_IN_r_ce0,
        IN_r_q0 => out_data_1_t_q0,
        IN_r_address1 => fft_stage1119_U0_IN_r_address1,
        IN_r_ce1 => fft_stage1119_U0_IN_r_ce1,
        IN_r_q1 => out_data_1_t_q1,
        OUT_r_address0 => fft_stage1119_U0_OUT_r_address0,
        OUT_r_ce0 => fft_stage1119_U0_OUT_r_ce0,
        OUT_r_we0 => fft_stage1119_U0_OUT_r_we0,
        OUT_r_d0 => fft_stage1119_U0_OUT_r_d0,
        OUT_r_address1 => fft_stage1119_U0_OUT_r_address1,
        OUT_r_ce1 => fft_stage1119_U0_OUT_r_ce1,
        OUT_r_we1 => fft_stage1119_U0_OUT_r_we1,
        OUT_r_d1 => fft_stage1119_U0_OUT_r_d1,
        p_read => ctrl1_reg_c23_channel_dout,
        ap_return => fft_stage1119_U0_ap_return);

    fft_stage1220_U0 : component fwd_fft_fft_stage1220
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage1220_U0_ap_start,
        ap_done => fft_stage1220_U0_ap_done,
        ap_continue => fft_stage1220_U0_ap_continue,
        ap_idle => fft_stage1220_U0_ap_idle,
        ap_ready => fft_stage1220_U0_ap_ready,
        IN_r_address0 => fft_stage1220_U0_IN_r_address0,
        IN_r_ce0 => fft_stage1220_U0_IN_r_ce0,
        IN_r_q0 => out_data_2_t_q0,
        IN_r_address1 => fft_stage1220_U0_IN_r_address1,
        IN_r_ce1 => fft_stage1220_U0_IN_r_ce1,
        IN_r_q1 => out_data_2_t_q1,
        OUT_r_address0 => fft_stage1220_U0_OUT_r_address0,
        OUT_r_ce0 => fft_stage1220_U0_OUT_r_ce0,
        OUT_r_we0 => fft_stage1220_U0_OUT_r_we0,
        OUT_r_d0 => fft_stage1220_U0_OUT_r_d0,
        OUT_r_address1 => fft_stage1220_U0_OUT_r_address1,
        OUT_r_ce1 => fft_stage1220_U0_OUT_r_ce1,
        OUT_r_we1 => fft_stage1220_U0_OUT_r_we1,
        OUT_r_d1 => fft_stage1220_U0_OUT_r_d1,
        p_read => ctrl1_reg_c22_channel_dout,
        ap_return => fft_stage1220_U0_ap_return);

    fft_stage1321_U0 : component fwd_fft_fft_stage1321
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage1321_U0_ap_start,
        ap_done => fft_stage1321_U0_ap_done,
        ap_continue => fft_stage1321_U0_ap_continue,
        ap_idle => fft_stage1321_U0_ap_idle,
        ap_ready => fft_stage1321_U0_ap_ready,
        IN_r_address0 => fft_stage1321_U0_IN_r_address0,
        IN_r_ce0 => fft_stage1321_U0_IN_r_ce0,
        IN_r_q0 => out_data_3_t_q0,
        IN_r_address1 => fft_stage1321_U0_IN_r_address1,
        IN_r_ce1 => fft_stage1321_U0_IN_r_ce1,
        IN_r_q1 => out_data_3_t_q1,
        OUT_r_address0 => fft_stage1321_U0_OUT_r_address0,
        OUT_r_ce0 => fft_stage1321_U0_OUT_r_ce0,
        OUT_r_we0 => fft_stage1321_U0_OUT_r_we0,
        OUT_r_d0 => fft_stage1321_U0_OUT_r_d0,
        OUT_r_address1 => fft_stage1321_U0_OUT_r_address1,
        OUT_r_ce1 => fft_stage1321_U0_OUT_r_ce1,
        OUT_r_we1 => fft_stage1321_U0_OUT_r_we1,
        OUT_r_d1 => fft_stage1321_U0_OUT_r_d1,
        p_read => ctrl1_reg_c21_channel_dout,
        ap_return => fft_stage1321_U0_ap_return);

    fft_stage1422_U0 : component fwd_fft_fft_stage1422
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage1422_U0_ap_start,
        ap_done => fft_stage1422_U0_ap_done,
        ap_continue => fft_stage1422_U0_ap_continue,
        ap_idle => fft_stage1422_U0_ap_idle,
        ap_ready => fft_stage1422_U0_ap_ready,
        IN_r_address0 => fft_stage1422_U0_IN_r_address0,
        IN_r_ce0 => fft_stage1422_U0_IN_r_ce0,
        IN_r_q0 => out_data_4_t_q0,
        IN_r_address1 => fft_stage1422_U0_IN_r_address1,
        IN_r_ce1 => fft_stage1422_U0_IN_r_ce1,
        IN_r_q1 => out_data_4_t_q1,
        OUT_r_address0 => fft_stage1422_U0_OUT_r_address0,
        OUT_r_ce0 => fft_stage1422_U0_OUT_r_ce0,
        OUT_r_we0 => fft_stage1422_U0_OUT_r_we0,
        OUT_r_d0 => fft_stage1422_U0_OUT_r_d0,
        OUT_r_address1 => fft_stage1422_U0_OUT_r_address1,
        OUT_r_ce1 => fft_stage1422_U0_OUT_r_ce1,
        OUT_r_we1 => fft_stage1422_U0_OUT_r_we1,
        OUT_r_d1 => fft_stage1422_U0_OUT_r_d1,
        p_read => ctrl1_reg_c20_channel_dout,
        ap_return => fft_stage1422_U0_ap_return);

    fft_stage1523_U0 : component fwd_fft_fft_stage1523
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage1523_U0_ap_start,
        ap_done => fft_stage1523_U0_ap_done,
        ap_continue => fft_stage1523_U0_ap_continue,
        ap_idle => fft_stage1523_U0_ap_idle,
        ap_ready => fft_stage1523_U0_ap_ready,
        IN_r_address0 => fft_stage1523_U0_IN_r_address0,
        IN_r_ce0 => fft_stage1523_U0_IN_r_ce0,
        IN_r_q0 => out_data_5_t_q0,
        IN_r_address1 => fft_stage1523_U0_IN_r_address1,
        IN_r_ce1 => fft_stage1523_U0_IN_r_ce1,
        IN_r_q1 => out_data_5_t_q1,
        OUT_r_address0 => fft_stage1523_U0_OUT_r_address0,
        OUT_r_ce0 => fft_stage1523_U0_OUT_r_ce0,
        OUT_r_we0 => fft_stage1523_U0_OUT_r_we0,
        OUT_r_d0 => fft_stage1523_U0_OUT_r_d0,
        OUT_r_address1 => fft_stage1523_U0_OUT_r_address1,
        OUT_r_ce1 => fft_stage1523_U0_OUT_r_ce1,
        OUT_r_we1 => fft_stage1523_U0_OUT_r_we1,
        OUT_r_d1 => fft_stage1523_U0_OUT_r_d1,
        p_read => ctrl1_reg_c19_channel_dout,
        ap_return => fft_stage1523_U0_ap_return);

    buf_2_stream24_U0 : component fwd_fft_buf_2_stream24
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => buf_2_stream24_U0_ap_start,
        ap_done => buf_2_stream24_U0_ap_done,
        ap_continue => buf_2_stream24_U0_ap_continue,
        ap_idle => buf_2_stream24_U0_ap_idle,
        ap_ready => buf_2_stream24_U0_ap_ready,
        c_fft_row_op_st_din => buf_2_stream24_U0_c_fft_row_op_st_din,
        c_fft_row_op_st_full_n => c_fft_row_op_st_full_n,
        c_fft_row_op_st_write => buf_2_stream24_U0_c_fft_row_op_st_write,
        output_buffer_address0 => buf_2_stream24_U0_output_buffer_address0,
        output_buffer_ce0 => buf_2_stream24_U0_output_buffer_ce0,
        output_buffer_q0 => out_data_6_t_q0,
        p_read => ctrl1_reg_c_channel_dout);

    ctrl1_reg_c24_channel_U : component fwd_fft_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => stream_2_buf17_U0_ap_return,
        if_full_n => ctrl1_reg_c24_channel_full_n,
        if_write => ap_channel_done_ctrl1_reg_c24_channel,
        if_dout => ctrl1_reg_c24_channel_dout,
        if_empty_n => ctrl1_reg_c24_channel_empty_n,
        if_read => fft_stage1018_U0_ap_ready);

    ctrl1_reg_c23_channel_U : component fwd_fft_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage1018_U0_ap_return,
        if_full_n => ctrl1_reg_c23_channel_full_n,
        if_write => ap_channel_done_ctrl1_reg_c23_channel,
        if_dout => ctrl1_reg_c23_channel_dout,
        if_empty_n => ctrl1_reg_c23_channel_empty_n,
        if_read => fft_stage1119_U0_ap_ready);

    ctrl1_reg_c22_channel_U : component fwd_fft_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage1119_U0_ap_return,
        if_full_n => ctrl1_reg_c22_channel_full_n,
        if_write => ap_channel_done_ctrl1_reg_c22_channel,
        if_dout => ctrl1_reg_c22_channel_dout,
        if_empty_n => ctrl1_reg_c22_channel_empty_n,
        if_read => fft_stage1220_U0_ap_ready);

    ctrl1_reg_c21_channel_U : component fwd_fft_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage1220_U0_ap_return,
        if_full_n => ctrl1_reg_c21_channel_full_n,
        if_write => ap_channel_done_ctrl1_reg_c21_channel,
        if_dout => ctrl1_reg_c21_channel_dout,
        if_empty_n => ctrl1_reg_c21_channel_empty_n,
        if_read => fft_stage1321_U0_ap_ready);

    ctrl1_reg_c20_channel_U : component fwd_fft_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage1321_U0_ap_return,
        if_full_n => ctrl1_reg_c20_channel_full_n,
        if_write => ap_channel_done_ctrl1_reg_c20_channel,
        if_dout => ctrl1_reg_c20_channel_dout,
        if_empty_n => ctrl1_reg_c20_channel_empty_n,
        if_read => fft_stage1422_U0_ap_ready);

    ctrl1_reg_c19_channel_U : component fwd_fft_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage1422_U0_ap_return,
        if_full_n => ctrl1_reg_c19_channel_full_n,
        if_write => ap_channel_done_ctrl1_reg_c19_channel,
        if_dout => ctrl1_reg_c19_channel_dout,
        if_empty_n => ctrl1_reg_c19_channel_empty_n,
        if_read => fft_stage1523_U0_ap_ready);

    ctrl1_reg_c_channel_U : component fwd_fft_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage1523_U0_ap_return,
        if_full_n => ctrl1_reg_c_channel_full_n,
        if_write => ap_channel_done_ctrl1_reg_c_channel,
        if_dout => ctrl1_reg_c_channel_dout,
        if_empty_n => ctrl1_reg_c_channel_empty_n,
        if_read => buf_2_stream24_U0_ap_ready);





    ap_sync_reg_channel_write_ctrl1_reg_c19_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_reg_c19_channel <= ap_const_logic_0;
            else
                if (((fft_stage1422_U0_ap_done and fft_stage1422_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_reg_c19_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_reg_c19_channel <= ap_sync_channel_write_ctrl1_reg_c19_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_reg_c20_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_reg_c20_channel <= ap_const_logic_0;
            else
                if (((fft_stage1321_U0_ap_done and fft_stage1321_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_reg_c20_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_reg_c20_channel <= ap_sync_channel_write_ctrl1_reg_c20_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_reg_c21_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_reg_c21_channel <= ap_const_logic_0;
            else
                if (((fft_stage1220_U0_ap_done and fft_stage1220_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_reg_c21_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_reg_c21_channel <= ap_sync_channel_write_ctrl1_reg_c21_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_reg_c22_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_reg_c22_channel <= ap_const_logic_0;
            else
                if (((fft_stage1119_U0_ap_done and fft_stage1119_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_reg_c22_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_reg_c22_channel <= ap_sync_channel_write_ctrl1_reg_c22_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_reg_c23_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_reg_c23_channel <= ap_const_logic_0;
            else
                if (((fft_stage1018_U0_ap_done and fft_stage1018_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_reg_c23_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_reg_c23_channel <= ap_sync_channel_write_ctrl1_reg_c23_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_reg_c24_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_reg_c24_channel <= ap_const_logic_0;
            else
                if (((stream_2_buf17_U0_ap_done and stream_2_buf17_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_reg_c24_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_reg_c24_channel <= ap_sync_channel_write_ctrl1_reg_c24_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_reg_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_reg_c_channel <= ap_const_logic_0;
            else
                if (((fft_stage1523_U0_ap_done and fft_stage1523_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_reg_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_reg_c_channel <= ap_sync_channel_write_ctrl1_reg_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_input_data_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_input_data <= ap_const_logic_0;
            else
                if (((stream_2_buf17_U0_ap_done and stream_2_buf17_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_input_data <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_input_data <= ap_sync_channel_write_input_data;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_1 <= ap_const_logic_0;
            else
                if (((fft_stage1018_U0_ap_done and fft_stage1018_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_1 <= ap_sync_channel_write_out_data_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_2 <= ap_const_logic_0;
            else
                if (((fft_stage1119_U0_ap_done and fft_stage1119_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_2 <= ap_sync_channel_write_out_data_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_3 <= ap_const_logic_0;
            else
                if (((fft_stage1220_U0_ap_done and fft_stage1220_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_3 <= ap_sync_channel_write_out_data_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_4 <= ap_const_logic_0;
            else
                if (((fft_stage1321_U0_ap_done and fft_stage1321_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_4 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_4 <= ap_sync_channel_write_out_data_4;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_5 <= ap_const_logic_0;
            else
                if (((fft_stage1422_U0_ap_done and fft_stage1422_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_5 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_5 <= ap_sync_channel_write_out_data_5;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_6 <= ap_const_logic_0;
            else
                if (((fft_stage1523_U0_ap_done and fft_stage1523_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_6 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_6 <= ap_sync_channel_write_out_data_6;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_ctrl1_reg_c19_channel <= (fft_stage1422_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_reg_c19_channel xor ap_const_logic_1));
    ap_channel_done_ctrl1_reg_c20_channel <= (fft_stage1321_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_reg_c20_channel xor ap_const_logic_1));
    ap_channel_done_ctrl1_reg_c21_channel <= (fft_stage1220_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_reg_c21_channel xor ap_const_logic_1));
    ap_channel_done_ctrl1_reg_c22_channel <= (fft_stage1119_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_reg_c22_channel xor ap_const_logic_1));
    ap_channel_done_ctrl1_reg_c23_channel <= (fft_stage1018_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_reg_c23_channel xor ap_const_logic_1));
    ap_channel_done_ctrl1_reg_c24_channel <= (stream_2_buf17_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_reg_c24_channel xor ap_const_logic_1));
    ap_channel_done_ctrl1_reg_c_channel <= (fft_stage1523_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_reg_c_channel xor ap_const_logic_1));
    ap_channel_done_input_data <= (stream_2_buf17_U0_ap_done and (ap_sync_reg_channel_write_input_data xor ap_const_logic_1));
    ap_channel_done_out_data_1 <= (fft_stage1018_U0_ap_done and (ap_sync_reg_channel_write_out_data_1 xor ap_const_logic_1));
    ap_channel_done_out_data_2 <= (fft_stage1119_U0_ap_done and (ap_sync_reg_channel_write_out_data_2 xor ap_const_logic_1));
    ap_channel_done_out_data_3 <= (fft_stage1220_U0_ap_done and (ap_sync_reg_channel_write_out_data_3 xor ap_const_logic_1));
    ap_channel_done_out_data_4 <= (fft_stage1321_U0_ap_done and (ap_sync_reg_channel_write_out_data_4 xor ap_const_logic_1));
    ap_channel_done_out_data_5 <= (fft_stage1422_U0_ap_done and (ap_sync_reg_channel_write_out_data_5 xor ap_const_logic_1));
    ap_channel_done_out_data_6 <= (fft_stage1523_U0_ap_done and (ap_sync_reg_channel_write_out_data_6 xor ap_const_logic_1));
    ap_done <= buf_2_stream24_U0_ap_done;
    ap_idle <= (stream_2_buf17_U0_ap_idle and fft_stage1523_U0_ap_idle and fft_stage1422_U0_ap_idle and fft_stage1321_U0_ap_idle and fft_stage1220_U0_ap_idle and fft_stage1119_U0_ap_idle and fft_stage1018_U0_ap_idle and (ctrl1_reg_c_channel_empty_n xor ap_const_logic_1) and (ctrl1_reg_c19_channel_empty_n xor ap_const_logic_1) and (ctrl1_reg_c20_channel_empty_n xor ap_const_logic_1) and (ctrl1_reg_c21_channel_empty_n xor ap_const_logic_1) and (ctrl1_reg_c22_channel_empty_n xor ap_const_logic_1) and (ctrl1_reg_c23_channel_empty_n xor ap_const_logic_1) and (ctrl1_reg_c24_channel_empty_n xor ap_const_logic_1) and (out_data_6_t_empty_n xor ap_const_logic_1) and (out_data_5_t_empty_n xor ap_const_logic_1) and (out_data_4_t_empty_n xor ap_const_logic_1) and (out_data_3_t_empty_n xor ap_const_logic_1) and (out_data_2_t_empty_n xor ap_const_logic_1) and (out_data_1_t_empty_n xor ap_const_logic_1) and (input_data_t_empty_n xor ap_const_logic_1) and buf_2_stream24_U0_ap_idle);
    ap_ready <= stream_2_buf17_U0_ap_ready;
    ap_sync_channel_write_ctrl1_reg_c19_channel <= ((ctrl1_reg_c19_channel_full_n and ap_channel_done_ctrl1_reg_c19_channel) or ap_sync_reg_channel_write_ctrl1_reg_c19_channel);
    ap_sync_channel_write_ctrl1_reg_c20_channel <= ((ctrl1_reg_c20_channel_full_n and ap_channel_done_ctrl1_reg_c20_channel) or ap_sync_reg_channel_write_ctrl1_reg_c20_channel);
    ap_sync_channel_write_ctrl1_reg_c21_channel <= ((ctrl1_reg_c21_channel_full_n and ap_channel_done_ctrl1_reg_c21_channel) or ap_sync_reg_channel_write_ctrl1_reg_c21_channel);
    ap_sync_channel_write_ctrl1_reg_c22_channel <= ((ctrl1_reg_c22_channel_full_n and ap_channel_done_ctrl1_reg_c22_channel) or ap_sync_reg_channel_write_ctrl1_reg_c22_channel);
    ap_sync_channel_write_ctrl1_reg_c23_channel <= ((ctrl1_reg_c23_channel_full_n and ap_channel_done_ctrl1_reg_c23_channel) or ap_sync_reg_channel_write_ctrl1_reg_c23_channel);
    ap_sync_channel_write_ctrl1_reg_c24_channel <= ((ctrl1_reg_c24_channel_full_n and ap_channel_done_ctrl1_reg_c24_channel) or ap_sync_reg_channel_write_ctrl1_reg_c24_channel);
    ap_sync_channel_write_ctrl1_reg_c_channel <= ((ctrl1_reg_c_channel_full_n and ap_channel_done_ctrl1_reg_c_channel) or ap_sync_reg_channel_write_ctrl1_reg_c_channel);
    ap_sync_channel_write_input_data <= ((stream_2_buf17_U0_input_buffer_full_n and ap_channel_done_input_data) or ap_sync_reg_channel_write_input_data);
    ap_sync_channel_write_out_data_1 <= ((fft_stage1018_U0_OUT_r_full_n and ap_channel_done_out_data_1) or ap_sync_reg_channel_write_out_data_1);
    ap_sync_channel_write_out_data_2 <= ((fft_stage1119_U0_OUT_r_full_n and ap_channel_done_out_data_2) or ap_sync_reg_channel_write_out_data_2);
    ap_sync_channel_write_out_data_3 <= ((fft_stage1220_U0_OUT_r_full_n and ap_channel_done_out_data_3) or ap_sync_reg_channel_write_out_data_3);
    ap_sync_channel_write_out_data_4 <= ((fft_stage1321_U0_OUT_r_full_n and ap_channel_done_out_data_4) or ap_sync_reg_channel_write_out_data_4);
    ap_sync_channel_write_out_data_5 <= ((fft_stage1422_U0_OUT_r_full_n and ap_channel_done_out_data_5) or ap_sync_reg_channel_write_out_data_5);
    ap_sync_channel_write_out_data_6 <= ((fft_stage1523_U0_OUT_r_full_n and ap_channel_done_out_data_6) or ap_sync_reg_channel_write_out_data_6);
    buf_2_stream24_U0_ap_continue <= ap_continue;
    buf_2_stream24_U0_ap_start <= (out_data_6_t_empty_n and ctrl1_reg_c_channel_empty_n);
    c_fft_row_op_st_din <= buf_2_stream24_U0_c_fft_row_op_st_din;
    c_fft_row_op_st_write <= buf_2_stream24_U0_c_fft_row_op_st_write;
    c_ifmap_col_op_st_read <= stream_2_buf17_U0_c_ifmap_col_op_st_read;
    ctrl1_reg_c191_din <= stream_2_buf17_U0_ctrl1_reg_c191_din;
    ctrl1_reg_c191_write <= stream_2_buf17_U0_ctrl1_reg_c191_write;
    ctrl1_reg_read <= stream_2_buf17_U0_ctrl1_reg_read;
    fft_stage1018_U0_OUT_r_full_n <= out_data_1_i_full_n;
    fft_stage1018_U0_ap_continue <= (ap_sync_channel_write_out_data_1 and ap_sync_channel_write_ctrl1_reg_c23_channel);
    fft_stage1018_U0_ap_start <= (input_data_t_empty_n and ctrl1_reg_c24_channel_empty_n);
    fft_stage1119_U0_OUT_r_full_n <= out_data_2_i_full_n;
    fft_stage1119_U0_ap_continue <= (ap_sync_channel_write_out_data_2 and ap_sync_channel_write_ctrl1_reg_c22_channel);
    fft_stage1119_U0_ap_start <= (out_data_1_t_empty_n and ctrl1_reg_c23_channel_empty_n);
    fft_stage1220_U0_OUT_r_full_n <= out_data_3_i_full_n;
    fft_stage1220_U0_ap_continue <= (ap_sync_channel_write_out_data_3 and ap_sync_channel_write_ctrl1_reg_c21_channel);
    fft_stage1220_U0_ap_start <= (out_data_2_t_empty_n and ctrl1_reg_c22_channel_empty_n);
    fft_stage1321_U0_OUT_r_full_n <= out_data_4_i_full_n;
    fft_stage1321_U0_ap_continue <= (ap_sync_channel_write_out_data_4 and ap_sync_channel_write_ctrl1_reg_c20_channel);
    fft_stage1321_U0_ap_start <= (out_data_3_t_empty_n and ctrl1_reg_c21_channel_empty_n);
    fft_stage1422_U0_OUT_r_full_n <= out_data_5_i_full_n;
    fft_stage1422_U0_ap_continue <= (ap_sync_channel_write_out_data_5 and ap_sync_channel_write_ctrl1_reg_c19_channel);
    fft_stage1422_U0_ap_start <= (out_data_4_t_empty_n and ctrl1_reg_c20_channel_empty_n);
    fft_stage1523_U0_OUT_r_full_n <= out_data_6_i_full_n;
    fft_stage1523_U0_ap_continue <= (ap_sync_channel_write_out_data_6 and ap_sync_channel_write_ctrl1_reg_c_channel);
    fft_stage1523_U0_ap_start <= (out_data_5_t_empty_n and ctrl1_reg_c19_channel_empty_n);
    stream_2_buf17_U0_ap_continue <= (ap_sync_channel_write_input_data and ap_sync_channel_write_ctrl1_reg_c24_channel);
    stream_2_buf17_U0_ap_start <= ap_start;
    stream_2_buf17_U0_input_buffer_full_n <= input_data_i_full_n;
end behav;
