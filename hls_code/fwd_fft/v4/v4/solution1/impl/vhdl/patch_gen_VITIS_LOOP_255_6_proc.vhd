-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity patch_gen_VITIS_LOOP_255_6_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    burst_buffer11_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    burst_buffer11_ce0 : OUT STD_LOGIC;
    burst_buffer11_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    burst_buffer22_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    burst_buffer22_ce0 : OUT STD_LOGIC;
    burst_buffer22_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_ov_pix_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    col_ov_pix_out_V_full_n : IN STD_LOGIC;
    col_ov_pix_out_V_write : OUT STD_LOGIC );
end;


architecture behav of patch_gen_VITIS_LOOP_255_6_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal col_ov_pix_out_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal empty_fu_129_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_263 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast_fu_133_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast_reg_268 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1057_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_reg_274 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast37_cast_fu_149_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_cast37_cast_reg_278 : STD_LOGIC_VECTOR (13 downto 0);
    signal pnx_fu_166_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal pnx_reg_286 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_ln258_fu_176_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln258_reg_291 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln1057_1_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_fu_185_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_cast_reg_296 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln258_fu_198_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln258_reg_304 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_fu_213_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_reg_312 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln1057_3_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_reg_107 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_1_reg_118 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1057_2_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln264_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal pnx_1_fu_58 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal mul_ln258_fu_176_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln258_fu_176_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln264_fu_181_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1525_fu_219_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_fu_223_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln264_fu_228_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln174_1_fu_243_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln174_fu_239_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal mul_ln258_fu_176_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component patch_gen_mul_8ns_8ns_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    mul_8ns_8ns_14_1_1_U22 : component patch_gen_mul_8ns_8ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 14)
    port map (
        din0 => mul_ln258_fu_176_p0,
        din1 => mul_ln258_fu_176_p1,
        dout => mul_ln258_fu_176_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln1057_1_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    pnx_1_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                pnx_1_fu_58 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln1057_reg_274 = ap_const_lv1_1) or (icmp_ln1057_2_fu_193_p2 = ap_const_lv1_1)))) then 
                pnx_1_fu_58 <= pnx_reg_286;
            end if; 
        end if;
    end process;

    x_1_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((col_ov_pix_out_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                x_1_reg_118 <= x_reg_312;
            elsif (((icmp_ln1057_reg_274 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1057_2_fu_193_p2 = ap_const_lv1_0))) then 
                x_1_reg_118 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    y_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_1_fu_161_p2 = ap_const_lv1_0) and (icmp_ln1057_reg_274 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y_reg_107 <= ap_const_lv8_0;
            elsif (((icmp_ln1057_3_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                y_reg_107 <= add_ln258_reg_304;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_reg_274 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln258_reg_304 <= add_ln258_fu_198_p2;
                    tmp_cast_reg_296(13 downto 8) <= tmp_cast_fu_185_p3(13 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_reg_263 <= empty_fu_129_p1;
                icmp_ln1057_reg_274 <= icmp_ln1057_fu_143_p2;
                    p_cast37_cast_reg_278(7 downto 0) <= p_cast37_cast_fu_149_p1(7 downto 0);
                p_cast_reg_268 <= p_read1(31 downto 24);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_1_fu_161_p2 = ap_const_lv1_0) and (icmp_ln1057_reg_274 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                mul_ln258_reg_291 <= mul_ln258_fu_176_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                pnx_reg_286 <= pnx_fu_166_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                x_reg_312 <= x_fu_213_p2;
            end if;
        end if;
    end process;
    p_cast37_cast_reg_278(13 downto 8) <= "000000";
    tmp_cast_reg_296(7 downto 0) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, col_ov_pix_out_V_full_n, ap_CS_fsm_state5, icmp_ln1057_reg_274, ap_CS_fsm_state2, icmp_ln1057_1_fu_161_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln1057_3_fu_208_p2, icmp_ln1057_2_fu_193_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln1057_1_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln1057_reg_274 = ap_const_lv1_1) or (icmp_ln1057_2_fu_193_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln1057_3_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((col_ov_pix_out_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln258_fu_198_p2 <= std_logic_vector(unsigned(y_reg_107) + unsigned(ap_const_lv8_1));
    add_ln264_fu_228_p2 <= std_logic_vector(unsigned(tmp_cast_reg_296) + unsigned(ret_fu_223_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(col_ov_pix_out_V_full_n)
    begin
        if ((col_ov_pix_out_V_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln1057_1_fu_161_p2)
    begin
        if (((icmp_ln1057_1_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln1057_1_fu_161_p2)
    begin
        if (((icmp_ln1057_1_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln174_1_fu_243_p1 <= burst_buffer22_q0;
    bitcast_ln174_fu_239_p1 <= burst_buffer11_q0;
    burst_buffer11_address0 <= zext_ln264_fu_233_p1(14 - 1 downto 0);

    burst_buffer11_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            burst_buffer11_ce0 <= ap_const_logic_1;
        else 
            burst_buffer11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    burst_buffer22_address0 <= zext_ln264_fu_233_p1(14 - 1 downto 0);

    burst_buffer22_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            burst_buffer22_ce0 <= ap_const_logic_1;
        else 
            burst_buffer22_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    col_ov_pix_out_V_blk_n_assign_proc : process(col_ov_pix_out_V_full_n, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            col_ov_pix_out_V_blk_n <= col_ov_pix_out_V_full_n;
        else 
            col_ov_pix_out_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    col_ov_pix_out_V_din <= (bitcast_ln174_1_fu_243_p1 & bitcast_ln174_fu_239_p1);

    col_ov_pix_out_V_write_assign_proc : process(col_ov_pix_out_V_full_n, ap_CS_fsm_state5)
    begin
        if (((col_ov_pix_out_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            col_ov_pix_out_V_write <= ap_const_logic_1;
        else 
            col_ov_pix_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_129_p1 <= p_read(8 - 1 downto 0);
    icmp_ln1057_1_fu_161_p2 <= "1" when (pnx_1_fu_58 = empty_reg_263) else "0";
    icmp_ln1057_2_fu_193_p2 <= "1" when (y_reg_107 = p_cast_reg_268) else "0";
    icmp_ln1057_3_fu_208_p2 <= "1" when (x_1_reg_118 = p_cast_reg_268) else "0";
    icmp_ln1057_fu_143_p2 <= "1" when (p_cast_fu_133_p4 = ap_const_lv8_0) else "0";
    mul_ln258_fu_176_p0 <= mul_ln258_fu_176_p00(8 - 1 downto 0);
    mul_ln258_fu_176_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnx_1_fu_58),14));
    mul_ln258_fu_176_p1 <= p_cast37_cast_reg_278(8 - 1 downto 0);
    p_cast37_cast_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast_fu_133_p4),14));
    p_cast_fu_133_p4 <= p_read1(31 downto 24);
    pnx_fu_166_p2 <= std_logic_vector(unsigned(pnx_1_fu_58) + unsigned(ap_const_lv8_1));
    ret_fu_223_p2 <= std_logic_vector(unsigned(mul_ln258_reg_291) + unsigned(zext_ln1525_fu_219_p1));
    tmp_cast_fu_185_p3 <= (trunc_ln264_fu_181_p1 & ap_const_lv8_0);
    trunc_ln264_fu_181_p1 <= y_reg_107(6 - 1 downto 0);
    x_fu_213_p2 <= std_logic_vector(unsigned(x_1_reg_118) + unsigned(ap_const_lv8_1));
    zext_ln1525_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_1_reg_118),14));
    zext_ln264_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln264_fu_228_p2),64));
end behav;
