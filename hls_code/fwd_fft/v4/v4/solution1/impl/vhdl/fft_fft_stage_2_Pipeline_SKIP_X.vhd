-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_fft_stage_2_Pipeline_SKIP_X is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    trunc_ln16 : IN STD_LOGIC_VECTOR (6 downto 0);
    IN_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    IN_r_ce0 : OUT STD_LOGIC;
    IN_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    IN_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    IN_r_ce1 : OUT STD_LOGIC;
    IN_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_data_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    out_data_6_ce0 : OUT STD_LOGIC;
    out_data_6_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_data_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_data_6_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    out_data_6_ce1 : OUT STD_LOGIC;
    out_data_6_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_data_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fft_fft_stage_2_Pipeline_SKIP_X is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1057_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal w_M_real17_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_M_real17_ce0 : STD_LOGIC;
    signal w_M_real17_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_M_imag13_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_M_imag13_ce0 : STD_LOGIC;
    signal w_M_imag13_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln21_fu_265_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln21_reg_477 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln21_reg_477_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln21_reg_477_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln22_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_reg_482 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_reg_482_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_reg_482_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_reg_482_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_reg_482_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_reg_482_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_reg_482_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_r_M_real_fu_367_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_fu_373_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_i_i_reg_516 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_191_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul3_i_i_reg_521 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_196_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul6_i_i_reg_526 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_201_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul9_i_i_reg_531 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln21_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_reg_536 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_reg_536_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_reg_536_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_reg_536_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln21_fu_383_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln21_reg_546 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln21_1_reg_551 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_174_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_reg_556 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_162_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_33_reg_562 : STD_LOGIC_VECTOR (15 downto 0);
    signal t1_M_real_fu_397_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal t1_M_imag_fu_402_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_166_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_29_reg_580 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_170_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_34_reg_585 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_178_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_30_reg_590 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_182_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_35_reg_595 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln20_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal k1_fu_70 : STD_LOGIC_VECTOR (6 downto 0);
    signal k1_10_fu_229_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j1_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal j1_13_fu_322_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m1_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal m1_10_fu_330_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln20_fu_249_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_fu_253_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1057_5_fu_245_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1057_fu_241_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln22_fu_271_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln33_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln36_fu_300_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln29_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j1_11_fu_288_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j1_12_fu_306_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m1_9_fu_314_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln388_fu_353_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln388_1_fu_357_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln176_fu_410_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln173_fu_407_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln176_1_fu_425_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln173_1_fu_422_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fft_hadd_16ns_16ns_16_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft_hsub_16ns_16ns_16_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft_hmul_16ns_16ns_16_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft_fft_stage6_Pipeline_SKIP_X_w_M_real16 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft_fft_stage6_Pipeline_SKIP_X_w_M_imag12 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    w_M_real17_U : component fft_fft_stage6_Pipeline_SKIP_X_w_M_real16
    generic map (
        DataWidth => 16,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_M_real17_address0,
        ce0 => w_M_real17_ce0,
        q0 => w_M_real17_q0);

    w_M_imag13_U : component fft_fft_stage6_Pipeline_SKIP_X_w_M_imag12
    generic map (
        DataWidth => 16,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_M_imag13_address0,
        ce0 => w_M_imag13_ce0,
        q0 => w_M_imag13_q0);

    hadd_16ns_16ns_16_2_full_dsp_1_U102 : component fft_hadd_16ns_16ns_16_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul6_i_i_reg_526,
        din1 => mul9_i_i_reg_531,
        ce => ap_const_logic_1,
        dout => grp_fu_162_p2);

    hadd_16ns_16ns_16_2_full_dsp_1_U103 : component fft_hadd_16ns_16ns_16_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => t1_M_real_fu_397_p1,
        din1 => p_r_reg_556,
        ce => ap_const_logic_1,
        dout => grp_fu_166_p2);

    hadd_16ns_16ns_16_2_full_dsp_1_U104 : component fft_hadd_16ns_16ns_16_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => t1_M_imag_fu_402_p1,
        din1 => p_r_M_imag_33_reg_562,
        ce => ap_const_logic_1,
        dout => grp_fu_170_p2);

    hsub_16ns_16ns_16_2_full_dsp_1_U105 : component fft_hsub_16ns_16ns_16_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_i_i_reg_516,
        din1 => mul3_i_i_reg_521,
        ce => ap_const_logic_1,
        dout => grp_fu_174_p2);

    hsub_16ns_16ns_16_2_full_dsp_1_U106 : component fft_hsub_16ns_16ns_16_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => t1_M_real_fu_397_p1,
        din1 => p_r_reg_556,
        ce => ap_const_logic_1,
        dout => grp_fu_178_p2);

    hsub_16ns_16ns_16_2_full_dsp_1_U107 : component fft_hsub_16ns_16ns_16_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => t1_M_imag_fu_402_p1,
        din1 => p_r_M_imag_33_reg_562,
        ce => ap_const_logic_1,
        dout => grp_fu_182_p2);

    hmul_16ns_16ns_16_2_max_dsp_1_U108 : component fft_hmul_16ns_16ns_16_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_fu_367_p1,
        din1 => w_M_real17_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_186_p2);

    hmul_16ns_16ns_16_2_max_dsp_1_U109 : component fft_hmul_16ns_16ns_16_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_fu_373_p1,
        din1 => w_M_imag13_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_191_p2);

    hmul_16ns_16ns_16_2_max_dsp_1_U110 : component fft_hmul_16ns_16ns_16_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_fu_367_p1,
        din1 => w_M_imag13_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_196_p2);

    hmul_16ns_16ns_16_2_max_dsp_1_U111 : component fft_hmul_16ns_16ns_16_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_fu_373_p1,
        din1 => w_M_real17_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_201_p2);

    flow_control_loop_pipe_sequential_init_U : component fft_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    j1_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j1_fu_74 <= ap_const_lv32_0;
                elsif (((icmp_ln1057_fu_224_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j1_fu_74 <= j1_13_fu_322_p3;
                end if;
            end if; 
        end if;
    end process;

    k1_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k1_fu_70 <= ap_const_lv7_0;
                elsif (((icmp_ln1057_fu_224_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    k1_fu_70 <= k1_10_fu_229_p2;
                end if;
            end if; 
        end if;
    end process;

    m1_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    m1_fu_78 <= ap_const_lv32_0;
                elsif (((icmp_ln1057_fu_224_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    m1_fu_78 <= m1_10_fu_330_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_fu_224_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln21_reg_477 <= add_ln21_fu_265_p2;
                    zext_ln22_reg_482(5 downto 0) <= zext_ln22_fu_277_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln21_reg_477_pp0_iter2_reg <= add_ln21_reg_477;
                add_ln21_reg_477_pp0_iter3_reg <= add_ln21_reg_477_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                mul3_i_i_reg_521 <= grp_fu_191_p2;
                mul6_i_i_reg_526 <= grp_fu_196_p2;
                mul9_i_i_reg_531 <= grp_fu_201_p2;
                mul_i_i_reg_516 <= grp_fu_186_p2;
                p_r_M_imag_33_reg_562 <= grp_fu_162_p2;
                p_r_M_imag_34_reg_585 <= grp_fu_170_p2;
                p_r_M_imag_35_reg_595 <= grp_fu_182_p2;
                p_r_M_real_29_reg_580 <= grp_fu_166_p2;
                p_r_M_real_30_reg_590 <= grp_fu_178_p2;
                p_r_reg_556 <= grp_fu_174_p2;
                trunc_ln21_1_reg_551 <= IN_r_q0(31 downto 16);
                trunc_ln21_reg_546 <= trunc_ln21_fu_383_p1;
                    zext_ln21_reg_536(5 downto 0) <= zext_ln21_fu_379_p1(5 downto 0);
                    zext_ln21_reg_536_pp0_iter5_reg(5 downto 0) <= zext_ln21_reg_536(5 downto 0);
                    zext_ln21_reg_536_pp0_iter6_reg(5 downto 0) <= zext_ln21_reg_536_pp0_iter5_reg(5 downto 0);
                    zext_ln21_reg_536_pp0_iter7_reg(5 downto 0) <= zext_ln21_reg_536_pp0_iter6_reg(5 downto 0);
                    zext_ln22_reg_482_pp0_iter2_reg(5 downto 0) <= zext_ln22_reg_482(5 downto 0);
                    zext_ln22_reg_482_pp0_iter3_reg(5 downto 0) <= zext_ln22_reg_482_pp0_iter2_reg(5 downto 0);
                    zext_ln22_reg_482_pp0_iter4_reg(5 downto 0) <= zext_ln22_reg_482_pp0_iter3_reg(5 downto 0);
                    zext_ln22_reg_482_pp0_iter5_reg(5 downto 0) <= zext_ln22_reg_482_pp0_iter4_reg(5 downto 0);
                    zext_ln22_reg_482_pp0_iter6_reg(5 downto 0) <= zext_ln22_reg_482_pp0_iter5_reg(5 downto 0);
                    zext_ln22_reg_482_pp0_iter7_reg(5 downto 0) <= zext_ln22_reg_482_pp0_iter6_reg(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    zext_ln22_reg_482(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln22_reg_482_pp0_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln22_reg_482_pp0_iter3_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln22_reg_482_pp0_iter4_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln22_reg_482_pp0_iter5_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln22_reg_482_pp0_iter6_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln22_reg_482_pp0_iter7_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln21_reg_536(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln21_reg_536_pp0_iter5_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln21_reg_536_pp0_iter6_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln21_reg_536_pp0_iter7_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    IN_r_address0 <= zext_ln21_fu_379_p1(6 - 1 downto 0);
    IN_r_address1 <= zext_ln22_fu_277_p1(6 - 1 downto 0);

    IN_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            IN_r_ce0 <= ap_const_logic_1;
        else 
            IN_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    IN_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            IN_r_ce1 <= ap_const_logic_1;
        else 
            IN_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln20_fu_253_p2 <= std_logic_vector(unsigned(trunc_ln20_fu_249_p1) + unsigned(ap_const_lv8_A0));
    add_ln21_fu_265_p2 <= std_logic_vector(unsigned(trunc_ln1057_5_fu_245_p1) + unsigned(trunc_ln1057_fu_241_p1));
    add_ln36_fu_300_p2 <= std_logic_vector(unsigned(m1_fu_78) + unsigned(ap_const_lv32_40));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1057_fu_224_p2)
    begin
        if (((icmp_ln1057_fu_224_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln173_1_fu_422_p1 <= p_r_M_real_30_reg_590;
    bitcast_ln173_fu_407_p1 <= p_r_M_real_29_reg_580;
    bitcast_ln176_1_fu_425_p1 <= p_r_M_imag_35_reg_595;
    bitcast_ln176_fu_410_p1 <= p_r_M_imag_34_reg_585;
    icmp_ln1057_fu_224_p2 <= "1" when (k1_fu_70 = trunc_ln16) else "0";
    icmp_ln29_fu_282_p2 <= "1" when (unsigned(j1_fu_74) < unsigned(ap_const_lv32_1F)) else "0";
    icmp_ln33_fu_294_p2 <= "1" when (j1_fu_74 = ap_const_lv32_1F) else "0";
    j1_11_fu_288_p2 <= std_logic_vector(unsigned(j1_fu_74) + unsigned(ap_const_lv32_1));
    j1_12_fu_306_p3 <= 
        ap_const_lv32_0 when (icmp_ln33_fu_294_p2(0) = '1') else 
        j1_fu_74;
    j1_13_fu_322_p3 <= 
        j1_11_fu_288_p2 when (icmp_ln29_fu_282_p2(0) = '1') else 
        j1_12_fu_306_p3;
    k1_10_fu_229_p2 <= std_logic_vector(unsigned(k1_fu_70) + unsigned(ap_const_lv7_1));
    m1_10_fu_330_p3 <= 
        m1_fu_78 when (icmp_ln29_fu_282_p2(0) = '1') else 
        m1_9_fu_314_p3;
    m1_9_fu_314_p3 <= 
        add_ln36_fu_300_p2 when (icmp_ln33_fu_294_p2(0) = '1') else 
        m1_fu_78;
    out_data_6_address0 <= zext_ln22_reg_482_pp0_iter7_reg(6 - 1 downto 0);
    out_data_6_address1 <= zext_ln21_reg_536_pp0_iter7_reg(6 - 1 downto 0);

    out_data_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            out_data_6_ce0 <= ap_const_logic_1;
        else 
            out_data_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_data_6_ce1_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            out_data_6_ce1 <= ap_const_logic_1;
        else 
            out_data_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    out_data_6_d0 <= (bitcast_ln176_1_fu_425_p1 & bitcast_ln173_1_fu_422_p1);
    out_data_6_d1 <= (bitcast_ln176_fu_410_p1 & bitcast_ln173_fu_407_p1);

    out_data_6_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            out_data_6_we0 <= ap_const_lv4_F;
        else 
            out_data_6_we0 <= ap_const_lv4_0;
        end if; 
    end process;


    out_data_6_we1_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            out_data_6_we1 <= ap_const_lv4_F;
        else 
            out_data_6_we1 <= ap_const_lv4_0;
        end if; 
    end process;

    p_r_M_imag_fu_373_p1 <= trunc_ln388_1_fu_357_p4;
    p_r_M_real_fu_367_p1 <= trunc_ln388_fu_353_p1;
    t1_M_imag_fu_402_p1 <= trunc_ln21_1_reg_551;
    t1_M_real_fu_397_p1 <= trunc_ln21_reg_546;
    trunc_ln1057_5_fu_245_p1 <= j1_fu_74(6 - 1 downto 0);
    trunc_ln1057_fu_241_p1 <= m1_fu_78(6 - 1 downto 0);
    trunc_ln20_fu_249_p1 <= j1_fu_74(8 - 1 downto 0);
    trunc_ln21_fu_383_p1 <= IN_r_q0(16 - 1 downto 0);
    trunc_ln388_1_fu_357_p4 <= IN_r_q1(31 downto 16);
    trunc_ln388_fu_353_p1 <= IN_r_q1(16 - 1 downto 0);
    w_M_imag13_address0 <= zext_ln20_fu_259_p1(8 - 1 downto 0);

    w_M_imag13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_M_imag13_ce0 <= ap_const_logic_1;
        else 
            w_M_imag13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_M_real17_address0 <= zext_ln20_fu_259_p1(8 - 1 downto 0);

    w_M_real17_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_M_real17_ce0 <= ap_const_logic_1;
        else 
            w_M_real17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln22_fu_271_p2 <= (ap_const_lv6_20 xor add_ln21_fu_265_p2);
    zext_ln20_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_fu_253_p2),64));
    zext_ln21_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_reg_477_pp0_iter3_reg),64));
    zext_ln22_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln22_fu_271_p2),64));
end behav;
