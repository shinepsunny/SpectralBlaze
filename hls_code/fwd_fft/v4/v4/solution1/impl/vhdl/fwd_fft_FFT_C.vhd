-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fwd_fft_FFT_C is
port (
    c_row_op_trans_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    c_row_op_trans_st_empty_n : IN STD_LOGIC;
    c_row_op_trans_st_read : OUT STD_LOGIC;
    c_fft_col_op_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_fft_col_op_st_full_n : IN STD_LOGIC;
    c_fft_col_op_st_write : OUT STD_LOGIC;
    ctrl1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ctrl1_reg_empty_n : IN STD_LOGIC;
    ctrl1_reg_read : OUT STD_LOGIC;
    ctrl2_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ctrl2_reg_empty_n : IN STD_LOGIC;
    ctrl2_reg_read : OUT STD_LOGIC;
    layer1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_reg_empty_n : IN STD_LOGIC;
    layer1_reg_read : OUT STD_LOGIC;
    ctrl1_reg_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctrl1_reg_c_full_n : IN STD_LOGIC;
    ctrl1_reg_c_write : OUT STD_LOGIC;
    ctrl2_reg_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctrl2_reg_c_full_n : IN STD_LOGIC;
    ctrl2_reg_c_write : OUT STD_LOGIC;
    layer1_reg_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer1_reg_c_full_n : IN STD_LOGIC;
    layer1_reg_c_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of fwd_fft_FFT_C is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal FFT_C_Block_split11_proc_U0_ap_start : STD_LOGIC;
    signal FFT_C_Block_split11_proc_U0_ap_done : STD_LOGIC;
    signal FFT_C_Block_split11_proc_U0_ap_continue : STD_LOGIC;
    signal FFT_C_Block_split11_proc_U0_ap_idle : STD_LOGIC;
    signal FFT_C_Block_split11_proc_U0_ap_ready : STD_LOGIC;
    signal FFT_C_Block_split11_proc_U0_ctrl2_reg_read : STD_LOGIC;
    signal FFT_C_Block_split11_proc_U0_layer1_reg_read : STD_LOGIC;
    signal FFT_C_Block_split11_proc_U0_ctrl2_reg_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_C_Block_split11_proc_U0_ctrl2_reg_c_write : STD_LOGIC;
    signal FFT_C_Block_split11_proc_U0_layer1_reg_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_C_Block_split11_proc_U0_layer1_reg_c_write : STD_LOGIC;
    signal FFT_C_Block_split11_proc_U0_ap_return_0 : STD_LOGIC_VECTOR (23 downto 0);
    signal FFT_C_Block_split11_proc_U0_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal FFT_C_Block_split11_proc_U0_ap_return_2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_channel_done_rhs_V_4_loc_channel : STD_LOGIC;
    signal rhs_V_4_loc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_rhs_V_4_loc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_rhs_V_4_loc_channel : STD_LOGIC;
    signal ap_channel_done_rhs_V_loc_channel : STD_LOGIC;
    signal rhs_V_loc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_rhs_V_loc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_rhs_V_loc_channel : STD_LOGIC;
    signal ap_channel_done_rhs_V_3_loc_channel : STD_LOGIC;
    signal rhs_V_3_loc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_rhs_V_3_loc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_rhs_V_3_loc_channel : STD_LOGIC;
    signal FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ap_start : STD_LOGIC;
    signal FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ap_done : STD_LOGIC;
    signal FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ap_continue : STD_LOGIC;
    signal FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ap_idle : STD_LOGIC;
    signal FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ap_ready : STD_LOGIC;
    signal FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ctrl1_reg_read : STD_LOGIC;
    signal FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_c_row_op_trans_st_read : STD_LOGIC;
    signal FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_c_fft_col_op_st_din : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_c_fft_col_op_st_write : STD_LOGIC;
    signal FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ctrl1_reg_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ctrl1_reg_c_write : STD_LOGIC;
    signal rhs_V_3_loc_channel_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_3_loc_channel_empty_n : STD_LOGIC;
    signal rhs_V_loc_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_loc_channel_empty_n : STD_LOGIC;
    signal rhs_V_4_loc_channel_dout : STD_LOGIC_VECTOR (39 downto 0);
    signal rhs_V_4_loc_channel_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fwd_fft_FFT_C_Block_split11_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctrl2_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl2_reg_empty_n : IN STD_LOGIC;
        ctrl2_reg_read : OUT STD_LOGIC;
        layer1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        layer1_reg_empty_n : IN STD_LOGIC;
        layer1_reg_read : OUT STD_LOGIC;
        ctrl2_reg_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl2_reg_c_full_n : IN STD_LOGIC;
        ctrl2_reg_c_write : OUT STD_LOGIC;
        layer1_reg_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        layer1_reg_c_full_n : IN STD_LOGIC;
        layer1_reg_c_write : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component fwd_fft_FFT_C_Loop_VITIS_LOOP_131_1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctrl1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_reg_empty_n : IN STD_LOGIC;
        ctrl1_reg_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (23 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (39 downto 0);
        c_row_op_trans_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_row_op_trans_st_empty_n : IN STD_LOGIC;
        c_row_op_trans_st_read : OUT STD_LOGIC;
        c_fft_col_op_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_fft_col_op_st_full_n : IN STD_LOGIC;
        c_fft_col_op_st_write : OUT STD_LOGIC;
        ctrl1_reg_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_reg_c_full_n : IN STD_LOGIC;
        ctrl1_reg_c_write : OUT STD_LOGIC );
    end component;


    component fwd_fft_fifo_w24_d2_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (23 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (23 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fwd_fft_fifo_w16_d2_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fwd_fft_fifo_w40_d2_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (39 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (39 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    FFT_C_Block_split11_proc_U0 : component fwd_fft_FFT_C_Block_split11_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => FFT_C_Block_split11_proc_U0_ap_start,
        ap_done => FFT_C_Block_split11_proc_U0_ap_done,
        ap_continue => FFT_C_Block_split11_proc_U0_ap_continue,
        ap_idle => FFT_C_Block_split11_proc_U0_ap_idle,
        ap_ready => FFT_C_Block_split11_proc_U0_ap_ready,
        ctrl2_reg_dout => ctrl2_reg_dout,
        ctrl2_reg_empty_n => ctrl2_reg_empty_n,
        ctrl2_reg_read => FFT_C_Block_split11_proc_U0_ctrl2_reg_read,
        layer1_reg_dout => layer1_reg_dout,
        layer1_reg_empty_n => layer1_reg_empty_n,
        layer1_reg_read => FFT_C_Block_split11_proc_U0_layer1_reg_read,
        ctrl2_reg_c_din => FFT_C_Block_split11_proc_U0_ctrl2_reg_c_din,
        ctrl2_reg_c_full_n => ctrl2_reg_c_full_n,
        ctrl2_reg_c_write => FFT_C_Block_split11_proc_U0_ctrl2_reg_c_write,
        layer1_reg_c_din => FFT_C_Block_split11_proc_U0_layer1_reg_c_din,
        layer1_reg_c_full_n => layer1_reg_c_full_n,
        layer1_reg_c_write => FFT_C_Block_split11_proc_U0_layer1_reg_c_write,
        ap_return_0 => FFT_C_Block_split11_proc_U0_ap_return_0,
        ap_return_1 => FFT_C_Block_split11_proc_U0_ap_return_1,
        ap_return_2 => FFT_C_Block_split11_proc_U0_ap_return_2);

    FFT_C_Loop_VITIS_LOOP_131_1_proc_U0 : component fwd_fft_FFT_C_Loop_VITIS_LOOP_131_1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ap_start,
        ap_done => FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ap_done,
        ap_continue => FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ap_continue,
        ap_idle => FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ap_idle,
        ap_ready => FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ap_ready,
        ctrl1_reg_dout => ctrl1_reg_dout,
        ctrl1_reg_empty_n => ctrl1_reg_empty_n,
        ctrl1_reg_read => FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ctrl1_reg_read,
        p_read => rhs_V_loc_channel_dout,
        p_read1 => rhs_V_3_loc_channel_dout,
        p_read2 => rhs_V_4_loc_channel_dout,
        c_row_op_trans_st_dout => c_row_op_trans_st_dout,
        c_row_op_trans_st_empty_n => c_row_op_trans_st_empty_n,
        c_row_op_trans_st_read => FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_c_row_op_trans_st_read,
        c_fft_col_op_st_din => FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_c_fft_col_op_st_din,
        c_fft_col_op_st_full_n => c_fft_col_op_st_full_n,
        c_fft_col_op_st_write => FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_c_fft_col_op_st_write,
        ctrl1_reg_c_din => FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ctrl1_reg_c_din,
        ctrl1_reg_c_full_n => ctrl1_reg_c_full_n,
        ctrl1_reg_c_write => FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ctrl1_reg_c_write);

    rhs_V_3_loc_channel_U : component fwd_fft_fifo_w24_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => FFT_C_Block_split11_proc_U0_ap_return_0,
        if_full_n => rhs_V_3_loc_channel_full_n,
        if_write => ap_channel_done_rhs_V_3_loc_channel,
        if_dout => rhs_V_3_loc_channel_dout,
        if_empty_n => rhs_V_3_loc_channel_empty_n,
        if_read => FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ap_ready);

    rhs_V_loc_channel_U : component fwd_fft_fifo_w16_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => FFT_C_Block_split11_proc_U0_ap_return_1,
        if_full_n => rhs_V_loc_channel_full_n,
        if_write => ap_channel_done_rhs_V_loc_channel,
        if_dout => rhs_V_loc_channel_dout,
        if_empty_n => rhs_V_loc_channel_empty_n,
        if_read => FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ap_ready);

    rhs_V_4_loc_channel_U : component fwd_fft_fifo_w40_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => FFT_C_Block_split11_proc_U0_ap_return_2,
        if_full_n => rhs_V_4_loc_channel_full_n,
        if_write => ap_channel_done_rhs_V_4_loc_channel,
        if_dout => rhs_V_4_loc_channel_dout,
        if_empty_n => rhs_V_4_loc_channel_empty_n,
        if_read => FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ap_ready);





    ap_sync_reg_channel_write_rhs_V_3_loc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_rhs_V_3_loc_channel <= ap_const_logic_0;
            else
                if (((FFT_C_Block_split11_proc_U0_ap_done and FFT_C_Block_split11_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_rhs_V_3_loc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_rhs_V_3_loc_channel <= ap_sync_channel_write_rhs_V_3_loc_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_rhs_V_4_loc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_rhs_V_4_loc_channel <= ap_const_logic_0;
            else
                if (((FFT_C_Block_split11_proc_U0_ap_done and FFT_C_Block_split11_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_rhs_V_4_loc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_rhs_V_4_loc_channel <= ap_sync_channel_write_rhs_V_4_loc_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_rhs_V_loc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_rhs_V_loc_channel <= ap_const_logic_0;
            else
                if (((FFT_C_Block_split11_proc_U0_ap_done and FFT_C_Block_split11_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_rhs_V_loc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_rhs_V_loc_channel <= ap_sync_channel_write_rhs_V_loc_channel;
                end if; 
            end if;
        end if;
    end process;

    FFT_C_Block_split11_proc_U0_ap_continue <= (ap_sync_channel_write_rhs_V_loc_channel and ap_sync_channel_write_rhs_V_4_loc_channel and ap_sync_channel_write_rhs_V_3_loc_channel);
    FFT_C_Block_split11_proc_U0_ap_start <= ap_start;
    FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ap_continue <= ap_continue;
    FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ap_start <= (rhs_V_loc_channel_empty_n and rhs_V_4_loc_channel_empty_n and rhs_V_3_loc_channel_empty_n);
    ap_channel_done_rhs_V_3_loc_channel <= ((ap_sync_reg_channel_write_rhs_V_3_loc_channel xor ap_const_logic_1) and FFT_C_Block_split11_proc_U0_ap_done);
    ap_channel_done_rhs_V_4_loc_channel <= ((ap_sync_reg_channel_write_rhs_V_4_loc_channel xor ap_const_logic_1) and FFT_C_Block_split11_proc_U0_ap_done);
    ap_channel_done_rhs_V_loc_channel <= ((ap_sync_reg_channel_write_rhs_V_loc_channel xor ap_const_logic_1) and FFT_C_Block_split11_proc_U0_ap_done);
    ap_done <= FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ap_done;
    ap_idle <= ((rhs_V_4_loc_channel_empty_n xor ap_const_logic_1) and (rhs_V_loc_channel_empty_n xor ap_const_logic_1) and (rhs_V_3_loc_channel_empty_n xor ap_const_logic_1) and FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ap_idle and FFT_C_Block_split11_proc_U0_ap_idle);
    ap_ready <= FFT_C_Block_split11_proc_U0_ap_ready;
    ap_sync_channel_write_rhs_V_3_loc_channel <= ((rhs_V_3_loc_channel_full_n and ap_channel_done_rhs_V_3_loc_channel) or ap_sync_reg_channel_write_rhs_V_3_loc_channel);
    ap_sync_channel_write_rhs_V_4_loc_channel <= ((rhs_V_4_loc_channel_full_n and ap_channel_done_rhs_V_4_loc_channel) or ap_sync_reg_channel_write_rhs_V_4_loc_channel);
    ap_sync_channel_write_rhs_V_loc_channel <= ((rhs_V_loc_channel_full_n and ap_channel_done_rhs_V_loc_channel) or ap_sync_reg_channel_write_rhs_V_loc_channel);
    c_fft_col_op_st_din <= FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_c_fft_col_op_st_din;
    c_fft_col_op_st_write <= FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_c_fft_col_op_st_write;
    c_row_op_trans_st_read <= FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_c_row_op_trans_st_read;
    ctrl1_reg_c_din <= FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ctrl1_reg_c_din;
    ctrl1_reg_c_write <= FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ctrl1_reg_c_write;
    ctrl1_reg_read <= FFT_C_Loop_VITIS_LOOP_131_1_proc_U0_ctrl1_reg_read;
    ctrl2_reg_c_din <= FFT_C_Block_split11_proc_U0_ctrl2_reg_c_din;
    ctrl2_reg_c_write <= FFT_C_Block_split11_proc_U0_ctrl2_reg_c_write;
    ctrl2_reg_read <= FFT_C_Block_split11_proc_U0_ctrl2_reg_read;
    layer1_reg_c_din <= FFT_C_Block_split11_proc_U0_layer1_reg_c_din;
    layer1_reg_c_write <= FFT_C_Block_split11_proc_U0_layer1_reg_c_write;
    layer1_reg_read <= FFT_C_Block_split11_proc_U0_layer1_reg_read;
end behav;
