-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fwd_fft_compute_fft_write is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    c_fft_col_op_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_fft_col_op_st_full_n : IN STD_LOGIC;
    c_fft_col_op_st_write : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of fwd_fft_compute_fft_write is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_FFFFFFF5 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111110101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv16_FFF5 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111110101";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_FFFFFFF4 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111110100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1057_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal c_fft_col_op_st_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1035_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1035_reg_826 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1035_reg_826_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1035_reg_826_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_fu_233_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_reg_831 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_reg_831_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_reg_831_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_4_fu_247_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_4_reg_836 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_4_reg_836_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_255_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_reg_844 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1035_1_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1035_1_reg_849 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1035_1_reg_849_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1035_1_reg_849_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_fu_271_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_reg_854 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_reg_854_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_reg_854_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_5_fu_285_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_5_reg_859 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_5_reg_859_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_8_fu_293_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_8_reg_867 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1044_fu_318_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1044_reg_872 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1044_fu_324_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1044_reg_878 : STD_LOGIC_VECTOR (15 downto 0);
    signal lsb_index_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_reg_883 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_889 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln1047_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1047_reg_894 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1043_fu_375_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1043_reg_899 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1043_reg_899_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1044_1_fu_394_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1044_1_reg_904 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1044_1_fu_400_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1044_1_reg_910 : STD_LOGIC_VECTOR (15 downto 0);
    signal lsb_index_1_fu_404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_1_reg_915 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_921 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln1047_1_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1047_1_reg_926 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1043_1_fu_451_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1043_1_reg_931 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1043_1_reg_931_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal m_8_reg_936 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln1043_fu_575_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1043_reg_941 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_reg_946 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln1043_1_fu_703_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1043_1_reg_951 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_fft_M_real_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_fft_M_real_V_ce0 : STD_LOGIC;
    signal out_fft_M_real_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_fft_M_imag_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_fft_M_imag_V_ce0 : STD_LOGIC;
    signal out_fft_M_imag_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1057_fu_205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fu_98 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_y_load : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln222_fu_211_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_fu_102 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1057_fu_182_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bound_fu_157_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cast_fu_153_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_157_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound_fu_157_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1057_3_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln202_fu_197_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_fu_241_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_2_fu_279_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_15_fu_303_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_310_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1047_fu_344_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1047_fu_348_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1047_fu_354_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln1047_fu_358_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_4_fu_364_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_18_fu_379_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_1_fu_386_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1047_1_fu_420_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1047_1_fu_424_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1047_1_fu_430_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln1047_1_fu_434_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_10_fu_440_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_460_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1046_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1049_fu_478_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_3_fu_483_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1046_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1061_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1049_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1061_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1058_fu_515_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1058cast_fu_520_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1059_fu_529_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1059cast_fu_534_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1058_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln1058_fu_524_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1059_fu_538_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln_fu_502_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_2_fu_543_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_3_fu_551_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_5_fu_567_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_588_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1046_1_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1049_1_fu_606_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_11_fu_611_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1046_1_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1061_2_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1049_1_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1061_1_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1058_1_fu_643_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1058_1cast_fu_648_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1059_1_fu_657_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1059_1cast_fu_662_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1058_1_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln1058_1_fu_652_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1059_1_fu_666_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln1061_1_fu_630_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_4_fu_671_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_5_fu_679_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_12_fu_695_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1064_fu_714_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1064_fu_719_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1062_fu_711_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_724_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln1064_1_fu_746_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1064_1_fu_751_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1062_1_fu_743_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_756_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_16_fu_731_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_19_fu_763_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln174_1_fu_782_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln174_fu_775_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_193 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component fwd_fft_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fwd_fft_VITIS_LOOP_184_8_proc_out_fft_M_imag_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fwd_fft_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    out_fft_M_real_V_U : component fwd_fft_VITIS_LOOP_184_8_proc_out_fft_M_imag_V
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => out_fft_M_real_V_address0,
        ce0 => out_fft_M_real_V_ce0,
        q0 => out_fft_M_real_V_q0);

    out_fft_M_imag_V_U : component fwd_fft_VITIS_LOOP_184_8_proc_out_fft_M_imag_V
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => out_fft_M_imag_V_address0,
        ce0 => out_fft_M_imag_V_ce0,
        q0 => out_fft_M_imag_V_q0);

    mul_8ns_8ns_16_1_1_U110 : component fwd_fft_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => bound_fu_157_p0,
        din1 => bound_fu_157_p1,
        dout => bound_fu_157_p2);

    flow_control_loop_pipe_U : component fwd_fft_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_193)) then
                if ((icmp_ln1057_fu_176_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_102 <= add_ln1057_fu_182_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_102 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;

    y_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_193)) then
                if ((icmp_ln1057_fu_176_p2 = ap_const_lv1_0)) then 
                    y_fu_98 <= add_ln222_fu_211_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_98 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln1035_1_reg_849 <= icmp_ln1035_1_fu_265_p2;
                icmp_ln1035_reg_826 <= icmp_ln1035_fu_227_p2;
                p_Result_14_reg_831 <= out_fft_M_real_V_q0(15 downto 15);
                p_Result_17_reg_854 <= out_fft_M_imag_V_q0(15 downto 15);
                p_Result_8_reg_867 <= p_Result_8_fu_293_p4;
                p_Result_s_reg_844 <= p_Result_s_fu_255_p4;
                tmp_V_4_reg_836 <= tmp_V_4_fu_247_p3;
                tmp_V_5_reg_859 <= tmp_V_5_fu_285_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                icmp_ln1035_1_reg_849_pp0_iter2_reg <= icmp_ln1035_1_reg_849;
                icmp_ln1035_1_reg_849_pp0_iter3_reg <= icmp_ln1035_1_reg_849_pp0_iter2_reg;
                icmp_ln1035_reg_826_pp0_iter2_reg <= icmp_ln1035_reg_826;
                icmp_ln1035_reg_826_pp0_iter3_reg <= icmp_ln1035_reg_826_pp0_iter2_reg;
                p_Result_14_reg_831_pp0_iter2_reg <= p_Result_14_reg_831;
                p_Result_14_reg_831_pp0_iter3_reg <= p_Result_14_reg_831_pp0_iter2_reg;
                p_Result_17_reg_854_pp0_iter2_reg <= p_Result_17_reg_854;
                p_Result_17_reg_854_pp0_iter3_reg <= p_Result_17_reg_854_pp0_iter2_reg;
                tmp_V_4_reg_836_pp0_iter2_reg <= tmp_V_4_reg_836;
                tmp_V_5_reg_859_pp0_iter2_reg <= tmp_V_5_reg_859;
                trunc_ln1043_1_reg_931_pp0_iter3_reg <= trunc_ln1043_1_reg_931;
                trunc_ln1043_reg_899_pp0_iter3_reg <= trunc_ln1043_reg_899;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1035_1_reg_849 = ap_const_lv1_0))) then
                icmp_ln1047_1_reg_926 <= icmp_ln1047_1_fu_445_p2;
                lsb_index_1_reg_915 <= lsb_index_1_fu_404_p2;
                sub_ln1044_1_reg_904 <= sub_ln1044_1_fu_394_p2;
                tmp_8_reg_921 <= lsb_index_1_fu_404_p2(31 downto 1);
                trunc_ln1043_1_reg_931 <= trunc_ln1043_1_fu_451_p1;
                trunc_ln1044_1_reg_910 <= trunc_ln1044_1_fu_400_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1035_reg_826 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1047_reg_894 <= icmp_ln1047_fu_369_p2;
                lsb_index_reg_883 <= lsb_index_fu_328_p2;
                sub_ln1044_reg_872 <= sub_ln1044_fu_318_p2;
                tmp_4_reg_889 <= lsb_index_fu_328_p2(31 downto 1);
                trunc_ln1043_reg_899 <= trunc_ln1043_fu_375_p1;
                trunc_ln1044_reg_878 <= trunc_ln1044_fu_324_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1035_reg_826_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                m_8_reg_936 <= m_3_fu_551_p2(15 downto 1);
                    select_ln1043_reg_941(0) <= select_ln1043_fu_575_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1035_1_reg_849_pp0_iter2_reg = ap_const_lv1_0))) then
                m_reg_946 <= m_5_fu_679_p2(15 downto 1);
                    select_ln1043_1_reg_951(0) <= select_ln1043_1_fu_703_p3(0);
            end if;
        end if;
    end process;
    select_ln1043_reg_941(4 downto 1) <= "0111";
    select_ln1043_1_reg_951(4 downto 1) <= "0111";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1049_1_fu_606_p2 <= std_logic_vector(unsigned(trunc_ln1044_1_reg_910) + unsigned(ap_const_lv16_FFF5));
    add_ln1049_fu_478_p2 <= std_logic_vector(unsigned(trunc_ln1044_reg_878) + unsigned(ap_const_lv16_FFF5));
    add_ln1057_fu_182_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv16_1));
    add_ln1058_1_fu_643_p2 <= std_logic_vector(unsigned(sub_ln1044_1_reg_904) + unsigned(ap_const_lv32_FFFFFFF4));
    add_ln1058_1cast_fu_648_p1 <= add_ln1058_1_fu_643_p2(16 - 1 downto 0);
    add_ln1058_fu_515_p2 <= std_logic_vector(unsigned(sub_ln1044_reg_872) + unsigned(ap_const_lv32_FFFFFFF4));
    add_ln1058cast_fu_520_p1 <= add_ln1058_fu_515_p2(16 - 1 downto 0);
    add_ln1064_1_fu_751_p2 <= std_logic_vector(unsigned(sub_ln1064_1_fu_746_p2) + unsigned(select_ln1043_1_reg_951));
    add_ln1064_fu_719_p2 <= std_logic_vector(unsigned(sub_ln1064_fu_714_p2) + unsigned(select_ln1043_reg_941));
    add_ln222_fu_211_p2 <= std_logic_vector(unsigned(select_ln202_fu_197_p3) + unsigned(ap_const_lv8_1));
    and_ln1046_1_fu_601_p2 <= (icmp_ln1047_1_reg_926 and icmp_ln1046_1_fu_583_p2);
    and_ln1046_fu_473_p2 <= (icmp_ln1047_reg_894 and icmp_ln1046_fu_455_p2);
    and_ln1061_1_fu_624_p2 <= (xor_ln1049_1_fu_595_p2 and or_ln1061_2_fu_618_p2);
    and_ln1061_fu_496_p2 <= (xor_ln1049_fu_467_p2 and or_ln1061_fu_490_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_done_reg, c_fft_col_op_st_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((c_fft_col_op_st_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_done_reg, c_fft_col_op_st_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((c_fft_col_op_st_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, ap_done_reg, c_fft_col_op_st_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((c_fft_col_op_st_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter4_assign_proc : process(c_fft_col_op_st_full_n)
    begin
                ap_block_state5_pp0_stage0_iter4 <= (c_fft_col_op_st_full_n = ap_const_logic_0);
    end process;


    ap_condition_193_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_193 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln1057_fu_176_p2, ap_start_int)
    begin
        if (((icmp_ln1057_fu_176_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_102, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_102;
        end if; 
    end process;


    ap_sig_allocacmp_y_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, y_fu_98, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_y_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_y_load <= y_fu_98;
        end if; 
    end process;

    bound_fu_157_p0 <= cast_fu_153_p1(8 - 1 downto 0);
    bound_fu_157_p1 <= cast_fu_153_p1(8 - 1 downto 0);

    c_fft_col_op_st_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, c_fft_col_op_st_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            c_fft_col_op_st_blk_n <= c_fft_col_op_st_full_n;
        else 
            c_fft_col_op_st_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    c_fft_col_op_st_din <= (select_ln174_1_fu_782_p3 & select_ln174_fu_775_p3);

    c_fft_col_op_st_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            c_fft_col_op_st_write <= ap_const_logic_1;
        else 
            c_fft_col_op_st_write <= ap_const_logic_0;
        end if; 
    end process;

    cast_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),16));
    icmp_ln1035_1_fu_265_p2 <= "1" when (out_fft_M_imag_V_q0 = ap_const_lv16_0) else "0";
    icmp_ln1035_fu_227_p2 <= "1" when (out_fft_M_real_V_q0 = ap_const_lv16_0) else "0";
    icmp_ln1046_1_fu_583_p2 <= "1" when (signed(tmp_8_reg_921) > signed(ap_const_lv31_0)) else "0";
    icmp_ln1046_fu_455_p2 <= "1" when (signed(tmp_4_reg_889) > signed(ap_const_lv31_0)) else "0";
    icmp_ln1047_1_fu_445_p2 <= "0" when (p_Result_10_fu_440_p2 = ap_const_lv16_0) else "1";
    icmp_ln1047_fu_369_p2 <= "0" when (p_Result_4_fu_364_p2 = ap_const_lv16_0) else "1";
    icmp_ln1057_3_fu_191_p2 <= "1" when (ap_sig_allocacmp_y_load = p_read) else "0";
    icmp_ln1057_fu_176_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = bound_fu_157_p2) else "0";
    icmp_ln1058_1_fu_638_p2 <= "1" when (signed(lsb_index_1_reg_915) > signed(ap_const_lv32_0)) else "0";
    icmp_ln1058_fu_510_p2 <= "1" when (signed(lsb_index_reg_883) > signed(ap_const_lv32_0)) else "0";
    
    l_1_fu_386_p3_proc : process(p_Result_18_fu_379_p3)
    begin
        l_1_fu_386_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_18_fu_379_p3(i) = '1' then
                l_1_fu_386_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    l_fu_310_p3_proc : process(p_Result_15_fu_303_p3)
    begin
        l_fu_310_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_15_fu_303_p3(i) = '1' then
                l_fu_310_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_1_fu_404_p2 <= std_logic_vector(unsigned(sub_ln1044_1_fu_394_p2) + unsigned(ap_const_lv32_FFFFFFF5));
    lsb_index_fu_328_p2 <= std_logic_vector(unsigned(sub_ln1044_fu_318_p2) + unsigned(ap_const_lv32_FFFFFFF5));
    lshr_ln1047_1_fu_434_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln1047_1_fu_430_p1(16-1 downto 0)))));
    lshr_ln1047_fu_358_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln1047_fu_354_p1(16-1 downto 0)))));
    lshr_ln1058_1_fu_652_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_5_reg_859_pp0_iter2_reg),to_integer(unsigned('0' & add_ln1058_1cast_fu_648_p1(16-1 downto 0)))));
    lshr_ln1058_fu_524_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_4_reg_836_pp0_iter2_reg),to_integer(unsigned('0' & add_ln1058cast_fu_520_p1(16-1 downto 0)))));
    m_2_fu_543_p3 <= 
        lshr_ln1058_fu_524_p2 when (icmp_ln1058_fu_510_p2(0) = '1') else 
        shl_ln1059_fu_538_p2;
    m_3_fu_551_p2 <= std_logic_vector(unsigned(or_ln_fu_502_p3) + unsigned(m_2_fu_543_p3));
    m_4_fu_671_p3 <= 
        lshr_ln1058_1_fu_652_p2 when (icmp_ln1058_1_fu_638_p2(0) = '1') else 
        shl_ln1059_1_fu_666_p2;
    m_5_fu_679_p2 <= std_logic_vector(unsigned(or_ln1061_1_fu_630_p3) + unsigned(m_4_fu_671_p3));
    or_ln1061_1_fu_630_p3 <= (ap_const_lv15_0 & and_ln1061_1_fu_624_p2);
    or_ln1061_2_fu_618_p2 <= (p_Result_11_fu_611_p3 or and_ln1046_1_fu_601_p2);
    or_ln1061_fu_490_p2 <= (p_Result_3_fu_483_p3 or and_ln1046_fu_473_p2);
    or_ln_fu_502_p3 <= (ap_const_lv15_0 & and_ln1061_fu_496_p2);
    out_fft_M_imag_V_address0 <= zext_ln1057_fu_205_p1(6 - 1 downto 0);

    out_fft_M_imag_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_fft_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            out_fft_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_fft_M_real_V_address0 <= zext_ln1057_fu_205_p1(6 - 1 downto 0);

    out_fft_M_real_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_fft_M_real_V_ce0 <= ap_const_logic_1;
        else 
            out_fft_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_10_fu_440_p2 <= (tmp_V_5_reg_859 and lshr_ln1047_1_fu_434_p2);
    p_Result_11_fu_611_p3 <= tmp_V_5_reg_859_pp0_iter2_reg(to_integer(unsigned(add_ln1049_1_fu_606_p2)) downto to_integer(unsigned(add_ln1049_1_fu_606_p2))) when (to_integer(unsigned(add_ln1049_1_fu_606_p2))>= 0 and to_integer(unsigned(add_ln1049_1_fu_606_p2))<=15) else "-";
    p_Result_12_fu_695_p3 <= m_5_fu_679_p2(12 downto 12);
    p_Result_14_fu_233_p3 <= out_fft_M_real_V_q0(15 downto 15);
    p_Result_15_fu_303_p3 <= (ap_const_lv16_FFFF & p_Result_s_reg_844);
    p_Result_16_fu_731_p5 <= (tmp_s_fu_724_p3 & zext_ln1062_fu_711_p1(9 downto 0));
    p_Result_17_fu_271_p3 <= out_fft_M_imag_V_q0(15 downto 15);
    p_Result_18_fu_379_p3 <= (ap_const_lv16_FFFF & p_Result_8_reg_867);
    p_Result_19_fu_763_p5 <= (tmp_2_fu_756_p3 & zext_ln1062_1_fu_743_p1(9 downto 0));
    p_Result_3_fu_483_p3 <= tmp_V_4_reg_836_pp0_iter2_reg(to_integer(unsigned(add_ln1049_fu_478_p2)) downto to_integer(unsigned(add_ln1049_fu_478_p2))) when (to_integer(unsigned(add_ln1049_fu_478_p2))>= 0 and to_integer(unsigned(add_ln1049_fu_478_p2))<=15) else "-";
    p_Result_4_fu_364_p2 <= (tmp_V_4_reg_836 and lshr_ln1047_fu_358_p2);
    p_Result_5_fu_567_p3 <= m_3_fu_551_p2(12 downto 12);
    
    p_Result_8_fu_293_p4_proc : process(tmp_V_5_fu_285_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable p_Result_8_fu_293_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_5_fu_285_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for p_Result_8_fu_293_p4_i in 0 to 16-1 loop
                v0_cpy(p_Result_8_fu_293_p4_i) := tmp_V_5_fu_285_p3(16-1-p_Result_8_fu_293_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_8_fu_293_p4 <= resvalue(16-1 downto 0);
    end process;

    
    p_Result_s_fu_255_p4_proc : process(tmp_V_4_fu_247_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable p_Result_s_fu_255_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_4_fu_247_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for p_Result_s_fu_255_p4_i in 0 to 16-1 loop
                v0_cpy(p_Result_s_fu_255_p4_i) := tmp_V_4_fu_247_p3(16-1-p_Result_s_fu_255_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_255_p4 <= resvalue(16-1 downto 0);
    end process;

    select_ln1043_1_fu_703_p3 <= 
        ap_const_lv5_F when (p_Result_12_fu_695_p3(0) = '1') else 
        ap_const_lv5_E;
    select_ln1043_fu_575_p3 <= 
        ap_const_lv5_F when (p_Result_5_fu_567_p3(0) = '1') else 
        ap_const_lv5_E;
    select_ln174_1_fu_782_p3 <= 
        ap_const_lv16_0 when (icmp_ln1035_1_reg_849_pp0_iter3_reg(0) = '1') else 
        p_Result_19_fu_763_p5;
    select_ln174_fu_775_p3 <= 
        ap_const_lv16_0 when (icmp_ln1035_reg_826_pp0_iter3_reg(0) = '1') else 
        p_Result_16_fu_731_p5;
    select_ln202_fu_197_p3 <= 
        ap_const_lv8_0 when (icmp_ln1057_3_fu_191_p2(0) = '1') else 
        ap_sig_allocacmp_y_load;
    shl_ln1059_1_fu_666_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_5_reg_859_pp0_iter2_reg),to_integer(unsigned('0' & sub_ln1059_1cast_fu_662_p1(16-1 downto 0)))));
    shl_ln1059_fu_538_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_4_reg_836_pp0_iter2_reg),to_integer(unsigned('0' & sub_ln1059cast_fu_534_p1(16-1 downto 0)))));
    sub_ln1044_1_fu_394_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) - unsigned(l_1_fu_386_p3));
    sub_ln1044_fu_318_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) - unsigned(l_fu_310_p3));
    sub_ln1047_1_fu_424_p2 <= std_logic_vector(signed(ap_const_lv5_1C) - signed(trunc_ln1047_1_fu_420_p1));
    sub_ln1047_fu_348_p2 <= std_logic_vector(signed(ap_const_lv5_1C) - signed(trunc_ln1047_fu_344_p1));
    sub_ln1059_1_fu_657_p2 <= std_logic_vector(unsigned(ap_const_lv32_C) - unsigned(sub_ln1044_1_reg_904));
    sub_ln1059_1cast_fu_662_p1 <= sub_ln1059_1_fu_657_p2(16 - 1 downto 0);
    sub_ln1059_fu_529_p2 <= std_logic_vector(unsigned(ap_const_lv32_C) - unsigned(sub_ln1044_reg_872));
    sub_ln1059cast_fu_534_p1 <= sub_ln1059_fu_529_p2(16 - 1 downto 0);
    sub_ln1064_1_fu_746_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) - unsigned(trunc_ln1043_1_reg_931_pp0_iter3_reg));
    sub_ln1064_fu_714_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) - unsigned(trunc_ln1043_reg_899_pp0_iter3_reg));
    tmp_2_fu_756_p3 <= (p_Result_17_reg_854_pp0_iter3_reg & add_ln1064_1_fu_751_p2);
    tmp_5_fu_460_p3 <= lsb_index_reg_883(31 downto 31);
    tmp_9_fu_588_p3 <= lsb_index_1_reg_915(31 downto 31);
    tmp_V_2_fu_279_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(out_fft_M_imag_V_q0));
    tmp_V_4_fu_247_p3 <= 
        tmp_V_fu_241_p2 when (p_Result_14_fu_233_p3(0) = '1') else 
        out_fft_M_real_V_q0;
    tmp_V_5_fu_285_p3 <= 
        tmp_V_2_fu_279_p2 when (p_Result_17_fu_271_p3(0) = '1') else 
        out_fft_M_imag_V_q0;
    tmp_V_fu_241_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(out_fft_M_real_V_q0));
    tmp_s_fu_724_p3 <= (p_Result_14_reg_831_pp0_iter3_reg & add_ln1064_fu_719_p2);
    trunc_ln1043_1_fu_451_p1 <= l_1_fu_386_p3(5 - 1 downto 0);
    trunc_ln1043_fu_375_p1 <= l_fu_310_p3(5 - 1 downto 0);
    trunc_ln1044_1_fu_400_p1 <= sub_ln1044_1_fu_394_p2(16 - 1 downto 0);
    trunc_ln1044_fu_324_p1 <= sub_ln1044_fu_318_p2(16 - 1 downto 0);
    trunc_ln1047_1_fu_420_p1 <= sub_ln1044_1_fu_394_p2(5 - 1 downto 0);
    trunc_ln1047_fu_344_p1 <= sub_ln1044_fu_318_p2(5 - 1 downto 0);
    xor_ln1049_1_fu_595_p2 <= (tmp_9_fu_588_p3 xor ap_const_lv1_1);
    xor_ln1049_fu_467_p2 <= (tmp_5_fu_460_p3 xor ap_const_lv1_1);
    zext_ln1047_1_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1047_1_fu_424_p2),16));
    zext_ln1047_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1047_fu_348_p2),16));
    zext_ln1057_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln202_fu_197_p3),64));
    zext_ln1062_1_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_946),16));
    zext_ln1062_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_8_reg_936),16));
end behav;
