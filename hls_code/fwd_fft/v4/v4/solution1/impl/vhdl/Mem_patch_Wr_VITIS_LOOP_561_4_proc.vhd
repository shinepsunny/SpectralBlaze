-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Mem_patch_Wr_VITIS_LOOP_561_4_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctrl1_reg : IN STD_LOGIC_VECTOR (31 downto 0);
    ifmap_CF_M_real1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifmap_CF_M_real1_ce0 : OUT STD_LOGIC;
    ifmap_CF_M_real1_we0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    ifmap_CF_M_real1_d0 : OUT STD_LOGIC_VECTOR (1023 downto 0);
    ifmap_CF_M_imag2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifmap_CF_M_imag2_ce0 : OUT STD_LOGIC;
    ifmap_CF_M_imag2_we0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    ifmap_CF_M_imag2_d0 : OUT STD_LOGIC_VECTOR (1023 downto 0);
    c_fft_col_op_st_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    c_fft_col_op_st_V_empty_n : IN STD_LOGIC;
    c_fft_col_op_st_V_read : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Mem_patch_Wr_VITIS_LOOP_561_4_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv12_F : STD_LOGIC_VECTOR (11 downto 0) := "000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv1024_lc_2 : STD_LOGIC_VECTOR (1023 downto
    constant ap_const_lv32_3FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111111";
    constant ap_const_lv128_lc_3 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal c_fft_col_op_st_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln1057_1_reg_493 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_124_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_450 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_2_reg_456 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln561_fu_141_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln561_reg_464 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln145_fu_147_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln145_reg_469 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln1057_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_2_fu_151_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln145_2_reg_474 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_fu_155_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_reg_479 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_79_fu_163_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_79_reg_485 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1057_1_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln564_fu_174_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln564_reg_497 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1057_fu_180_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1057_reg_502 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln145_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln145_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln145_fu_264_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal shl_ln145_reg_513 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln145_fu_282_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln145_reg_519 : STD_LOGIC_VECTOR (1023 downto 0);
    signal icmp_ln145_1_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln145_1_reg_524 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln145_3_fu_354_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal shl_ln145_3_reg_529 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln145_2_fu_372_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln145_2_reg_535 : STD_LOGIC_VECTOR (1023 downto 0);
    signal y_reg_112 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal x_fu_72 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal shl_ln145_2_fu_414_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln145_3_fu_184_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_202_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln145_4_fu_209_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln145_fu_216_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln145_fu_222_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln145_2_fu_238_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln145_1_fu_230_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln145_1_fu_246_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln145_fu_212_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln145_1_fu_252_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln145_2_fu_256_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln145_3_fu_260_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal shl_ln145_1_fu_270_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln145_fu_276_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal trunc_ln145_1_fu_188_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_23_fu_292_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln145_5_fu_299_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln145_2_fu_306_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln145_4_fu_312_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln145_6_fu_328_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln145_5_fu_320_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln145_3_fu_336_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln145_5_fu_302_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln145_6_fu_342_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln145_7_fu_346_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln145_8_fu_350_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal shl_ln145_4_fu_360_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln145_1_fu_366_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_22_fu_382_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln145_3_fu_391_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal udiv_fu_403_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln145_4_fu_410_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_24_fu_422_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln145_7_fu_431_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln1057_fu_136_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    x_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_fu_72 <= ap_const_lv8_0;
            elsif ((not(((icmp_ln1057_1_reg_493 = ap_const_lv1_0) and (c_fft_col_op_st_V_empty_n = ap_const_logic_0))) and (icmp_ln1057_1_reg_493 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                x_fu_72 <= add_ln561_reg_464;
            end if; 
        end if;
    end process;

    y_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y_reg_112 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                y_reg_112 <= add_ln564_reg_497;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln561_reg_464 <= add_ln561_fu_141_p2;
                x_2_reg_456 <= x_fu_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln564_reg_497 <= add_ln564_fu_174_p2;
                icmp_ln1057_1_reg_493 <= icmp_ln1057_1_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_1_reg_493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                and_ln145_2_reg_535 <= and_ln145_2_fu_372_p2;
                and_ln145_reg_519 <= and_ln145_fu_282_p2;
                icmp_ln145_1_reg_524 <= icmp_ln145_1_fu_288_p2;
                icmp_ln145_reg_508 <= icmp_ln145_fu_198_p2;
                shl_ln145_3_reg_529 <= shl_ln145_3_fu_354_p2;
                shl_ln145_reg_513 <= shl_ln145_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    empty_79_reg_485(11 downto 4) <= empty_79_fu_163_p2(11 downto 4);
                    shl_ln_reg_479(11 downto 4) <= shl_ln_fu_155_p3(11 downto 4);
                trunc_ln145_2_reg_474 <= trunc_ln145_2_fu_151_p1;
                trunc_ln145_reg_469 <= trunc_ln145_fu_147_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_reg_450 <= empty_fu_124_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    zext_ln1057_reg_502(7 downto 0) <= zext_ln1057_fu_180_p1(7 downto 0);
            end if;
        end if;
    end process;
    shl_ln_reg_479(3 downto 0) <= "0000";
    empty_79_reg_485(3 downto 0) <= "1111";
    zext_ln1057_reg_502(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, c_fft_col_op_st_V_empty_n, ap_CS_fsm_state4, icmp_ln1057_1_reg_493, ap_CS_fsm_state2, icmp_ln1057_fu_136_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln1057_fu_136_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if ((not(((icmp_ln1057_1_reg_493 = ap_const_lv1_0) and (c_fft_col_op_st_V_empty_n = ap_const_logic_0))) and (icmp_ln1057_1_reg_493 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((icmp_ln1057_1_reg_493 = ap_const_lv1_0) and (c_fft_col_op_st_V_empty_n = ap_const_logic_0))) and (icmp_ln1057_1_reg_493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln561_fu_141_p2 <= std_logic_vector(unsigned(x_fu_72) + unsigned(ap_const_lv8_1));
    add_ln564_fu_174_p2 <= std_logic_vector(unsigned(y_reg_112) + unsigned(ap_const_lv8_1));
    and_ln145_2_fu_372_p2 <= (shl_ln145_4_fu_360_p2 and lshr_ln145_1_fu_366_p2);
    and_ln145_fu_282_p2 <= (shl_ln145_1_fu_270_p2 and lshr_ln145_fu_276_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(c_fft_col_op_st_V_empty_n, icmp_ln1057_1_reg_493)
    begin
        if (((icmp_ln1057_1_reg_493 = ap_const_lv1_0) and (c_fft_col_op_st_V_empty_n = ap_const_logic_0))) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(c_fft_col_op_st_V_empty_n, icmp_ln1057_1_reg_493)
    begin
                ap_block_state4 <= ((icmp_ln1057_1_reg_493 = ap_const_lv1_0) and (c_fft_col_op_st_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln1057_fu_136_p2)
    begin
        if (((icmp_ln1057_fu_136_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln1057_fu_136_p2)
    begin
        if (((icmp_ln1057_fu_136_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= empty_reg_450;

    c_fft_col_op_st_V_blk_n_assign_proc : process(c_fft_col_op_st_V_empty_n, ap_CS_fsm_state4, icmp_ln1057_1_reg_493)
    begin
        if (((icmp_ln1057_1_reg_493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            c_fft_col_op_st_V_blk_n <= c_fft_col_op_st_V_empty_n;
        else 
            c_fft_col_op_st_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    c_fft_col_op_st_V_read_assign_proc : process(c_fft_col_op_st_V_empty_n, ap_CS_fsm_state4, icmp_ln1057_1_reg_493)
    begin
        if ((not(((icmp_ln1057_1_reg_493 = ap_const_lv1_0) and (c_fft_col_op_st_V_empty_n = ap_const_logic_0))) and (icmp_ln1057_1_reg_493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            c_fft_col_op_st_V_read <= ap_const_logic_1;
        else 
            c_fft_col_op_st_V_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_79_fu_163_p2 <= (shl_ln_fu_155_p3 or ap_const_lv12_F);
    empty_fu_124_p1 <= ctrl1_reg(8 - 1 downto 0);
    icmp_ln1057_1_fu_169_p2 <= "1" when (y_reg_112 = empty_reg_450) else "0";
    icmp_ln1057_fu_136_p2 <= "1" when (x_fu_72 = empty_reg_450) else "0";
    icmp_ln145_1_fu_288_p2 <= "1" when (unsigned(shl_ln_reg_479) > unsigned(empty_79_reg_485)) else "0";
    icmp_ln145_fu_198_p2 <= "1" when (unsigned(shl_ln_reg_479) > unsigned(empty_79_reg_485)) else "0";
    ifmap_CF_M_imag2_address0 <= zext_ln1057_reg_502(6 - 1 downto 0);

    ifmap_CF_M_imag2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ifmap_CF_M_imag2_ce0 <= ap_const_logic_1;
        else 
            ifmap_CF_M_imag2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifmap_CF_M_imag2_d0 <= (select_ln145_7_fu_431_p3 and and_ln145_2_reg_535);

    ifmap_CF_M_imag2_we0_assign_proc : process(ap_CS_fsm_state5, shl_ln145_2_fu_414_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ifmap_CF_M_imag2_we0 <= shl_ln145_2_fu_414_p2;
        else 
            ifmap_CF_M_imag2_we0 <= ap_const_lv128_lc_1;
        end if; 
    end process;

    ifmap_CF_M_real1_address0 <= zext_ln1057_reg_502(6 - 1 downto 0);

    ifmap_CF_M_real1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ifmap_CF_M_real1_ce0 <= ap_const_logic_1;
        else 
            ifmap_CF_M_real1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifmap_CF_M_real1_d0 <= (select_ln145_3_fu_391_p3 and and_ln145_reg_519);

    ifmap_CF_M_real1_we0_assign_proc : process(ap_CS_fsm_state5, shl_ln145_2_fu_414_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ifmap_CF_M_real1_we0 <= shl_ln145_2_fu_414_p2;
        else 
            ifmap_CF_M_real1_we0 <= ap_const_lv128_lc_1;
        end if; 
    end process;

    lshr_ln145_1_fu_366_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_2),to_integer(unsigned('0' & zext_ln145_8_fu_350_p1(31-1 downto 0)))));
    lshr_ln145_fu_276_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_2),to_integer(unsigned('0' & zext_ln145_3_fu_260_p1(31-1 downto 0)))));
    select_ln145_1_fu_230_p3 <= 
        trunc_ln145_4_fu_209_p1 when (icmp_ln145_fu_198_p2(0) = '1') else 
        tmp_fu_202_p3;
    select_ln145_2_fu_238_p3 <= 
        sub_ln145_fu_216_p2 when (icmp_ln145_fu_198_p2(0) = '1') else 
        tmp_fu_202_p3;
    select_ln145_3_fu_391_p3 <= 
        tmp_22_fu_382_p4 when (icmp_ln145_reg_508(0) = '1') else 
        shl_ln145_reg_513;
    select_ln145_4_fu_312_p3 <= 
        tmp_23_fu_292_p3 when (icmp_ln145_1_fu_288_p2(0) = '1') else 
        trunc_ln145_5_fu_299_p1;
    select_ln145_5_fu_320_p3 <= 
        trunc_ln145_5_fu_299_p1 when (icmp_ln145_1_fu_288_p2(0) = '1') else 
        tmp_23_fu_292_p3;
    select_ln145_6_fu_328_p3 <= 
        sub_ln145_2_fu_306_p2 when (icmp_ln145_1_fu_288_p2(0) = '1') else 
        tmp_23_fu_292_p3;
    select_ln145_7_fu_431_p3 <= 
        tmp_24_fu_422_p4 when (icmp_ln145_1_reg_524(0) = '1') else 
        shl_ln145_3_reg_529;
    select_ln145_fu_222_p3 <= 
        tmp_fu_202_p3 when (icmp_ln145_fu_198_p2(0) = '1') else 
        trunc_ln145_4_fu_209_p1;
    shl_ln145_1_fu_270_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv1024_lc_2),to_integer(unsigned('0' & zext_ln145_2_fu_256_p1(31-1 downto 0)))));
    shl_ln145_2_fu_414_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & zext_ln145_4_fu_410_p1(31-1 downto 0)))));
    shl_ln145_3_fu_354_p2 <= std_logic_vector(shift_left(unsigned(zext_ln145_5_fu_302_p1),to_integer(unsigned('0' & zext_ln145_6_fu_342_p1(31-1 downto 0)))));
    shl_ln145_4_fu_360_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv1024_lc_2),to_integer(unsigned('0' & zext_ln145_7_fu_346_p1(31-1 downto 0)))));
    shl_ln145_fu_264_p2 <= std_logic_vector(shift_left(unsigned(zext_ln145_fu_212_p1),to_integer(unsigned('0' & zext_ln145_1_fu_252_p1(31-1 downto 0)))));
    shl_ln_fu_155_p3 <= (x_fu_72 & ap_const_lv4_0);
    sub_ln145_1_fu_246_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln145_fu_222_p3));
    sub_ln145_2_fu_306_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_23_fu_292_p3));
    sub_ln145_3_fu_336_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln145_4_fu_312_p3));
    sub_ln145_fu_216_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_fu_202_p3));
    
    tmp_22_fu_382_p4_proc : process(shl_ln145_reg_513)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_22_fu_382_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := shl_ln145_reg_513;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_22_fu_382_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_22_fu_382_p4_i) := shl_ln145_reg_513(1024-1-tmp_22_fu_382_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_22_fu_382_p4 <= resvalue(1024-1 downto 0);
    end process;

    tmp_23_fu_292_p3 <= (trunc_ln145_reg_469 & ap_const_lv4_0);
    
    tmp_24_fu_422_p4_proc : process(shl_ln145_3_reg_529)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_24_fu_422_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := shl_ln145_3_reg_529;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_24_fu_422_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_24_fu_422_p4_i) := shl_ln145_3_reg_529(1024-1-tmp_24_fu_422_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_24_fu_422_p4 <= resvalue(1024-1 downto 0);
    end process;

    tmp_fu_202_p3 <= (trunc_ln145_2_reg_474 & ap_const_lv4_0);
    trunc_ln145_1_fu_188_p4 <= c_fft_col_op_st_V_dout(31 downto 16);
    trunc_ln145_2_fu_151_p1 <= x_fu_72(7 - 1 downto 0);
    trunc_ln145_3_fu_184_p1 <= c_fft_col_op_st_V_dout(16 - 1 downto 0);
    trunc_ln145_4_fu_209_p1 <= empty_79_reg_485(11 - 1 downto 0);
    trunc_ln145_5_fu_299_p1 <= empty_79_reg_485(11 - 1 downto 0);
    trunc_ln145_fu_147_p1 <= x_fu_72(7 - 1 downto 0);
    udiv_fu_403_p3 <= (x_2_reg_456 & ap_const_lv1_0);
    zext_ln1057_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_112),64));
    zext_ln145_1_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln145_2_fu_238_p3),1024));
    zext_ln145_2_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln145_1_fu_230_p3),1024));
    zext_ln145_3_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln145_1_fu_246_p2),1024));
    zext_ln145_4_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udiv_fu_403_p3),128));
    zext_ln145_5_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln145_1_fu_188_p4),1024));
    zext_ln145_6_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln145_6_fu_328_p3),1024));
    zext_ln145_7_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln145_5_fu_320_p3),1024));
    zext_ln145_8_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln145_3_fu_336_p2),1024));
    zext_ln145_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln145_3_fu_184_p1),1024));
end behav;
