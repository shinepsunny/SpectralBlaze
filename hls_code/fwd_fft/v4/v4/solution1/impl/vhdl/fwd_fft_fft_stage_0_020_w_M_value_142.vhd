-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity fwd_fft_fft_stage_0_020_w_M_value_142 is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 192
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of fwd_fft_fft_stage_0_020_w_M_value_142 is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111100000000000000000000000", 
    1 to 31=> "00000000000000000000000000000000", 
    32 => "00111111100000000000000000000000", 
    33 to 63=> "00000000000000000000000000000000", 
    64 => "00111111100000000000000000000000", 
    65 => "00111111001101010000010011110111", 
    66 => "00000000000000000000000000000000", 
    67 => "10111111001101010000010011110111", 
    68 to 95=> "00000000000000000000000000000000", 
    96 => "00111111100000000000000000000000", 
    97 => "00111111011011001000001101100110", 
    98 => "00111111001101010000010011110111", 
    99 => "00111110110000111110111100000111", 
    100 => "00000000000000000000000000000000", 
    101 => "10111110110000111110111100000111", 
    102 => "10111111001101010000010011110111", 
    103 => "10111111011011001000001101100110", 
    104 to 127=> "00000000000000000000000000000000", 
    128 => "00111111100000000000000000000000", 
    129 => "00111111011110110001010010111010", 
    130 => "00111111011011001000001101100110", 
    131 => "00111111010101001101101100111000", 
    132 => "00111111001101010000010011110111", 
    133 => "00111111000011100011100111010110", 
    134 => "00111110110000111110111100000111", 
    135 => "00111110010001111100010110101100", 
    136 => "00000000000000000000000000000000", 
    137 => "10111110010001111100010110101100", 
    138 => "10111110110000111110111100000111", 
    139 => "10111111000011100011100111010110", 
    140 => "10111111001101010000010011110111", 
    141 => "10111111010101001101101100111000", 
    142 => "10111111011011001000001101100110", 
    143 => "10111111011110110001010010111010", 
    144 to 159=> "00000000000000000000000000000000", 
    160 => "00111111100000000000000000000000", 
    161 => "00111111011111101100010001110010", 
    162 => "00111111011110110001010010111010", 
    163 => "00111111011101001111101000000101", 
    164 => "00111111011011001000001101100110", 
    165 => "00111111011000011100010110010011", 
    166 => "00111111010101001101101100111000", 
    167 => "00111111010001011110001111111100", 
    168 => "00111111001101010000010011110111", 
    169 => "00111111001000100110011110010100", 
    170 => "00111111000011100011100111010110", 
    171 => "00111110111100010101101011110011", 
    172 => "00111110110000111110111100000111", 
    173 => "00111110100101001010000000111100", 
    174 => "00111110010001111100010110101100", 
    175 => "00111101110010001011110100100011", 
    176 => "00000000000000000000000000000000", 
    177 => "10111101110010001011110100100011", 
    178 => "10111110010001111100010110101100", 
    179 => "10111110100101001010000000111100", 
    180 => "10111110110000111110111100000111", 
    181 => "10111110111100010101101011110011", 
    182 => "10111111000011100011100111010110", 
    183 => "10111111001000100110011110010100", 
    184 => "10111111001101010000010011110111", 
    185 => "10111111010001011110001111111100", 
    186 => "10111111010101001101101100111000", 
    187 => "10111111011000011100010110010011", 
    188 => "10111111011011001000001101100110", 
    189 => "10111111011101001111101000000101", 
    190 => "10111111011110110001010010111010", 
    191 => "10111111011111101100010001110010" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

