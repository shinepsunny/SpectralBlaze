-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Mem_patch_Wr is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ifmap_CF_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    ifmap_CF_ce0 : OUT STD_LOGIC;
    ifmap_CF_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ifmap_CF_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    ifmap_CF_ce1 : OUT STD_LOGIC;
    ifmap_CF_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    fft_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    fft_out_ap_vld : OUT STD_LOGIC;
    ctrl1_reg : IN STD_LOGIC_VECTOR (31 downto 0);
    ctrl2_reg : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_reg : IN STD_LOGIC_VECTOR (31 downto 0);
    layer2_reg : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Mem_patch_Wr is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Mem_patch_Wr_Mem_patch_Wr,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7cg-fbvb900-1-i,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.868000,HLS_SYN_LAT=1284,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=503,HLS_SYN_LUT=731,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal empty_26_fu_125_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_26_reg_207 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_reg_214 : STD_LOGIC_VECTOR (6 downto 0);
    signal cmp_i_i1936_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i1936_reg_219 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal bound_fu_160_p2 : STD_LOGIC_VECTOR (69 downto 0);
    signal bound_reg_223 : STD_LOGIC_VECTOR (69 downto 0);
    signal grp_fu_184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound12_reg_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1057_fu_174_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1057_reg_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ap_start : STD_LOGIC;
    signal grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ap_done : STD_LOGIC;
    signal grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ap_idle : STD_LOGIC;
    signal grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ap_ready : STD_LOGIC;
    signal grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ifmap_CF_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ifmap_CF_ce0 : STD_LOGIC;
    signal grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ifmap_CF_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ifmap_CF_ce1 : STD_LOGIC;
    signal grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_fft_out : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_fft_out_ap_vld : STD_LOGIC;
    signal grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln1057_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal indvar_flatten19_fu_62 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state6_on_subcall_done : BOOLEAN;
    signal empty_25_fu_98_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound4_fu_106_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cast2_fu_102_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound4_fu_106_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_94_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound4_fu_106_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln549_fu_129_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln549_fu_133_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bound_fu_160_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound_fu_160_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_184_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_184_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal bound_fu_160_p00 : STD_LOGIC_VECTOR (69 downto 0);
    signal bound_fu_160_p10 : STD_LOGIC_VECTOR (69 downto 0);
    signal grp_fu_184_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_184_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component Mem_patch_Wr_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        bound : IN STD_LOGIC_VECTOR (69 downto 0);
        zext_ln552 : IN STD_LOGIC_VECTOR (7 downto 0);
        ifmap_CF_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ifmap_CF_ce0 : OUT STD_LOGIC;
        ifmap_CF_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ifmap_CF_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ifmap_CF_ce1 : OUT STD_LOGIC;
        ifmap_CF_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        fft_out : OUT STD_LOGIC_VECTOR (127 downto 0);
        fft_out_ap_vld : OUT STD_LOGIC );
    end component;


    component Mem_patch_Wr_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Mem_patch_Wr_mul_8ns_7ns_70_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (69 downto 0) );
    end component;


    component Mem_patch_Wr_mul_mul_16ns_16ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84 : component Mem_patch_Wr_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ap_start,
        ap_done => grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ap_done,
        ap_idle => grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ap_idle,
        ap_ready => grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ap_ready,
        bound => bound_reg_223,
        zext_ln552 => empty_26_reg_207,
        ifmap_CF_address0 => grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ifmap_CF_address0,
        ifmap_CF_ce0 => grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ifmap_CF_ce0,
        ifmap_CF_q0 => ifmap_CF_q0,
        ifmap_CF_address1 => grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ifmap_CF_address1,
        ifmap_CF_ce1 => grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ifmap_CF_ce1,
        ifmap_CF_q1 => ifmap_CF_q1,
        fft_out => grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_fft_out,
        fft_out_ap_vld => grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_fft_out_ap_vld);

    mul_8ns_8ns_16_1_1_U5 : component Mem_patch_Wr_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => bound4_fu_106_p0,
        din1 => bound4_fu_106_p1,
        dout => bound4_fu_106_p2);

    mul_8ns_7ns_70_1_1_U6 : component Mem_patch_Wr_mul_8ns_7ns_70_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        dout_WIDTH => 70)
    port map (
        din0 => bound_fu_160_p0,
        din1 => bound_fu_160_p1,
        dout => bound_fu_160_p2);

    mul_mul_16ns_16ns_32_4_1_U7 : component Mem_patch_Wr_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_184_p0,
        din1 => grp_fu_184_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_184_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln1057_fu_169_p2 = ap_const_lv1_0) and (cmp_i_i1936_reg_219 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ap_ready = ap_const_logic_1)) then 
                    grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten19_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten19_fu_62 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then 
                indvar_flatten19_fu_62 <= add_ln1057_reg_236;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln1057_reg_236 <= add_ln1057_fu_174_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                bound12_reg_228 <= grp_fu_184_p2;
                bound_reg_223 <= bound_fu_160_p2;
                cmp_i_i1936_reg_219 <= cmp_i_i1936_fu_149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                empty_26_reg_207 <= empty_26_fu_125_p1;
                tmp_reg_214 <= add_ln549_fu_133_p2(8 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln1057_fu_169_p2, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln1057_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln1057_fu_174_p2 <= std_logic_vector(unsigned(indvar_flatten19_fu_62) + unsigned(ap_const_lv32_1));
    add_ln549_fu_133_p2 <= std_logic_vector(unsigned(zext_ln549_fu_129_p1) + unsigned(ap_const_lv9_3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(ap_block_state6_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state6_on_subcall_done)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state6_on_subcall_done_assign_proc : process(cmp_i_i1936_reg_219, grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ap_done)
    begin
                ap_block_state6_on_subcall_done <= ((grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ap_done = ap_const_logic_0) and (cmp_i_i1936_reg_219 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state5, icmp_ln1057_fu_169_p2)
    begin
        if (((icmp_ln1057_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln1057_fu_169_p2)
    begin
        if (((icmp_ln1057_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound4_fu_106_p0 <= cast2_fu_102_p1(8 - 1 downto 0);
    bound4_fu_106_p1 <= cast2_fu_102_p1(8 - 1 downto 0);
    bound_fu_160_p0 <= bound_fu_160_p00(8 - 1 downto 0);
    bound_fu_160_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_26_reg_207),70));
    bound_fu_160_p1 <= bound_fu_160_p10(7 - 1 downto 0);
    bound_fu_160_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_214),70));
    cast2_fu_102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_25_fu_98_p1),16));
    cmp_i_i1936_fu_149_p2 <= "1" when (empty_26_reg_207 = ap_const_lv8_0) else "0";
    empty_25_fu_98_p1 <= ctrl2_reg(8 - 1 downto 0);
    empty_26_fu_125_p1 <= ctrl1_reg(8 - 1 downto 0);
    empty_fu_94_p1 <= layer1_reg(16 - 1 downto 0);
    fft_out <= grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_fft_out;
    fft_out_ap_vld <= grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_fft_out_ap_vld;
    grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ap_start <= grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ap_start_reg;
    grp_fu_184_p0 <= grp_fu_184_p00(16 - 1 downto 0);
    grp_fu_184_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_94_p1),32));
    grp_fu_184_p1 <= grp_fu_184_p10(16 - 1 downto 0);
    grp_fu_184_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound4_fu_106_p2),32));
    icmp_ln1057_fu_169_p2 <= "1" when (indvar_flatten19_fu_62 = bound12_reg_228) else "0";
    ifmap_CF_address0 <= grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ifmap_CF_address0;
    ifmap_CF_address1 <= grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ifmap_CF_address1;
    ifmap_CF_ce0 <= grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ifmap_CF_ce0;
    ifmap_CF_ce1 <= grp_Mem_patch_Wr_Pipeline_VITIS_LOOP_558_4_VITIS_LOOP_561_5_fu_84_ifmap_CF_ce1;
    zext_ln549_fu_129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_26_fu_125_p1),9));
end behav;
