-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fwd_fft_Col_Wise_Overlap_Gen is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    c_ifmap_patch_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    c_ifmap_patch_st_empty_n : IN STD_LOGIC;
    c_ifmap_patch_st_read : OUT STD_LOGIC;
    c_ifmap_col_op_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_ifmap_col_op_st_full_n : IN STD_LOGIC;
    c_ifmap_col_op_st_write : OUT STD_LOGIC;
    ctrl1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ctrl1_reg_empty_n : IN STD_LOGIC;
    ctrl1_reg_read : OUT STD_LOGIC;
    ctrl2_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ctrl2_reg_empty_n : IN STD_LOGIC;
    ctrl2_reg_read : OUT STD_LOGIC;
    layer1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_reg_empty_n : IN STD_LOGIC;
    layer1_reg_read : OUT STD_LOGIC;
    ctrl1_reg_c14_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctrl1_reg_c14_full_n : IN STD_LOGIC;
    ctrl1_reg_c14_write : OUT STD_LOGIC;
    ctrl2_reg_c17_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctrl2_reg_c17_full_n : IN STD_LOGIC;
    ctrl2_reg_c17_write : OUT STD_LOGIC;
    layer1_reg_c20_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer1_reg_c20_full_n : IN STD_LOGIC;
    layer1_reg_c20_write : OUT STD_LOGIC );
end;


architecture behav of fwd_fft_Col_Wise_Overlap_Gen is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal ctrl1_reg_blk_n : STD_LOGIC;
    signal ctrl2_reg_blk_n : STD_LOGIC;
    signal layer1_reg_blk_n : STD_LOGIC;
    signal ctrl1_reg_c14_blk_n : STD_LOGIC;
    signal ctrl2_reg_c17_blk_n : STD_LOGIC;
    signal layer1_reg_c20_blk_n : STD_LOGIC;
    signal empty_168_fu_137_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_168_reg_260 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_169_fu_141_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_169_reg_265 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast1_reg_272 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln95_fu_155_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln95_reg_278 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_reg_285 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound_fu_175_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_reg_290 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_242_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal bound4_reg_306 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound16_reg_322 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sub_i_i_fu_210_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_i_i_reg_338 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_200_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal bound42_reg_343 : STD_LOGIC_VECTOR (47 downto 0);
    signal cmp_i_i_mid157_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i_mid157_reg_348 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_reg_353 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_17_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_17_reg_358 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_18_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_18_reg_363 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_start : STD_LOGIC;
    signal grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_done : STD_LOGIC;
    signal grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_idle : STD_LOGIC;
    signal grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_ready : STD_LOGIC;
    signal grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_c_ifmap_patch_st_read : STD_LOGIC;
    signal grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_c_ifmap_col_op_st_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_c_ifmap_col_op_st_write : STD_LOGIC;
    signal grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_Col_Buffer_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_Col_Buffer_write : STD_LOGIC;
    signal grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_Col_Buffer_read : STD_LOGIC;
    signal grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal Col_Buffer_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal Col_Buffer_empty_n : STD_LOGIC;
    signal Col_Buffer_read : STD_LOGIC;
    signal Col_Buffer_full_n : STD_LOGIC;
    signal Col_Buffer_write : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal bound_fu_175_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound_fu_175_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_200_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl2_reg_load_cast_cast_fu_207_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_242_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_242_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_249_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_249_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal bound_fu_175_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_175_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_200_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_200_p10 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_242_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_242_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_249_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_249_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fwd_fft_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        c_ifmap_patch_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_ifmap_patch_st_empty_n : IN STD_LOGIC;
        c_ifmap_patch_st_read : OUT STD_LOGIC;
        c_ifmap_col_op_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_ifmap_col_op_st_full_n : IN STD_LOGIC;
        c_ifmap_col_op_st_write : OUT STD_LOGIC;
        Col_Buffer_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        Col_Buffer_full_n : IN STD_LOGIC;
        Col_Buffer_write : OUT STD_LOGIC;
        Col_Buffer_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        Col_Buffer_empty_n : IN STD_LOGIC;
        Col_Buffer_read : OUT STD_LOGIC;
        sub_i_i : IN STD_LOGIC_VECTOR (8 downto 0);
        bound42 : IN STD_LOGIC_VECTOR (47 downto 0);
        bound16 : IN STD_LOGIC_VECTOR (31 downto 0);
        cmp_i_i_mid157 : IN STD_LOGIC_VECTOR (0 downto 0);
        trunc_ln : IN STD_LOGIC_VECTOR (7 downto 0);
        icmp_ln1057 : IN STD_LOGIC_VECTOR (0 downto 0);
        bound : IN STD_LOGIC_VECTOR (15 downto 0);
        icmp_ln1057_17 : IN STD_LOGIC_VECTOR (0 downto 0);
        bound4 : IN STD_LOGIC_VECTOR (23 downto 0);
        icmp_ln1057_18 : IN STD_LOGIC_VECTOR (0 downto 0);
        trunc_ln10 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_cast1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component fwd_fft_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fwd_fft_mul_16ns_32ns_48_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component fwd_fft_mul_mul_8ns_16ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component fwd_fft_mul_mul_8ns_24ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fwd_fft_fifo_w32_d620_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116 : component fwd_fft_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_start,
        ap_done => grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_done,
        ap_idle => grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_idle,
        ap_ready => grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_ready,
        c_ifmap_patch_st_dout => c_ifmap_patch_st_dout,
        c_ifmap_patch_st_empty_n => c_ifmap_patch_st_empty_n,
        c_ifmap_patch_st_read => grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_c_ifmap_patch_st_read,
        c_ifmap_col_op_st_din => grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_c_ifmap_col_op_st_din,
        c_ifmap_col_op_st_full_n => c_ifmap_col_op_st_full_n,
        c_ifmap_col_op_st_write => grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_c_ifmap_col_op_st_write,
        Col_Buffer_din => grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_Col_Buffer_din,
        Col_Buffer_full_n => Col_Buffer_full_n,
        Col_Buffer_write => grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_Col_Buffer_write,
        Col_Buffer_dout => Col_Buffer_dout,
        Col_Buffer_empty_n => Col_Buffer_empty_n,
        Col_Buffer_read => grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_Col_Buffer_read,
        sub_i_i => sub_i_i_reg_338,
        bound42 => bound42_reg_343,
        bound16 => bound16_reg_322,
        cmp_i_i_mid157 => cmp_i_i_mid157_reg_348,
        trunc_ln => trunc_ln95_reg_278,
        icmp_ln1057 => icmp_ln1057_reg_353,
        bound => bound_reg_290,
        icmp_ln1057_17 => icmp_ln1057_17_reg_358,
        bound4 => bound4_reg_306,
        icmp_ln1057_18 => icmp_ln1057_18_reg_363,
        trunc_ln10 => trunc_ln_reg_285,
        p_cast1 => p_cast1_reg_272);

    mul_8ns_8ns_16_1_1_U59 : component fwd_fft_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => bound_fu_175_p0,
        din1 => bound_fu_175_p1,
        dout => bound_fu_175_p2);

    mul_16ns_32ns_48_2_1_U60 : component fwd_fft_mul_16ns_32ns_48_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_200_p0,
        din1 => grp_fu_200_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_200_p2);

    mul_mul_8ns_16ns_24_4_1_U61 : component fwd_fft_mul_mul_8ns_16ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_242_p0,
        din1 => grp_fu_242_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_242_p2);

    mul_mul_8ns_24ns_32_4_1_U62 : component fwd_fft_mul_mul_8ns_24ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 24,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_249_p0,
        din1 => grp_fu_249_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_249_p2);

    Col_Buffer_fifo_U : component fwd_fft_fifo_w32_d620_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_Col_Buffer_din,
        if_full_n => Col_Buffer_full_n,
        if_write => Col_Buffer_write,
        if_dout => Col_Buffer_dout,
        if_empty_n => Col_Buffer_empty_n,
        if_read => Col_Buffer_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_ready = ap_const_logic_1)) then 
                    grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                bound16_reg_322 <= grp_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                bound42_reg_343 <= grp_fu_200_p2;
                cmp_i_i_mid157_reg_348 <= cmp_i_i_mid157_fu_217_p2;
                icmp_ln1057_17_reg_358 <= icmp_ln1057_17_fu_230_p2;
                icmp_ln1057_18_reg_363 <= icmp_ln1057_18_fu_236_p2;
                icmp_ln1057_reg_353 <= icmp_ln1057_fu_224_p2;
                sub_i_i_reg_338 <= sub_i_i_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                bound4_reg_306 <= grp_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bound_reg_290 <= bound_fu_175_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_168_reg_260 <= empty_168_fu_137_p1;
                empty_169_reg_265 <= empty_169_fu_141_p1;
                p_cast1_reg_272 <= ctrl1_reg_dout(31 downto 24);
                trunc_ln95_reg_278 <= trunc_ln95_fu_155_p1;
                trunc_ln_reg_285 <= ctrl1_reg_dout(23 downto 16);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c14_full_n, ctrl2_reg_c17_full_n, layer1_reg_c20_full_n, grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_done, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((layer1_reg_c20_full_n = ap_const_logic_0) or (ctrl2_reg_c17_full_n = ap_const_logic_0) or (ctrl1_reg_c14_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    Col_Buffer_read_assign_proc : process(grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_Col_Buffer_read, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Col_Buffer_read <= grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_Col_Buffer_read;
        else 
            Col_Buffer_read <= ap_const_logic_0;
        end if; 
    end process;


    Col_Buffer_write_assign_proc : process(grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_Col_Buffer_write, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Col_Buffer_write <= grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_Col_Buffer_write;
        else 
            Col_Buffer_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_done)
    begin
        if ((grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c14_full_n, ctrl2_reg_c17_full_n, layer1_reg_c20_full_n)
    begin
        if (((layer1_reg_c20_full_n = ap_const_logic_0) or (ctrl2_reg_c17_full_n = ap_const_logic_0) or (ctrl1_reg_c14_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c14_full_n, ctrl2_reg_c17_full_n, layer1_reg_c20_full_n)
    begin
                ap_block_state1 <= ((layer1_reg_c20_full_n = ap_const_logic_0) or (ctrl2_reg_c17_full_n = ap_const_logic_0) or (ctrl1_reg_c14_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_done, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bound_fu_175_p0 <= bound_fu_175_p00(8 - 1 downto 0);
    bound_fu_175_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast1_reg_272),16));
    bound_fu_175_p1 <= bound_fu_175_p10(8 - 1 downto 0);
    bound_fu_175_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln95_reg_278),16));
    c_ifmap_col_op_st_din <= grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_c_ifmap_col_op_st_din;

    c_ifmap_col_op_st_write_assign_proc : process(grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_c_ifmap_col_op_st_write, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            c_ifmap_col_op_st_write <= grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_c_ifmap_col_op_st_write;
        else 
            c_ifmap_col_op_st_write <= ap_const_logic_0;
        end if; 
    end process;


    c_ifmap_patch_st_read_assign_proc : process(grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_c_ifmap_patch_st_read, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            c_ifmap_patch_st_read <= grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_c_ifmap_patch_st_read;
        else 
            c_ifmap_patch_st_read <= ap_const_logic_0;
        end if; 
    end process;

    cmp_i_i_mid157_fu_217_p2 <= "1" when (sub_i_i_fu_210_p2 = ap_const_lv9_0) else "0";

    ctrl1_reg_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl1_reg_blk_n <= ctrl1_reg_empty_n;
        else 
            ctrl1_reg_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ctrl1_reg_c14_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_c14_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl1_reg_c14_blk_n <= ctrl1_reg_c14_full_n;
        else 
            ctrl1_reg_c14_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ctrl1_reg_c14_din <= ctrl1_reg_dout;

    ctrl1_reg_c14_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c14_full_n, ctrl2_reg_c17_full_n, layer1_reg_c20_full_n)
    begin
        if ((not(((layer1_reg_c20_full_n = ap_const_logic_0) or (ctrl2_reg_c17_full_n = ap_const_logic_0) or (ctrl1_reg_c14_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl1_reg_c14_write <= ap_const_logic_1;
        else 
            ctrl1_reg_c14_write <= ap_const_logic_0;
        end if; 
    end process;


    ctrl1_reg_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c14_full_n, ctrl2_reg_c17_full_n, layer1_reg_c20_full_n)
    begin
        if ((not(((layer1_reg_c20_full_n = ap_const_logic_0) or (ctrl2_reg_c17_full_n = ap_const_logic_0) or (ctrl1_reg_c14_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl1_reg_read <= ap_const_logic_1;
        else 
            ctrl1_reg_read <= ap_const_logic_0;
        end if; 
    end process;


    ctrl2_reg_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ctrl2_reg_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl2_reg_blk_n <= ctrl2_reg_empty_n;
        else 
            ctrl2_reg_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ctrl2_reg_c17_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ctrl2_reg_c17_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl2_reg_c17_blk_n <= ctrl2_reg_c17_full_n;
        else 
            ctrl2_reg_c17_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ctrl2_reg_c17_din <= ctrl2_reg_dout;

    ctrl2_reg_c17_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c14_full_n, ctrl2_reg_c17_full_n, layer1_reg_c20_full_n)
    begin
        if ((not(((layer1_reg_c20_full_n = ap_const_logic_0) or (ctrl2_reg_c17_full_n = ap_const_logic_0) or (ctrl1_reg_c14_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl2_reg_c17_write <= ap_const_logic_1;
        else 
            ctrl2_reg_c17_write <= ap_const_logic_0;
        end if; 
    end process;

    ctrl2_reg_load_cast_cast_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_169_reg_265),9));

    ctrl2_reg_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c14_full_n, ctrl2_reg_c17_full_n, layer1_reg_c20_full_n)
    begin
        if ((not(((layer1_reg_c20_full_n = ap_const_logic_0) or (ctrl2_reg_c17_full_n = ap_const_logic_0) or (ctrl1_reg_c14_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl2_reg_read <= ap_const_logic_1;
        else 
            ctrl2_reg_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_168_fu_137_p1 <= layer1_reg_dout(16 - 1 downto 0);
    empty_169_fu_141_p1 <= ctrl2_reg_dout(8 - 1 downto 0);
    grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_start <= grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_start_reg;
    grp_fu_200_p0 <= grp_fu_200_p00(16 - 1 downto 0);
    grp_fu_200_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_168_reg_260),48));
    grp_fu_200_p1 <= grp_fu_200_p10(32 - 1 downto 0);
    grp_fu_200_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound16_reg_322),48));
    grp_fu_242_p0 <= grp_fu_242_p00(8 - 1 downto 0);
    grp_fu_242_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_169_reg_265),24));
    grp_fu_242_p1 <= grp_fu_242_p10(16 - 1 downto 0);
    grp_fu_242_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_175_p2),24));
    grp_fu_249_p0 <= grp_fu_249_p00(8 - 1 downto 0);
    grp_fu_249_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_169_reg_265),32));
    grp_fu_249_p1 <= grp_fu_249_p10(24 - 1 downto 0);
    grp_fu_249_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_242_p2),32));
    icmp_ln1057_17_fu_230_p2 <= "1" when (bound_reg_290 = ap_const_lv16_0) else "0";
    icmp_ln1057_18_fu_236_p2 <= "1" when (bound4_reg_306 = ap_const_lv24_0) else "0";
    icmp_ln1057_fu_224_p2 <= "1" when (trunc_ln95_reg_278 = ap_const_lv8_0) else "0";

    internal_ap_ready_assign_proc : process(grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_done, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_98_3_VITIS_LOOP_101_4_VITIS_LOOP_104_5_fu_116_ap_done = ap_const_logic_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer1_reg_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer1_reg_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer1_reg_blk_n <= layer1_reg_empty_n;
        else 
            layer1_reg_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer1_reg_c20_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer1_reg_c20_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer1_reg_c20_blk_n <= layer1_reg_c20_full_n;
        else 
            layer1_reg_c20_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer1_reg_c20_din <= layer1_reg_dout;

    layer1_reg_c20_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c14_full_n, ctrl2_reg_c17_full_n, layer1_reg_c20_full_n)
    begin
        if ((not(((layer1_reg_c20_full_n = ap_const_logic_0) or (ctrl2_reg_c17_full_n = ap_const_logic_0) or (ctrl1_reg_c14_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer1_reg_c20_write <= ap_const_logic_1;
        else 
            layer1_reg_c20_write <= ap_const_logic_0;
        end if; 
    end process;


    layer1_reg_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c14_full_n, ctrl2_reg_c17_full_n, layer1_reg_c20_full_n)
    begin
        if ((not(((layer1_reg_c20_full_n = ap_const_logic_0) or (ctrl2_reg_c17_full_n = ap_const_logic_0) or (ctrl1_reg_c14_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer1_reg_read <= ap_const_logic_1;
        else 
            layer1_reg_read <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_i_i_fu_210_p2 <= std_logic_vector(unsigned(ctrl2_reg_load_cast_cast_fu_207_p1) + unsigned(ap_const_lv9_1FF));
    trunc_ln95_fu_155_p1 <= ctrl1_reg_dout(8 - 1 downto 0);
end behav;
