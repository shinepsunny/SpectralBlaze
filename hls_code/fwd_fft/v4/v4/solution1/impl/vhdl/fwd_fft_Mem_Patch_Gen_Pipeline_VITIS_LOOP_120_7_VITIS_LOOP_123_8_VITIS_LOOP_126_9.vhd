-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fwd_fft_Mem_Patch_Gen_Pipeline_VITIS_LOOP_120_7_VITIS_LOOP_123_8_VITIS_LOOP_126_9 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    c_ifmap_patch_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_ifmap_patch_st_full_n : IN STD_LOGIC;
    c_ifmap_patch_st_write : OUT STD_LOGIC;
    mul_ln97 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_cast : IN STD_LOGIC_VECTOR (15 downto 0);
    bound4 : IN STD_LOGIC_VECTOR (23 downto 0);
    bound : IN STD_LOGIC_VECTOR (15 downto 0);
    p_cast3_cast : IN STD_LOGIC_VECTOR (7 downto 0);
    cmp_i_not_mid119 : IN STD_LOGIC_VECTOR (0 downto 0);
    p_cast6 : IN STD_LOGIC_VECTOR (7 downto 0);
    icmp_ln1057_15 : IN STD_LOGIC_VECTOR (0 downto 0);
    burst_buffer1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    burst_buffer1_ce0 : OUT STD_LOGIC;
    burst_buffer1_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    burst_buffer2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    burst_buffer2_ce0 : OUT STD_LOGIC;
    burst_buffer2_q0 : IN STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of fwd_fft_Mem_Patch_Gen_Pipeline_VITIS_LOOP_120_7_VITIS_LOOP_123_8_VITIS_LOOP_126_9 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv36_F : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000001111";
    constant ap_const_lv65_1 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv58_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1057_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal c_ifmap_patch_st_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_cast3_cast_cast_fu_213_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast3_cast_cast_reg_795 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1057_reg_800 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_reg_800_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_8_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_8_reg_804 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_8_reg_804_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_8_reg_804_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal y_5_reg_818 : STD_LOGIC_VECTOR (7 downto 0);
    signal rev20_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev20_reg_823 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln80_3_fu_362_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln80_3_reg_828 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln123_fu_368_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln123_reg_834 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_i_i_mid1_fu_391_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_i_i_mid1_reg_839 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln130_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln130_reg_849 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln130_reg_849_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln2_fu_512_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln2_reg_865 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln130_fu_534_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln130_reg_870 : STD_LOGIC_VECTOR (64 downto 0);
    signal icmp_ln130_1_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln130_1_reg_875 : STD_LOGIC_VECTOR (0 downto 0);
    signal burst_buffer1_load_reg_880 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln130_fu_619_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln130_reg_885 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln130_fu_645_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln130_reg_891 : STD_LOGIC_VECTOR (127 downto 0);
    signal burst_buffer2_load_reg_897 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal zext_ln54_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_fu_104 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_fu_408_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal rd_i_1_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal rd_i_fu_590_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rd_j_1_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal rd_j_fu_598_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_fu_116 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1057_5_fu_396_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_fu_120 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1057_6_fu_301_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pnx_fu_124 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln80_1_fu_283_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten23_fu_128 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1057_2_fu_260_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal pnx_5_fu_272_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1057_fu_295_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_cast_fu_327_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_i_i_fu_331_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ult_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_9_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln80_fu_350_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln1057_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_cast_mid1_fu_387_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1057_fu_379_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln54_1_fu_438_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln54_fu_435_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln80_4_fu_441_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1057_3_fu_448_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ult21_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev22_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln80_2_fu_430_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_700_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln130_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln130_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1057_4_fu_473_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_cast_fu_455_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln54_2_fu_496_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln54_fu_500_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln130_1_fu_520_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln130_1_fu_526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln130_1_fu_530_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_fu_540_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal rd_j_2_fu_556_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln134_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln135_fu_568_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rd_i_2_fu_574_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rd_j_3_fu_582_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln130_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln130_2_fu_623_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln130_fu_626_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln130_fu_632_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln130_1_fu_639_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln130_fu_651_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln130_fu_655_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln130_1_fu_664_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln130_1_fu_668_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln130_1_fu_673_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln130_fu_660_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln130_1_fu_677_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln130_2_fu_684_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_700_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_700_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_700_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_700_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_700_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_700_p20 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fwd_fft_mac_muladd_8ns_8ns_8ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fwd_fft_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_8ns_8ns_8ns_16_4_1_U12 : component fwd_fft_mac_muladd_8ns_8ns_8ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_700_p0,
        din1 => grp_fu_700_p1,
        din2 => grp_fu_700_p2,
        ce => grp_fu_700_ce,
        dout => grp_fu_700_p3);

    flow_control_loop_pipe_sequential_init_U : component fwd_fft_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten23_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten23_fu_128 <= ap_const_lv24_0;
                elsif (((icmp_ln1057_fu_255_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten23_fu_128 <= add_ln1057_2_fu_260_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_120 <= ap_const_lv16_0;
                elsif (((icmp_ln1057_fu_255_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_120 <= select_ln1057_6_fu_301_p3;
                end if;
            end if; 
        end if;
    end process;

    lhs_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    lhs_fu_104 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1057_reg_800_pp0_iter2_reg = ap_const_lv1_0))) then 
                    lhs_fu_104 <= x_fu_408_p2;
                end if;
            end if; 
        end if;
    end process;

    pnx_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    pnx_fu_124 <= ap_const_lv8_0;
                elsif (((icmp_ln1057_fu_255_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    pnx_fu_124 <= select_ln80_1_fu_283_p3;
                end if;
            end if; 
        end if;
    end process;

    rd_i_1_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    rd_i_1_fu_108 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    rd_i_1_fu_108 <= rd_i_fu_590_p3;
                end if;
            end if; 
        end if;
    end process;

    rd_j_1_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    rd_j_1_fu_112 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    rd_j_1_fu_112 <= rd_j_fu_598_p3;
                end if;
            end if; 
        end if;
    end process;

    y_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    y_fu_116 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1057_reg_800_pp0_iter2_reg = ap_const_lv1_0))) then 
                    y_fu_116 <= select_ln1057_5_fu_396_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1057_reg_800_pp0_iter2_reg = ap_const_lv1_0))) then
                add_i_i_mid1_reg_839 <= add_i_i_mid1_fu_391_p2;
                add_ln123_reg_834 <= add_ln123_fu_368_p2;
                select_ln80_3_reg_828 <= select_ln80_3_fu_362_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                    add_ln130_reg_870(64 downto 4) <= add_ln130_fu_534_p2(64 downto 4);
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                burst_buffer1_load_reg_880 <= burst_buffer1_q0;
                burst_buffer2_load_reg_897 <= burst_buffer2_q0;
                icmp_ln1057_8_reg_804_pp0_iter2_reg <= icmp_ln1057_8_reg_804;
                icmp_ln1057_8_reg_804_pp0_iter3_reg <= icmp_ln1057_8_reg_804_pp0_iter2_reg;
                icmp_ln1057_reg_800_pp0_iter2_reg <= icmp_ln1057_reg_800;
                icmp_ln130_1_reg_875 <= icmp_ln130_1_fu_550_p2;
                or_ln130_reg_849 <= or_ln130_fu_490_p2;
                or_ln130_reg_849_pp0_iter5_reg <= or_ln130_reg_849;
                    shl_ln2_reg_865(35 downto 4) <= shl_ln2_fu_512_p3(35 downto 4);
                sub_ln130_reg_891 <= sub_ln130_fu_645_p2;
                y_5_reg_818 <= y_fu_116;
                    zext_ln130_reg_885(63 downto 4) <= zext_ln130_fu_619_p1(63 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln1057_reg_800 <= icmp_ln1057_fu_255_p2;
                    p_cast3_cast_cast_reg_795(7 downto 0) <= p_cast3_cast_cast_fu_213_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_fu_255_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1057_8_reg_804 <= icmp_ln1057_8_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1057_8_reg_804_pp0_iter2_reg = ap_const_lv1_0))) then
                rev20_reg_823 <= rev20_fu_341_p2;
            end if;
        end if;
    end process;
    p_cast3_cast_cast_reg_795(15 downto 8) <= "00000000";
    shl_ln2_reg_865(3 downto 0) <= "0000";
    add_ln130_reg_870(3 downto 0) <= "0000";
    zext_ln130_reg_885(3 downto 0) <= "0000";
    zext_ln130_reg_885(127 downto 64) <= "0000000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_i_i_fu_331_p2 <= std_logic_vector(unsigned(mul_ln97) + unsigned(y_cast_fu_327_p1));
    add_i_i_mid1_fu_391_p2 <= std_logic_vector(unsigned(mul_ln97) + unsigned(y_cast_mid1_fu_387_p1));
    add_ln1057_2_fu_260_p2 <= std_logic_vector(unsigned(indvar_flatten23_fu_128) + unsigned(ap_const_lv24_1));
    add_ln1057_fu_295_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_120) + unsigned(ap_const_lv16_1));
    add_ln123_fu_368_p2 <= std_logic_vector(unsigned(select_ln80_fu_350_p3) + unsigned(ap_const_lv8_1));
    add_ln130_fu_534_p2 <= std_logic_vector(unsigned(zext_ln130_1_fu_530_p1) + unsigned(ap_const_lv65_1));
    add_ln135_fu_568_p2 <= std_logic_vector(unsigned(rd_i_1_fu_108) + unsigned(ap_const_lv32_1));
    add_ln54_fu_500_p2 <= std_logic_vector(unsigned(tmp_16_cast_fu_455_p3) + unsigned(trunc_ln54_2_fu_496_p1));
    and_ln130_1_fu_664_p2 <= (sub_ln130_reg_891 and burst_buffer2_load_reg_897);
    and_ln130_fu_651_p2 <= (sub_ln130_reg_891 and burst_buffer1_load_reg_880);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter6, c_ifmap_patch_st_full_n)
    begin
                ap_block_pp0_stage0_01001 <= ((c_ifmap_patch_st_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter6, c_ifmap_patch_st_full_n)
    begin
                ap_block_pp0_stage0_11001 <= ((c_ifmap_patch_st_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter6, c_ifmap_patch_st_full_n)
    begin
                ap_block_pp0_stage0_subdone <= ((c_ifmap_patch_st_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter6_assign_proc : process(c_ifmap_patch_st_full_n)
    begin
                ap_block_state7_pp0_stage0_iter6 <= (c_ifmap_patch_st_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1057_fu_255_p2)
    begin
        if (((icmp_ln1057_fu_255_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, icmp_ln1057_reg_800_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1057_reg_800_pp0_iter2_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    burst_buffer1_address0 <= zext_ln54_fu_506_p1(11 - 1 downto 0);

    burst_buffer1_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            burst_buffer1_ce0 <= ap_const_logic_1;
        else 
            burst_buffer1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    burst_buffer2_address0 <= zext_ln54_fu_506_p1(11 - 1 downto 0);

    burst_buffer2_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            burst_buffer2_ce0 <= ap_const_logic_1;
        else 
            burst_buffer2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_ifmap_patch_st_blk_n_assign_proc : process(ap_enable_reg_pp0_iter6, c_ifmap_patch_st_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            c_ifmap_patch_st_blk_n <= c_ifmap_patch_st_full_n;
        else 
            c_ifmap_patch_st_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    c_ifmap_patch_st_din <= (select_ln130_1_fu_677_p3 & select_ln130_2_fu_684_p3);

    c_ifmap_patch_st_write_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            c_ifmap_patch_st_write <= ap_const_logic_1;
        else 
            c_ifmap_patch_st_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_700_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_700_ce <= ap_const_logic_1;
        else 
            grp_fu_700_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_700_p0 <= grp_fu_700_p00(8 - 1 downto 0);
    grp_fu_700_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln80_1_fu_283_p3),16));
    grp_fu_700_p1 <= p_cast3_cast_cast_reg_795(8 - 1 downto 0);
    grp_fu_700_p2 <= grp_fu_700_p20(8 - 1 downto 0);
    grp_fu_700_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1057_fu_379_p3),16));
    icmp_ln1057_8_fu_278_p2 <= "1" when (indvar_flatten_fu_120 = bound) else "0";
    icmp_ln1057_9_fu_357_p2 <= "1" when (lhs_fu_104 = p_cast6) else "0";
    icmp_ln1057_fu_255_p2 <= "1" when (indvar_flatten23_fu_128 = bound4) else "0";
    icmp_ln130_1_fu_550_p2 <= "0" when (tmp_fu_540_p4 = ap_const_lv58_0) else "1";
    icmp_ln130_fu_480_p2 <= "1" when (unsigned(grp_fu_700_p3) < unsigned(p_cast)) else "0";
    icmp_ln134_fu_562_p2 <= "1" when (rd_j_2_fu_556_p2 = ap_const_lv32_8) else "0";
    lshr_ln130_1_fu_668_p2 <= std_logic_vector(shift_right(unsigned(and_ln130_1_fu_664_p2),to_integer(unsigned('0' & zext_ln130_reg_885(31-1 downto 0)))));
    lshr_ln130_fu_655_p2 <= std_logic_vector(shift_right(unsigned(and_ln130_fu_651_p2),to_integer(unsigned('0' & zext_ln130_reg_885(31-1 downto 0)))));
    or_ln1057_fu_374_p2 <= (select_ln80_3_fu_362_p3 or icmp_ln1057_8_reg_804_pp0_iter2_reg);
    or_ln130_1_fu_520_p2 <= (shl_ln2_fu_512_p3 or ap_const_lv36_F);
    or_ln130_fu_490_p2 <= (xor_ln130_fu_484_p2 or select_ln1057_4_fu_473_p3);
    p_cast3_cast_cast_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast3_cast),16));
    pnx_5_fu_272_p2 <= std_logic_vector(unsigned(pnx_fu_124) + unsigned(ap_const_lv8_1));
    rd_i_2_fu_574_p3 <= 
        add_ln135_fu_568_p2 when (icmp_ln134_fu_562_p2(0) = '1') else 
        rd_i_1_fu_108;
    rd_i_fu_590_p3 <= 
        rd_i_1_fu_108 when (or_ln130_fu_490_p2(0) = '1') else 
        rd_i_2_fu_574_p3;
    rd_j_2_fu_556_p2 <= std_logic_vector(unsigned(rd_j_1_fu_112) + unsigned(ap_const_lv32_1));
    rd_j_3_fu_582_p3 <= 
        ap_const_lv32_0 when (icmp_ln134_fu_562_p2(0) = '1') else 
        rd_j_2_fu_556_p2;
    rd_j_fu_598_p3 <= 
        rd_j_1_fu_112 when (or_ln130_fu_490_p2(0) = '1') else 
        rd_j_3_fu_582_p3;
    rev20_fu_341_p2 <= (ult_fu_336_p2 xor ap_const_lv1_1);
    rev22_fu_467_p2 <= (ult21_fu_463_p2 xor ap_const_lv1_1);
    select_ln1057_3_fu_448_p3 <= 
        trunc_ln54_fu_435_p1 when (select_ln80_3_reg_828(0) = '1') else 
        select_ln80_4_fu_441_p3;
    select_ln1057_4_fu_473_p3 <= 
        rev22_fu_467_p2 when (select_ln80_3_reg_828(0) = '1') else 
        select_ln80_2_fu_430_p3;
    select_ln1057_5_fu_396_p3 <= 
        add_ln123_fu_368_p2 when (select_ln80_3_fu_362_p3(0) = '1') else 
        select_ln80_fu_350_p3;
    select_ln1057_6_fu_301_p3 <= 
        ap_const_lv16_1 when (icmp_ln1057_8_fu_278_p2(0) = '1') else 
        add_ln1057_fu_295_p2;
    select_ln1057_fu_379_p3 <= 
        ap_const_lv8_0 when (or_ln1057_fu_374_p2(0) = '1') else 
        lhs_fu_104;
    select_ln130_1_fu_677_p3 <= 
        ap_const_lv16_0 when (or_ln130_reg_849_pp0_iter5_reg(0) = '1') else 
        trunc_ln130_1_fu_673_p1;
    select_ln130_2_fu_684_p3 <= 
        ap_const_lv16_0 when (or_ln130_reg_849_pp0_iter5_reg(0) = '1') else 
        trunc_ln130_fu_660_p1;
    select_ln130_fu_632_p3 <= 
        ap_const_lv128_lc_1 when (icmp_ln130_1_reg_875(0) = '1') else 
        shl_ln130_fu_626_p2;
    select_ln80_1_fu_283_p3 <= 
        pnx_5_fu_272_p2 when (icmp_ln1057_8_fu_278_p2(0) = '1') else 
        pnx_fu_124;
    select_ln80_2_fu_430_p3 <= 
        cmp_i_not_mid119 when (icmp_ln1057_8_reg_804_pp0_iter3_reg(0) = '1') else 
        rev20_reg_823;
    select_ln80_3_fu_362_p3 <= 
        icmp_ln1057_15 when (icmp_ln1057_8_reg_804_pp0_iter2_reg(0) = '1') else 
        icmp_ln1057_9_fu_357_p2;
    select_ln80_4_fu_441_p3 <= 
        ap_const_lv6_0 when (icmp_ln1057_8_reg_804_pp0_iter3_reg(0) = '1') else 
        trunc_ln54_1_fu_438_p1;
    select_ln80_fu_350_p3 <= 
        ap_const_lv8_0 when (icmp_ln1057_8_reg_804_pp0_iter2_reg(0) = '1') else 
        y_fu_116;
        sext_ln130_1_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln130_1_fu_520_p2),64));

        sext_ln130_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln2_reg_865),64));

    shl_ln130_1_fu_639_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln130_fu_619_p1(31-1 downto 0)))));
    shl_ln130_fu_626_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln130_2_fu_623_p1(31-1 downto 0)))));
    shl_ln2_fu_512_p3 <= (rd_j_1_fu_112 & ap_const_lv4_0);
    sub_ln130_fu_645_p2 <= std_logic_vector(unsigned(select_ln130_fu_632_p3) - unsigned(shl_ln130_1_fu_639_p2));
    tmp_16_cast_fu_455_p3 <= (select_ln1057_3_fu_448_p3 & ap_const_lv5_0);
    tmp_fu_540_p4 <= add_ln130_fu_534_p2(64 downto 7);
    trunc_ln130_1_fu_673_p1 <= lshr_ln130_1_fu_668_p2(16 - 1 downto 0);
    trunc_ln130_fu_660_p1 <= lshr_ln130_fu_655_p2(16 - 1 downto 0);
    trunc_ln54_1_fu_438_p1 <= y_5_reg_818(6 - 1 downto 0);
    trunc_ln54_2_fu_496_p1 <= rd_i_1_fu_108(11 - 1 downto 0);
    trunc_ln54_fu_435_p1 <= add_ln123_reg_834(6 - 1 downto 0);
    ult21_fu_463_p2 <= "1" when (unsigned(add_i_i_mid1_reg_839) < unsigned(p_cast)) else "0";
    ult_fu_336_p2 <= "1" when (unsigned(add_i_i_fu_331_p2) < unsigned(p_cast)) else "0";
    x_fu_408_p2 <= std_logic_vector(unsigned(select_ln1057_fu_379_p3) + unsigned(ap_const_lv8_1));
    xor_ln130_fu_484_p2 <= (icmp_ln130_fu_480_p2 xor ap_const_lv1_1);
    y_cast_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_fu_116),16));
    y_cast_mid1_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln123_fu_368_p2),16));
    zext_ln130_1_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln130_1_fu_526_p1),65));
    zext_ln130_2_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_reg_870),128));
    zext_ln130_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln130_fu_616_p1),128));
    zext_ln54_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_fu_500_p2),64));
end behav;
