-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_stage_fft_stage_Pipeline_SKIP_X is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    div_i_i43_cast : IN STD_LOGIC_VECTOR (6 downto 0);
    zext_ln19_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    IN_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    IN_r_ce0 : OUT STD_LOGIC;
    IN_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    div_cast : IN STD_LOGIC_VECTOR (5 downto 0);
    OUT_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OUT_r_ce0 : OUT STD_LOGIC;
    OUT_r_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUT_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sub28 : IN STD_LOGIC_VECTOR (31 downto 0);
    y : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fft_stage_fft_stage_Pipeline_SKIP_X is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln1057_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal w_M_real_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_M_real_ce0 : STD_LOGIC;
    signal w_M_real_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_M_imag_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_M_imag_ce0 : STD_LOGIC;
    signal w_M_imag_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1057_reg_460 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln1057_reg_460_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_reg_460_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_reg_460_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_reg_460_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_reg_460_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_reg_460_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_reg_460_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_reg_460_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln20_fu_270_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln20_reg_474 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln20_reg_474_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln20_reg_474_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln20_reg_474_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln20_reg_474_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal w1_M_real_reg_480 : STD_LOGIC_VECTOR (15 downto 0);
    signal w1_M_real_reg_480_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w1_M_imag_reg_486 : STD_LOGIC_VECTOR (15 downto 0);
    signal w1_M_imag_reg_486_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln21_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_reg_492 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_reg_492_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_reg_492_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_reg_492_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_reg_492_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_reg_492_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_reg_492_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_reg_492_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_reg_492_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln388_fu_353_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln388_reg_502 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln388_1_reg_507 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_fu_357_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_reg_512 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_fu_361_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_reg_517 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_194_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_i_i_reg_522 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_198_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul3_i_i_reg_527 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul6_i_i_reg_532 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul9_i_i_reg_537 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln20_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_reg_542 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_reg_542_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_reg_542_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_reg_542_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln20_fu_369_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln20_reg_552 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln20_1_reg_557 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_reg_562 : STD_LOGIC_VECTOR (15 downto 0);
    signal t1_M_real_fu_373_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_178_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_5_reg_574 : STD_LOGIC_VECTOR (15 downto 0);
    signal t1_M_imag_fu_378_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_182_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_3_reg_586 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_4_reg_591 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_4_reg_591_pp0_iter9_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_3_reg_596 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_190_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_4_reg_601 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln19_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal k1_fu_70 : STD_LOGIC_VECTOR (6 downto 0);
    signal k1_2_fu_235_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j1_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal j1_3_fu_313_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m1_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal m1_2_fu_321_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_389_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_404_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_178_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_178_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_182_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_186_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_186_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_190_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_194_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_194_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_198_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_198_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln19_fu_255_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln19_fu_259_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1057_1_fu_251_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1057_fu_247_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln28_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln31_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln24_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j1_1_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j1_2_fu_297_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m1_1_fu_305_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln21_fu_344_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln22_1_fu_386_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln22_fu_383_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln23_1_fu_401_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln23_fu_398_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter9_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to8 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to10 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fft_stage_hadd_16ns_16ns_16_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft_stage_hsub_16ns_16ns_16_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft_stage_hmul_16ns_16ns_16_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft_stage_fft_stage_Pipeline_SKIP_X_w_M_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft_stage_fft_stage_Pipeline_SKIP_X_w_M_imag IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft_stage_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    w_M_real_U : component fft_stage_fft_stage_Pipeline_SKIP_X_w_M_real
    generic map (
        DataWidth => 16,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_M_real_address0,
        ce0 => w_M_real_ce0,
        q0 => w_M_real_q0);

    w_M_imag_U : component fft_stage_fft_stage_Pipeline_SKIP_X_w_M_imag
    generic map (
        DataWidth => 16,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_M_imag_address0,
        ce0 => w_M_imag_ce0,
        q0 => w_M_imag_q0);

    hadd_16ns_16ns_16_5_full_dsp_1_U1 : component fft_stage_hadd_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_178_p0,
        din1 => grp_fu_178_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_178_p2);

    hadd_16ns_16ns_16_5_full_dsp_1_U2 : component fft_stage_hadd_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_182_p0,
        din1 => p_r_reg_562,
        ce => ap_const_logic_1,
        dout => grp_fu_182_p2);

    hsub_16ns_16ns_16_5_full_dsp_1_U3 : component fft_stage_hsub_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_186_p0,
        din1 => grp_fu_186_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_186_p2);

    hsub_16ns_16ns_16_5_full_dsp_1_U4 : component fft_stage_hsub_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_190_p0,
        din1 => p_r_M_imag_5_reg_574,
        ce => ap_const_logic_1,
        dout => grp_fu_190_p2);

    hmul_16ns_16ns_16_4_max_dsp_1_U5 : component fft_stage_hmul_16ns_16ns_16_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_194_p0,
        din1 => grp_fu_194_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_194_p2);

    hmul_16ns_16ns_16_4_max_dsp_1_U6 : component fft_stage_hmul_16ns_16ns_16_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_198_p0,
        din1 => grp_fu_198_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_198_p2);

    flow_control_loop_pipe_sequential_init_U : component fft_stage_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage0))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage0))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage0))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage0))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter9_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage0))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if; 
        end if;
    end process;

    j1_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j1_fu_74 <= ap_const_lv32_0;
            elsif (((icmp_ln1057_fu_230_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                j1_fu_74 <= j1_3_fu_313_p3;
            end if; 
        end if;
    end process;

    k1_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k1_fu_70 <= ap_const_lv7_0;
            elsif (((icmp_ln1057_fu_230_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                k1_fu_70 <= k1_2_fu_235_p2;
            end if; 
        end if;
    end process;

    m1_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                m1_fu_78 <= ap_const_lv32_0;
            elsif (((icmp_ln1057_fu_230_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                m1_fu_78 <= m1_2_fu_321_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_fu_230_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln20_reg_474 <= add_ln20_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln20_reg_474_pp0_iter1_reg <= add_ln20_reg_474;
                add_ln20_reg_474_pp0_iter2_reg <= add_ln20_reg_474_pp0_iter1_reg;
                add_ln20_reg_474_pp0_iter3_reg <= add_ln20_reg_474_pp0_iter2_reg;
                add_ln20_reg_474_pp0_iter4_reg <= add_ln20_reg_474_pp0_iter3_reg;
                icmp_ln1057_reg_460 <= icmp_ln1057_fu_230_p2;
                icmp_ln1057_reg_460_pp0_iter1_reg <= icmp_ln1057_reg_460;
                icmp_ln1057_reg_460_pp0_iter2_reg <= icmp_ln1057_reg_460_pp0_iter1_reg;
                icmp_ln1057_reg_460_pp0_iter3_reg <= icmp_ln1057_reg_460_pp0_iter2_reg;
                icmp_ln1057_reg_460_pp0_iter4_reg <= icmp_ln1057_reg_460_pp0_iter3_reg;
                icmp_ln1057_reg_460_pp0_iter5_reg <= icmp_ln1057_reg_460_pp0_iter4_reg;
                icmp_ln1057_reg_460_pp0_iter6_reg <= icmp_ln1057_reg_460_pp0_iter5_reg;
                icmp_ln1057_reg_460_pp0_iter7_reg <= icmp_ln1057_reg_460_pp0_iter6_reg;
                icmp_ln1057_reg_460_pp0_iter8_reg <= icmp_ln1057_reg_460_pp0_iter7_reg;
                p_r_M_real_3_reg_586 <= grp_fu_182_p2;
                p_r_M_real_4_reg_591_pp0_iter9_reg <= p_r_M_real_4_reg_591;
                trunc_ln388_reg_502 <= trunc_ln388_fu_353_p1;
                    zext_ln20_reg_542(5 downto 0) <= zext_ln20_fu_365_p1(5 downto 0);
                    zext_ln20_reg_542_pp0_iter6_reg(5 downto 0) <= zext_ln20_reg_542(5 downto 0);
                    zext_ln20_reg_542_pp0_iter7_reg(5 downto 0) <= zext_ln20_reg_542_pp0_iter6_reg(5 downto 0);
                    zext_ln20_reg_542_pp0_iter8_reg(5 downto 0) <= zext_ln20_reg_542_pp0_iter7_reg(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul3_i_i_reg_527 <= grp_fu_198_p2;
                mul_i_i_reg_522 <= grp_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul6_i_i_reg_532 <= grp_fu_194_p2;
                mul9_i_i_reg_537 <= grp_fu_198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_r_M_imag_3_reg_596 <= grp_fu_178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_r_M_imag_4_reg_601 <= grp_fu_190_p2;
                p_r_M_imag_reg_517 <= p_r_M_imag_fu_361_p1;
                p_r_M_real_reg_512 <= p_r_M_real_fu_357_p1;
                trunc_ln20_reg_552 <= trunc_ln20_fu_369_p1;
                w1_M_imag_reg_486_pp0_iter2_reg <= w1_M_imag_reg_486;
                w1_M_real_reg_480_pp0_iter2_reg <= w1_M_real_reg_480;
                    zext_ln21_reg_492_pp0_iter2_reg(5 downto 0) <= zext_ln21_reg_492(5 downto 0);
                    zext_ln21_reg_492_pp0_iter3_reg(5 downto 0) <= zext_ln21_reg_492_pp0_iter2_reg(5 downto 0);
                    zext_ln21_reg_492_pp0_iter4_reg(5 downto 0) <= zext_ln21_reg_492_pp0_iter3_reg(5 downto 0);
                    zext_ln21_reg_492_pp0_iter5_reg(5 downto 0) <= zext_ln21_reg_492_pp0_iter4_reg(5 downto 0);
                    zext_ln21_reg_492_pp0_iter6_reg(5 downto 0) <= zext_ln21_reg_492_pp0_iter5_reg(5 downto 0);
                    zext_ln21_reg_492_pp0_iter7_reg(5 downto 0) <= zext_ln21_reg_492_pp0_iter6_reg(5 downto 0);
                    zext_ln21_reg_492_pp0_iter8_reg(5 downto 0) <= zext_ln21_reg_492_pp0_iter7_reg(5 downto 0);
                    zext_ln21_reg_492_pp0_iter9_reg(5 downto 0) <= zext_ln21_reg_492_pp0_iter8_reg(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_r_M_imag_5_reg_574 <= grp_fu_178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_r_M_real_4_reg_591 <= grp_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_r_reg_562 <= grp_fu_186_p2;
                trunc_ln20_1_reg_557 <= IN_r_q0(31 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                trunc_ln388_1_reg_507 <= IN_r_q0(31 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1057_reg_460 = ap_const_lv1_0))) then
                w1_M_imag_reg_486 <= w_M_imag_q0;
                w1_M_real_reg_480 <= w_M_real_q0;
                    zext_ln21_reg_492(5 downto 0) <= zext_ln21_fu_348_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln21_reg_492(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln21_reg_492_pp0_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln21_reg_492_pp0_iter3_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln21_reg_492_pp0_iter4_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln21_reg_492_pp0_iter5_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln21_reg_492_pp0_iter6_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln21_reg_492_pp0_iter7_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln21_reg_492_pp0_iter8_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln21_reg_492_pp0_iter9_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln20_reg_542(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln20_reg_542_pp0_iter6_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln20_reg_542_pp0_iter7_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln20_reg_542_pp0_iter8_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter9_stage0, ap_idle_pp0_0to8, ap_idle_pp0_1to10, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to10 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    IN_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, zext_ln21_fu_348_p1, zext_ln20_fu_365_p1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            IN_r_address0 <= zext_ln20_fu_365_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            IN_r_address0 <= zext_ln21_fu_348_p1(6 - 1 downto 0);
        else 
            IN_r_address0 <= "XXXXXX";
        end if; 
    end process;


    IN_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            IN_r_ce0 <= ap_const_logic_1;
        else 
            IN_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, zext_ln21_reg_492_pp0_iter9_reg, zext_ln20_reg_542_pp0_iter8_reg, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OUT_r_address0 <= zext_ln21_reg_492_pp0_iter9_reg(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            OUT_r_address0 <= zext_ln20_reg_542_pp0_iter8_reg(6 - 1 downto 0);
        else 
            OUT_r_address0 <= "XXXXXX";
        end if; 
    end process;


    OUT_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            OUT_r_ce0 <= ap_const_logic_1;
        else 
            OUT_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, tmp_2_fu_389_p3, tmp_3_fu_404_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OUT_r_d0 <= tmp_3_fu_404_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            OUT_r_d0 <= tmp_2_fu_389_p3;
        else 
            OUT_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUT_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            OUT_r_we0 <= ap_const_lv4_F;
        else 
            OUT_r_we0 <= ap_const_lv4_0;
        end if; 
    end process;

    add_ln19_fu_259_p2 <= std_logic_vector(unsigned(zext_ln19_1) + unsigned(trunc_ln19_fu_255_p1));
    add_ln20_fu_270_p2 <= std_logic_vector(unsigned(trunc_ln1057_1_fu_251_p1) + unsigned(trunc_ln1057_fu_247_p1));
    add_ln21_fu_344_p2 <= std_logic_vector(unsigned(add_ln20_reg_474) + unsigned(div_cast));
    add_ln31_fu_292_p2 <= std_logic_vector(unsigned(m1_fu_78) + unsigned(y));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln1057_fu_230_p2)
    begin
        if (((icmp_ln1057_fu_230_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter9_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, icmp_ln1057_reg_460_pp0_iter8_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1057_reg_460_pp0_iter8_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter9_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter9_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter9_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg, ap_loop_exit_ready_pp0_iter5_reg, ap_loop_exit_ready_pp0_iter6_reg, ap_loop_exit_ready_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg, ap_loop_exit_ready_pp0_iter9_reg)
    begin
        if (not(((ap_loop_exit_ready = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to8_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to8 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to10_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to10 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to10 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln22_1_fu_386_p1 <= p_r_M_imag_3_reg_596;
    bitcast_ln22_fu_383_p1 <= p_r_M_real_3_reg_586;
    bitcast_ln23_1_fu_401_p1 <= p_r_M_imag_4_reg_601;
    bitcast_ln23_fu_398_p1 <= p_r_M_real_4_reg_591_pp0_iter9_reg;

    grp_fu_178_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage1, mul6_i_i_reg_532, t1_M_imag_fu_378_p1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_178_p0 <= t1_M_imag_fu_378_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_178_p0 <= mul6_i_i_reg_532;
        else 
            grp_fu_178_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_178_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage1, mul9_i_i_reg_537, p_r_M_imag_5_reg_574, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_178_p1 <= p_r_M_imag_5_reg_574;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_178_p1 <= mul9_i_i_reg_537;
        else 
            grp_fu_178_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_182_p0 <= trunc_ln20_reg_552;

    grp_fu_186_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, mul_i_i_reg_522, t1_M_real_fu_373_p1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_186_p0 <= t1_M_real_fu_373_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_186_p0 <= mul_i_i_reg_522;
        else 
            grp_fu_186_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_186_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, mul3_i_i_reg_527, p_r_reg_562, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_186_p1 <= p_r_reg_562;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_186_p1 <= mul3_i_i_reg_527;
        else 
            grp_fu_186_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_190_p0 <= trunc_ln20_1_reg_557;

    grp_fu_194_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, p_r_M_real_fu_357_p1, p_r_M_real_reg_512, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_194_p0 <= p_r_M_real_reg_512;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_194_p0 <= p_r_M_real_fu_357_p1;
            else 
                grp_fu_194_p0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_194_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_194_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, w1_M_real_reg_480, w1_M_imag_reg_486_pp0_iter2_reg, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_194_p1 <= w1_M_imag_reg_486_pp0_iter2_reg;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_194_p1 <= w1_M_real_reg_480;
            else 
                grp_fu_194_p1 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_194_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_198_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, p_r_M_imag_fu_361_p1, p_r_M_imag_reg_517, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_198_p0 <= p_r_M_imag_reg_517;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_198_p0 <= p_r_M_imag_fu_361_p1;
            else 
                grp_fu_198_p0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_198_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_198_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, w1_M_real_reg_480_pp0_iter2_reg, w1_M_imag_reg_486, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_198_p1 <= w1_M_real_reg_480_pp0_iter2_reg;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_198_p1 <= w1_M_imag_reg_486;
            else 
                grp_fu_198_p1 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_198_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln1057_fu_230_p2 <= "1" when (k1_fu_70 = div_i_i43_cast) else "0";
    icmp_ln24_fu_276_p2 <= "1" when (unsigned(j1_fu_74) < unsigned(sub28)) else "0";
    icmp_ln28_fu_287_p2 <= "1" when (j1_fu_74 = sub28) else "0";
    j1_1_fu_281_p2 <= std_logic_vector(unsigned(j1_fu_74) + unsigned(ap_const_lv32_1));
    j1_2_fu_297_p3 <= 
        ap_const_lv32_0 when (icmp_ln28_fu_287_p2(0) = '1') else 
        j1_fu_74;
    j1_3_fu_313_p3 <= 
        j1_1_fu_281_p2 when (icmp_ln24_fu_276_p2(0) = '1') else 
        j1_2_fu_297_p3;
    k1_2_fu_235_p2 <= std_logic_vector(unsigned(k1_fu_70) + unsigned(ap_const_lv7_1));
    m1_1_fu_305_p3 <= 
        add_ln31_fu_292_p2 when (icmp_ln28_fu_287_p2(0) = '1') else 
        m1_fu_78;
    m1_2_fu_321_p3 <= 
        m1_fu_78 when (icmp_ln24_fu_276_p2(0) = '1') else 
        m1_1_fu_305_p3;
    p_r_M_imag_fu_361_p1 <= trunc_ln388_1_reg_507;
    p_r_M_real_fu_357_p1 <= trunc_ln388_reg_502;
    t1_M_imag_fu_378_p1 <= trunc_ln20_1_reg_557;
    t1_M_real_fu_373_p1 <= trunc_ln20_reg_552;
    tmp_2_fu_389_p3 <= (bitcast_ln22_1_fu_386_p1 & bitcast_ln22_fu_383_p1);
    tmp_3_fu_404_p3 <= (bitcast_ln23_1_fu_401_p1 & bitcast_ln23_fu_398_p1);
    trunc_ln1057_1_fu_251_p1 <= j1_fu_74(6 - 1 downto 0);
    trunc_ln1057_fu_247_p1 <= m1_fu_78(6 - 1 downto 0);
    trunc_ln19_fu_255_p1 <= j1_fu_74(8 - 1 downto 0);
    trunc_ln20_fu_369_p1 <= IN_r_q0(16 - 1 downto 0);
    trunc_ln388_fu_353_p1 <= IN_r_q0(16 - 1 downto 0);
    w_M_imag_address0 <= zext_ln19_fu_264_p1(8 - 1 downto 0);

    w_M_imag_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            w_M_imag_ce0 <= ap_const_logic_1;
        else 
            w_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_M_real_address0 <= zext_ln19_fu_264_p1(8 - 1 downto 0);

    w_M_real_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            w_M_real_ce0 <= ap_const_logic_1;
        else 
            w_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln19_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_fu_259_p2),64));
    zext_ln20_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_reg_474_pp0_iter4_reg),64));
    zext_ln21_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_fu_344_p2),64));
end behav;
