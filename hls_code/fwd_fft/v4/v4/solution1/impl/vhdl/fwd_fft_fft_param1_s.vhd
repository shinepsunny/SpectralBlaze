-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fwd_fft_fft_param1_s is
port (
    xn_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    xn_0_ce0 : OUT STD_LOGIC;
    xn_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    xn_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xn_0_we0 : OUT STD_LOGIC;
    xn_0_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    xn_0_ce1 : OUT STD_LOGIC;
    xn_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    xn_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    xn_0_we1 : OUT STD_LOGIC;
    xn_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    xn_1_ce0 : OUT STD_LOGIC;
    xn_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    xn_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xn_1_we0 : OUT STD_LOGIC;
    xn_1_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    xn_1_ce1 : OUT STD_LOGIC;
    xn_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    xn_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    xn_1_we1 : OUT STD_LOGIC;
    out_fft_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_fft_full_n : IN STD_LOGIC;
    out_fft_write : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    xn_0_empty_n : IN STD_LOGIC;
    xn_0_read : OUT STD_LOGIC;
    xn_1_empty_n : IN STD_LOGIC;
    xn_1_read : OUT STD_LOGIC;
    p_read_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of fwd_fft_fft_param1_s is 
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

attribute shreg_extract : string;
    signal fft_copy_param1_complex_float_16_U0_ap_start : STD_LOGIC;
    signal fft_copy_param1_complex_float_16_U0_start_full_n : STD_LOGIC;
    signal fft_copy_param1_complex_float_16_U0_ap_done : STD_LOGIC;
    signal fft_copy_param1_complex_float_16_U0_ap_continue : STD_LOGIC;
    signal fft_copy_param1_complex_float_16_U0_ap_idle : STD_LOGIC;
    signal fft_copy_param1_complex_float_16_U0_ap_ready : STD_LOGIC;
    signal fft_copy_param1_complex_float_16_U0_start_out : STD_LOGIC;
    signal fft_copy_param1_complex_float_16_U0_start_write : STD_LOGIC;
    signal fft_copy_param1_complex_float_16_U0_in_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_copy_param1_complex_float_16_U0_in_0_ce0 : STD_LOGIC;
    signal fft_copy_param1_complex_float_16_U0_in_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fft_copy_param1_complex_float_16_U0_in_1_ce0 : STD_LOGIC;
    signal fft_copy_param1_complex_float_16_U0_xn1_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_copy_param1_complex_float_16_U0_xn1_write : STD_LOGIC;
    signal fft_copy_param1_complex_float_16_U0_config_s2_din : STD_LOGIC_VECTOR (15 downto 0);
    signal fft_copy_param1_complex_float_16_U0_config_s2_write : STD_LOGIC;
    signal fft_copy_param1_complex_float_16_U0_in_0_write : STD_LOGIC;
    signal fft_copy_param1_complex_float_16_U0_in_1_write : STD_LOGIC;
    signal fft_syn_param1_32_32_16_1_1_U0_ap_start : STD_LOGIC;
    signal fft_syn_param1_32_32_16_1_1_U0_ap_done : STD_LOGIC;
    signal fft_syn_param1_32_32_16_1_1_U0_ap_idle : STD_LOGIC;
    signal fft_syn_param1_32_32_16_1_1_U0_ap_ready : STD_LOGIC;
    signal fft_syn_param1_32_32_16_1_1_U0_ap_continue : STD_LOGIC;
    signal fft_syn_param1_32_32_16_1_1_U0_xn_read : STD_LOGIC;
    signal fft_syn_param1_32_32_16_1_1_U0_xk_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_syn_param1_32_32_16_1_1_U0_xk_write : STD_LOGIC;
    signal fft_syn_param1_32_32_16_1_1_U0_status_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal fft_syn_param1_32_32_16_1_1_U0_status_data_V_write : STD_LOGIC;
    signal fft_syn_param1_32_32_16_1_1_U0_config_ch_data_V_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal fft_param1_Block_split25_proc8_U0_ap_start : STD_LOGIC;
    signal fft_param1_Block_split25_proc8_U0_ap_done : STD_LOGIC;
    signal fft_param1_Block_split25_proc8_U0_ap_continue : STD_LOGIC;
    signal fft_param1_Block_split25_proc8_U0_ap_idle : STD_LOGIC;
    signal fft_param1_Block_split25_proc8_U0_ap_ready : STD_LOGIC;
    signal fft_param1_Block_split25_proc8_U0_status_s_read : STD_LOGIC;
    signal xn1_full_n : STD_LOGIC;
    signal xn1_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal xn1_empty_n : STD_LOGIC;
    signal config_s_full_n : STD_LOGIC;
    signal config_s_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal config_s_empty_n : STD_LOGIC;
    signal status_s_full_n : STD_LOGIC;
    signal status_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal status_s_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal start_for_fft_syn_param1_32_32_16_1_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_syn_param1_32_32_16_1_1_U0_full_n : STD_LOGIC;
    signal start_for_fft_syn_param1_32_32_16_1_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_syn_param1_32_32_16_1_1_U0_empty_n : STD_LOGIC;
    signal start_for_fft_param1_Block_split25_proc8_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_param1_Block_split25_proc8_U0_full_n : STD_LOGIC;
    signal start_for_fft_param1_Block_split25_proc8_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_param1_Block_split25_proc8_U0_empty_n : STD_LOGIC;

    component fwd_fft_fft_copy_param1_complex_float_16_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        in_0_ce0 : OUT STD_LOGIC;
        in_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        in_1_ce0 : OUT STD_LOGIC;
        in_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        xn1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        xn1_full_n : IN STD_LOGIC;
        xn1_write : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        config_s2_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        config_s2_full_n : IN STD_LOGIC;
        config_s2_write : OUT STD_LOGIC );
    end component;


    component fwd_fft_fft_syn_param1_32_32_16_1_1_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        xn_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        xn_empty_n : IN STD_LOGIC;
        xn_read : OUT STD_LOGIC;
        xk_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        xk_full_n : IN STD_LOGIC;
        xk_write : OUT STD_LOGIC;
        status_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        status_data_V_full_n : IN STD_LOGIC;
        status_data_V_write : OUT STD_LOGIC;
        config_ch_data_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        config_ch_data_V_empty_n : IN STD_LOGIC;
        config_ch_data_V_read : OUT STD_LOGIC );
    end component;


    component fwd_fft_fft_param1_Block_split25_proc8 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        status_s_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        status_s_empty_n : IN STD_LOGIC;
        status_s_read : OUT STD_LOGIC );
    end component;


    component fwd_fft_fifo_w64_d16_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fwd_fft_fifo_w16_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fwd_fft_fifo_w8_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fwd_fft_start_for_fft_syn_param1_32_32_16_1_1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fwd_fft_start_for_fft_param1_Block_split25_proc8_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    fft_copy_param1_complex_float_16_U0 : component fwd_fft_fft_copy_param1_complex_float_16_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_copy_param1_complex_float_16_U0_ap_start,
        start_full_n => fft_copy_param1_complex_float_16_U0_start_full_n,
        ap_done => fft_copy_param1_complex_float_16_U0_ap_done,
        ap_continue => fft_copy_param1_complex_float_16_U0_ap_continue,
        ap_idle => fft_copy_param1_complex_float_16_U0_ap_idle,
        ap_ready => fft_copy_param1_complex_float_16_U0_ap_ready,
        start_out => fft_copy_param1_complex_float_16_U0_start_out,
        start_write => fft_copy_param1_complex_float_16_U0_start_write,
        in_0_address0 => fft_copy_param1_complex_float_16_U0_in_0_address0,
        in_0_ce0 => fft_copy_param1_complex_float_16_U0_in_0_ce0,
        in_0_q0 => xn_0_q0,
        in_1_address0 => fft_copy_param1_complex_float_16_U0_in_1_address0,
        in_1_ce0 => fft_copy_param1_complex_float_16_U0_in_1_ce0,
        in_1_q0 => xn_1_q0,
        xn1_din => fft_copy_param1_complex_float_16_U0_xn1_din,
        xn1_full_n => xn1_full_n,
        xn1_write => fft_copy_param1_complex_float_16_U0_xn1_write,
        p_read => p_read,
        config_s2_din => fft_copy_param1_complex_float_16_U0_config_s2_din,
        config_s2_full_n => config_s_full_n,
        config_s2_write => fft_copy_param1_complex_float_16_U0_config_s2_write);

    fft_syn_param1_32_32_16_1_1_U0 : component fwd_fft_fft_syn_param1_32_32_16_1_1_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_syn_param1_32_32_16_1_1_U0_ap_start,
        ap_ce => ap_const_logic_1,
        ap_done => fft_syn_param1_32_32_16_1_1_U0_ap_done,
        ap_idle => fft_syn_param1_32_32_16_1_1_U0_ap_idle,
        ap_ready => fft_syn_param1_32_32_16_1_1_U0_ap_ready,
        ap_continue => fft_syn_param1_32_32_16_1_1_U0_ap_continue,
        xn_dout => xn1_dout,
        xn_empty_n => xn1_empty_n,
        xn_read => fft_syn_param1_32_32_16_1_1_U0_xn_read,
        xk_din => fft_syn_param1_32_32_16_1_1_U0_xk_din,
        xk_full_n => out_fft_full_n,
        xk_write => fft_syn_param1_32_32_16_1_1_U0_xk_write,
        status_data_V_din => fft_syn_param1_32_32_16_1_1_U0_status_data_V_din,
        status_data_V_full_n => status_s_full_n,
        status_data_V_write => fft_syn_param1_32_32_16_1_1_U0_status_data_V_write,
        config_ch_data_V_dout => config_s_dout,
        config_ch_data_V_empty_n => config_s_empty_n,
        config_ch_data_V_read => fft_syn_param1_32_32_16_1_1_U0_config_ch_data_V_read);

    fft_param1_Block_split25_proc8_U0 : component fwd_fft_fft_param1_Block_split25_proc8
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_param1_Block_split25_proc8_U0_ap_start,
        ap_done => fft_param1_Block_split25_proc8_U0_ap_done,
        ap_continue => fft_param1_Block_split25_proc8_U0_ap_continue,
        ap_idle => fft_param1_Block_split25_proc8_U0_ap_idle,
        ap_ready => fft_param1_Block_split25_proc8_U0_ap_ready,
        status_s_dout => status_s_dout,
        status_s_empty_n => status_s_empty_n,
        status_s_read => fft_param1_Block_split25_proc8_U0_status_s_read);

    xn1_U : component fwd_fft_fifo_w64_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_copy_param1_complex_float_16_U0_xn1_din,
        if_full_n => xn1_full_n,
        if_write => fft_copy_param1_complex_float_16_U0_xn1_write,
        if_dout => xn1_dout,
        if_empty_n => xn1_empty_n,
        if_read => fft_syn_param1_32_32_16_1_1_U0_xn_read);

    config_s_U : component fwd_fft_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_copy_param1_complex_float_16_U0_config_s2_din,
        if_full_n => config_s_full_n,
        if_write => fft_copy_param1_complex_float_16_U0_config_s2_write,
        if_dout => config_s_dout,
        if_empty_n => config_s_empty_n,
        if_read => fft_syn_param1_32_32_16_1_1_U0_config_ch_data_V_read);

    status_s_U : component fwd_fft_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_syn_param1_32_32_16_1_1_U0_status_data_V_din,
        if_full_n => status_s_full_n,
        if_write => fft_syn_param1_32_32_16_1_1_U0_status_data_V_write,
        if_dout => status_s_dout,
        if_empty_n => status_s_empty_n,
        if_read => fft_param1_Block_split25_proc8_U0_status_s_read);

    start_for_fft_syn_param1_32_32_16_1_1_U0_U : component fwd_fft_start_for_fft_syn_param1_32_32_16_1_1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_syn_param1_32_32_16_1_1_U0_din,
        if_full_n => start_for_fft_syn_param1_32_32_16_1_1_U0_full_n,
        if_write => fft_copy_param1_complex_float_16_U0_start_write,
        if_dout => start_for_fft_syn_param1_32_32_16_1_1_U0_dout,
        if_empty_n => start_for_fft_syn_param1_32_32_16_1_1_U0_empty_n,
        if_read => fft_syn_param1_32_32_16_1_1_U0_ap_ready);

    start_for_fft_param1_Block_split25_proc8_U0_U : component fwd_fft_start_for_fft_param1_Block_split25_proc8_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_param1_Block_split25_proc8_U0_din,
        if_full_n => start_for_fft_param1_Block_split25_proc8_U0_full_n,
        if_write => fft_copy_param1_complex_float_16_U0_start_write,
        if_dout => start_for_fft_param1_Block_split25_proc8_U0_dout,
        if_empty_n => start_for_fft_param1_Block_split25_proc8_U0_empty_n,
        if_read => fft_param1_Block_split25_proc8_U0_ap_ready);




    ap_done <= ap_sync_done;
    ap_idle <= (fft_syn_param1_32_32_16_1_1_U0_ap_idle and fft_param1_Block_split25_proc8_U0_ap_idle and fft_copy_param1_complex_float_16_U0_ap_idle);
    ap_ready <= fft_copy_param1_complex_float_16_U0_ap_ready;
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (fft_syn_param1_32_32_16_1_1_U0_ap_done and fft_param1_Block_split25_proc8_U0_ap_done);
    fft_copy_param1_complex_float_16_U0_ap_continue <= ap_const_logic_1;
    fft_copy_param1_complex_float_16_U0_ap_start <= ap_start;
    fft_copy_param1_complex_float_16_U0_in_0_write <= ap_const_logic_0;
    fft_copy_param1_complex_float_16_U0_in_1_write <= ap_const_logic_0;
    fft_copy_param1_complex_float_16_U0_start_full_n <= (start_for_fft_syn_param1_32_32_16_1_1_U0_full_n and start_for_fft_param1_Block_split25_proc8_U0_full_n);
    fft_param1_Block_split25_proc8_U0_ap_continue <= ap_sync_continue;
    fft_param1_Block_split25_proc8_U0_ap_start <= start_for_fft_param1_Block_split25_proc8_U0_empty_n;
    fft_syn_param1_32_32_16_1_1_U0_ap_continue <= ap_sync_continue;
    fft_syn_param1_32_32_16_1_1_U0_ap_start <= start_for_fft_syn_param1_32_32_16_1_1_U0_empty_n;
    out_fft_din <= fft_syn_param1_32_32_16_1_1_U0_xk_din;
    out_fft_write <= fft_syn_param1_32_32_16_1_1_U0_xk_write;
    start_for_fft_param1_Block_split25_proc8_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fft_syn_param1_32_32_16_1_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    xn_0_address0 <= fft_copy_param1_complex_float_16_U0_in_0_address0;
    xn_0_address1 <= ap_const_lv6_0;
    xn_0_ce0 <= fft_copy_param1_complex_float_16_U0_in_0_ce0;
    xn_0_ce1 <= ap_const_logic_0;
    xn_0_d0 <= ap_const_lv32_0;
    xn_0_d1 <= ap_const_lv32_0;
    xn_0_read <= fft_copy_param1_complex_float_16_U0_in_0_write;
    xn_0_we0 <= ap_const_logic_0;
    xn_0_we1 <= ap_const_logic_0;
    xn_1_address0 <= fft_copy_param1_complex_float_16_U0_in_1_address0;
    xn_1_address1 <= ap_const_lv6_0;
    xn_1_ce0 <= fft_copy_param1_complex_float_16_U0_in_1_ce0;
    xn_1_ce1 <= ap_const_logic_0;
    xn_1_d0 <= ap_const_lv32_0;
    xn_1_d1 <= ap_const_lv32_0;
    xn_1_read <= fft_copy_param1_complex_float_16_U0_in_1_write;
    xn_1_we0 <= ap_const_logic_0;
    xn_1_we1 <= ap_const_logic_0;
end behav;
