-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity fft_stage_fft_stage_Pipeline_SKIP_X_w_M_value is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 192
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of fft_stage_fft_stage_Pipeline_SKIP_X_w_M_value is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 to 32=> "00000000000000000000000000000000", 
    33 => "10111111100000000000000000000000", 
    34 to 64=> "00000000000000000000000000000000", 
    65 => "10111111001101010000010011110111", 
    66 => "10111111100000000000000000000000", 
    67 => "10111111001101010000010011110111", 
    68 to 96=> "00000000000000000000000000000000", 
    97 => "10111110110000111110111100000111", 
    98 => "10111111001101010000010011110111", 
    99 => "10111111011011001000001101100110", 
    100 => "10111111100000000000000000000000", 
    101 => "10111111011011001000001101100110", 
    102 => "10111111001101010000010011110111", 
    103 => "10111110110000111110111100000111", 
    104 to 128=> "00000000000000000000000000000000", 
    129 => "10111110010001111100010110101100", 
    130 => "10111110110000111110111100000111", 
    131 => "10111111000011100011100111010110", 
    132 => "10111111001101010000010011110111", 
    133 => "10111111010101001101101100111000", 
    134 => "10111111011011001000001101100110", 
    135 => "10111111011110110001010010111010", 
    136 => "10111111100000000000000000000000", 
    137 => "10111111011110110001010010111010", 
    138 => "10111111011011001000001101100110", 
    139 => "10111111010101001101101100111000", 
    140 => "10111111001101010000010011110111", 
    141 => "10111111000011100011100111010110", 
    142 => "10111110110000111110111100000111", 
    143 => "10111110010001111100010110101100", 
    144 to 160=> "00000000000000000000000000000000", 
    161 => "10111101110010001011110100100011", 
    162 => "10111110010001111100010110101100", 
    163 => "10111110100101001010000000111100", 
    164 => "10111110110000111110111100000111", 
    165 => "10111110111100010101101011110011", 
    166 => "10111111000011100011100111010110", 
    167 => "10111111001000100110011110010100", 
    168 => "10111111001101010000010011110111", 
    169 => "10111111010001011110001111111100", 
    170 => "10111111010101001101101100111000", 
    171 => "10111111011000011100010110010011", 
    172 => "10111111011011001000001101100110", 
    173 => "10111111011101001111101000000101", 
    174 => "10111111011110110001010010111010", 
    175 => "10111111011111101100010001110010", 
    176 => "10111111100000000000000000000000", 
    177 => "10111111011111101100010001110010", 
    178 => "10111111011110110001010010111010", 
    179 => "10111111011101001111101000000101", 
    180 => "10111111011011001000001101100110", 
    181 => "10111111011000011100010110010011", 
    182 => "10111111010101001101101100111000", 
    183 => "10111111010001011110001111111100", 
    184 => "10111111001101010000010011110111", 
    185 => "10111111001000100110011110010100", 
    186 => "10111111000011100011100111010110", 
    187 => "10111110111100010101101011110011", 
    188 => "10111110110000111110111100000111", 
    189 => "10111110100101001010000000111100", 
    190 => "10111110010001111100010110101100", 
    191 => "10111101110010001011110100100011" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

