-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fwd_fft_ifmap_gen_x is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    c_fft_row_op_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    c_fft_row_op_st_empty_n : IN STD_LOGIC;
    c_fft_row_op_st_read : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of fwd_fft_ifmap_gen_x is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln1057_fu_76_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal c_fft_row_op_st_blk_n : STD_LOGIC;
    signal indvar_flatten_fu_42 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1057_fu_82_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_62_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cast_fu_58_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_62_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound_fu_62_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_99 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component fwd_fft_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fwd_fft_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    mul_8ns_8ns_16_1_1_U107 : component fwd_fft_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => bound_fu_62_p0,
        din1 => bound_fu_62_p1,
        dout => bound_fu_62_p2);

    flow_control_loop_pipe_U : component fwd_fft_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((icmp_ln1057_fu_76_p2 = ap_const_lv1_0) and (c_fft_row_op_st_empty_n = ap_const_logic_0)))) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_42_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_99)) then
                if ((icmp_ln1057_fu_76_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_42 <= add_ln1057_fu_82_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_42 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, c_fft_row_op_st_empty_n, icmp_ln1057_fu_76_p2, ap_done_reg, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1057_fu_82_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv16_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(c_fft_row_op_st_empty_n, icmp_ln1057_fu_76_p2, ap_done_reg, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((icmp_ln1057_fu_76_p2 = ap_const_lv1_0) and (c_fft_row_op_st_empty_n = ap_const_logic_0)))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(c_fft_row_op_st_empty_n, icmp_ln1057_fu_76_p2, ap_done_reg, ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((icmp_ln1057_fu_76_p2 = ap_const_lv1_0) and (c_fft_row_op_st_empty_n = ap_const_logic_0)));
    end process;


    ap_condition_99_assign_proc : process(ap_CS_fsm_state1, c_fft_row_op_st_empty_n, icmp_ln1057_fu_76_p2, ap_done_reg, ap_start_int)
    begin
                ap_condition_99 <= (not(((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((icmp_ln1057_fu_76_p2 = ap_const_lv1_0) and (c_fft_row_op_st_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, c_fft_row_op_st_empty_n, icmp_ln1057_fu_76_p2, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((icmp_ln1057_fu_76_p2 = ap_const_lv1_0) and (c_fft_row_op_st_empty_n = ap_const_logic_0)))) and (icmp_ln1057_fu_76_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, c_fft_row_op_st_empty_n, icmp_ln1057_fu_76_p2, ap_done_reg, ap_loop_exit_ready, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((icmp_ln1057_fu_76_p2 = ap_const_lv1_0) and (c_fft_row_op_st_empty_n = ap_const_logic_0)))) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, c_fft_row_op_st_empty_n, icmp_ln1057_fu_76_p2, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((icmp_ln1057_fu_76_p2 = ap_const_lv1_0) and (c_fft_row_op_st_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_state1, indvar_flatten_fu_42, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_42;
        end if; 
    end process;

    bound_fu_62_p0 <= cast_fu_58_p1(8 - 1 downto 0);
    bound_fu_62_p1 <= cast_fu_58_p1(8 - 1 downto 0);

    c_fft_row_op_st_blk_n_assign_proc : process(ap_CS_fsm_state1, c_fft_row_op_st_empty_n, icmp_ln1057_fu_76_p2, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (icmp_ln1057_fu_76_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            c_fft_row_op_st_blk_n <= c_fft_row_op_st_empty_n;
        else 
            c_fft_row_op_st_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    c_fft_row_op_st_read_assign_proc : process(ap_CS_fsm_state1, c_fft_row_op_st_empty_n, icmp_ln1057_fu_76_p2, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((icmp_ln1057_fu_76_p2 = ap_const_lv1_0) and (c_fft_row_op_st_empty_n = ap_const_logic_0)))) and (icmp_ln1057_fu_76_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            c_fft_row_op_st_read <= ap_const_logic_1;
        else 
            c_fft_row_op_st_read <= ap_const_logic_0;
        end if; 
    end process;

    cast_fu_58_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),16));
    icmp_ln1057_fu_76_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = bound_fu_62_p2) else "0";
end behav;
