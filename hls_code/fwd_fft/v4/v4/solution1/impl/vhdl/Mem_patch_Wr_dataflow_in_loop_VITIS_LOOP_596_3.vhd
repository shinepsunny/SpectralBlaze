-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Mem_patch_Wr_dataflow_in_loop_VITIS_LOOP_596_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    c_fft_col_op_st_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    c_fft_col_op_st_V_empty_n : IN STD_LOGIC;
    c_fft_col_op_st_V_read : OUT STD_LOGIC;
    ctrl1_reg : IN STD_LOGIC_VECTOR (31 downto 0);
    fft_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    ctrl1_reg_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    fft_out_ap_vld : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of Mem_patch_Wr_dataflow_in_loop_VITIS_LOOP_596_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ifmap_CF_M_real_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ifmap_CF_M_real_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ifmap_CF_M_real_t_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ifmap_CF_M_real_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ifmap_CF_M_real_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ifmap_CF_M_imag_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ifmap_CF_M_imag_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ifmap_CF_M_imag_t_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ifmap_CF_M_imag_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ifmap_CF_M_imag_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ifmap_gen_U0_ap_start : STD_LOGIC;
    signal ifmap_gen_U0_ap_done : STD_LOGIC;
    signal ifmap_gen_U0_ap_continue : STD_LOGIC;
    signal ifmap_gen_U0_ap_idle : STD_LOGIC;
    signal ifmap_gen_U0_ap_ready : STD_LOGIC;
    signal ifmap_gen_U0_c_fft_col_op_st_V_read : STD_LOGIC;
    signal ifmap_gen_U0_ifmap_CF_M_real_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal ifmap_gen_U0_ifmap_CF_M_real_ce0 : STD_LOGIC;
    signal ifmap_gen_U0_ifmap_CF_M_real_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ifmap_gen_U0_ifmap_CF_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ifmap_gen_U0_ifmap_CF_M_imag_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal ifmap_gen_U0_ifmap_CF_M_imag_ce0 : STD_LOGIC;
    signal ifmap_gen_U0_ifmap_CF_M_imag_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ifmap_gen_U0_ifmap_CF_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ifmap_gen_U0_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_channel_done_ctrl1_reg_c_channel1 : STD_LOGIC;
    signal ctrl1_reg_c_channel1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_reg_c_channel1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_reg_c_channel1 : STD_LOGIC;
    signal ap_channel_done_ifmap_CF_M_imag : STD_LOGIC;
    signal ifmap_gen_U0_ifmap_CF_M_imag_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ifmap_CF_M_imag : STD_LOGIC := '0';
    signal ap_sync_channel_write_ifmap_CF_M_imag : STD_LOGIC;
    signal ap_channel_done_ifmap_CF_M_real : STD_LOGIC;
    signal ifmap_gen_U0_ifmap_CF_M_real_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ifmap_CF_M_real : STD_LOGIC := '0';
    signal ap_sync_channel_write_ifmap_CF_M_real : STD_LOGIC;
    signal ifmap_vec_write_U0_ap_start : STD_LOGIC;
    signal ifmap_vec_write_U0_ap_done : STD_LOGIC;
    signal ifmap_vec_write_U0_ap_continue : STD_LOGIC;
    signal ifmap_vec_write_U0_ap_idle : STD_LOGIC;
    signal ifmap_vec_write_U0_ap_ready : STD_LOGIC;
    signal ifmap_vec_write_U0_ifmap_CF_M_real_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal ifmap_vec_write_U0_ifmap_CF_M_real_ce0 : STD_LOGIC;
    signal ifmap_vec_write_U0_ifmap_CF_M_real_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ifmap_vec_write_U0_ifmap_CF_M_real_ce1 : STD_LOGIC;
    signal ifmap_vec_write_U0_ifmap_CF_M_imag_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal ifmap_vec_write_U0_ifmap_CF_M_imag_ce0 : STD_LOGIC;
    signal ifmap_vec_write_U0_ifmap_CF_M_imag_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ifmap_vec_write_U0_ifmap_CF_M_imag_ce1 : STD_LOGIC;
    signal ifmap_vec_write_U0_fft_out : STD_LOGIC_VECTOR (127 downto 0);
    signal ifmap_vec_write_U0_fft_out_ap_vld : STD_LOGIC;
    signal ifmap_CF_M_real_i_full_n : STD_LOGIC;
    signal ifmap_CF_M_real_t_empty_n : STD_LOGIC;
    signal ifmap_CF_M_imag_i_full_n : STD_LOGIC;
    signal ifmap_CF_M_imag_t_empty_n : STD_LOGIC;
    signal ctrl1_reg_c_channel1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal ctrl1_reg_c_channel1_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Mem_patch_Wr_ifmap_gen IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        c_fft_col_op_st_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_fft_col_op_st_V_empty_n : IN STD_LOGIC;
        c_fft_col_op_st_V_read : OUT STD_LOGIC;
        ifmap_CF_M_real_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ifmap_CF_M_real_ce0 : OUT STD_LOGIC;
        ifmap_CF_M_real_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ifmap_CF_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ifmap_CF_M_imag_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ifmap_CF_M_imag_ce0 : OUT STD_LOGIC;
        ifmap_CF_M_imag_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ifmap_CF_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_reg : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Mem_patch_Wr_ifmap_vec_write IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ifmap_CF_M_real_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ifmap_CF_M_real_ce0 : OUT STD_LOGIC;
        ifmap_CF_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ifmap_CF_M_real_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ifmap_CF_M_real_ce1 : OUT STD_LOGIC;
        ifmap_CF_M_real_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ifmap_CF_M_imag_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ifmap_CF_M_imag_ce0 : OUT STD_LOGIC;
        ifmap_CF_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ifmap_CF_M_imag_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ifmap_CF_M_imag_ce1 : OUT STD_LOGIC;
        ifmap_CF_M_imag_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        fft_out : OUT STD_LOGIC_VECTOR (127 downto 0);
        fft_out_ap_vld : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Mem_patch_Wr_dataflow_in_loop_VITIS_LOOP_596_3_ifmap_CF_M_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC_VECTOR (3 downto 0);
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC_VECTOR (3 downto 0);
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component Mem_patch_Wr_fifo_w8_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    ifmap_CF_M_real_U : component Mem_patch_Wr_dataflow_in_loop_VITIS_LOOP_596_3_ifmap_CF_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => ifmap_gen_U0_ifmap_CF_M_real_address0,
        i_ce0 => ifmap_gen_U0_ifmap_CF_M_real_ce0,
        i_we0 => ifmap_gen_U0_ifmap_CF_M_real_we0,
        i_d0 => ifmap_gen_U0_ifmap_CF_M_real_d0,
        i_q0 => ifmap_CF_M_real_i_q0,
        i_address1 => ap_const_lv11_0,
        i_ce1 => ap_const_logic_0,
        i_q1 => ifmap_CF_M_real_i_q1,
        t_address0 => ifmap_vec_write_U0_ifmap_CF_M_real_address0,
        t_ce0 => ifmap_vec_write_U0_ifmap_CF_M_real_ce0,
        t_we0 => ifmap_CF_M_real_t_we0,
        t_d0 => ap_const_lv32_0,
        t_q0 => ifmap_CF_M_real_t_q0,
        t_address1 => ifmap_vec_write_U0_ifmap_CF_M_real_address1,
        t_ce1 => ifmap_vec_write_U0_ifmap_CF_M_real_ce1,
        t_q1 => ifmap_CF_M_real_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => ifmap_CF_M_real_i_full_n,
        i_write => ap_channel_done_ifmap_CF_M_real,
        t_empty_n => ifmap_CF_M_real_t_empty_n,
        t_read => ifmap_vec_write_U0_ap_ready);

    ifmap_CF_M_imag_U : component Mem_patch_Wr_dataflow_in_loop_VITIS_LOOP_596_3_ifmap_CF_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => ifmap_gen_U0_ifmap_CF_M_imag_address0,
        i_ce0 => ifmap_gen_U0_ifmap_CF_M_imag_ce0,
        i_we0 => ifmap_gen_U0_ifmap_CF_M_imag_we0,
        i_d0 => ifmap_gen_U0_ifmap_CF_M_imag_d0,
        i_q0 => ifmap_CF_M_imag_i_q0,
        i_address1 => ap_const_lv11_0,
        i_ce1 => ap_const_logic_0,
        i_q1 => ifmap_CF_M_imag_i_q1,
        t_address0 => ifmap_vec_write_U0_ifmap_CF_M_imag_address0,
        t_ce0 => ifmap_vec_write_U0_ifmap_CF_M_imag_ce0,
        t_we0 => ifmap_CF_M_imag_t_we0,
        t_d0 => ap_const_lv32_0,
        t_q0 => ifmap_CF_M_imag_t_q0,
        t_address1 => ifmap_vec_write_U0_ifmap_CF_M_imag_address1,
        t_ce1 => ifmap_vec_write_U0_ifmap_CF_M_imag_ce1,
        t_q1 => ifmap_CF_M_imag_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => ifmap_CF_M_imag_i_full_n,
        i_write => ap_channel_done_ifmap_CF_M_imag,
        t_empty_n => ifmap_CF_M_imag_t_empty_n,
        t_read => ifmap_vec_write_U0_ap_ready);

    ifmap_gen_U0 : component Mem_patch_Wr_ifmap_gen
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ifmap_gen_U0_ap_start,
        ap_done => ifmap_gen_U0_ap_done,
        ap_continue => ifmap_gen_U0_ap_continue,
        ap_idle => ifmap_gen_U0_ap_idle,
        ap_ready => ifmap_gen_U0_ap_ready,
        c_fft_col_op_st_V_dout => c_fft_col_op_st_V_dout,
        c_fft_col_op_st_V_empty_n => c_fft_col_op_st_V_empty_n,
        c_fft_col_op_st_V_read => ifmap_gen_U0_c_fft_col_op_st_V_read,
        ifmap_CF_M_real_address0 => ifmap_gen_U0_ifmap_CF_M_real_address0,
        ifmap_CF_M_real_ce0 => ifmap_gen_U0_ifmap_CF_M_real_ce0,
        ifmap_CF_M_real_we0 => ifmap_gen_U0_ifmap_CF_M_real_we0,
        ifmap_CF_M_real_d0 => ifmap_gen_U0_ifmap_CF_M_real_d0,
        ifmap_CF_M_imag_address0 => ifmap_gen_U0_ifmap_CF_M_imag_address0,
        ifmap_CF_M_imag_ce0 => ifmap_gen_U0_ifmap_CF_M_imag_ce0,
        ifmap_CF_M_imag_we0 => ifmap_gen_U0_ifmap_CF_M_imag_we0,
        ifmap_CF_M_imag_d0 => ifmap_gen_U0_ifmap_CF_M_imag_d0,
        ctrl1_reg => ctrl1_reg,
        ap_return => ifmap_gen_U0_ap_return);

    ifmap_vec_write_U0 : component Mem_patch_Wr_ifmap_vec_write
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ifmap_vec_write_U0_ap_start,
        ap_done => ifmap_vec_write_U0_ap_done,
        ap_continue => ifmap_vec_write_U0_ap_continue,
        ap_idle => ifmap_vec_write_U0_ap_idle,
        ap_ready => ifmap_vec_write_U0_ap_ready,
        ifmap_CF_M_real_address0 => ifmap_vec_write_U0_ifmap_CF_M_real_address0,
        ifmap_CF_M_real_ce0 => ifmap_vec_write_U0_ifmap_CF_M_real_ce0,
        ifmap_CF_M_real_q0 => ifmap_CF_M_real_t_q0,
        ifmap_CF_M_real_address1 => ifmap_vec_write_U0_ifmap_CF_M_real_address1,
        ifmap_CF_M_real_ce1 => ifmap_vec_write_U0_ifmap_CF_M_real_ce1,
        ifmap_CF_M_real_q1 => ifmap_CF_M_real_t_q1,
        ifmap_CF_M_imag_address0 => ifmap_vec_write_U0_ifmap_CF_M_imag_address0,
        ifmap_CF_M_imag_ce0 => ifmap_vec_write_U0_ifmap_CF_M_imag_ce0,
        ifmap_CF_M_imag_q0 => ifmap_CF_M_imag_t_q0,
        ifmap_CF_M_imag_address1 => ifmap_vec_write_U0_ifmap_CF_M_imag_address1,
        ifmap_CF_M_imag_ce1 => ifmap_vec_write_U0_ifmap_CF_M_imag_ce1,
        ifmap_CF_M_imag_q1 => ifmap_CF_M_imag_t_q1,
        fft_out => ifmap_vec_write_U0_fft_out,
        fft_out_ap_vld => ifmap_vec_write_U0_fft_out_ap_vld,
        p_read => ctrl1_reg_c_channel1_dout);

    ctrl1_reg_c_channel1_U : component Mem_patch_Wr_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ifmap_gen_U0_ap_return,
        if_full_n => ctrl1_reg_c_channel1_full_n,
        if_write => ap_channel_done_ctrl1_reg_c_channel1,
        if_dout => ctrl1_reg_c_channel1_dout,
        if_empty_n => ctrl1_reg_c_channel1_empty_n,
        if_read => ifmap_vec_write_U0_ap_ready);





    ap_sync_reg_channel_write_ctrl1_reg_c_channel1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_reg_c_channel1 <= ap_const_logic_0;
            else
                if (((ifmap_gen_U0_ap_done and ifmap_gen_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_reg_c_channel1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_reg_c_channel1 <= ap_sync_channel_write_ctrl1_reg_c_channel1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ifmap_CF_M_imag_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ifmap_CF_M_imag <= ap_const_logic_0;
            else
                if (((ifmap_gen_U0_ap_done and ifmap_gen_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ifmap_CF_M_imag <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ifmap_CF_M_imag <= ap_sync_channel_write_ifmap_CF_M_imag;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ifmap_CF_M_real_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ifmap_CF_M_real <= ap_const_logic_0;
            else
                if (((ifmap_gen_U0_ap_done and ifmap_gen_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ifmap_CF_M_real <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ifmap_CF_M_real <= ap_sync_channel_write_ifmap_CF_M_real;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_ctrl1_reg_c_channel1 <= (ifmap_gen_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_reg_c_channel1 xor ap_const_logic_1));
    ap_channel_done_ifmap_CF_M_imag <= (ifmap_gen_U0_ap_done and (ap_sync_reg_channel_write_ifmap_CF_M_imag xor ap_const_logic_1));
    ap_channel_done_ifmap_CF_M_real <= (ifmap_gen_U0_ap_done and (ap_sync_reg_channel_write_ifmap_CF_M_real xor ap_const_logic_1));
    ap_done <= ifmap_vec_write_U0_ap_done;
    ap_idle <= (ifmap_vec_write_U0_ap_idle and ifmap_gen_U0_ap_idle and (ctrl1_reg_c_channel1_empty_n xor ap_const_logic_1) and (ifmap_CF_M_imag_t_empty_n xor ap_const_logic_1) and (ifmap_CF_M_real_t_empty_n xor ap_const_logic_1));
    ap_ready <= ifmap_gen_U0_ap_ready;
    ap_sync_channel_write_ctrl1_reg_c_channel1 <= ((ctrl1_reg_c_channel1_full_n and ap_channel_done_ctrl1_reg_c_channel1) or ap_sync_reg_channel_write_ctrl1_reg_c_channel1);
    ap_sync_channel_write_ifmap_CF_M_imag <= ((ifmap_gen_U0_ifmap_CF_M_imag_full_n and ap_channel_done_ifmap_CF_M_imag) or ap_sync_reg_channel_write_ifmap_CF_M_imag);
    ap_sync_channel_write_ifmap_CF_M_real <= ((ifmap_gen_U0_ifmap_CF_M_real_full_n and ap_channel_done_ifmap_CF_M_real) or ap_sync_reg_channel_write_ifmap_CF_M_real);
    c_fft_col_op_st_V_read <= ifmap_gen_U0_c_fft_col_op_st_V_read;
    fft_out <= ifmap_vec_write_U0_fft_out;
    fft_out_ap_vld <= ifmap_vec_write_U0_fft_out_ap_vld;
    ifmap_CF_M_imag_t_we0 <= (0=>ap_const_logic_0, others=>'-');
    ifmap_CF_M_real_t_we0 <= (0=>ap_const_logic_0, others=>'-');
    ifmap_gen_U0_ap_continue <= (ap_sync_channel_write_ifmap_CF_M_real and ap_sync_channel_write_ifmap_CF_M_imag and ap_sync_channel_write_ctrl1_reg_c_channel1);
    ifmap_gen_U0_ap_start <= ap_start;
    ifmap_gen_U0_ifmap_CF_M_imag_full_n <= ifmap_CF_M_imag_i_full_n;
    ifmap_gen_U0_ifmap_CF_M_real_full_n <= ifmap_CF_M_real_i_full_n;
    ifmap_vec_write_U0_ap_continue <= ap_continue;
    ifmap_vec_write_U0_ap_start <= (ifmap_CF_M_real_t_empty_n and ifmap_CF_M_imag_t_empty_n and ctrl1_reg_c_channel1_empty_n);
end behav;
