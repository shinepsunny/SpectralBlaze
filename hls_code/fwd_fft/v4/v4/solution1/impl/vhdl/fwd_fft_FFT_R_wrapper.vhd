-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fwd_fft_FFT_R_wrapper is
port (
    c_ifmap_col_op_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    c_ifmap_col_op_st_empty_n : IN STD_LOGIC;
    c_ifmap_col_op_st_read : OUT STD_LOGIC;
    c_fft_row_op_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_fft_row_op_st_full_n : IN STD_LOGIC;
    c_fft_row_op_st_write : OUT STD_LOGIC;
    ctrl1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ctrl1_reg_empty_n : IN STD_LOGIC;
    ctrl1_reg_read : OUT STD_LOGIC;
    ctrl1_reg_c19_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctrl1_reg_c19_full_n : IN STD_LOGIC;
    ctrl1_reg_c19_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of fwd_fft_FFT_R_wrapper is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';

attribute shreg_extract : string;
    signal entry_proc35_U0_ap_start : STD_LOGIC;
    signal entry_proc35_U0_ap_done : STD_LOGIC;
    signal entry_proc35_U0_ap_continue : STD_LOGIC;
    signal entry_proc35_U0_ap_idle : STD_LOGIC;
    signal entry_proc35_U0_ap_ready : STD_LOGIC;
    signal entry_proc35_U0_ctrl1_reg_read : STD_LOGIC;
    signal entry_proc35_U0_ctrl1_reg_c19_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc35_U0_ctrl1_reg_c19_write : STD_LOGIC;
    signal entry_proc35_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_reg_tmp_channel_full_n : STD_LOGIC;
    signal FFT_R_U0_c_ifmap_col_op_st_read : STD_LOGIC;
    signal FFT_R_U0_c_fft_row_op_st_din : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_R_U0_c_fft_row_op_st_write : STD_LOGIC;
    signal FFT_R_U0_ap_start : STD_LOGIC;
    signal FFT_R_U0_ap_done : STD_LOGIC;
    signal FFT_R_U0_ap_ready : STD_LOGIC;
    signal FFT_R_U0_ap_idle : STD_LOGIC;
    signal FFT_R_U0_ap_continue : STD_LOGIC;
    signal ctrl1_reg_tmp_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_reg_tmp_channel_empty_n : STD_LOGIC;

    component fwd_fft_entry_proc35 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctrl1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_reg_empty_n : IN STD_LOGIC;
        ctrl1_reg_read : OUT STD_LOGIC;
        ctrl1_reg_c19_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_reg_c19_full_n : IN STD_LOGIC;
        ctrl1_reg_c19_write : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fwd_fft_FFT_R IS
    port (
        c_ifmap_col_op_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_ifmap_col_op_st_empty_n : IN STD_LOGIC;
        c_ifmap_col_op_st_read : OUT STD_LOGIC;
        c_fft_row_op_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_fft_row_op_st_full_n : IN STD_LOGIC;
        c_fft_row_op_st_write : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_read_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component fwd_fft_fifo_w32_d2_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    entry_proc35_U0 : component fwd_fft_entry_proc35
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => entry_proc35_U0_ap_start,
        ap_done => entry_proc35_U0_ap_done,
        ap_continue => entry_proc35_U0_ap_continue,
        ap_idle => entry_proc35_U0_ap_idle,
        ap_ready => entry_proc35_U0_ap_ready,
        ctrl1_reg_dout => ctrl1_reg_dout,
        ctrl1_reg_empty_n => ctrl1_reg_empty_n,
        ctrl1_reg_read => entry_proc35_U0_ctrl1_reg_read,
        ctrl1_reg_c19_din => entry_proc35_U0_ctrl1_reg_c19_din,
        ctrl1_reg_c19_full_n => ctrl1_reg_c19_full_n,
        ctrl1_reg_c19_write => entry_proc35_U0_ctrl1_reg_c19_write,
        ap_return => entry_proc35_U0_ap_return);

    FFT_R_U0 : component fwd_fft_FFT_R
    port map (
        c_ifmap_col_op_st_dout => c_ifmap_col_op_st_dout,
        c_ifmap_col_op_st_empty_n => c_ifmap_col_op_st_empty_n,
        c_ifmap_col_op_st_read => FFT_R_U0_c_ifmap_col_op_st_read,
        c_fft_row_op_st_din => FFT_R_U0_c_fft_row_op_st_din,
        c_fft_row_op_st_full_n => c_fft_row_op_st_full_n,
        c_fft_row_op_st_write => FFT_R_U0_c_fft_row_op_st_write,
        p_read => ctrl1_reg_tmp_channel_dout,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        p_read_ap_vld => ap_const_logic_0,
        ap_start => FFT_R_U0_ap_start,
        ap_done => FFT_R_U0_ap_done,
        ap_ready => FFT_R_U0_ap_ready,
        ap_idle => FFT_R_U0_ap_idle,
        ap_continue => FFT_R_U0_ap_continue);

    ctrl1_reg_tmp_channel_U : component fwd_fft_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc35_U0_ap_return,
        if_full_n => ctrl1_reg_tmp_channel_full_n,
        if_write => entry_proc35_U0_ap_done,
        if_dout => ctrl1_reg_tmp_channel_dout,
        if_empty_n => ctrl1_reg_tmp_channel_empty_n,
        if_read => FFT_R_U0_ap_ready);




    FFT_R_U0_ap_continue <= ap_continue;
    FFT_R_U0_ap_start <= ctrl1_reg_tmp_channel_empty_n;
    ap_done <= FFT_R_U0_ap_done;
    ap_idle <= ((ctrl1_reg_tmp_channel_empty_n xor ap_const_logic_1) and entry_proc35_U0_ap_idle and FFT_R_U0_ap_idle);
    ap_ready <= entry_proc35_U0_ap_ready;
    c_fft_row_op_st_din <= FFT_R_U0_c_fft_row_op_st_din;
    c_fft_row_op_st_write <= FFT_R_U0_c_fft_row_op_st_write;
    c_ifmap_col_op_st_read <= FFT_R_U0_c_ifmap_col_op_st_read;
    ctrl1_reg_c19_din <= entry_proc35_U0_ctrl1_reg_c19_din;
    ctrl1_reg_c19_write <= entry_proc35_U0_ctrl1_reg_c19_write;
    ctrl1_reg_read <= entry_proc35_U0_ctrl1_reg_read;
    entry_proc35_U0_ap_continue <= ctrl1_reg_tmp_channel_full_n;
    entry_proc35_U0_ap_start <= ap_start;
end behav;
