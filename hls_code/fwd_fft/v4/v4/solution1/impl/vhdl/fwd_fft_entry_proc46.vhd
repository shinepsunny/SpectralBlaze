-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fwd_fft_entry_proc46 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctrl1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ctrl1_reg_empty_n : IN STD_LOGIC;
    ctrl1_reg_read : OUT STD_LOGIC;
    ctrl1_reg_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctrl1_reg_c_full_n : IN STD_LOGIC;
    ctrl1_reg_c_write : OUT STD_LOGIC;
    ctrl2_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ctrl2_reg_empty_n : IN STD_LOGIC;
    ctrl2_reg_read : OUT STD_LOGIC;
    ctrl2_reg_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctrl2_reg_c_full_n : IN STD_LOGIC;
    ctrl2_reg_c_write : OUT STD_LOGIC;
    layer1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_reg_empty_n : IN STD_LOGIC;
    layer1_reg_read : OUT STD_LOGIC;
    layer1_reg_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer1_reg_c_full_n : IN STD_LOGIC;
    layer1_reg_c_write : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fwd_fft_entry_proc46 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ctrl1_reg_blk_n : STD_LOGIC;
    signal ctrl1_reg_c_blk_n : STD_LOGIC;
    signal ctrl2_reg_blk_n : STD_LOGIC;
    signal ctrl2_reg_c_blk_n : STD_LOGIC;
    signal layer1_reg_blk_n : STD_LOGIC;
    signal layer1_reg_c_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_0_preg <= ctrl1_reg_dout;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_1_preg <= ctrl2_reg_dout;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_2_preg <= layer1_reg_dout;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_3_preg <= ctrl1_reg_dout;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_empty_n, ctrl2_reg_c_full_n, layer1_reg_empty_n, layer1_reg_c_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, ctrl1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_empty_n, ctrl2_reg_c_full_n, layer1_reg_empty_n, layer1_reg_c_full_n)
    begin
        if (((ap_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, ctrl1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_empty_n, ctrl2_reg_c_full_n, layer1_reg_empty_n, layer1_reg_c_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_empty_n, ctrl2_reg_c_full_n, layer1_reg_empty_n, layer1_reg_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_empty_n, ctrl2_reg_c_full_n, layer1_reg_empty_n, layer1_reg_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_dout, ctrl1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_empty_n, ctrl2_reg_c_full_n, layer1_reg_empty_n, layer1_reg_c_full_n, ap_return_0_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_0 <= ctrl1_reg_dout;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_dout, ctrl2_reg_empty_n, ctrl2_reg_c_full_n, layer1_reg_empty_n, layer1_reg_c_full_n, ap_return_1_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_1 <= ctrl2_reg_dout;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_empty_n, ctrl2_reg_c_full_n, layer1_reg_dout, layer1_reg_empty_n, layer1_reg_c_full_n, ap_return_2_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_2 <= layer1_reg_dout;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_dout, ctrl1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_empty_n, ctrl2_reg_c_full_n, layer1_reg_empty_n, layer1_reg_c_full_n, ap_return_3_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_3 <= ctrl1_reg_dout;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ctrl1_reg_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl1_reg_blk_n <= ctrl1_reg_empty_n;
        else 
            ctrl1_reg_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ctrl1_reg_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl1_reg_c_blk_n <= ctrl1_reg_c_full_n;
        else 
            ctrl1_reg_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ctrl1_reg_c_din <= ctrl1_reg_dout;

    ctrl1_reg_c_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_empty_n, ctrl2_reg_c_full_n, layer1_reg_empty_n, layer1_reg_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl1_reg_c_write <= ap_const_logic_1;
        else 
            ctrl1_reg_c_write <= ap_const_logic_0;
        end if; 
    end process;


    ctrl1_reg_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_empty_n, ctrl2_reg_c_full_n, layer1_reg_empty_n, layer1_reg_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl1_reg_read <= ap_const_logic_1;
        else 
            ctrl1_reg_read <= ap_const_logic_0;
        end if; 
    end process;


    ctrl2_reg_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl2_reg_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl2_reg_blk_n <= ctrl2_reg_empty_n;
        else 
            ctrl2_reg_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ctrl2_reg_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl2_reg_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl2_reg_c_blk_n <= ctrl2_reg_c_full_n;
        else 
            ctrl2_reg_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ctrl2_reg_c_din <= ctrl2_reg_dout;

    ctrl2_reg_c_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_empty_n, ctrl2_reg_c_full_n, layer1_reg_empty_n, layer1_reg_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl2_reg_c_write <= ap_const_logic_1;
        else 
            ctrl2_reg_c_write <= ap_const_logic_0;
        end if; 
    end process;


    ctrl2_reg_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_empty_n, ctrl2_reg_c_full_n, layer1_reg_empty_n, layer1_reg_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl2_reg_read <= ap_const_logic_1;
        else 
            ctrl2_reg_read <= ap_const_logic_0;
        end if; 
    end process;


    layer1_reg_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, layer1_reg_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer1_reg_blk_n <= layer1_reg_empty_n;
        else 
            layer1_reg_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer1_reg_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, layer1_reg_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer1_reg_c_blk_n <= layer1_reg_c_full_n;
        else 
            layer1_reg_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer1_reg_c_din <= layer1_reg_dout;

    layer1_reg_c_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_empty_n, ctrl2_reg_c_full_n, layer1_reg_empty_n, layer1_reg_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer1_reg_c_write <= ap_const_logic_1;
        else 
            layer1_reg_c_write <= ap_const_logic_0;
        end if; 
    end process;


    layer1_reg_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_empty_n, ctrl2_reg_c_full_n, layer1_reg_empty_n, layer1_reg_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (layer1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer1_reg_read <= ap_const_logic_1;
        else 
            layer1_reg_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
