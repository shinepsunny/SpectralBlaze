-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fwd_fft_dataflow_in_loop_VITIS_LOOP_297_3 is
port (
    c_fft_row_op_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    c_fft_row_op_st_empty_n : IN STD_LOGIC;
    c_fft_row_op_st_read : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    c_fft_col_op_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_fft_col_op_st_full_n : IN STD_LOGIC;
    c_fft_col_op_st_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of fwd_fft_dataflow_in_loop_VITIS_LOOP_297_3 is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ifmap_gen_x_U0_ap_start : STD_LOGIC;
    signal ifmap_gen_x_U0_ap_done : STD_LOGIC;
    signal ifmap_gen_x_U0_ap_continue : STD_LOGIC;
    signal ifmap_gen_x_U0_ap_idle : STD_LOGIC;
    signal ifmap_gen_x_U0_ap_ready : STD_LOGIC;
    signal ifmap_gen_x_U0_c_fft_row_op_st_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal compute_fft_write_U0_ap_start : STD_LOGIC;
    signal compute_fft_write_U0_ap_done : STD_LOGIC;
    signal compute_fft_write_U0_ap_continue : STD_LOGIC;
    signal compute_fft_write_U0_ap_idle : STD_LOGIC;
    signal compute_fft_write_U0_ap_ready : STD_LOGIC;
    signal compute_fft_write_U0_c_fft_col_op_st_din : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_fft_write_U0_c_fft_col_op_st_write : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_ifmap_gen_x_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_ifmap_gen_x_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_compute_fft_write_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_compute_fft_write_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fwd_fft_ifmap_gen_x IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        c_fft_row_op_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_fft_row_op_st_empty_n : IN STD_LOGIC;
        c_fft_row_op_st_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component fwd_fft_compute_fft_write IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        c_fft_col_op_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_fft_col_op_st_full_n : IN STD_LOGIC;
        c_fft_col_op_st_write : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ifmap_gen_x_U0 : component fwd_fft_ifmap_gen_x
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ifmap_gen_x_U0_ap_start,
        ap_done => ifmap_gen_x_U0_ap_done,
        ap_continue => ifmap_gen_x_U0_ap_continue,
        ap_idle => ifmap_gen_x_U0_ap_idle,
        ap_ready => ifmap_gen_x_U0_ap_ready,
        c_fft_row_op_st_dout => c_fft_row_op_st_dout,
        c_fft_row_op_st_empty_n => c_fft_row_op_st_empty_n,
        c_fft_row_op_st_read => ifmap_gen_x_U0_c_fft_row_op_st_read,
        p_read => p_read);

    compute_fft_write_U0 : component fwd_fft_compute_fft_write
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => compute_fft_write_U0_ap_start,
        ap_done => compute_fft_write_U0_ap_done,
        ap_continue => compute_fft_write_U0_ap_continue,
        ap_idle => compute_fft_write_U0_ap_idle,
        ap_ready => compute_fft_write_U0_ap_ready,
        c_fft_col_op_st_din => compute_fft_write_U0_c_fft_col_op_st_din,
        c_fft_col_op_st_full_n => c_fft_col_op_st_full_n,
        c_fft_col_op_st_write => compute_fft_write_U0_c_fft_col_op_st_write,
        p_read => p_read);





    ap_sync_reg_compute_fft_write_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_compute_fft_write_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_compute_fft_write_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_compute_fft_write_U0_ap_ready <= ap_sync_compute_fft_write_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_ifmap_gen_x_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_ifmap_gen_x_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_ifmap_gen_x_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_ifmap_gen_x_U0_ap_ready <= ap_sync_ifmap_gen_x_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= ap_sync_done;
    ap_idle <= (ifmap_gen_x_U0_ap_idle and compute_fft_write_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_compute_fft_write_U0_ap_ready <= (compute_fft_write_U0_ap_ready or ap_sync_reg_compute_fft_write_U0_ap_ready);
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (ifmap_gen_x_U0_ap_done and compute_fft_write_U0_ap_done);
    ap_sync_ifmap_gen_x_U0_ap_ready <= (ifmap_gen_x_U0_ap_ready or ap_sync_reg_ifmap_gen_x_U0_ap_ready);
    ap_sync_ready <= (ap_sync_ifmap_gen_x_U0_ap_ready and ap_sync_compute_fft_write_U0_ap_ready);
    c_fft_col_op_st_din <= compute_fft_write_U0_c_fft_col_op_st_din;
    c_fft_col_op_st_write <= compute_fft_write_U0_c_fft_col_op_st_write;
    c_fft_row_op_st_read <= ifmap_gen_x_U0_c_fft_row_op_st_read;
    compute_fft_write_U0_ap_continue <= ap_sync_continue;
    compute_fft_write_U0_ap_start <= ((ap_sync_reg_compute_fft_write_U0_ap_ready xor ap_const_logic_1) and ap_start);
    ifmap_gen_x_U0_ap_continue <= ap_sync_continue;
    ifmap_gen_x_U0_ap_start <= ((ap_sync_reg_ifmap_gen_x_U0_ap_ready xor ap_const_logic_1) and ap_start);
end behav;
