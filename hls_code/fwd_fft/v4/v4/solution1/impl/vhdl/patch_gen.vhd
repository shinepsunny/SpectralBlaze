-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity patch_gen is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in1_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in1_TVALID : IN STD_LOGIC;
    in1_TREADY : OUT STD_LOGIC;
    in1_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    in1_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    in1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in2_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in2_TVALID : IN STD_LOGIC;
    in2_TREADY : OUT STD_LOGIC;
    in2_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    in2_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    in2_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    col_ov_pix_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    col_ov_pix_out_V_full_n : IN STD_LOGIC;
    col_ov_pix_out_V_write : OUT STD_LOGIC;
    ctrl1_reg : IN STD_LOGIC_VECTOR (31 downto 0);
    ctrl2_reg : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_reg : IN STD_LOGIC_VECTOR (31 downto 0);
    layer2_reg : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of patch_gen is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "patch_gen_patch_gen,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7cg-fbvb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.896000,HLS_SYN_LAT=4631,HLS_SYN_TPT=none,HLS_SYN_MEM=60,HLS_SYN_DSP=0,HLS_SYN_FF=915,HLS_SYN_LUT=1036,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal empty_fu_94_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_reg_104 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_19_fu_99_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_19_reg_109 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dataflow_parent_loop_proc1_fu_64_col_ov_pix_out_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc1_fu_64_col_ov_pix_out_V_write : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc1_fu_64_in1_TREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc1_fu_64_in2_TREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc1_fu_64_ap_start : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc1_fu_64_ap_done : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc1_fu_64_ap_ready : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc1_fu_64_ap_idle : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc1_fu_64_ap_continue : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc1_fu_64_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_sync_grp_dataflow_parent_loop_proc1_fu_64_ap_ready : STD_LOGIC;
    signal ap_sync_grp_dataflow_parent_loop_proc1_fu_64_ap_done : STD_LOGIC;
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_done : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal regslice_both_in1_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in1_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal in1_TVALID_int_regslice : STD_LOGIC;
    signal in1_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in1_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in1_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in1_TKEEP_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_in1_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in1_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in1_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in1_TSTRB_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_in1_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in1_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in1_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in1_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in1_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in1_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in2_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in2_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal in2_TVALID_int_regslice : STD_LOGIC;
    signal in2_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in2_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in2_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in2_TKEEP_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_in2_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in2_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in2_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in2_TSTRB_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_in2_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in2_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in2_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in2_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in2_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in2_V_last_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component patch_gen_dataflow_parent_loop_proc1 IS
    port (
        layer1_reg_load_cast : IN STD_LOGIC_VECTOR (15 downto 0);
        ctrl2_reg_load_cast : IN STD_LOGIC_VECTOR (7 downto 0);
        ctrl1_reg : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl2_reg : IN STD_LOGIC_VECTOR (31 downto 0);
        layer2_reg : IN STD_LOGIC_VECTOR (31 downto 0);
        in1_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        in1_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
        in1_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        in1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        in2_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        in2_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
        in2_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        in2_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        col_ov_pix_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        col_ov_pix_out_V_full_n : IN STD_LOGIC;
        col_ov_pix_out_V_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ctrl2_reg_load_cast_ap_vld : IN STD_LOGIC;
        ctrl1_reg_ap_vld : IN STD_LOGIC;
        ctrl2_reg_ap_vld : IN STD_LOGIC;
        layer2_reg_ap_vld : IN STD_LOGIC;
        in1_TVALID : IN STD_LOGIC;
        in1_TREADY : OUT STD_LOGIC;
        in2_TVALID : IN STD_LOGIC;
        in2_TREADY : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component patch_gen_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_dataflow_parent_loop_proc1_fu_64 : component patch_gen_dataflow_parent_loop_proc1
    port map (
        layer1_reg_load_cast => empty_reg_104,
        ctrl2_reg_load_cast => empty_19_reg_109,
        ctrl1_reg => ctrl1_reg,
        ctrl2_reg => ctrl2_reg,
        layer2_reg => layer2_reg,
        in1_TDATA => in1_TDATA_int_regslice,
        in1_TKEEP => in1_TKEEP_int_regslice,
        in1_TSTRB => in1_TSTRB_int_regslice,
        in1_TLAST => in1_TLAST_int_regslice,
        in2_TDATA => in2_TDATA_int_regslice,
        in2_TKEEP => in2_TKEEP_int_regslice,
        in2_TSTRB => in2_TSTRB_int_regslice,
        in2_TLAST => in2_TLAST_int_regslice,
        col_ov_pix_out_V_din => grp_dataflow_parent_loop_proc1_fu_64_col_ov_pix_out_V_din,
        col_ov_pix_out_V_full_n => col_ov_pix_out_V_full_n,
        col_ov_pix_out_V_write => grp_dataflow_parent_loop_proc1_fu_64_col_ov_pix_out_V_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ctrl2_reg_load_cast_ap_vld => ap_const_logic_1,
        ctrl1_reg_ap_vld => ap_const_logic_1,
        ctrl2_reg_ap_vld => ap_const_logic_1,
        layer2_reg_ap_vld => ap_const_logic_1,
        in1_TVALID => in1_TVALID_int_regslice,
        in1_TREADY => grp_dataflow_parent_loop_proc1_fu_64_in1_TREADY,
        in2_TVALID => in2_TVALID_int_regslice,
        in2_TREADY => grp_dataflow_parent_loop_proc1_fu_64_in2_TREADY,
        ap_start => grp_dataflow_parent_loop_proc1_fu_64_ap_start,
        ap_done => grp_dataflow_parent_loop_proc1_fu_64_ap_done,
        ap_ready => grp_dataflow_parent_loop_proc1_fu_64_ap_ready,
        ap_idle => grp_dataflow_parent_loop_proc1_fu_64_ap_idle,
        ap_continue => grp_dataflow_parent_loop_proc1_fu_64_ap_continue);

    regslice_both_in1_V_data_V_U : component patch_gen_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in1_TDATA,
        vld_in => in1_TVALID,
        ack_in => regslice_both_in1_V_data_V_U_ack_in,
        data_out => in1_TDATA_int_regslice,
        vld_out => in1_TVALID_int_regslice,
        ack_out => in1_TREADY_int_regslice,
        apdone_blk => regslice_both_in1_V_data_V_U_apdone_blk);

    regslice_both_in1_V_keep_V_U : component patch_gen_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in1_TKEEP,
        vld_in => in1_TVALID,
        ack_in => regslice_both_in1_V_keep_V_U_ack_in,
        data_out => in1_TKEEP_int_regslice,
        vld_out => regslice_both_in1_V_keep_V_U_vld_out,
        ack_out => in1_TREADY_int_regslice,
        apdone_blk => regslice_both_in1_V_keep_V_U_apdone_blk);

    regslice_both_in1_V_strb_V_U : component patch_gen_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in1_TSTRB,
        vld_in => in1_TVALID,
        ack_in => regslice_both_in1_V_strb_V_U_ack_in,
        data_out => in1_TSTRB_int_regslice,
        vld_out => regslice_both_in1_V_strb_V_U_vld_out,
        ack_out => in1_TREADY_int_regslice,
        apdone_blk => regslice_both_in1_V_strb_V_U_apdone_blk);

    regslice_both_in1_V_last_V_U : component patch_gen_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in1_TLAST,
        vld_in => in1_TVALID,
        ack_in => regslice_both_in1_V_last_V_U_ack_in,
        data_out => in1_TLAST_int_regslice,
        vld_out => regslice_both_in1_V_last_V_U_vld_out,
        ack_out => in1_TREADY_int_regslice,
        apdone_blk => regslice_both_in1_V_last_V_U_apdone_blk);

    regslice_both_in2_V_data_V_U : component patch_gen_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in2_TDATA,
        vld_in => in2_TVALID,
        ack_in => regslice_both_in2_V_data_V_U_ack_in,
        data_out => in2_TDATA_int_regslice,
        vld_out => in2_TVALID_int_regslice,
        ack_out => in2_TREADY_int_regslice,
        apdone_blk => regslice_both_in2_V_data_V_U_apdone_blk);

    regslice_both_in2_V_keep_V_U : component patch_gen_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in2_TKEEP,
        vld_in => in2_TVALID,
        ack_in => regslice_both_in2_V_keep_V_U_ack_in,
        data_out => in2_TKEEP_int_regslice,
        vld_out => regslice_both_in2_V_keep_V_U_vld_out,
        ack_out => in2_TREADY_int_regslice,
        apdone_blk => regslice_both_in2_V_keep_V_U_apdone_blk);

    regslice_both_in2_V_strb_V_U : component patch_gen_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in2_TSTRB,
        vld_in => in2_TVALID,
        ack_in => regslice_both_in2_V_strb_V_U_ack_in,
        data_out => in2_TSTRB_int_regslice,
        vld_out => regslice_both_in2_V_strb_V_U_vld_out,
        ack_out => in2_TREADY_int_regslice,
        apdone_blk => regslice_both_in2_V_strb_V_U_apdone_blk);

    regslice_both_in2_V_last_V_U : component patch_gen_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in2_TLAST,
        vld_in => in2_TVALID,
        ack_in => regslice_both_in2_V_last_V_U_ack_in,
        data_out => in2_TLAST_int_regslice,
        vld_out => regslice_both_in2_V_last_V_U_vld_out,
        ack_out => in2_TREADY_int_regslice,
        apdone_blk => regslice_both_in2_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_done <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc1_fu_64_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_ready <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc1_fu_64_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dataflow_parent_loop_proc1_fu_64_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_dataflow_parent_loop_proc1_fu_64_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_sync_grp_dataflow_parent_loop_proc1_fu_64_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    grp_dataflow_parent_loop_proc1_fu_64_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dataflow_parent_loop_proc1_fu_64_ap_ready = ap_const_logic_1)) then 
                    grp_dataflow_parent_loop_proc1_fu_64_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                empty_19_reg_109 <= empty_19_fu_99_p1;
                empty_reg_104 <= empty_fu_94_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state3_on_subcall_done)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state3_on_subcall_done_assign_proc : process(ap_sync_grp_dataflow_parent_loop_proc1_fu_64_ap_ready, ap_sync_grp_dataflow_parent_loop_proc1_fu_64_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((ap_sync_grp_dataflow_parent_loop_proc1_fu_64_ap_ready and ap_sync_grp_dataflow_parent_loop_proc1_fu_64_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_dataflow_parent_loop_proc1_fu_64_ap_done <= (grp_dataflow_parent_loop_proc1_fu_64_ap_done or ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_done);
    ap_sync_grp_dataflow_parent_loop_proc1_fu_64_ap_ready <= (grp_dataflow_parent_loop_proc1_fu_64_ap_ready or ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_ready);
    col_ov_pix_out_V_din <= grp_dataflow_parent_loop_proc1_fu_64_col_ov_pix_out_V_din;

    col_ov_pix_out_V_write_assign_proc : process(grp_dataflow_parent_loop_proc1_fu_64_col_ov_pix_out_V_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            col_ov_pix_out_V_write <= grp_dataflow_parent_loop_proc1_fu_64_col_ov_pix_out_V_write;
        else 
            col_ov_pix_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    empty_19_fu_99_p1 <= ctrl2_reg(8 - 1 downto 0);
    empty_fu_94_p1 <= layer1_reg(16 - 1 downto 0);

    grp_dataflow_parent_loop_proc1_fu_64_ap_continue_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_dataflow_parent_loop_proc1_fu_64_ap_continue <= ap_const_logic_1;
        else 
            grp_dataflow_parent_loop_proc1_fu_64_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_dataflow_parent_loop_proc1_fu_64_ap_start <= grp_dataflow_parent_loop_proc1_fu_64_ap_start_reg;
    in1_TREADY <= regslice_both_in1_V_data_V_U_ack_in;

    in1_TREADY_int_regslice_assign_proc : process(grp_dataflow_parent_loop_proc1_fu_64_in1_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in1_TREADY_int_regslice <= grp_dataflow_parent_loop_proc1_fu_64_in1_TREADY;
        else 
            in1_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    in2_TREADY <= regslice_both_in2_V_data_V_U_ack_in;

    in2_TREADY_int_regslice_assign_proc : process(grp_dataflow_parent_loop_proc1_fu_64_in2_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in2_TREADY_int_regslice <= grp_dataflow_parent_loop_proc1_fu_64_in2_TREADY;
        else 
            in2_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

end behav;
