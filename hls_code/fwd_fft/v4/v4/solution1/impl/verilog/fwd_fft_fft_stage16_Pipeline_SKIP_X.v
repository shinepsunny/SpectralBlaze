// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fwd_fft_fft_stage16_Pipeline_SKIP_X (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        div_i_i43_cast,
        IN_r_address0,
        IN_r_ce0,
        IN_r_q0,
        IN_r_address1,
        IN_r_ce1,
        IN_r_q1,
        OUT_r_address0,
        OUT_r_ce0,
        OUT_r_we0,
        OUT_r_d0,
        OUT_r_address1,
        OUT_r_ce1,
        OUT_r_we1,
        OUT_r_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] div_i_i43_cast;
output  [5:0] IN_r_address0;
output   IN_r_ce0;
input  [31:0] IN_r_q0;
output  [5:0] IN_r_address1;
output   IN_r_ce1;
input  [31:0] IN_r_q1;
output  [5:0] OUT_r_address0;
output   OUT_r_ce0;
output   OUT_r_we0;
output  [31:0] OUT_r_d0;
output  [5:0] OUT_r_address1;
output   OUT_r_ce1;
output   OUT_r_we1;
output  [31:0] OUT_r_d1;

reg ap_idle;
reg IN_r_ce0;
reg IN_r_ce1;
reg OUT_r_ce0;
reg OUT_r_we0;
reg OUT_r_ce1;
reg OUT_r_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1057_fu_167_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] trunc_ln1057_fu_182_p1;
reg   [5:0] trunc_ln1057_reg_313;
reg   [5:0] trunc_ln1057_reg_313_pp0_iter1_reg;
reg   [5:0] trunc_ln1057_reg_313_pp0_iter2_reg;
wire   [63:0] zext_ln22_fu_192_p1;
reg   [63:0] zext_ln22_reg_318;
reg   [63:0] zext_ln22_reg_318_pp0_iter1_reg;
reg   [63:0] zext_ln22_reg_318_pp0_iter2_reg;
reg   [63:0] zext_ln22_reg_318_pp0_iter3_reg;
reg   [63:0] zext_ln22_reg_318_pp0_iter4_reg;
reg   [63:0] zext_ln22_reg_318_pp0_iter5_reg;
reg   [63:0] zext_ln22_reg_318_pp0_iter6_reg;
wire   [15:0] p_r_M_real_fu_227_p1;
reg   [15:0] p_r_M_real_reg_328;
reg   [15:0] p_r_M_real_reg_328_pp0_iter2_reg;
wire   [15:0] p_r_M_imag_fu_232_p1;
reg   [15:0] p_r_M_imag_reg_334;
reg   [15:0] p_r_M_imag_reg_334_pp0_iter2_reg;
wire   [15:0] grp_fu_144_p2;
reg   [15:0] mul3_i_i_reg_340;
wire   [15:0] grp_fu_149_p2;
reg   [15:0] mul6_i_i_reg_345;
wire   [63:0] zext_ln21_fu_237_p1;
reg   [63:0] zext_ln21_reg_350;
reg   [63:0] zext_ln21_reg_350_pp0_iter4_reg;
reg   [63:0] zext_ln21_reg_350_pp0_iter5_reg;
reg   [63:0] zext_ln21_reg_350_pp0_iter6_reg;
wire   [15:0] trunc_ln21_fu_241_p1;
reg   [15:0] trunc_ln21_reg_360;
reg   [15:0] trunc_ln21_1_reg_365;
wire   [15:0] grp_fu_132_p2;
reg   [15:0] p_r_reg_370;
wire   [15:0] grp_fu_120_p2;
reg   [15:0] p_r_M_imag_22_reg_376;
wire   [15:0] t1_M_real_fu_255_p1;
wire   [15:0] t1_M_imag_fu_260_p1;
wire   [15:0] grp_fu_124_p2;
reg   [15:0] p_r_M_real_3_reg_394;
wire   [15:0] grp_fu_128_p2;
reg   [15:0] p_r_M_imag_3_reg_399;
wire   [15:0] grp_fu_136_p2;
reg   [15:0] p_r_M_real_4_reg_404;
wire   [15:0] grp_fu_140_p2;
reg   [15:0] p_r_M_imag_4_reg_409;
wire    ap_block_pp0_stage0;
reg   [6:0] k1_fu_56;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_k1_13;
wire   [6:0] k1_14_fu_173_p2;
reg   [7:0] m1_fu_60;
reg   [7:0] ap_sig_allocacmp_m1_load;
wire   [7:0] m1_13_fu_197_p2;
wire   [15:0] grp_fu_144_p0;
wire   [15:0] grp_fu_149_p0;
wire   [5:0] or_ln22_fu_186_p2;
wire   [15:0] trunc_ln388_fu_213_p1;
wire   [15:0] trunc_ln388_1_fu_217_p4;
wire   [15:0] bitcast_ln23_1_fu_268_p1;
wire   [15:0] bitcast_ln23_fu_265_p1;
wire   [15:0] bitcast_ln24_1_fu_283_p1;
wire   [15:0] bitcast_ln24_fu_280_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fwd_fft_hadd_16ns_16ns_16_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hadd_16ns_16ns_16_2_full_dsp_1_U77(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul6_i_i_reg_345),
    .din1(p_r_M_imag_reg_334_pp0_iter2_reg),
    .ce(1'b1),
    .dout(grp_fu_120_p2)
);

fwd_fft_hadd_16ns_16ns_16_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hadd_16ns_16ns_16_2_full_dsp_1_U78(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(t1_M_real_fu_255_p1),
    .din1(p_r_reg_370),
    .ce(1'b1),
    .dout(grp_fu_124_p2)
);

fwd_fft_hadd_16ns_16ns_16_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hadd_16ns_16ns_16_2_full_dsp_1_U79(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(t1_M_imag_fu_260_p1),
    .din1(p_r_M_imag_22_reg_376),
    .ce(1'b1),
    .dout(grp_fu_128_p2)
);

fwd_fft_hsub_16ns_16ns_16_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hsub_16ns_16ns_16_2_full_dsp_1_U80(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_real_reg_328_pp0_iter2_reg),
    .din1(mul3_i_i_reg_340),
    .ce(1'b1),
    .dout(grp_fu_132_p2)
);

fwd_fft_hsub_16ns_16ns_16_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hsub_16ns_16ns_16_2_full_dsp_1_U81(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(t1_M_real_fu_255_p1),
    .din1(p_r_reg_370),
    .ce(1'b1),
    .dout(grp_fu_136_p2)
);

fwd_fft_hsub_16ns_16ns_16_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hsub_16ns_16ns_16_2_full_dsp_1_U82(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(t1_M_imag_fu_260_p1),
    .din1(p_r_M_imag_22_reg_376),
    .ce(1'b1),
    .dout(grp_fu_140_p2)
);

fwd_fft_hmul_16ns_16ns_16_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hmul_16ns_16ns_16_2_max_dsp_1_U83(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_144_p0),
    .din1(16'd0),
    .ce(1'b1),
    .dout(grp_fu_144_p2)
);

fwd_fft_hmul_16ns_16ns_16_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hmul_16ns_16ns_16_2_max_dsp_1_U84(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_149_p0),
    .din1(16'd0),
    .ce(1'b1),
    .dout(grp_fu_149_p2)
);

fwd_fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1057_fu_167_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k1_fu_56 <= k1_14_fu_173_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k1_fu_56 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1057_fu_167_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            m1_fu_60 <= m1_13_fu_197_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            m1_fu_60 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        p_r_M_imag_reg_334 <= p_r_M_imag_fu_232_p1;
        p_r_M_real_reg_328 <= p_r_M_real_fu_227_p1;
        trunc_ln1057_reg_313_pp0_iter1_reg <= trunc_ln1057_reg_313;
        zext_ln22_reg_318_pp0_iter1_reg[5 : 1] <= zext_ln22_reg_318[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        mul3_i_i_reg_340 <= grp_fu_144_p2;
        mul6_i_i_reg_345 <= grp_fu_149_p2;
        p_r_M_imag_22_reg_376 <= grp_fu_120_p2;
        p_r_M_imag_3_reg_399 <= grp_fu_128_p2;
        p_r_M_imag_4_reg_409 <= grp_fu_140_p2;
        p_r_M_imag_reg_334_pp0_iter2_reg <= p_r_M_imag_reg_334;
        p_r_M_real_3_reg_394 <= grp_fu_124_p2;
        p_r_M_real_4_reg_404 <= grp_fu_136_p2;
        p_r_M_real_reg_328_pp0_iter2_reg <= p_r_M_real_reg_328;
        p_r_reg_370 <= grp_fu_132_p2;
        trunc_ln1057_reg_313_pp0_iter2_reg <= trunc_ln1057_reg_313_pp0_iter1_reg;
        trunc_ln21_1_reg_365 <= {{IN_r_q0[31:16]}};
        trunc_ln21_reg_360 <= trunc_ln21_fu_241_p1;
        zext_ln21_reg_350[5 : 0] <= zext_ln21_fu_237_p1[5 : 0];
        zext_ln21_reg_350_pp0_iter4_reg[5 : 0] <= zext_ln21_reg_350[5 : 0];
        zext_ln21_reg_350_pp0_iter5_reg[5 : 0] <= zext_ln21_reg_350_pp0_iter4_reg[5 : 0];
        zext_ln21_reg_350_pp0_iter6_reg[5 : 0] <= zext_ln21_reg_350_pp0_iter5_reg[5 : 0];
        zext_ln22_reg_318_pp0_iter2_reg[5 : 1] <= zext_ln22_reg_318_pp0_iter1_reg[5 : 1];
        zext_ln22_reg_318_pp0_iter3_reg[5 : 1] <= zext_ln22_reg_318_pp0_iter2_reg[5 : 1];
        zext_ln22_reg_318_pp0_iter4_reg[5 : 1] <= zext_ln22_reg_318_pp0_iter3_reg[5 : 1];
        zext_ln22_reg_318_pp0_iter5_reg[5 : 1] <= zext_ln22_reg_318_pp0_iter4_reg[5 : 1];
        zext_ln22_reg_318_pp0_iter6_reg[5 : 1] <= zext_ln22_reg_318_pp0_iter5_reg[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_fu_167_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln1057_reg_313 <= trunc_ln1057_fu_182_p1;
        zext_ln22_reg_318[5 : 1] <= zext_ln22_fu_192_p1[5 : 1];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        IN_r_ce0 = 1'b1;
    end else begin
        IN_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IN_r_ce1 = 1'b1;
    end else begin
        IN_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        OUT_r_ce0 = 1'b1;
    end else begin
        OUT_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        OUT_r_ce1 = 1'b1;
    end else begin
        OUT_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        OUT_r_we0 = 1'b1;
    end else begin
        OUT_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        OUT_r_we1 = 1'b1;
    end else begin
        OUT_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_167_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_k1_13 = 7'd0;
    end else begin
        ap_sig_allocacmp_k1_13 = k1_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_m1_load = 8'd0;
    end else begin
        ap_sig_allocacmp_m1_load = m1_fu_60;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IN_r_address0 = zext_ln21_fu_237_p1;

assign IN_r_address1 = zext_ln22_fu_192_p1;

assign OUT_r_address0 = zext_ln22_reg_318_pp0_iter6_reg;

assign OUT_r_address1 = zext_ln21_reg_350_pp0_iter6_reg;

assign OUT_r_d0 = {{bitcast_ln24_1_fu_283_p1}, {bitcast_ln24_fu_280_p1}};

assign OUT_r_d1 = {{bitcast_ln23_1_fu_268_p1}, {bitcast_ln23_fu_265_p1}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln23_1_fu_268_p1 = p_r_M_imag_3_reg_399;

assign bitcast_ln23_fu_265_p1 = p_r_M_real_3_reg_394;

assign bitcast_ln24_1_fu_283_p1 = p_r_M_imag_4_reg_409;

assign bitcast_ln24_fu_280_p1 = p_r_M_real_4_reg_404;

assign grp_fu_144_p0 = trunc_ln388_1_fu_217_p4;

assign grp_fu_149_p0 = trunc_ln388_fu_213_p1;

assign icmp_ln1057_fu_167_p2 = ((ap_sig_allocacmp_k1_13 == div_i_i43_cast) ? 1'b1 : 1'b0);

assign k1_14_fu_173_p2 = (ap_sig_allocacmp_k1_13 + 7'd1);

assign m1_13_fu_197_p2 = (ap_sig_allocacmp_m1_load + 8'd2);

assign or_ln22_fu_186_p2 = (trunc_ln1057_fu_182_p1 | 6'd1);

assign p_r_M_imag_fu_232_p1 = trunc_ln388_1_fu_217_p4;

assign p_r_M_real_fu_227_p1 = trunc_ln388_fu_213_p1;

assign t1_M_imag_fu_260_p1 = trunc_ln21_1_reg_365;

assign t1_M_real_fu_255_p1 = trunc_ln21_reg_360;

assign trunc_ln1057_fu_182_p1 = ap_sig_allocacmp_m1_load[5:0];

assign trunc_ln21_fu_241_p1 = IN_r_q0[15:0];

assign trunc_ln388_1_fu_217_p4 = {{IN_r_q1[31:16]}};

assign trunc_ln388_fu_213_p1 = IN_r_q1[15:0];

assign zext_ln21_fu_237_p1 = trunc_ln1057_reg_313_pp0_iter2_reg;

assign zext_ln22_fu_192_p1 = or_ln22_fu_186_p2;

always @ (posedge ap_clk) begin
    zext_ln22_reg_318[0] <= 1'b1;
    zext_ln22_reg_318[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln22_reg_318_pp0_iter1_reg[0] <= 1'b1;
    zext_ln22_reg_318_pp0_iter1_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln22_reg_318_pp0_iter2_reg[0] <= 1'b1;
    zext_ln22_reg_318_pp0_iter2_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln22_reg_318_pp0_iter3_reg[0] <= 1'b1;
    zext_ln22_reg_318_pp0_iter3_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln22_reg_318_pp0_iter4_reg[0] <= 1'b1;
    zext_ln22_reg_318_pp0_iter4_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln22_reg_318_pp0_iter5_reg[0] <= 1'b1;
    zext_ln22_reg_318_pp0_iter5_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln22_reg_318_pp0_iter6_reg[0] <= 1'b1;
    zext_ln22_reg_318_pp0_iter6_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln21_reg_350[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln21_reg_350_pp0_iter4_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln21_reg_350_pp0_iter5_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln21_reg_350_pp0_iter6_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //fwd_fft_fft_stage16_Pipeline_SKIP_X
