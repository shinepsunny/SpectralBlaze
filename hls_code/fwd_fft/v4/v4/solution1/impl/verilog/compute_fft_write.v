// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="compute_fft_write_compute_fft_write,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7cg-fbvb900-1-i,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.525000,HLS_SYN_LAT=69,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=129,HLS_SYN_LUT=179,HLS_VERSION=2021_1}" *)

module compute_fft_write (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fft_out_V_din,
        fft_out_V_full_n,
        fft_out_V_write,
        ifmap_fft_address0,
        ifmap_fft_ce0,
        ifmap_fft_we0,
        ifmap_fft_d0,
        ifmap_fft_q0,
        ifmap_fft_address1,
        ifmap_fft_ce1,
        ifmap_fft_we1,
        ifmap_fft_d1,
        ifmap_fft_q1,
        ctrl1_reg
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] fft_out_V_din;
input   fft_out_V_full_n;
output   fft_out_V_write;
output  [11:0] ifmap_fft_address0;
output   ifmap_fft_ce0;
output   ifmap_fft_we0;
output  [31:0] ifmap_fft_d0;
input  [31:0] ifmap_fft_q0;
output  [11:0] ifmap_fft_address1;
output   ifmap_fft_ce1;
output   ifmap_fft_we1;
output  [31:0] ifmap_fft_d1;
input  [31:0] ifmap_fft_q1;
input  [31:0] ctrl1_reg;

reg ap_idle;
reg fft_out_V_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1057_fu_148_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    fft_out_V_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] out_fft_M_value_q0;
reg   [31:0] this_M_value_load_reg_242;
wire   [31:0] out_fft_M_value_1_q0;
reg   [31:0] this_M_value_1_load_reg_247;
wire   [15:0] grp_fu_115_p1;
reg   [15:0] conv_i_reg_252;
wire   [15:0] grp_fu_118_p1;
reg   [15:0] conv3_i_reg_257;
wire   [5:0] out_fft_M_value_address0;
reg    out_fft_M_value_ce0;
wire   [5:0] out_fft_M_value_1_address0;
reg    out_fft_M_value_1_ce0;
wire   [63:0] zext_ln1057_fu_177_p1;
reg   [7:0] y_fu_60;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_y_load;
wire   [7:0] add_ln223_fu_183_p2;
reg   [15:0] indvar_flatten_fu_64;
reg   [15:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [15:0] add_ln1057_fu_154_p2;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] empty_fu_121_p1;
wire   [7:0] bound_fu_129_p0;
wire   [15:0] cast_fu_125_p1;
wire   [7:0] bound_fu_129_p1;
wire   [15:0] bound_fu_129_p2;
wire   [0:0] icmp_ln1057_1_fu_163_p2;
wire   [7:0] select_ln204_fu_169_p3;
wire   [15:0] bitcast_ln174_1_fu_202_p1;
wire   [15:0] bitcast_ln174_fu_199_p1;
reg    grp_fu_115_ce;
reg    grp_fu_118_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_134;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

compute_fft_write_out_fft_M_value #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
out_fft_M_value_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(out_fft_M_value_address0),
    .ce0(out_fft_M_value_ce0),
    .q0(out_fft_M_value_q0)
);

compute_fft_write_out_fft_M_value #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
out_fft_M_value_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(out_fft_M_value_1_address0),
    .ce0(out_fft_M_value_1_ce0),
    .q0(out_fft_M_value_1_q0)
);

compute_fft_write_sptohp_32ns_16_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 16 ))
sptohp_32ns_16_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(this_M_value_load_reg_242),
    .ce(grp_fu_115_ce),
    .dout(grp_fu_115_p1)
);

compute_fft_write_sptohp_32ns_16_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 16 ))
sptohp_32ns_16_2_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(this_M_value_1_load_reg_247),
    .ce(grp_fu_118_ce),
    .dout(grp_fu_118_p1)
);

compute_fft_write_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U3(
    .din0(bound_fu_129_p0),
    .din1(bound_fu_129_p1),
    .dout(bound_fu_129_p2)
);

compute_fft_write_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_134)) begin
        if ((icmp_ln1057_fu_148_p2 == 1'd0)) begin
            indvar_flatten_fu_64 <= add_ln1057_fu_154_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_64 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_134)) begin
        if ((icmp_ln1057_fu_148_p2 == 1'd0)) begin
            y_fu_60 <= add_ln223_fu_183_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            y_fu_60 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        this_M_value_1_load_reg_247 <= out_fft_M_value_1_q0;
        this_M_value_load_reg_242 <= out_fft_M_value_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        conv3_i_reg_257 <= grp_fu_118_p1;
        conv_i_reg_252 <= grp_fu_115_p1;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_148_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_y_load = 8'd0;
    end else begin
        ap_sig_allocacmp_y_load = y_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        fft_out_V_blk_n = fft_out_V_full_n;
    end else begin
        fft_out_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        fft_out_V_write = 1'b1;
    end else begin
        fft_out_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_115_ce = 1'b1;
    end else begin
        grp_fu_115_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_118_ce = 1'b1;
    end else begin
        grp_fu_118_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_fft_M_value_1_ce0 = 1'b1;
    end else begin
        out_fft_M_value_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_fft_M_value_ce0 = 1'b1;
    end else begin
        out_fft_M_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1057_fu_154_p2 = (ap_sig_allocacmp_indvar_flatten_load + 16'd1);

assign add_ln223_fu_183_p2 = (select_ln204_fu_169_p3 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((fft_out_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((fft_out_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((fft_out_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (fft_out_V_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_134 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln174_1_fu_202_p1 = conv3_i_reg_257;

assign bitcast_ln174_fu_199_p1 = conv_i_reg_252;

assign bound_fu_129_p0 = cast_fu_125_p1;

assign bound_fu_129_p1 = cast_fu_125_p1;

assign cast_fu_125_p1 = empty_fu_121_p1;

assign empty_fu_121_p1 = ctrl1_reg[7:0];

assign fft_out_V_din = {{bitcast_ln174_1_fu_202_p1}, {bitcast_ln174_fu_199_p1}};

assign icmp_ln1057_1_fu_163_p2 = ((ap_sig_allocacmp_y_load == empty_fu_121_p1) ? 1'b1 : 1'b0);

assign icmp_ln1057_fu_148_p2 = ((ap_sig_allocacmp_indvar_flatten_load == bound_fu_129_p2) ? 1'b1 : 1'b0);

assign ifmap_fft_address0 = 12'd0;

assign ifmap_fft_address1 = 12'd0;

assign ifmap_fft_ce0 = 1'b0;

assign ifmap_fft_ce1 = 1'b0;

assign ifmap_fft_d0 = 32'd0;

assign ifmap_fft_d1 = 32'd0;

assign ifmap_fft_we0 = 1'b0;

assign ifmap_fft_we1 = 1'b0;

assign out_fft_M_value_1_address0 = zext_ln1057_fu_177_p1;

assign out_fft_M_value_address0 = zext_ln1057_fu_177_p1;

assign select_ln204_fu_169_p3 = ((icmp_ln1057_1_fu_163_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_y_load);

assign zext_ln1057_fu_177_p1 = select_ln204_fu_169_p3;

endmodule //compute_fft_write
