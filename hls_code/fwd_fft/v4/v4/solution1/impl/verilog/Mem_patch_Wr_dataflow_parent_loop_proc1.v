// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Mem_patch_Wr_dataflow_parent_loop_proc1 (
        ctrl2_reg_load_cast,
        ctrl1_reg,
        c_fft_col_op_st_V_dout,
        c_fft_col_op_st_V_empty_n,
        c_fft_col_op_st_V_read,
        fft_out,
        ap_clk,
        ap_rst,
        ctrl2_reg_load_cast_ap_vld,
        ctrl1_reg_ap_vld,
        fft_out_ap_vld,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [7:0] ctrl2_reg_load_cast;
input  [31:0] ctrl1_reg;
input  [31:0] c_fft_col_op_st_V_dout;
input   c_fft_col_op_st_V_empty_n;
output   c_fft_col_op_st_V_read;
output  [127:0] fft_out;
input   ap_clk;
input   ap_rst;
input   ctrl2_reg_load_cast_ap_vld;
input   ctrl1_reg_ap_vld;
output   fft_out_ap_vld;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg ap_done;
reg ap_ready;
reg ap_idle;

wire    dataflow_parent_loop_proc_U0_c_fft_col_op_st_V_read;
wire   [127:0] dataflow_parent_loop_proc_U0_fft_out;
wire    dataflow_parent_loop_proc_U0_fft_out_ap_vld;
wire    dataflow_parent_loop_proc_U0_ap_start;
wire    dataflow_parent_loop_proc_U0_ap_done;
wire    dataflow_parent_loop_proc_U0_ap_ready;
wire    dataflow_parent_loop_proc_U0_ap_idle;
reg    dataflow_parent_loop_proc_U0_ap_continue;
reg   [7:0] loop_dataflow_input_count;
reg   [7:0] loop_dataflow_output_count;
wire   [7:0] bound_minus_1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 loop_dataflow_input_count = 8'd0;
#0 loop_dataflow_output_count = 8'd0;
end

Mem_patch_Wr_dataflow_parent_loop_proc dataflow_parent_loop_proc_U0(
    .ctrl2_reg_load_cast(ctrl2_reg_load_cast),
    .ctrl1_reg(ctrl1_reg),
    .c_fft_col_op_st_V_dout(c_fft_col_op_st_V_dout),
    .c_fft_col_op_st_V_empty_n(c_fft_col_op_st_V_empty_n),
    .c_fft_col_op_st_V_read(dataflow_parent_loop_proc_U0_c_fft_col_op_st_V_read),
    .fft_out(dataflow_parent_loop_proc_U0_fft_out),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ctrl1_reg_ap_vld(ctrl1_reg_ap_vld),
    .fft_out_ap_vld(dataflow_parent_loop_proc_U0_fft_out_ap_vld),
    .ap_start(dataflow_parent_loop_proc_U0_ap_start),
    .ap_done(dataflow_parent_loop_proc_U0_ap_done),
    .ap_ready(dataflow_parent_loop_proc_U0_ap_ready),
    .ap_idle(dataflow_parent_loop_proc_U0_ap_idle),
    .ap_continue(dataflow_parent_loop_proc_U0_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_input_count <= 8'd0;
    end else begin
        if ((~(loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_parent_loop_proc_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= (loop_dataflow_input_count + 8'd1);
        end else if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_parent_loop_proc_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_output_count <= 8'd0;
    end else begin
        if ((~(loop_dataflow_output_count == bound_minus_1) & (dataflow_parent_loop_proc_U0_ap_continue == 1'b1) & (dataflow_parent_loop_proc_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= (loop_dataflow_output_count + 8'd1);
        end else if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_parent_loop_proc_U0_ap_continue == 1'b1) & (dataflow_parent_loop_proc_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= 8'd0;
        end
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_parent_loop_proc_U0_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == 8'd0) & (ap_start == 1'b0) & (dataflow_parent_loop_proc_U0_ap_idle == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_parent_loop_proc_U0_ap_ready == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~(loop_dataflow_output_count == bound_minus_1) | (ap_continue == 1'b1))) begin
        dataflow_parent_loop_proc_U0_ap_continue = 1'b1;
    end else begin
        dataflow_parent_loop_proc_U0_ap_continue = 1'b0;
    end
end

assign bound_minus_1 = (ctrl2_reg_load_cast - 8'd1);

assign c_fft_col_op_st_V_read = dataflow_parent_loop_proc_U0_c_fft_col_op_st_V_read;

assign dataflow_parent_loop_proc_U0_ap_start = ap_start;

assign fft_out = dataflow_parent_loop_proc_U0_fft_out;

assign fft_out_ap_vld = dataflow_parent_loop_proc_U0_fft_out_ap_vld;

endmodule //Mem_patch_Wr_dataflow_parent_loop_proc1
