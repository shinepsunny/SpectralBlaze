// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fwd_fft_VITIS_LOOP_254_8_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ctrl1_reg_dout,
        ctrl1_reg_empty_n,
        ctrl1_reg_read,
        out_fft_03_address0,
        out_fft_03_ce0,
        out_fft_03_q0,
        out_fft_14_address0,
        out_fft_14_ce0,
        out_fft_14_q0,
        c_fft_row_op_st_din,
        c_fft_row_op_st_full_n,
        c_fft_row_op_st_write,
        p_read,
        p_read1,
        p_read2,
        Row_Buffer_din,
        Row_Buffer_full_n,
        Row_Buffer_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] ctrl1_reg_dout;
input   ctrl1_reg_empty_n;
output   ctrl1_reg_read;
output  [5:0] out_fft_03_address0;
output   out_fft_03_ce0;
input  [15:0] out_fft_03_q0;
output  [5:0] out_fft_14_address0;
output   out_fft_14_ce0;
input  [15:0] out_fft_14_q0;
output  [31:0] c_fft_row_op_st_din;
input   c_fft_row_op_st_full_n;
output   c_fft_row_op_st_write;
input  [7:0] p_read;
input  [31:0] p_read1;
input  [31:0] p_read2;
output  [31:0] Row_Buffer_din;
input   Row_Buffer_full_n;
output   Row_Buffer_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ctrl1_reg_read;
reg out_fft_03_ce0;
reg out_fft_14_ce0;
reg c_fft_row_op_st_write;
reg Row_Buffer_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ctrl1_reg_blk_n;
reg    c_fft_row_op_st_blk_n;
wire    ap_CS_fsm_state3;
reg    Row_Buffer_blk_n;
reg   [0:0] or_ln259_reg_251;
wire   [7:0] empty_fu_138_p1;
reg   [7:0] empty_reg_246;
wire   [0:0] or_ln259_fu_186_p2;
wire   [7:0] add_ln254_fu_211_p2;
reg   [7:0] add_ln254_reg_258;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1057_fu_206_p2;
wire   [63:0] zext_ln216_fu_200_p1;
reg   [7:0] x_fu_70;
reg    ap_block_state3;
reg    ap_block_state1;
wire   [31:0] tmp_i_fu_225_p3;
wire   [7:0] empty_156_fu_146_p1;
wire   [8:0] ctrl2_reg_load_cast_cast_fu_150_p1;
wire   [8:0] pny_cast_fu_142_p1;
wire   [8:0] sub_i_i_fu_154_p2;
wire   [7:0] lshr_ln_fu_166_p4;
wire   [31:0] zext_ln1061_fu_176_p1;
wire   [0:0] cmp_i_i_fu_160_p2;
wire   [0:0] icmp_ln259_fu_180_p2;
wire   [15:0] bitcast_ln174_2_fu_221_p1;
wire   [15:0] bitcast_ln174_fu_217_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln1057_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ctrl1_reg_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        x_fu_70 <= 8'd0;
    end else if ((~((c_fft_row_op_st_full_n == 1'b0) | ((or_ln259_reg_251 == 1'd0) & (1'b0 == Row_Buffer_full_n))) & (1'b1 == ap_CS_fsm_state3))) begin
        x_fu_70 <= add_ln254_reg_258;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln254_reg_258 <= add_ln254_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_reg_246 <= empty_fu_138_p1;
        or_ln259_reg_251 <= or_ln259_fu_186_p2;
    end
end

always @ (*) begin
    if (((or_ln259_reg_251 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        Row_Buffer_blk_n = Row_Buffer_full_n;
    end else begin
        Row_Buffer_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((c_fft_row_op_st_full_n == 1'b0) | ((or_ln259_reg_251 == 1'd0) & (1'b0 == Row_Buffer_full_n))) & (or_ln259_reg_251 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        Row_Buffer_write = 1'b1;
    end else begin
        Row_Buffer_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ctrl1_reg_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((c_fft_row_op_st_full_n == 1'b0) | ((or_ln259_reg_251 == 1'd0) & (1'b0 == Row_Buffer_full_n)))) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_fft_row_op_st_blk_n = c_fft_row_op_st_full_n;
    end else begin
        c_fft_row_op_st_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((c_fft_row_op_st_full_n == 1'b0) | ((or_ln259_reg_251 == 1'd0) & (1'b0 == Row_Buffer_full_n))) & (1'b1 == ap_CS_fsm_state3))) begin
        c_fft_row_op_st_write = 1'b1;
    end else begin
        c_fft_row_op_st_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ctrl1_reg_blk_n = ctrl1_reg_empty_n;
    end else begin
        ctrl1_reg_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ctrl1_reg_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ctrl1_reg_read = 1'b1;
    end else begin
        ctrl1_reg_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_fft_03_ce0 = 1'b1;
    end else begin
        out_fft_03_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_fft_14_ce0 = 1'b1;
    end else begin
        out_fft_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ctrl1_reg_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln1057_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((c_fft_row_op_st_full_n == 1'b0) | ((or_ln259_reg_251 == 1'd0) & (1'b0 == Row_Buffer_full_n))) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Row_Buffer_din = tmp_i_fu_225_p3;

assign add_ln254_fu_211_p2 = (x_fu_70 + 8'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ctrl1_reg_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = ((c_fft_row_op_st_full_n == 1'b0) | ((or_ln259_reg_251 == 1'd0) & (1'b0 == Row_Buffer_full_n)));
end

assign bitcast_ln174_2_fu_221_p1 = out_fft_14_q0;

assign bitcast_ln174_fu_217_p1 = out_fft_03_q0;

assign c_fft_row_op_st_din = tmp_i_fu_225_p3;

assign cmp_i_i_fu_160_p2 = ((pny_cast_fu_142_p1 == sub_i_i_fu_154_p2) ? 1'b1 : 1'b0);

assign ctrl2_reg_load_cast_cast_fu_150_p1 = empty_156_fu_146_p1;

assign empty_156_fu_146_p1 = p_read1[7:0];

assign empty_fu_138_p1 = ctrl1_reg_dout[7:0];

assign icmp_ln1057_fu_206_p2 = ((x_fu_70 == empty_reg_246) ? 1'b1 : 1'b0);

assign icmp_ln259_fu_180_p2 = (($signed(zext_ln1061_fu_176_p1) > $signed(p_read2)) ? 1'b1 : 1'b0);

assign lshr_ln_fu_166_p4 = {{ctrl1_reg_dout[31:24]}};

assign or_ln259_fu_186_p2 = (icmp_ln259_fu_180_p2 | cmp_i_i_fu_160_p2);

assign out_fft_03_address0 = zext_ln216_fu_200_p1;

assign out_fft_14_address0 = zext_ln216_fu_200_p1;

assign pny_cast_fu_142_p1 = p_read;

assign sub_i_i_fu_154_p2 = ($signed(ctrl2_reg_load_cast_cast_fu_150_p1) + $signed(9'd511));

assign tmp_i_fu_225_p3 = {{bitcast_ln174_2_fu_221_p1}, {bitcast_ln174_fu_217_p1}};

assign zext_ln1061_fu_176_p1 = lshr_ln_fu_166_p4;

assign zext_ln216_fu_200_p1 = x_fu_70;

endmodule //fwd_fft_VITIS_LOOP_254_8_proc
