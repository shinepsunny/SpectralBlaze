// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fwd_fft_fft_stage9_Pipeline_SKIP_X (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        trunc_ln4,
        IN_M_real_address0,
        IN_M_real_ce0,
        IN_M_real_q0,
        IN_M_real_address1,
        IN_M_real_ce1,
        IN_M_real_q1,
        IN_M_imag_address0,
        IN_M_imag_ce0,
        IN_M_imag_q0,
        IN_M_imag_address1,
        IN_M_imag_ce1,
        IN_M_imag_q1,
        OUT_M_real_address0,
        OUT_M_real_ce0,
        OUT_M_real_we0,
        OUT_M_real_d0,
        OUT_M_real_address1,
        OUT_M_real_ce1,
        OUT_M_real_we1,
        OUT_M_real_d1,
        OUT_M_imag_address0,
        OUT_M_imag_ce0,
        OUT_M_imag_we0,
        OUT_M_imag_d0,
        OUT_M_imag_address1,
        OUT_M_imag_ce1,
        OUT_M_imag_we1,
        OUT_M_imag_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] trunc_ln4;
output  [5:0] IN_M_real_address0;
output   IN_M_real_ce0;
input  [15:0] IN_M_real_q0;
output  [5:0] IN_M_real_address1;
output   IN_M_real_ce1;
input  [15:0] IN_M_real_q1;
output  [5:0] IN_M_imag_address0;
output   IN_M_imag_ce0;
input  [15:0] IN_M_imag_q0;
output  [5:0] IN_M_imag_address1;
output   IN_M_imag_ce1;
input  [15:0] IN_M_imag_q1;
output  [5:0] OUT_M_real_address0;
output   OUT_M_real_ce0;
output   OUT_M_real_we0;
output  [15:0] OUT_M_real_d0;
output  [5:0] OUT_M_real_address1;
output   OUT_M_real_ce1;
output   OUT_M_real_we1;
output  [15:0] OUT_M_real_d1;
output  [5:0] OUT_M_imag_address0;
output   OUT_M_imag_ce0;
output   OUT_M_imag_we0;
output  [15:0] OUT_M_imag_d0;
output  [5:0] OUT_M_imag_address1;
output   OUT_M_imag_ce1;
output   OUT_M_imag_we1;
output  [15:0] OUT_M_imag_d1;

reg ap_idle;
reg IN_M_real_ce0;
reg IN_M_real_ce1;
reg IN_M_imag_ce0;
reg IN_M_imag_ce1;
reg OUT_M_real_ce0;
reg OUT_M_real_we0;
reg OUT_M_real_ce1;
reg OUT_M_real_we1;
reg OUT_M_imag_ce0;
reg OUT_M_imag_we0;
reg OUT_M_imag_ce1;
reg OUT_M_imag_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1057_fu_205_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] m1_load_reg_275;
reg   [7:0] m1_load_reg_275_pp0_iter1_reg;
reg   [7:0] m1_load_reg_275_pp0_iter2_reg;
reg   [7:0] m1_load_reg_275_pp0_iter3_reg;
reg   [7:0] m1_load_reg_275_pp0_iter4_reg;
reg   [7:0] m1_load_reg_275_pp0_iter5_reg;
reg   [7:0] m1_load_reg_275_pp0_iter6_reg;
reg   [7:0] m1_load_reg_275_pp0_iter7_reg;
reg   [7:0] m1_load_reg_275_pp0_iter8_reg;
wire   [63:0] zext_ln20_fu_230_p1;
reg   [63:0] zext_ln20_reg_280;
reg   [63:0] zext_ln20_reg_280_pp0_iter1_reg;
reg   [63:0] zext_ln20_reg_280_pp0_iter2_reg;
reg   [63:0] zext_ln20_reg_280_pp0_iter3_reg;
reg   [63:0] zext_ln20_reg_280_pp0_iter4_reg;
reg   [63:0] zext_ln20_reg_280_pp0_iter5_reg;
reg   [63:0] zext_ln20_reg_280_pp0_iter6_reg;
reg   [63:0] zext_ln20_reg_280_pp0_iter7_reg;
reg   [63:0] zext_ln20_reg_280_pp0_iter8_reg;
reg   [63:0] zext_ln20_reg_280_pp0_iter9_reg;
reg   [63:0] zext_ln20_reg_280_pp0_iter10_reg;
reg   [63:0] zext_ln20_reg_280_pp0_iter11_reg;
reg   [63:0] zext_ln20_reg_280_pp0_iter12_reg;
reg   [63:0] zext_ln20_reg_280_pp0_iter13_reg;
reg   [63:0] zext_ln20_reg_280_pp0_iter14_reg;
reg   [63:0] zext_ln20_reg_280_pp0_iter15_reg;
reg   [15:0] p_r_M_real_reg_296;
reg   [15:0] p_r_M_imag_reg_301;
wire   [15:0] grp_fu_182_p2;
reg   [15:0] mul_i_i_reg_306;
wire   [15:0] grp_fu_187_p2;
reg   [15:0] mul3_i_i_reg_312;
wire   [63:0] zext_ln19_fu_252_p1;
reg   [63:0] zext_ln19_reg_318;
reg   [63:0] zext_ln19_reg_318_pp0_iter10_reg;
reg   [63:0] zext_ln19_reg_318_pp0_iter11_reg;
reg   [63:0] zext_ln19_reg_318_pp0_iter12_reg;
reg   [63:0] zext_ln19_reg_318_pp0_iter13_reg;
reg   [63:0] zext_ln19_reg_318_pp0_iter14_reg;
reg   [63:0] zext_ln19_reg_318_pp0_iter15_reg;
reg   [15:0] t1_M_real_reg_334;
reg   [15:0] t1_M_imag_reg_340;
wire   [15:0] grp_fu_170_p2;
reg   [15:0] p_r_reg_346;
wire   [15:0] grp_fu_158_p2;
reg   [15:0] p_r_M_imag_5_reg_352;
wire   [15:0] grp_fu_162_p2;
reg   [15:0] p_r_M_real_3_reg_358;
wire   [15:0] grp_fu_166_p2;
reg   [15:0] p_r_M_imag_3_reg_363;
wire   [15:0] grp_fu_174_p2;
reg   [15:0] p_r_M_real_4_reg_368;
wire   [15:0] grp_fu_178_p2;
reg   [15:0] p_r_M_imag_4_reg_373;
wire    ap_block_pp0_stage0;
reg   [6:0] k1_fu_44;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_k1_1;
wire   [6:0] k1_2_fu_211_p2;
reg   [7:0] m1_fu_48;
reg   [7:0] ap_sig_allocacmp_m1_load;
wire   [7:0] m1_1_fu_236_p2;
wire   [5:0] trunc_ln1057_fu_220_p1;
wire   [5:0] or_ln20_fu_224_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fwd_fft_hadd_16ns_16ns_16_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hadd_16ns_16ns_16_5_full_dsp_1_U283(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_i_i_reg_306),
    .din1(mul3_i_i_reg_312),
    .ce(1'b1),
    .dout(grp_fu_158_p2)
);

fwd_fft_hadd_16ns_16ns_16_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hadd_16ns_16ns_16_5_full_dsp_1_U284(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(t1_M_real_reg_334),
    .din1(p_r_reg_346),
    .ce(1'b1),
    .dout(grp_fu_162_p2)
);

fwd_fft_hadd_16ns_16ns_16_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hadd_16ns_16ns_16_5_full_dsp_1_U285(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(t1_M_imag_reg_340),
    .din1(p_r_M_imag_5_reg_352),
    .ce(1'b1),
    .dout(grp_fu_166_p2)
);

fwd_fft_hsub_16ns_16ns_16_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hsub_16ns_16ns_16_5_full_dsp_1_U286(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_i_i_reg_306),
    .din1(mul3_i_i_reg_312),
    .ce(1'b1),
    .dout(grp_fu_170_p2)
);

fwd_fft_hsub_16ns_16ns_16_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hsub_16ns_16ns_16_5_full_dsp_1_U287(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(t1_M_real_reg_334),
    .din1(p_r_reg_346),
    .ce(1'b1),
    .dout(grp_fu_174_p2)
);

fwd_fft_hsub_16ns_16ns_16_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hsub_16ns_16ns_16_5_full_dsp_1_U288(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(t1_M_imag_reg_340),
    .din1(p_r_M_imag_5_reg_352),
    .ce(1'b1),
    .dout(grp_fu_178_p2)
);

fwd_fft_hmul_16ns_16ns_16_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hmul_16ns_16ns_16_4_max_dsp_1_U289(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_real_reg_296),
    .din1(16'd0),
    .ce(1'b1),
    .dout(grp_fu_182_p2)
);

fwd_fft_hmul_16ns_16ns_16_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hmul_16ns_16ns_16_4_max_dsp_1_U290(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_imag_reg_301),
    .din1(16'd0),
    .ce(1'b1),
    .dout(grp_fu_187_p2)
);

fwd_fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter15_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1057_fu_205_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k1_fu_44 <= k1_2_fu_211_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k1_fu_44 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1057_fu_205_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            m1_fu_48 <= m1_1_fu_236_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            m1_fu_48 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        m1_load_reg_275_pp0_iter2_reg <= m1_load_reg_275_pp0_iter1_reg;
        m1_load_reg_275_pp0_iter3_reg <= m1_load_reg_275_pp0_iter2_reg;
        m1_load_reg_275_pp0_iter4_reg <= m1_load_reg_275_pp0_iter3_reg;
        m1_load_reg_275_pp0_iter5_reg <= m1_load_reg_275_pp0_iter4_reg;
        m1_load_reg_275_pp0_iter6_reg <= m1_load_reg_275_pp0_iter5_reg;
        m1_load_reg_275_pp0_iter7_reg <= m1_load_reg_275_pp0_iter6_reg;
        m1_load_reg_275_pp0_iter8_reg <= m1_load_reg_275_pp0_iter7_reg;
        mul3_i_i_reg_312 <= grp_fu_187_p2;
        mul_i_i_reg_306 <= grp_fu_182_p2;
        p_r_M_imag_3_reg_363 <= grp_fu_166_p2;
        p_r_M_imag_4_reg_373 <= grp_fu_178_p2;
        p_r_M_imag_5_reg_352 <= grp_fu_158_p2;
        p_r_M_real_3_reg_358 <= grp_fu_162_p2;
        p_r_M_real_4_reg_368 <= grp_fu_174_p2;
        p_r_reg_346 <= grp_fu_170_p2;
        zext_ln19_reg_318[7 : 0] <= zext_ln19_fu_252_p1[7 : 0];
        zext_ln19_reg_318_pp0_iter10_reg[7 : 0] <= zext_ln19_reg_318[7 : 0];
        zext_ln19_reg_318_pp0_iter11_reg[7 : 0] <= zext_ln19_reg_318_pp0_iter10_reg[7 : 0];
        zext_ln19_reg_318_pp0_iter12_reg[7 : 0] <= zext_ln19_reg_318_pp0_iter11_reg[7 : 0];
        zext_ln19_reg_318_pp0_iter13_reg[7 : 0] <= zext_ln19_reg_318_pp0_iter12_reg[7 : 0];
        zext_ln19_reg_318_pp0_iter14_reg[7 : 0] <= zext_ln19_reg_318_pp0_iter13_reg[7 : 0];
        zext_ln19_reg_318_pp0_iter15_reg[7 : 0] <= zext_ln19_reg_318_pp0_iter14_reg[7 : 0];
        zext_ln20_reg_280_pp0_iter10_reg[5 : 1] <= zext_ln20_reg_280_pp0_iter9_reg[5 : 1];
        zext_ln20_reg_280_pp0_iter11_reg[5 : 1] <= zext_ln20_reg_280_pp0_iter10_reg[5 : 1];
        zext_ln20_reg_280_pp0_iter12_reg[5 : 1] <= zext_ln20_reg_280_pp0_iter11_reg[5 : 1];
        zext_ln20_reg_280_pp0_iter13_reg[5 : 1] <= zext_ln20_reg_280_pp0_iter12_reg[5 : 1];
        zext_ln20_reg_280_pp0_iter14_reg[5 : 1] <= zext_ln20_reg_280_pp0_iter13_reg[5 : 1];
        zext_ln20_reg_280_pp0_iter15_reg[5 : 1] <= zext_ln20_reg_280_pp0_iter14_reg[5 : 1];
        zext_ln20_reg_280_pp0_iter2_reg[5 : 1] <= zext_ln20_reg_280_pp0_iter1_reg[5 : 1];
        zext_ln20_reg_280_pp0_iter3_reg[5 : 1] <= zext_ln20_reg_280_pp0_iter2_reg[5 : 1];
        zext_ln20_reg_280_pp0_iter4_reg[5 : 1] <= zext_ln20_reg_280_pp0_iter3_reg[5 : 1];
        zext_ln20_reg_280_pp0_iter5_reg[5 : 1] <= zext_ln20_reg_280_pp0_iter4_reg[5 : 1];
        zext_ln20_reg_280_pp0_iter6_reg[5 : 1] <= zext_ln20_reg_280_pp0_iter5_reg[5 : 1];
        zext_ln20_reg_280_pp0_iter7_reg[5 : 1] <= zext_ln20_reg_280_pp0_iter6_reg[5 : 1];
        zext_ln20_reg_280_pp0_iter8_reg[5 : 1] <= zext_ln20_reg_280_pp0_iter7_reg[5 : 1];
        zext_ln20_reg_280_pp0_iter9_reg[5 : 1] <= zext_ln20_reg_280_pp0_iter8_reg[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        m1_load_reg_275_pp0_iter1_reg <= m1_load_reg_275;
        zext_ln20_reg_280_pp0_iter1_reg[5 : 1] <= zext_ln20_reg_280[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_fu_205_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m1_load_reg_275 <= ap_sig_allocacmp_m1_load;
        zext_ln20_reg_280[5 : 1] <= zext_ln20_fu_230_p1[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_r_M_imag_reg_301 <= IN_M_imag_q1;
        p_r_M_real_reg_296 <= IN_M_real_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        t1_M_imag_reg_340 <= IN_M_imag_q0;
        t1_M_real_reg_334 <= IN_M_real_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        IN_M_imag_ce0 = 1'b1;
    end else begin
        IN_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IN_M_imag_ce1 = 1'b1;
    end else begin
        IN_M_imag_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        IN_M_real_ce0 = 1'b1;
    end else begin
        IN_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IN_M_real_ce1 = 1'b1;
    end else begin
        IN_M_real_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_M_imag_ce0 = 1'b1;
    end else begin
        OUT_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_M_imag_ce1 = 1'b1;
    end else begin
        OUT_M_imag_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_M_imag_we0 = 1'b1;
    end else begin
        OUT_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_M_imag_we1 = 1'b1;
    end else begin
        OUT_M_imag_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_M_real_ce0 = 1'b1;
    end else begin
        OUT_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_M_real_ce1 = 1'b1;
    end else begin
        OUT_M_real_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_M_real_we0 = 1'b1;
    end else begin
        OUT_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_M_real_we1 = 1'b1;
    end else begin
        OUT_M_real_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_205_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter15_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k1_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_k1_1 = k1_fu_44;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_m1_load = 8'd0;
    end else begin
        ap_sig_allocacmp_m1_load = m1_fu_48;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IN_M_imag_address0 = zext_ln19_fu_252_p1;

assign IN_M_imag_address1 = zext_ln20_fu_230_p1;

assign IN_M_real_address0 = zext_ln19_fu_252_p1;

assign IN_M_real_address1 = zext_ln20_fu_230_p1;

assign OUT_M_imag_address0 = zext_ln20_reg_280_pp0_iter15_reg;

assign OUT_M_imag_address1 = zext_ln19_reg_318_pp0_iter15_reg;

assign OUT_M_imag_d0 = p_r_M_imag_4_reg_373;

assign OUT_M_imag_d1 = p_r_M_imag_3_reg_363;

assign OUT_M_real_address0 = zext_ln20_reg_280_pp0_iter15_reg;

assign OUT_M_real_address1 = zext_ln19_reg_318_pp0_iter15_reg;

assign OUT_M_real_d0 = p_r_M_real_4_reg_368;

assign OUT_M_real_d1 = p_r_M_real_3_reg_358;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln1057_fu_205_p2 = ((ap_sig_allocacmp_k1_1 == trunc_ln4) ? 1'b1 : 1'b0);

assign k1_2_fu_211_p2 = (ap_sig_allocacmp_k1_1 + 7'd1);

assign m1_1_fu_236_p2 = (ap_sig_allocacmp_m1_load + 8'd2);

assign or_ln20_fu_224_p2 = (trunc_ln1057_fu_220_p1 | 6'd1);

assign trunc_ln1057_fu_220_p1 = ap_sig_allocacmp_m1_load[5:0];

assign zext_ln19_fu_252_p1 = m1_load_reg_275_pp0_iter8_reg;

assign zext_ln20_fu_230_p1 = or_ln20_fu_224_p2;

always @ (posedge ap_clk) begin
    zext_ln20_reg_280[0] <= 1'b1;
    zext_ln20_reg_280[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln20_reg_280_pp0_iter1_reg[0] <= 1'b1;
    zext_ln20_reg_280_pp0_iter1_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln20_reg_280_pp0_iter2_reg[0] <= 1'b1;
    zext_ln20_reg_280_pp0_iter2_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln20_reg_280_pp0_iter3_reg[0] <= 1'b1;
    zext_ln20_reg_280_pp0_iter3_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln20_reg_280_pp0_iter4_reg[0] <= 1'b1;
    zext_ln20_reg_280_pp0_iter4_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln20_reg_280_pp0_iter5_reg[0] <= 1'b1;
    zext_ln20_reg_280_pp0_iter5_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln20_reg_280_pp0_iter6_reg[0] <= 1'b1;
    zext_ln20_reg_280_pp0_iter6_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln20_reg_280_pp0_iter7_reg[0] <= 1'b1;
    zext_ln20_reg_280_pp0_iter7_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln20_reg_280_pp0_iter8_reg[0] <= 1'b1;
    zext_ln20_reg_280_pp0_iter8_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln20_reg_280_pp0_iter9_reg[0] <= 1'b1;
    zext_ln20_reg_280_pp0_iter9_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln20_reg_280_pp0_iter10_reg[0] <= 1'b1;
    zext_ln20_reg_280_pp0_iter10_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln20_reg_280_pp0_iter11_reg[0] <= 1'b1;
    zext_ln20_reg_280_pp0_iter11_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln20_reg_280_pp0_iter12_reg[0] <= 1'b1;
    zext_ln20_reg_280_pp0_iter12_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln20_reg_280_pp0_iter13_reg[0] <= 1'b1;
    zext_ln20_reg_280_pp0_iter13_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln20_reg_280_pp0_iter14_reg[0] <= 1'b1;
    zext_ln20_reg_280_pp0_iter14_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln20_reg_280_pp0_iter15_reg[0] <= 1'b1;
    zext_ln20_reg_280_pp0_iter15_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln19_reg_318[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln19_reg_318_pp0_iter10_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln19_reg_318_pp0_iter11_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln19_reg_318_pp0_iter12_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln19_reg_318_pp0_iter13_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln19_reg_318_pp0_iter14_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln19_reg_318_pp0_iter15_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //fwd_fft_fft_stage9_Pipeline_SKIP_X
