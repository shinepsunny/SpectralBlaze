// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fwd_fft_Mem_Patch_Gen_Pipeline_VITIS_LOOP_226_7_VITIS_LOOP_229_8_VITIS_LOOP_232_9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        c_ifmap_patch_st_din,
        c_ifmap_patch_st_full_n,
        c_ifmap_patch_st_write,
        mul_ln203,
        p_cast,
        bound4,
        bound,
        p_cast3_cast,
        cmp_i_not_mid115,
        p_cast6,
        icmp_ln1057,
        burst_buffer1_address0,
        burst_buffer1_ce0,
        burst_buffer1_q0,
        burst_buffer2_address0,
        burst_buffer2_ce0,
        burst_buffer2_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [63:0] c_ifmap_patch_st_din;
input   c_ifmap_patch_st_full_n;
output   c_ifmap_patch_st_write;
input  [15:0] mul_ln203;
input  [15:0] p_cast;
input  [23:0] bound4;
input  [15:0] bound;
input  [7:0] p_cast3_cast;
input  [0:0] cmp_i_not_mid115;
input  [7:0] p_cast6;
input  [0:0] icmp_ln1057;
output  [10:0] burst_buffer1_address0;
output   burst_buffer1_ce0;
input  [255:0] burst_buffer1_q0;
output  [10:0] burst_buffer2_address0;
output   burst_buffer2_ce0;
input  [255:0] burst_buffer2_q0;

reg ap_idle;
reg c_ifmap_patch_st_write;
reg burst_buffer1_ce0;
reg burst_buffer2_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1057_9_fu_233_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    c_ifmap_patch_st_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] p_cast3_cast_cast_fu_201_p1;
reg   [15:0] p_cast3_cast_cast_reg_657;
reg   [0:0] icmp_ln1057_9_reg_662;
wire   [0:0] icmp_ln1057_10_fu_256_p2;
reg   [0:0] icmp_ln1057_10_reg_666;
reg   [0:0] icmp_ln1057_10_reg_666_pp0_iter2_reg;
reg   [0:0] icmp_ln1057_10_reg_666_pp0_iter3_reg;
wire   [0:0] rev19_fu_319_p2;
reg   [0:0] rev19_reg_679;
reg   [0:0] rev19_reg_679_pp0_iter3_reg;
wire   [0:0] select_ln186_3_fu_340_p3;
reg   [0:0] select_ln186_3_reg_684;
reg   [0:0] select_ln186_3_reg_684_pp0_iter3_reg;
wire   [7:0] add_ln229_fu_346_p2;
reg   [7:0] add_ln229_reg_689;
wire   [7:0] select_ln1057_fu_357_p3;
reg   [7:0] select_ln1057_reg_694;
wire   [7:0] select_ln1057_5_fu_365_p3;
reg   [7:0] select_ln1057_5_reg_700;
reg   [4:0] rd_i_reg_705;
wire   [0:0] ult20_fu_407_p2;
reg   [0:0] ult20_reg_710;
wire   [7:0] shl_ln54_fu_427_p2;
reg   [7:0] shl_ln54_reg_730;
reg   [7:0] shl_ln54_reg_730_pp0_iter4_reg;
wire   [8:0] add_ln240_fu_442_p2;
reg   [8:0] add_ln240_reg_736;
wire   [0:0] or_ln236_fu_475_p2;
reg   [0:0] or_ln236_reg_742;
reg   [255:0] burst_buffer1_load_reg_748;
wire   [255:0] sub_ln240_fu_518_p2;
reg   [255:0] sub_ln240_reg_753;
reg   [255:0] burst_buffer2_load_reg_759;
wire   [31:0] select_ln236_fu_555_p3;
reg   [31:0] select_ln236_reg_764;
wire   [31:0] select_ln236_1_fu_562_p3;
reg   [31:0] select_ln236_1_reg_769;
reg    ap_condition_exit_pp0_iter2_stage0;
wire   [63:0] zext_ln54_fu_421_p1;
reg   [7:0] lhs_fu_100;
wire   [7:0] x_fu_383_p2;
wire    ap_loop_init;
reg   [7:0] y_fu_104;
reg   [15:0] indvar_flatten_fu_108;
wire   [15:0] select_ln1057_6_fu_279_p3;
reg   [7:0] pnx_fu_112;
wire   [7:0] select_ln186_1_fu_261_p3;
reg   [23:0] indvar_flatten19_fu_116;
wire   [23:0] add_ln1057_fu_238_p2;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] pnx_5_fu_250_p2;
wire   [15:0] add_ln1057_2_fu_273_p2;
wire   [15:0] y_cast_fu_305_p1;
wire   [15:0] add_i_i_fu_309_p2;
wire   [0:0] ult_fu_314_p2;
wire   [0:0] icmp_ln1057_11_fu_335_p2;
wire   [7:0] select_ln186_fu_328_p3;
wire   [0:0] or_ln1057_fu_352_p2;
wire   [15:0] y_cast_mid1_fu_399_p1;
wire   [15:0] add_i_i_mid1_fu_402_p2;
wire   [12:0] tmp_fu_415_p3;
wire   [7:0] or_ln240_fu_432_p2;
wire   [8:0] zext_ln240_2_fu_438_p1;
wire   [0:0] rev21_fu_453_p2;
wire   [0:0] select_ln186_2_fu_448_p3;
wire   [15:0] grp_fu_576_p3;
wire   [0:0] icmp_ln236_fu_465_p2;
wire   [0:0] xor_ln236_fu_469_p2;
wire   [0:0] select_ln1057_4_fu_458_p3;
wire   [255:0] zext_ln240_3_fu_484_p1;
wire   [0:0] tmp_3_fu_493_p3;
wire   [255:0] shl_ln240_fu_487_p2;
wire   [224:0] zext_ln240_1_fu_481_p1;
wire   [224:0] shl_ln240_1_fu_508_p2;
wire   [255:0] select_ln240_fu_500_p3;
wire   [255:0] zext_ln240_4_fu_514_p1;
wire   [255:0] and_ln240_fu_527_p2;
wire   [255:0] zext_ln240_fu_524_p1;
wire   [255:0] lshr_ln240_fu_531_p2;
wire   [255:0] and_ln240_1_fu_541_p2;
wire   [255:0] lshr_ln240_1_fu_545_p2;
wire   [31:0] trunc_ln240_1_fu_551_p1;
wire   [31:0] trunc_ln240_fu_537_p1;
wire   [7:0] grp_fu_576_p0;
wire   [7:0] grp_fu_576_p1;
wire   [7:0] grp_fu_576_p2;
reg    grp_fu_576_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [15:0] grp_fu_576_p00;
wire   [15:0] grp_fu_576_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fwd_fft_mac_muladd_8ns_8ns_8ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_8ns_16_4_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_576_p0),
    .din1(grp_fu_576_p1),
    .din2(grp_fu_576_p2),
    .ce(grp_fu_576_ce),
    .dout(grp_fu_576_p3)
);

fwd_fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten19_fu_116 <= 24'd0;
        end else if (((icmp_ln1057_9_fu_233_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten19_fu_116 <= add_ln1057_fu_238_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_108 <= 16'd0;
        end else if (((icmp_ln1057_9_fu_233_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_108 <= select_ln1057_6_fu_279_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lhs_fu_100 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1057_9_reg_662 == 1'd0))) begin
            lhs_fu_100 <= x_fu_383_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            pnx_fu_112 <= 8'd0;
        end else if (((icmp_ln1057_9_fu_233_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            pnx_fu_112 <= select_ln186_1_fu_261_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            y_fu_104 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1057_9_reg_662 == 1'd0))) begin
            y_fu_104 <= select_ln1057_5_fu_365_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1057_9_reg_662 == 1'd0))) begin
        add_ln229_reg_689 <= add_ln229_fu_346_p2;
        rd_i_reg_705 <= {{select_ln1057_fu_357_p3[7:3]}};
        select_ln1057_5_reg_700 <= select_ln1057_5_fu_365_p3;
        select_ln1057_reg_694 <= select_ln1057_fu_357_p3;
        select_ln186_3_reg_684 <= select_ln186_3_fu_340_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln240_reg_736[8 : 5] <= add_ln240_fu_442_p2[8 : 5];
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        burst_buffer1_load_reg_748 <= burst_buffer1_q0;
        burst_buffer2_load_reg_759 <= burst_buffer2_q0;
        icmp_ln1057_10_reg_666_pp0_iter2_reg <= icmp_ln1057_10_reg_666;
        icmp_ln1057_10_reg_666_pp0_iter3_reg <= icmp_ln1057_10_reg_666_pp0_iter2_reg;
        or_ln236_reg_742 <= or_ln236_fu_475_p2;
        rev19_reg_679_pp0_iter3_reg <= rev19_reg_679;
        select_ln186_3_reg_684_pp0_iter3_reg <= select_ln186_3_reg_684;
        select_ln236_1_reg_769 <= select_ln236_1_fu_562_p3;
        select_ln236_reg_764 <= select_ln236_fu_555_p3;
        shl_ln54_reg_730[7 : 5] <= shl_ln54_fu_427_p2[7 : 5];
        shl_ln54_reg_730_pp0_iter4_reg[7 : 5] <= shl_ln54_reg_730[7 : 5];
        sub_ln240_reg_753 <= sub_ln240_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln1057_9_reg_662 <= icmp_ln1057_9_fu_233_p2;
        p_cast3_cast_cast_reg_657[7 : 0] <= p_cast3_cast_cast_fu_201_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_9_fu_233_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1057_10_reg_666 <= icmp_ln1057_10_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1057_10_reg_666 == 1'd0))) begin
        rev19_reg_679 <= rev19_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln186_3_reg_684 == 1'd1))) begin
        ult20_reg_710 <= ult20_fu_407_p2;
    end
end

always @ (*) begin
    if (((icmp_ln1057_9_fu_233_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1057_9_reg_662 == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        burst_buffer1_ce0 = 1'b1;
    end else begin
        burst_buffer1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        burst_buffer2_ce0 = 1'b1;
    end else begin
        burst_buffer2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        c_ifmap_patch_st_blk_n = c_ifmap_patch_st_full_n;
    end else begin
        c_ifmap_patch_st_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        c_ifmap_patch_st_write = 1'b1;
    end else begin
        c_ifmap_patch_st_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_576_ce = 1'b1;
    end else begin
        grp_fu_576_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_i_i_fu_309_p2 = (mul_ln203 + y_cast_fu_305_p1);

assign add_i_i_mid1_fu_402_p2 = (mul_ln203 + y_cast_mid1_fu_399_p1);

assign add_ln1057_2_fu_273_p2 = (indvar_flatten_fu_108 + 16'd1);

assign add_ln1057_fu_238_p2 = (indvar_flatten19_fu_116 + 24'd1);

assign add_ln229_fu_346_p2 = (select_ln186_fu_328_p3 + 8'd1);

assign add_ln240_fu_442_p2 = (zext_ln240_2_fu_438_p1 + 9'd1);

assign and_ln240_1_fu_541_p2 = (sub_ln240_reg_753 & burst_buffer2_load_reg_759);

assign and_ln240_fu_527_p2 = (sub_ln240_reg_753 & burst_buffer1_load_reg_748);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((c_ifmap_patch_st_full_n == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((c_ifmap_patch_st_full_n == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((c_ifmap_patch_st_full_n == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter6 = (c_ifmap_patch_st_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign burst_buffer1_address0 = zext_ln54_fu_421_p1;

assign burst_buffer2_address0 = zext_ln54_fu_421_p1;

assign c_ifmap_patch_st_din = {{select_ln236_reg_764}, {select_ln236_1_reg_769}};

assign grp_fu_576_p0 = grp_fu_576_p00;

assign grp_fu_576_p00 = select_ln186_1_fu_261_p3;

assign grp_fu_576_p1 = p_cast3_cast_cast_reg_657;

assign grp_fu_576_p2 = grp_fu_576_p20;

assign grp_fu_576_p20 = select_ln1057_reg_694;

assign icmp_ln1057_10_fu_256_p2 = ((indvar_flatten_fu_108 == bound) ? 1'b1 : 1'b0);

assign icmp_ln1057_11_fu_335_p2 = ((lhs_fu_100 == p_cast6) ? 1'b1 : 1'b0);

assign icmp_ln1057_9_fu_233_p2 = ((indvar_flatten19_fu_116 == bound4) ? 1'b1 : 1'b0);

assign icmp_ln236_fu_465_p2 = ((grp_fu_576_p3 < p_cast) ? 1'b1 : 1'b0);

assign lshr_ln240_1_fu_545_p2 = and_ln240_1_fu_541_p2 >> zext_ln240_fu_524_p1;

assign lshr_ln240_fu_531_p2 = and_ln240_fu_527_p2 >> zext_ln240_fu_524_p1;

assign or_ln1057_fu_352_p2 = (select_ln186_3_fu_340_p3 | icmp_ln1057_10_reg_666);

assign or_ln236_fu_475_p2 = (xor_ln236_fu_469_p2 | select_ln1057_4_fu_458_p3);

assign or_ln240_fu_432_p2 = (shl_ln54_fu_427_p2 | 8'd31);

assign p_cast3_cast_cast_fu_201_p1 = p_cast3_cast;

assign pnx_5_fu_250_p2 = (pnx_fu_112 + 8'd1);

assign rev19_fu_319_p2 = (ult_fu_314_p2 ^ 1'd1);

assign rev21_fu_453_p2 = (ult20_reg_710 ^ 1'd1);

assign select_ln1057_4_fu_458_p3 = ((select_ln186_3_reg_684_pp0_iter3_reg[0:0] == 1'b1) ? rev21_fu_453_p2 : select_ln186_2_fu_448_p3);

assign select_ln1057_5_fu_365_p3 = ((select_ln186_3_fu_340_p3[0:0] == 1'b1) ? add_ln229_fu_346_p2 : select_ln186_fu_328_p3);

assign select_ln1057_6_fu_279_p3 = ((icmp_ln1057_10_fu_256_p2[0:0] == 1'b1) ? 16'd1 : add_ln1057_2_fu_273_p2);

assign select_ln1057_fu_357_p3 = ((or_ln1057_fu_352_p2[0:0] == 1'b1) ? 8'd0 : lhs_fu_100);

assign select_ln186_1_fu_261_p3 = ((icmp_ln1057_10_fu_256_p2[0:0] == 1'b1) ? pnx_5_fu_250_p2 : pnx_fu_112);

assign select_ln186_2_fu_448_p3 = ((icmp_ln1057_10_reg_666_pp0_iter3_reg[0:0] == 1'b1) ? cmp_i_not_mid115 : rev19_reg_679_pp0_iter3_reg);

assign select_ln186_3_fu_340_p3 = ((icmp_ln1057_10_reg_666[0:0] == 1'b1) ? icmp_ln1057 : icmp_ln1057_11_fu_335_p2);

assign select_ln186_fu_328_p3 = ((icmp_ln1057_10_reg_666[0:0] == 1'b1) ? 8'd0 : y_fu_104);

assign select_ln236_1_fu_562_p3 = ((or_ln236_reg_742[0:0] == 1'b1) ? 32'd0 : trunc_ln240_fu_537_p1);

assign select_ln236_fu_555_p3 = ((or_ln236_reg_742[0:0] == 1'b1) ? 32'd0 : trunc_ln240_1_fu_551_p1);

assign select_ln240_fu_500_p3 = ((tmp_3_fu_493_p3[0:0] == 1'b1) ? 256'd0 : shl_ln240_fu_487_p2);

assign shl_ln240_1_fu_508_p2 = 225'd1 << zext_ln240_1_fu_481_p1;

assign shl_ln240_fu_487_p2 = 256'd1 << zext_ln240_3_fu_484_p1;

assign shl_ln54_fu_427_p2 = select_ln1057_reg_694 << 8'd5;

assign sub_ln240_fu_518_p2 = (select_ln240_fu_500_p3 - zext_ln240_4_fu_514_p1);

assign tmp_3_fu_493_p3 = add_ln240_reg_736[32'd8];

assign tmp_fu_415_p3 = {{select_ln1057_5_reg_700}, {rd_i_reg_705}};

assign trunc_ln240_1_fu_551_p1 = lshr_ln240_1_fu_545_p2[31:0];

assign trunc_ln240_fu_537_p1 = lshr_ln240_fu_531_p2[31:0];

assign ult20_fu_407_p2 = ((add_i_i_mid1_fu_402_p2 < p_cast) ? 1'b1 : 1'b0);

assign ult_fu_314_p2 = ((add_i_i_fu_309_p2 < p_cast) ? 1'b1 : 1'b0);

assign x_fu_383_p2 = (select_ln1057_fu_357_p3 + 8'd1);

assign xor_ln236_fu_469_p2 = (icmp_ln236_fu_465_p2 ^ 1'd1);

assign y_cast_fu_305_p1 = y_fu_104;

assign y_cast_mid1_fu_399_p1 = add_ln229_reg_689;

assign zext_ln240_1_fu_481_p1 = shl_ln54_reg_730;

assign zext_ln240_2_fu_438_p1 = or_ln240_fu_432_p2;

assign zext_ln240_3_fu_484_p1 = add_ln240_reg_736;

assign zext_ln240_4_fu_514_p1 = shl_ln240_1_fu_508_p2;

assign zext_ln240_fu_524_p1 = shl_ln54_reg_730_pp0_iter4_reg;

assign zext_ln54_fu_421_p1 = tmp_fu_415_p3;

always @ (posedge ap_clk) begin
    p_cast3_cast_cast_reg_657[15:8] <= 8'b00000000;
    shl_ln54_reg_730[4:0] <= 5'b00000;
    shl_ln54_reg_730_pp0_iter4_reg[4:0] <= 5'b00000;
    add_ln240_reg_736[4:0] <= 5'b00000;
end

endmodule //fwd_fft_Mem_Patch_Gen_Pipeline_VITIS_LOOP_226_7_VITIS_LOOP_229_8_VITIS_LOOP_232_9
