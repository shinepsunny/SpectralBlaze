// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module patch_gen_VITIS_LOOP_254_6_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        burst_buffer11_address0,
        burst_buffer11_ce0,
        burst_buffer11_q0,
        burst_buffer22_address0,
        burst_buffer22_ce0,
        burst_buffer22_q0,
        col_ov_pix_out_V_din,
        col_ov_pix_out_V_full_n,
        col_ov_pix_out_V_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
input  [31:0] p_read1;
output  [13:0] burst_buffer11_address0;
output   burst_buffer11_ce0;
input  [15:0] burst_buffer11_q0;
output  [13:0] burst_buffer22_address0;
output   burst_buffer22_ce0;
input  [15:0] burst_buffer22_q0;
output  [31:0] col_ov_pix_out_V_din;
input   col_ov_pix_out_V_full_n;
output   col_ov_pix_out_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg burst_buffer11_ce0;
reg burst_buffer22_ce0;
reg col_ov_pix_out_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    col_ov_pix_out_V_blk_n;
wire    ap_CS_fsm_state5;
wire   [7:0] empty_fu_129_p1;
reg   [7:0] empty_reg_263;
wire   [7:0] p_cast_fu_133_p4;
reg   [7:0] p_cast_reg_268;
wire   [0:0] icmp_ln1057_fu_143_p2;
reg   [0:0] icmp_ln1057_reg_274;
wire   [13:0] p_cast37_cast_fu_149_p1;
reg   [13:0] p_cast37_cast_reg_278;
wire   [7:0] pnx_fu_166_p2;
reg   [7:0] pnx_reg_286;
wire    ap_CS_fsm_state2;
wire   [13:0] mul_ln257_fu_176_p2;
reg   [13:0] mul_ln257_reg_291;
wire   [0:0] icmp_ln1057_1_fu_161_p2;
wire   [13:0] tmp_cast_fu_185_p3;
reg   [13:0] tmp_cast_reg_296;
wire    ap_CS_fsm_state3;
wire   [7:0] add_ln257_fu_198_p2;
reg   [7:0] add_ln257_reg_304;
wire   [7:0] x_fu_213_p2;
reg   [7:0] x_reg_312;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln1057_3_fu_208_p2;
reg   [7:0] y_reg_107;
reg   [7:0] x_1_reg_118;
wire   [0:0] icmp_ln1057_2_fu_193_p2;
wire   [63:0] zext_ln263_fu_233_p1;
reg   [7:0] pnx_1_fu_58;
reg    ap_block_state1;
wire   [7:0] mul_ln257_fu_176_p0;
wire   [7:0] mul_ln257_fu_176_p1;
wire   [5:0] trunc_ln263_fu_181_p1;
wire   [13:0] zext_ln1525_fu_219_p1;
wire   [13:0] ret_fu_223_p2;
wire   [13:0] add_ln263_fu_228_p2;
wire   [15:0] bitcast_ln174_1_fu_243_p1;
wire   [15:0] bitcast_ln174_fu_239_p1;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire   [13:0] mul_ln257_fu_176_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
end

patch_gen_mul_8ns_8ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 14 ))
mul_8ns_8ns_14_1_1_U18(
    .din0(mul_ln257_fu_176_p0),
    .din1(mul_ln257_fu_176_p1),
    .dout(mul_ln257_fu_176_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln1057_1_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        pnx_1_fu_58 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & ((icmp_ln1057_reg_274 == 1'd1) | (icmp_ln1057_2_fu_193_p2 == 1'd1)))) begin
        pnx_1_fu_58 <= pnx_reg_286;
    end
end

always @ (posedge ap_clk) begin
    if (((col_ov_pix_out_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        x_1_reg_118 <= x_reg_312;
    end else if (((icmp_ln1057_reg_274 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln1057_2_fu_193_p2 == 1'd0))) begin
        x_1_reg_118 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_1_fu_161_p2 == 1'd0) & (icmp_ln1057_reg_274 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        y_reg_107 <= 8'd0;
    end else if (((icmp_ln1057_3_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        y_reg_107 <= add_ln257_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_reg_274 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln257_reg_304 <= add_ln257_fu_198_p2;
        tmp_cast_reg_296[13 : 8] <= tmp_cast_fu_185_p3[13 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_reg_263 <= empty_fu_129_p1;
        icmp_ln1057_reg_274 <= icmp_ln1057_fu_143_p2;
        p_cast37_cast_reg_278[7 : 0] <= p_cast37_cast_fu_149_p1[7 : 0];
        p_cast_reg_268 <= {{p_read1[31:24]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_1_fu_161_p2 == 1'd0) & (icmp_ln1057_reg_274 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        mul_ln257_reg_291 <= mul_ln257_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pnx_reg_286 <= pnx_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_reg_312 <= x_fu_213_p2;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((col_ov_pix_out_V_full_n == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_1_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_1_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        burst_buffer11_ce0 = 1'b1;
    end else begin
        burst_buffer11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        burst_buffer22_ce0 = 1'b1;
    end else begin
        burst_buffer22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        col_ov_pix_out_V_blk_n = col_ov_pix_out_V_full_n;
    end else begin
        col_ov_pix_out_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((col_ov_pix_out_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        col_ov_pix_out_V_write = 1'b1;
    end else begin
        col_ov_pix_out_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln1057_1_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ((icmp_ln1057_reg_274 == 1'd1) | (icmp_ln1057_2_fu_193_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln1057_3_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((col_ov_pix_out_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln257_fu_198_p2 = (y_reg_107 + 8'd1);

assign add_ln263_fu_228_p2 = (tmp_cast_reg_296 + ret_fu_223_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign bitcast_ln174_1_fu_243_p1 = burst_buffer22_q0;

assign bitcast_ln174_fu_239_p1 = burst_buffer11_q0;

assign burst_buffer11_address0 = zext_ln263_fu_233_p1;

assign burst_buffer22_address0 = zext_ln263_fu_233_p1;

assign col_ov_pix_out_V_din = {{bitcast_ln174_1_fu_243_p1}, {bitcast_ln174_fu_239_p1}};

assign empty_fu_129_p1 = p_read[7:0];

assign icmp_ln1057_1_fu_161_p2 = ((pnx_1_fu_58 == empty_reg_263) ? 1'b1 : 1'b0);

assign icmp_ln1057_2_fu_193_p2 = ((y_reg_107 == p_cast_reg_268) ? 1'b1 : 1'b0);

assign icmp_ln1057_3_fu_208_p2 = ((x_1_reg_118 == p_cast_reg_268) ? 1'b1 : 1'b0);

assign icmp_ln1057_fu_143_p2 = ((p_cast_fu_133_p4 == 8'd0) ? 1'b1 : 1'b0);

assign mul_ln257_fu_176_p0 = mul_ln257_fu_176_p00;

assign mul_ln257_fu_176_p00 = pnx_1_fu_58;

assign mul_ln257_fu_176_p1 = p_cast37_cast_reg_278;

assign p_cast37_cast_fu_149_p1 = p_cast_fu_133_p4;

assign p_cast_fu_133_p4 = {{p_read1[31:24]}};

assign pnx_fu_166_p2 = (pnx_1_fu_58 + 8'd1);

assign ret_fu_223_p2 = (mul_ln257_reg_291 + zext_ln1525_fu_219_p1);

assign tmp_cast_fu_185_p3 = {{trunc_ln263_fu_181_p1}, {8'd0}};

assign trunc_ln263_fu_181_p1 = y_reg_107[5:0];

assign x_fu_213_p2 = (x_1_reg_118 + 8'd1);

assign zext_ln1525_fu_219_p1 = x_1_reg_118;

assign zext_ln263_fu_233_p1 = add_ln263_fu_228_p2;

always @ (posedge ap_clk) begin
    p_cast37_cast_reg_278[13:8] <= 6'b000000;
    tmp_cast_reg_296[7:0] <= 8'b00000000;
end

endmodule //patch_gen_VITIS_LOOP_254_6_proc
