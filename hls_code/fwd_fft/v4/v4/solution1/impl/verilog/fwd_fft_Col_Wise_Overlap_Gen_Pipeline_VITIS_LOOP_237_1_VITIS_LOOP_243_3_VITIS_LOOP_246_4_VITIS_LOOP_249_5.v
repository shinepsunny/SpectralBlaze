// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fwd_fft_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_237_1_VITIS_LOOP_243_3_VITIS_LOOP_246_4_VITIS_LOOP_249_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        c_ifmap_patch_st_dout,
        c_ifmap_patch_st_empty_n,
        c_ifmap_patch_st_read,
        c_ifmap_col_op_st_din,
        c_ifmap_col_op_st_full_n,
        c_ifmap_col_op_st_write,
        Col_Buffer_din,
        Col_Buffer_full_n,
        Col_Buffer_write,
        Col_Buffer_dout,
        Col_Buffer_empty_n,
        Col_Buffer_read,
        sub_i_i,
        bound42,
        bound16,
        cmp_i_i_mid157,
        trunc_ln,
        icmp_ln1057,
        bound,
        icmp_ln1057_21,
        bound4,
        icmp_ln1057_22,
        trunc_ln40,
        p_cast1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] c_ifmap_patch_st_dout;
input   c_ifmap_patch_st_empty_n;
output   c_ifmap_patch_st_read;
output  [31:0] c_ifmap_col_op_st_din;
input   c_ifmap_col_op_st_full_n;
output   c_ifmap_col_op_st_write;
output  [31:0] Col_Buffer_din;
input   Col_Buffer_full_n;
output   Col_Buffer_write;
input  [31:0] Col_Buffer_dout;
input   Col_Buffer_empty_n;
output   Col_Buffer_read;
input  [8:0] sub_i_i;
input  [47:0] bound42;
input  [31:0] bound16;
input  [0:0] cmp_i_i_mid157;
input  [7:0] trunc_ln;
input  [0:0] icmp_ln1057;
input  [15:0] bound;
input  [0:0] icmp_ln1057_21;
input  [23:0] bound4;
input  [0:0] icmp_ln1057_22;
input  [7:0] trunc_ln40;
input  [7:0] p_cast1;

reg ap_idle;
reg c_ifmap_patch_st_read;
reg[31:0] c_ifmap_col_op_st_din;
reg c_ifmap_col_op_st_write;
reg Col_Buffer_write;
reg Col_Buffer_read;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln1057_19_reg_699;
reg   [0:0] or_ln264_reg_703;
reg    ap_predicate_op111_write_state3;
reg   [0:0] select_ln235_8_reg_695;
reg    ap_predicate_op113_read_state3;
reg    ap_predicate_op114_write_state3;
reg    ap_predicate_op116_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1057_14_fu_277_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    c_ifmap_col_op_st_blk_n;
wire    ap_block_pp0_stage0;
reg    Col_Buffer_i_blk_n;
reg    Col_Buffer_o_blk_n;
reg    c_ifmap_patch_st_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] select_ln235_8_fu_407_p3;
wire   [0:0] icmp_ln1057_19_fu_467_p2;
wire   [0:0] or_ln264_fu_477_p2;
reg   [7:0] x_fu_100;
wire   [7:0] x_14_fu_492_p2;
wire    ap_loop_init;
reg   [15:0] indvar_flatten_fu_104;
wire   [15:0] select_ln1057_8_fu_516_p3;
reg   [7:0] pnx_fu_108;
wire   [7:0] select_ln1057_fu_439_p3;
reg   [23:0] indvar_flatten11_fu_112;
wire   [23:0] select_ln1057_9_fu_530_p3;
reg   [31:0] indvar_flatten37_fu_116;
wire   [31:0] select_ln1057_10_fu_544_p3;
reg   [47:0] indvar_flatten71_fu_120;
wire   [47:0] add_ln1057_3_fu_282_p2;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] pnx_cast_fu_268_p1;
wire   [0:0] icmp_ln1057_15_fu_300_p2;
wire   [0:0] cmp_fu_262_p2;
wire   [0:0] cmp_i_i_fu_272_p2;
wire   [0:0] icmp_ln1057_16_fu_318_p2;
wire   [0:0] icmp_ln1057_17_fu_330_p2;
wire   [0:0] icmp_ln1057_18_fu_342_p2;
wire   [0:0] select_ln235_3_fu_347_p3;
wire   [0:0] or_ln235_1_fu_354_p2;
wire   [0:0] or_ln235_fu_305_p2;
wire   [0:0] select_ln235_fu_311_p3;
wire   [0:0] select_ln235_1_fu_323_p3;
wire   [0:0] select_ln235_2_fu_335_p3;
wire   [7:0] select_ln235_4_fu_360_p3;
wire   [7:0] pnx_8_fu_395_p2;
wire   [0:0] select_ln235_7_fu_388_p3;
wire   [0:0] cmp_mid1_fu_401_p2;
wire   [0:0] or_ln235_2_fu_368_p2;
wire   [8:0] pnx_cast_mid1_fu_415_p1;
wire   [0:0] cmp_i_i_mid1_fu_419_p2;
wire   [0:0] select_ln235_5_fu_374_p3;
wire   [0:0] select_ln235_6_fu_381_p3;
wire   [0:0] select_ln235_10_fu_432_p3;
wire   [0:0] or_ln235_3_fu_447_p2;
wire   [0:0] or_ln235_4_fu_453_p2;
wire   [7:0] select_ln235_11_fu_459_p3;
wire   [0:0] select_ln235_9_fu_424_p3;
wire   [0:0] icmp_ln264_fu_472_p2;
wire   [0:0] or_ln1057_fu_504_p2;
wire   [0:0] or_ln1057_1_fu_510_p2;
wire   [15:0] add_ln1057_fu_498_p2;
wire   [23:0] add_ln1057_4_fu_524_p2;
wire   [31:0] add_ln1057_5_fu_538_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fwd_fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten11_fu_112 <= 24'd0;
        end else if (((icmp_ln1057_14_fu_277_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten11_fu_112 <= select_ln1057_9_fu_530_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten37_fu_116 <= 32'd0;
        end else if (((icmp_ln1057_14_fu_277_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten37_fu_116 <= select_ln1057_10_fu_544_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten71_fu_120 <= 48'd0;
        end else if (((icmp_ln1057_14_fu_277_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten71_fu_120 <= add_ln1057_3_fu_282_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_104 <= 16'd0;
        end else if (((icmp_ln1057_14_fu_277_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_104 <= select_ln1057_8_fu_516_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            pnx_fu_108 <= 8'd0;
        end else if (((icmp_ln1057_14_fu_277_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            pnx_fu_108 <= select_ln1057_fu_439_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            x_fu_100 <= 8'd0;
        end else if (((icmp_ln1057_14_fu_277_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            x_fu_100 <= x_14_fu_492_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_14_fu_277_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1057_19_reg_699 <= icmp_ln1057_19_fu_467_p2;
        select_ln235_8_reg_695 <= select_ln235_8_fu_407_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_14_fu_277_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1057_19_fu_467_p2 == 1'd0))) begin
        or_ln264_reg_703 <= or_ln264_fu_477_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op113_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Col_Buffer_i_blk_n = Col_Buffer_empty_n;
    end else begin
        Col_Buffer_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op111_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Col_Buffer_o_blk_n = Col_Buffer_full_n;
    end else begin
        Col_Buffer_o_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op113_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Col_Buffer_read = 1'b1;
    end else begin
        Col_Buffer_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op111_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Col_Buffer_write = 1'b1;
    end else begin
        Col_Buffer_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_14_fu_277_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op116_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op114_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (icmp_ln1057_19_reg_699 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        c_ifmap_col_op_st_blk_n = c_ifmap_col_op_st_full_n;
    end else begin
        c_ifmap_col_op_st_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if ((ap_predicate_op116_write_state3 == 1'b1)) begin
            c_ifmap_col_op_st_din = 32'd0;
        end else if ((ap_predicate_op114_write_state3 == 1'b1)) begin
            c_ifmap_col_op_st_din = Col_Buffer_dout;
        end else if ((icmp_ln1057_19_reg_699 == 1'd0)) begin
            c_ifmap_col_op_st_din = c_ifmap_patch_st_dout;
        end else begin
            c_ifmap_col_op_st_din = 'bx;
        end
    end else begin
        c_ifmap_col_op_st_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op116_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op114_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1057_19_reg_699 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        c_ifmap_col_op_st_write = 1'b1;
    end else begin
        c_ifmap_col_op_st_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln1057_19_reg_699 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        c_ifmap_patch_st_blk_n = c_ifmap_patch_st_empty_n;
    end else begin
        c_ifmap_patch_st_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1057_19_reg_699 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        c_ifmap_patch_st_read = 1'b1;
    end else begin
        c_ifmap_patch_st_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Col_Buffer_din = c_ifmap_patch_st_dout;

assign add_ln1057_3_fu_282_p2 = (indvar_flatten71_fu_120 + 48'd1);

assign add_ln1057_4_fu_524_p2 = (indvar_flatten11_fu_112 + 24'd1);

assign add_ln1057_5_fu_538_p2 = (indvar_flatten37_fu_116 + 32'd1);

assign add_ln1057_fu_498_p2 = (indvar_flatten_fu_104 + 16'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_predicate_op116_write_state3 == 1'b1) & (c_ifmap_col_op_st_full_n == 1'b0)) | ((ap_predicate_op114_write_state3 == 1'b1) & (c_ifmap_col_op_st_full_n == 1'b0)) | ((ap_predicate_op113_read_state3 == 1'b1) & (1'b0 == Col_Buffer_empty_n)) | ((ap_predicate_op111_write_state3 == 1'b1) & (1'b0 == Col_Buffer_full_n)) | ((c_ifmap_col_op_st_full_n == 1'b0) & (icmp_ln1057_19_reg_699 == 1'd0)) | ((icmp_ln1057_19_reg_699 == 1'd0) & (c_ifmap_patch_st_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_predicate_op116_write_state3 == 1'b1) & (c_ifmap_col_op_st_full_n == 1'b0)) | ((ap_predicate_op114_write_state3 == 1'b1) & (c_ifmap_col_op_st_full_n == 1'b0)) | ((ap_predicate_op113_read_state3 == 1'b1) & (1'b0 == Col_Buffer_empty_n)) | ((ap_predicate_op111_write_state3 == 1'b1) & (1'b0 == Col_Buffer_full_n)) | ((c_ifmap_col_op_st_full_n == 1'b0) & (icmp_ln1057_19_reg_699 == 1'd0)) | ((icmp_ln1057_19_reg_699 == 1'd0) & (c_ifmap_patch_st_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_predicate_op116_write_state3 == 1'b1) & (c_ifmap_col_op_st_full_n == 1'b0)) | ((ap_predicate_op114_write_state3 == 1'b1) & (c_ifmap_col_op_st_full_n == 1'b0)) | ((ap_predicate_op113_read_state3 == 1'b1) & (1'b0 == Col_Buffer_empty_n)) | ((ap_predicate_op111_write_state3 == 1'b1) & (1'b0 == Col_Buffer_full_n)) | ((c_ifmap_col_op_st_full_n == 1'b0) & (icmp_ln1057_19_reg_699 == 1'd0)) | ((icmp_ln1057_19_reg_699 == 1'd0) & (c_ifmap_patch_st_empty_n == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((ap_predicate_op116_write_state3 == 1'b1) & (c_ifmap_col_op_st_full_n == 1'b0)) | ((ap_predicate_op114_write_state3 == 1'b1) & (c_ifmap_col_op_st_full_n == 1'b0)) | ((ap_predicate_op113_read_state3 == 1'b1) & (1'b0 == Col_Buffer_empty_n)) | ((ap_predicate_op111_write_state3 == 1'b1) & (1'b0 == Col_Buffer_full_n)) | ((c_ifmap_col_op_st_full_n == 1'b0) & (icmp_ln1057_19_reg_699 == 1'd0)) | ((icmp_ln1057_19_reg_699 == 1'd0) & (c_ifmap_patch_st_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

always @ (*) begin
    ap_predicate_op111_write_state3 = ((or_ln264_reg_703 == 1'd0) & (icmp_ln1057_19_reg_699 == 1'd0));
end

always @ (*) begin
    ap_predicate_op113_read_state3 = ((select_ln235_8_reg_695 == 1'd0) & (icmp_ln1057_19_reg_699 == 1'd1));
end

always @ (*) begin
    ap_predicate_op114_write_state3 = ((select_ln235_8_reg_695 == 1'd0) & (icmp_ln1057_19_reg_699 == 1'd1));
end

always @ (*) begin
    ap_predicate_op116_write_state3 = ((select_ln235_8_reg_695 == 1'd1) & (icmp_ln1057_19_reg_699 == 1'd1));
end

assign cmp_fu_262_p2 = ((pnx_fu_108 == 8'd0) ? 1'b1 : 1'b0);

assign cmp_i_i_fu_272_p2 = ((pnx_cast_fu_268_p1 == sub_i_i) ? 1'b1 : 1'b0);

assign cmp_i_i_mid1_fu_419_p2 = ((pnx_cast_mid1_fu_415_p1 == sub_i_i) ? 1'b1 : 1'b0);

assign cmp_mid1_fu_401_p2 = ((pnx_8_fu_395_p2 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln1057_14_fu_277_p2 = ((indvar_flatten71_fu_120 == bound42) ? 1'b1 : 1'b0);

assign icmp_ln1057_15_fu_300_p2 = ((indvar_flatten37_fu_116 == bound16) ? 1'b1 : 1'b0);

assign icmp_ln1057_16_fu_318_p2 = ((x_fu_100 == trunc_ln) ? 1'b1 : 1'b0);

assign icmp_ln1057_17_fu_330_p2 = ((indvar_flatten_fu_104 == bound) ? 1'b1 : 1'b0);

assign icmp_ln1057_18_fu_342_p2 = ((indvar_flatten11_fu_112 == bound4) ? 1'b1 : 1'b0);

assign icmp_ln1057_19_fu_467_p2 = ((select_ln235_11_fu_459_p3 < trunc_ln40) ? 1'b1 : 1'b0);

assign icmp_ln264_fu_472_p2 = ((select_ln235_11_fu_459_p3 < p_cast1) ? 1'b1 : 1'b0);

assign or_ln1057_1_fu_510_p2 = (or_ln1057_fu_504_p2 | icmp_ln1057_15_fu_300_p2);

assign or_ln1057_fu_504_p2 = (select_ln235_7_fu_388_p3 | select_ln235_3_fu_347_p3);

assign or_ln235_1_fu_354_p2 = (select_ln235_3_fu_347_p3 | icmp_ln1057_15_fu_300_p2);

assign or_ln235_2_fu_368_p2 = (select_ln235_3_fu_347_p3 | or_ln235_fu_305_p2);

assign or_ln235_3_fu_447_p2 = (select_ln235_7_fu_388_p3 | select_ln235_10_fu_432_p3);

assign or_ln235_4_fu_453_p2 = (or_ln235_3_fu_447_p2 | or_ln235_1_fu_354_p2);

assign or_ln235_fu_305_p2 = (icmp_ln1057_15_fu_300_p2 | cmp_fu_262_p2);

assign or_ln264_fu_477_p2 = (select_ln235_9_fu_424_p3 | icmp_ln264_fu_472_p2);

assign pnx_8_fu_395_p2 = (select_ln235_4_fu_360_p3 + 8'd1);

assign pnx_cast_fu_268_p1 = pnx_fu_108;

assign pnx_cast_mid1_fu_415_p1 = pnx_8_fu_395_p2;

assign select_ln1057_10_fu_544_p3 = ((icmp_ln1057_15_fu_300_p2[0:0] == 1'b1) ? 32'd1 : add_ln1057_5_fu_538_p2);

assign select_ln1057_8_fu_516_p3 = ((or_ln1057_1_fu_510_p2[0:0] == 1'b1) ? 16'd1 : add_ln1057_fu_498_p2);

assign select_ln1057_9_fu_530_p3 = ((or_ln235_1_fu_354_p2[0:0] == 1'b1) ? 24'd1 : add_ln1057_4_fu_524_p2);

assign select_ln1057_fu_439_p3 = ((select_ln235_7_fu_388_p3[0:0] == 1'b1) ? pnx_8_fu_395_p2 : select_ln235_4_fu_360_p3);

assign select_ln235_10_fu_432_p3 = ((select_ln235_7_fu_388_p3[0:0] == 1'b1) ? icmp_ln1057 : select_ln235_6_fu_381_p3);

assign select_ln235_11_fu_459_p3 = ((or_ln235_4_fu_453_p2[0:0] == 1'b1) ? 8'd0 : x_fu_100);

assign select_ln235_1_fu_323_p3 = ((icmp_ln1057_15_fu_300_p2[0:0] == 1'b1) ? icmp_ln1057 : icmp_ln1057_16_fu_318_p2);

assign select_ln235_2_fu_335_p3 = ((icmp_ln1057_15_fu_300_p2[0:0] == 1'b1) ? icmp_ln1057_21 : icmp_ln1057_17_fu_330_p2);

assign select_ln235_3_fu_347_p3 = ((icmp_ln1057_15_fu_300_p2[0:0] == 1'b1) ? icmp_ln1057_22 : icmp_ln1057_18_fu_342_p2);

assign select_ln235_4_fu_360_p3 = ((or_ln235_1_fu_354_p2[0:0] == 1'b1) ? 8'd0 : pnx_fu_108);

assign select_ln235_5_fu_374_p3 = ((select_ln235_3_fu_347_p3[0:0] == 1'b1) ? cmp_i_i_mid157 : select_ln235_fu_311_p3);

assign select_ln235_6_fu_381_p3 = ((select_ln235_3_fu_347_p3[0:0] == 1'b1) ? icmp_ln1057 : select_ln235_1_fu_323_p3);

assign select_ln235_7_fu_388_p3 = ((select_ln235_3_fu_347_p3[0:0] == 1'b1) ? icmp_ln1057_21 : select_ln235_2_fu_335_p3);

assign select_ln235_8_fu_407_p3 = ((select_ln235_7_fu_388_p3[0:0] == 1'b1) ? cmp_mid1_fu_401_p2 : or_ln235_2_fu_368_p2);

assign select_ln235_9_fu_424_p3 = ((select_ln235_7_fu_388_p3[0:0] == 1'b1) ? cmp_i_i_mid1_fu_419_p2 : select_ln235_5_fu_374_p3);

assign select_ln235_fu_311_p3 = ((icmp_ln1057_15_fu_300_p2[0:0] == 1'b1) ? cmp_i_i_mid157 : cmp_i_i_fu_272_p2);

assign x_14_fu_492_p2 = (select_ln235_11_fu_459_p3 + 8'd1);

endmodule //fwd_fft_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_237_1_VITIS_LOOP_243_3_VITIS_LOOP_246_4_VITIS_LOOP_249_5
