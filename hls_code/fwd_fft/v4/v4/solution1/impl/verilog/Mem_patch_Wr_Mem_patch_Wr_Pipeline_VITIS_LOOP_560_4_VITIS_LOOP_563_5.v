// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Mem_patch_Wr_Mem_patch_Wr_Pipeline_VITIS_LOOP_560_4_VITIS_LOOP_563_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        c_fft_col_op_st_V_dout,
        c_fft_col_op_st_V_empty_n,
        c_fft_col_op_st_V_read,
        p_partselect2,
        bound,
        ifmap_CF_M_real_address0,
        ifmap_CF_M_real_ce0,
        ifmap_CF_M_real_we0,
        ifmap_CF_M_real_d0,
        ifmap_CF_M_imag_address0,
        ifmap_CF_M_imag_ce0,
        ifmap_CF_M_imag_we0,
        ifmap_CF_M_imag_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] c_fft_col_op_st_V_dout;
input   c_fft_col_op_st_V_empty_n;
output   c_fft_col_op_st_V_read;
input  [7:0] p_partselect2;
input  [15:0] bound;
output  [5:0] ifmap_CF_M_real_address0;
output   ifmap_CF_M_real_ce0;
output  [127:0] ifmap_CF_M_real_we0;
output  [1023:0] ifmap_CF_M_real_d0;
output  [5:0] ifmap_CF_M_imag_address0;
output   ifmap_CF_M_imag_ce0;
output  [127:0] ifmap_CF_M_imag_we0;
output  [1023:0] ifmap_CF_M_imag_d0;

reg ap_idle;
reg c_fft_col_op_st_V_read;
reg ifmap_CF_M_real_ce0;
reg[127:0] ifmap_CF_M_real_we0;
reg ifmap_CF_M_imag_ce0;
reg[127:0] ifmap_CF_M_imag_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1057_fu_175_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    c_fft_col_op_st_V_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [6:0] select_ln546_fu_190_p3;
reg   [6:0] select_ln546_reg_545;
reg   [6:0] select_ln546_reg_545_pp0_iter1_reg;
wire   [7:0] select_ln546_1_fu_204_p3;
reg   [7:0] select_ln546_1_reg_550;
reg   [7:0] select_ln546_1_reg_550_pp0_iter1_reg;
wire   [6:0] trunc_ln546_fu_212_p1;
reg   [6:0] trunc_ln546_reg_556;
wire   [6:0] trunc_ln546_1_fu_216_p1;
reg   [6:0] trunc_ln546_1_reg_561;
wire   [0:0] icmp_ln145_fu_268_p2;
reg   [0:0] icmp_ln145_reg_566;
wire   [1023:0] shl_ln145_fu_337_p2;
reg   [1023:0] shl_ln145_reg_571;
wire   [1023:0] and_ln145_fu_355_p2;
reg   [1023:0] and_ln145_reg_577;
wire   [0:0] icmp_ln145_1_fu_361_p2;
reg   [0:0] icmp_ln145_1_reg_582;
wire   [1023:0] shl_ln145_3_fu_430_p2;
reg   [1023:0] shl_ln145_3_reg_587;
wire   [1023:0] and_ln145_2_fu_448_p2;
reg   [1023:0] and_ln145_2_reg_593;
wire   [63:0] y_1_cast2_fu_454_p1;
reg   [6:0] y_fu_90;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_y_1;
wire   [6:0] add_ln563_fu_220_p2;
reg   [7:0] x_fu_94;
reg   [7:0] ap_sig_allocacmp_x_load;
reg   [15:0] indvar_flatten_fu_98;
reg   [15:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [15:0] add_ln1057_fu_181_p2;
wire   [127:0] shl_ln145_2_fu_491_p2;
wire   [7:0] y_1_cast_fu_165_p1;
wire   [0:0] icmp_ln1057_1_fu_169_p2;
wire   [7:0] add_ln560_fu_198_p2;
wire   [11:0] shl_ln145_mid2_fu_241_p3;
wire   [11:0] or_ln546_fu_248_p2;
wire   [15:0] trunc_ln145_fu_254_p1;
wire   [10:0] tmp_fu_274_p3;
wire   [10:0] trunc_ln145_2_fu_281_p1;
wire   [10:0] sub_ln145_fu_289_p2;
wire   [10:0] select_ln145_fu_295_p3;
wire   [10:0] select_ln145_2_fu_311_p3;
wire   [10:0] select_ln145_1_fu_303_p3;
wire   [10:0] sub_ln145_1_fu_319_p2;
wire   [1023:0] zext_ln145_fu_285_p1;
wire   [1023:0] zext_ln145_1_fu_325_p1;
wire   [1023:0] zext_ln145_2_fu_329_p1;
wire   [1023:0] zext_ln145_3_fu_333_p1;
wire   [1023:0] shl_ln145_1_fu_343_p2;
wire   [1023:0] lshr_ln145_fu_349_p2;
wire   [15:0] trunc_ln145_1_fu_258_p4;
wire   [10:0] tmp_20_fu_367_p3;
wire   [10:0] trunc_ln145_3_fu_374_p1;
wire   [10:0] sub_ln145_2_fu_382_p2;
wire   [10:0] select_ln145_4_fu_388_p3;
wire   [10:0] select_ln145_6_fu_404_p3;
wire   [10:0] select_ln145_5_fu_396_p3;
wire   [10:0] sub_ln145_3_fu_412_p2;
wire   [1023:0] zext_ln145_5_fu_378_p1;
wire   [1023:0] zext_ln145_6_fu_418_p1;
wire   [1023:0] zext_ln145_7_fu_422_p1;
wire   [1023:0] zext_ln145_8_fu_426_p1;
wire   [1023:0] shl_ln145_4_fu_436_p2;
wire   [1023:0] lshr_ln145_1_fu_442_p2;
reg   [1023:0] tmp_19_fu_459_p4;
wire   [1023:0] select_ln145_3_fu_468_p3;
wire   [8:0] udiv_fu_480_p3;
wire   [127:0] zext_ln145_4_fu_487_p1;
reg   [1023:0] tmp_21_fu_499_p4;
wire   [1023:0] select_ln145_7_fu_508_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Mem_patch_Wr_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1057_fu_175_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_98 <= add_ln1057_fu_181_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_98 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1057_fu_175_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            x_fu_94 <= select_ln546_1_fu_204_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            x_fu_94 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1057_fu_175_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            y_fu_90 <= add_ln563_fu_220_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            y_fu_90 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln145_2_reg_593 <= and_ln145_2_fu_448_p2;
        and_ln145_reg_577 <= and_ln145_fu_355_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln145_1_reg_582 <= icmp_ln145_1_fu_361_p2;
        icmp_ln145_reg_566 <= icmp_ln145_fu_268_p2;
        select_ln546_1_reg_550_pp0_iter1_reg <= select_ln546_1_reg_550;
        select_ln546_reg_545_pp0_iter1_reg <= select_ln546_reg_545;
        shl_ln145_3_reg_587 <= shl_ln145_3_fu_430_p2;
        shl_ln145_reg_571 <= shl_ln145_fu_337_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_fu_175_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln546_1_reg_550 <= select_ln546_1_fu_204_p3;
        select_ln546_reg_545 <= select_ln546_fu_190_p3;
        trunc_ln546_1_reg_561 <= trunc_ln546_1_fu_216_p1;
        trunc_ln546_reg_556 <= trunc_ln546_fu_212_p1;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_175_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_x_load = 8'd0;
    end else begin
        ap_sig_allocacmp_x_load = x_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_y_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_y_1 = y_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_fft_col_op_st_V_blk_n = c_fft_col_op_st_V_empty_n;
    end else begin
        c_fft_col_op_st_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_fft_col_op_st_V_read = 1'b1;
    end else begin
        c_fft_col_op_st_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ifmap_CF_M_imag_ce0 = 1'b1;
    end else begin
        ifmap_CF_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ifmap_CF_M_imag_we0 = shl_ln145_2_fu_491_p2;
    end else begin
        ifmap_CF_M_imag_we0 = 128'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ifmap_CF_M_real_ce0 = 1'b1;
    end else begin
        ifmap_CF_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ifmap_CF_M_real_we0 = shl_ln145_2_fu_491_p2;
    end else begin
        ifmap_CF_M_real_we0 = 128'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1057_fu_181_p2 = (ap_sig_allocacmp_indvar_flatten_load + 16'd1);

assign add_ln560_fu_198_p2 = (ap_sig_allocacmp_x_load + 8'd1);

assign add_ln563_fu_220_p2 = (select_ln546_fu_190_p3 + 7'd1);

assign and_ln145_2_fu_448_p2 = (shl_ln145_4_fu_436_p2 & lshr_ln145_1_fu_442_p2);

assign and_ln145_fu_355_p2 = (shl_ln145_1_fu_343_p2 & lshr_ln145_fu_349_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((c_fft_col_op_st_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((c_fft_col_op_st_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (c_fft_col_op_st_V_empty_n == 1'b0);
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln1057_1_fu_169_p2 = ((y_1_cast_fu_165_p1 == p_partselect2) ? 1'b1 : 1'b0);

assign icmp_ln1057_fu_175_p2 = ((ap_sig_allocacmp_indvar_flatten_load == bound) ? 1'b1 : 1'b0);

assign icmp_ln145_1_fu_361_p2 = ((shl_ln145_mid2_fu_241_p3 > or_ln546_fu_248_p2) ? 1'b1 : 1'b0);

assign icmp_ln145_fu_268_p2 = ((shl_ln145_mid2_fu_241_p3 > or_ln546_fu_248_p2) ? 1'b1 : 1'b0);

assign ifmap_CF_M_imag_address0 = y_1_cast2_fu_454_p1;

assign ifmap_CF_M_imag_d0 = (select_ln145_7_fu_508_p3 & and_ln145_2_reg_593);

assign ifmap_CF_M_real_address0 = y_1_cast2_fu_454_p1;

assign ifmap_CF_M_real_d0 = (select_ln145_3_fu_468_p3 & and_ln145_reg_577);

assign lshr_ln145_1_fu_442_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 >> zext_ln145_8_fu_426_p1;

assign lshr_ln145_fu_349_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 >> zext_ln145_3_fu_333_p1;

assign or_ln546_fu_248_p2 = (shl_ln145_mid2_fu_241_p3 | 12'd15);

assign select_ln145_1_fu_303_p3 = ((icmp_ln145_fu_268_p2[0:0] == 1'b1) ? trunc_ln145_2_fu_281_p1 : tmp_fu_274_p3);

assign select_ln145_2_fu_311_p3 = ((icmp_ln145_fu_268_p2[0:0] == 1'b1) ? sub_ln145_fu_289_p2 : tmp_fu_274_p3);

assign select_ln145_3_fu_468_p3 = ((icmp_ln145_reg_566[0:0] == 1'b1) ? tmp_19_fu_459_p4 : shl_ln145_reg_571);

assign select_ln145_4_fu_388_p3 = ((icmp_ln145_1_fu_361_p2[0:0] == 1'b1) ? tmp_20_fu_367_p3 : trunc_ln145_3_fu_374_p1);

assign select_ln145_5_fu_396_p3 = ((icmp_ln145_1_fu_361_p2[0:0] == 1'b1) ? trunc_ln145_3_fu_374_p1 : tmp_20_fu_367_p3);

assign select_ln145_6_fu_404_p3 = ((icmp_ln145_1_fu_361_p2[0:0] == 1'b1) ? sub_ln145_2_fu_382_p2 : tmp_20_fu_367_p3);

assign select_ln145_7_fu_508_p3 = ((icmp_ln145_1_reg_582[0:0] == 1'b1) ? tmp_21_fu_499_p4 : shl_ln145_3_reg_587);

assign select_ln145_fu_295_p3 = ((icmp_ln145_fu_268_p2[0:0] == 1'b1) ? tmp_fu_274_p3 : trunc_ln145_2_fu_281_p1);

assign select_ln546_1_fu_204_p3 = ((icmp_ln1057_1_fu_169_p2[0:0] == 1'b1) ? add_ln560_fu_198_p2 : ap_sig_allocacmp_x_load);

assign select_ln546_fu_190_p3 = ((icmp_ln1057_1_fu_169_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_y_1);

assign shl_ln145_1_fu_343_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 << zext_ln145_2_fu_329_p1;

assign shl_ln145_2_fu_491_p2 = 128'd3 << zext_ln145_4_fu_487_p1;

assign shl_ln145_3_fu_430_p2 = zext_ln145_5_fu_378_p1 << zext_ln145_6_fu_418_p1;

assign shl_ln145_4_fu_436_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 << zext_ln145_7_fu_422_p1;

assign shl_ln145_fu_337_p2 = zext_ln145_fu_285_p1 << zext_ln145_1_fu_325_p1;

assign shl_ln145_mid2_fu_241_p3 = {{select_ln546_1_reg_550}, {4'd0}};

assign sub_ln145_1_fu_319_p2 = (11'd1023 - select_ln145_fu_295_p3);

assign sub_ln145_2_fu_382_p2 = (11'd1023 - tmp_20_fu_367_p3);

assign sub_ln145_3_fu_412_p2 = (11'd1023 - select_ln145_4_fu_388_p3);

assign sub_ln145_fu_289_p2 = (11'd1023 - tmp_fu_274_p3);

integer ap_tvar_int_0;

always @ (shl_ln145_reg_571) begin
    for (ap_tvar_int_0 = 1024 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 1023 - 0) begin
            tmp_19_fu_459_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_19_fu_459_p4[ap_tvar_int_0] = shl_ln145_reg_571[1023 - ap_tvar_int_0];
        end
    end
end

assign tmp_20_fu_367_p3 = {{trunc_ln546_reg_556}, {4'd0}};

integer ap_tvar_int_1;

always @ (shl_ln145_3_reg_587) begin
    for (ap_tvar_int_1 = 1024 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 1023 - 0) begin
            tmp_21_fu_499_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_21_fu_499_p4[ap_tvar_int_1] = shl_ln145_3_reg_587[1023 - ap_tvar_int_1];
        end
    end
end

assign tmp_fu_274_p3 = {{trunc_ln546_1_reg_561}, {4'd0}};

assign trunc_ln145_1_fu_258_p4 = {{c_fft_col_op_st_V_dout[31:16]}};

assign trunc_ln145_2_fu_281_p1 = or_ln546_fu_248_p2[10:0];

assign trunc_ln145_3_fu_374_p1 = or_ln546_fu_248_p2[10:0];

assign trunc_ln145_fu_254_p1 = c_fft_col_op_st_V_dout[15:0];

assign trunc_ln546_1_fu_216_p1 = select_ln546_1_fu_204_p3[6:0];

assign trunc_ln546_fu_212_p1 = select_ln546_1_fu_204_p3[6:0];

assign udiv_fu_480_p3 = {{select_ln546_1_reg_550_pp0_iter1_reg}, {1'd0}};

assign y_1_cast2_fu_454_p1 = select_ln546_reg_545_pp0_iter1_reg;

assign y_1_cast_fu_165_p1 = ap_sig_allocacmp_y_1;

assign zext_ln145_1_fu_325_p1 = select_ln145_2_fu_311_p3;

assign zext_ln145_2_fu_329_p1 = select_ln145_1_fu_303_p3;

assign zext_ln145_3_fu_333_p1 = sub_ln145_1_fu_319_p2;

assign zext_ln145_4_fu_487_p1 = udiv_fu_480_p3;

assign zext_ln145_5_fu_378_p1 = trunc_ln145_1_fu_258_p4;

assign zext_ln145_6_fu_418_p1 = select_ln145_6_fu_404_p3;

assign zext_ln145_7_fu_422_p1 = select_ln145_5_fu_396_p3;

assign zext_ln145_8_fu_426_p1 = sub_ln145_3_fu_412_p2;

assign zext_ln145_fu_285_p1 = trunc_ln145_fu_254_p1;

endmodule //Mem_patch_Wr_Mem_patch_Wr_Pipeline_VITIS_LOOP_560_4_VITIS_LOOP_563_5
