// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Rd_Mem_VITIS_LOOP_305_5_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ctrl1_reg,
        layer2_reg,
        pny_2,
        burst_buffer2_address0,
        burst_buffer2_ce0,
        burst_buffer2_we0,
        burst_buffer2_d0,
        in_r
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state7 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] ctrl1_reg;
input  [31:0] layer2_reg;
input  [7:0] pny_2;
output  [10:0] burst_buffer2_address0;
output   burst_buffer2_ce0;
output   burst_buffer2_we0;
output  [127:0] burst_buffer2_d0;
input  [127:0] in_r;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg burst_buffer2_ce0;
reg burst_buffer2_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] p_cast_fu_121_p4;
reg   [7:0] p_cast_reg_359;
wire   [15:0] tmp_fu_131_p4;
reg   [15:0] tmp_reg_364;
wire   [63:0] zext_ln290_fu_184_p1;
reg   [63:0] zext_ln290_reg_381;
wire    ap_CS_fsm_state4;
wire   [15:0] mul_i_i116_fu_194_p2;
reg   [15:0] mul_i_i116_reg_386;
wire  signed [68:0] grp_fu_332_p2;
reg   [68:0] bound_reg_397;
wire   [0:0] cmp_i_i_fu_215_p2;
reg   [0:0] cmp_i_i_reg_402;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln1057_1_fu_240_p2;
reg   [0:0] icmp_ln1057_1_reg_410;
wire   [0:0] icmp_ln1057_fu_220_p2;
wire   [63:0] select_ln279_fu_245_p3;
reg   [63:0] select_ln279_reg_415;
wire   [5:0] trunc_ln319_fu_261_p1;
reg   [5:0] trunc_ln319_reg_420;
wire   [0:0] cmp_i_i_mid1_fu_274_p2;
reg   [0:0] cmp_i_i_mid1_reg_425;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
wire   [63:0] zext_ln319_fu_327_p1;
wire    ap_block_pp0_stage0;
wire   [0:0] select_ln279_2_fu_307_p3;
reg   [63:0] ifs_fu_72;
wire   [63:0] add_ln308_fu_279_p2;
reg    ap_block_state1;
reg   [7:0] lsy_fu_76;
wire   [7:0] select_ln279_1_fu_253_p3;
reg   [68:0] indvar_flatten_fu_80;
wire   [68:0] add_ln1057_fu_225_p2;
wire   [16:0] tmp_cast_fu_141_p1;
wire   [16:0] empty_fu_145_p2;
wire   [13:0] tmp_1_fu_151_p4;
wire   [7:0] mul_i_i116_fu_194_p0;
wire   [7:0] mul_i_i116_fu_194_p1;
wire   [15:0] lsy_1_cast_i_fu_206_p1;
wire   [15:0] add_i_i_i_fu_210_p2;
wire   [7:0] add_ln305_fu_234_p2;
wire   [15:0] lsy_1_cast_i_mid1_fu_265_p1;
wire   [15:0] add_i_i_i_mid1_fu_269_p2;
wire   [10:0] tmp_2_cast_fu_300_p3;
wire   [10:0] tmp_3_fu_312_p4;
wire   [10:0] add_ln319_fu_321_p2;
wire   [7:0] grp_fu_332_p0;
wire   [13:0] grp_fu_332_p1;
reg    grp_fu_332_ce;
wire    ap_CS_fsm_state7;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state7_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [68:0] grp_fu_332_p00;
wire   [68:0] grp_fu_332_p10;
wire   [15:0] mul_i_i116_fu_194_p00;
wire   [15:0] mul_i_i116_fu_194_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

Rd_Mem_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U12(
    .din0(mul_i_i116_fu_194_p0),
    .din1(mul_i_i116_fu_194_p1),
    .dout(mul_i_i116_fu_194_p2)
);

Rd_Mem_mul_mul_8ns_14ns_69_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 69 ))
mul_mul_8ns_14ns_69_4_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_332_p0),
    .din1(grp_fu_332_p1),
    .ce(grp_fu_332_ce),
    .dout(grp_fu_332_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ifs_fu_72 <= 64'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1057_fu_220_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ifs_fu_72 <= add_ln308_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_fu_80 <= 69'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1057_fu_220_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_fu_80 <= add_ln1057_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        lsy_fu_76 <= 8'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1057_fu_220_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lsy_fu_76 <= select_ln279_1_fu_253_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bound_reg_397 <= grp_fu_332_p2;
        mul_i_i116_reg_386 <= mul_i_i116_fu_194_p2;
        zext_ln290_reg_381[15 : 0] <= zext_ln290_fu_184_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_fu_220_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmp_i_i_mid1_reg_425 <= cmp_i_i_mid1_fu_274_p2;
        icmp_ln1057_1_reg_410 <= icmp_ln1057_1_fu_240_p2;
        select_ln279_reg_415 <= select_ln279_fu_245_p3;
        trunc_ln319_reg_420 <= trunc_ln319_fu_261_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmp_i_i_reg_402 <= cmp_i_i_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        p_cast_reg_359 <= {{ctrl1_reg[31:24]}};
        tmp_reg_364 <= {{layer2_reg[31:16]}};
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln1057_fu_220_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        burst_buffer2_ce0 = 1'b1;
    end else begin
        burst_buffer2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln279_2_fu_307_p3 == 1'd1))) begin
        burst_buffer2_we0 = 1'b1;
    end else begin
        burst_buffer2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state1) & ((ap_done_reg == 1'b1) | (ap_start == 1'b0))))) begin
        grp_fu_332_ce = 1'b0;
    end else begin
        grp_fu_332_ce = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1057_fu_220_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1057_fu_220_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_i_i_i_fu_210_p2 = (mul_i_i116_reg_386 + lsy_1_cast_i_fu_206_p1);

assign add_i_i_i_mid1_fu_269_p2 = (mul_i_i116_reg_386 + lsy_1_cast_i_mid1_fu_265_p1);

assign add_ln1057_fu_225_p2 = (indvar_flatten_fu_80 + 69'd1);

assign add_ln305_fu_234_p2 = (lsy_fu_76 + 8'd1);

assign add_ln308_fu_279_p2 = (select_ln279_fu_245_p3 + 64'd8);

assign add_ln319_fu_321_p2 = (tmp_2_cast_fu_300_p3 + tmp_3_fu_312_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign burst_buffer2_address0 = zext_ln319_fu_327_p1;

assign burst_buffer2_d0 = in_r;

assign cmp_i_i_fu_215_p2 = ((add_i_i_i_fu_210_p2 < tmp_reg_364) ? 1'b1 : 1'b0);

assign cmp_i_i_mid1_fu_274_p2 = ((add_i_i_i_mid1_fu_269_p2 < tmp_reg_364) ? 1'b1 : 1'b0);

assign empty_fu_145_p2 = (tmp_cast_fu_141_p1 + 17'd7);

assign grp_fu_332_p0 = grp_fu_332_p00;

assign grp_fu_332_p00 = p_cast_fu_121_p4;

assign grp_fu_332_p1 = grp_fu_332_p10;

assign grp_fu_332_p10 = tmp_1_fu_151_p4;

assign icmp_ln1057_1_fu_240_p2 = (($signed(ifs_fu_72) < $signed(zext_ln290_reg_381)) ? 1'b1 : 1'b0);

assign icmp_ln1057_fu_220_p2 = ((indvar_flatten_fu_80 == bound_reg_397) ? 1'b1 : 1'b0);

assign lsy_1_cast_i_fu_206_p1 = lsy_fu_76;

assign lsy_1_cast_i_mid1_fu_265_p1 = add_ln305_fu_234_p2;

assign mul_i_i116_fu_194_p0 = mul_i_i116_fu_194_p00;

assign mul_i_i116_fu_194_p00 = pny_2;

assign mul_i_i116_fu_194_p1 = mul_i_i116_fu_194_p10;

assign mul_i_i116_fu_194_p10 = p_cast_reg_359;

assign p_cast_fu_121_p4 = {{ctrl1_reg[31:24]}};

assign select_ln279_1_fu_253_p3 = ((icmp_ln1057_1_fu_240_p2[0:0] == 1'b1) ? lsy_fu_76 : add_ln305_fu_234_p2);

assign select_ln279_2_fu_307_p3 = ((icmp_ln1057_1_reg_410[0:0] == 1'b1) ? cmp_i_i_reg_402 : cmp_i_i_mid1_reg_425);

assign select_ln279_fu_245_p3 = ((icmp_ln1057_1_fu_240_p2[0:0] == 1'b1) ? ifs_fu_72 : 64'd0);

assign tmp_1_fu_151_p4 = {{empty_fu_145_p2[16:3]}};

assign tmp_2_cast_fu_300_p3 = {{trunc_ln319_reg_420}, {5'd0}};

assign tmp_3_fu_312_p4 = {{select_ln279_reg_415[13:3]}};

assign tmp_cast_fu_141_p1 = tmp_fu_131_p4;

assign tmp_fu_131_p4 = {{layer2_reg[31:16]}};

assign trunc_ln319_fu_261_p1 = select_ln279_1_fu_253_p3[5:0];

assign zext_ln290_fu_184_p1 = tmp_reg_364;

assign zext_ln319_fu_327_p1 = add_ln319_fu_321_p2;

always @ (posedge ap_clk) begin
    zext_ln290_reg_381[63:16] <= 48'b000000000000000000000000000000000000000000000000;
end

endmodule //Rd_Mem_VITIS_LOOP_305_5_proc
