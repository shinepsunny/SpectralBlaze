// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fwd_fft_Transpose (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        c_row_op_st_dout,
        c_row_op_st_empty_n,
        c_row_op_st_read,
        c_row_op_trans_st_din,
        c_row_op_trans_st_full_n,
        c_row_op_trans_st_write,
        ctrl1_reg_dout,
        ctrl1_reg_empty_n,
        ctrl1_reg_read,
        ctrl2_reg_dout,
        ctrl2_reg_empty_n,
        ctrl2_reg_read,
        layer1_reg_dout,
        layer1_reg_empty_n,
        layer1_reg_read,
        ctrl1_reg_c17_din,
        ctrl1_reg_c17_full_n,
        ctrl1_reg_c17_write,
        ctrl2_reg_c_din,
        ctrl2_reg_c_full_n,
        ctrl2_reg_c_write,
        layer1_reg_c_din,
        layer1_reg_c_full_n,
        layer1_reg_c_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] c_row_op_st_dout;
input   c_row_op_st_empty_n;
output   c_row_op_st_read;
output  [31:0] c_row_op_trans_st_din;
input   c_row_op_trans_st_full_n;
output   c_row_op_trans_st_write;
input  [31:0] ctrl1_reg_dout;
input   ctrl1_reg_empty_n;
output   ctrl1_reg_read;
input  [31:0] ctrl2_reg_dout;
input   ctrl2_reg_empty_n;
output   ctrl2_reg_read;
input  [31:0] layer1_reg_dout;
input   layer1_reg_empty_n;
output   layer1_reg_read;
output  [31:0] ctrl1_reg_c17_din;
input   ctrl1_reg_c17_full_n;
output   ctrl1_reg_c17_write;
output  [31:0] ctrl2_reg_c_din;
input   ctrl2_reg_c_full_n;
output   ctrl2_reg_c_write;
output  [31:0] layer1_reg_c_din;
input   layer1_reg_c_full_n;
output   layer1_reg_c_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg c_row_op_st_read;
reg c_row_op_trans_st_write;
reg ctrl1_reg_read;
reg ctrl2_reg_read;
reg layer1_reg_read;
reg ctrl1_reg_c17_write;
reg ctrl2_reg_c_write;
reg layer1_reg_c_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    ctrl1_reg_blk_n;
reg    ctrl2_reg_blk_n;
reg    layer1_reg_blk_n;
reg    ctrl1_reg_c17_blk_n;
reg    ctrl2_reg_c_blk_n;
reg    layer1_reg_c_blk_n;
wire   [7:0] empty_fu_93_p1;
reg   [7:0] empty_reg_108;
wire   [15:0] empty_153_fu_98_p1;
reg   [15:0] empty_153_reg_113;
wire   [7:0] empty_154_fu_103_p1;
reg   [7:0] empty_154_reg_118;
wire    grp_dataflow_parent_loop_proc28_fu_82_c_row_op_st_read;
wire   [31:0] grp_dataflow_parent_loop_proc28_fu_82_c_row_op_trans_st_din;
wire    grp_dataflow_parent_loop_proc28_fu_82_c_row_op_trans_st_write;
wire    grp_dataflow_parent_loop_proc28_fu_82_ap_start;
wire    grp_dataflow_parent_loop_proc28_fu_82_ap_done;
wire    grp_dataflow_parent_loop_proc28_fu_82_ap_ready;
wire    grp_dataflow_parent_loop_proc28_fu_82_ap_idle;
reg    grp_dataflow_parent_loop_proc28_fu_82_ap_continue;
reg    grp_dataflow_parent_loop_proc28_fu_82_ap_start_reg;
reg    ap_block_state1_ignore_call17;
wire    ap_CS_fsm_state2;
wire    ap_sync_grp_dataflow_parent_loop_proc28_fu_82_ap_ready;
wire    ap_sync_grp_dataflow_parent_loop_proc28_fu_82_ap_done;
reg    ap_block_state2_on_subcall_done;
reg    ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_ready;
reg    ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_done;
reg    ap_block_state1;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_dataflow_parent_loop_proc28_fu_82_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_ready = 1'b0;
#0 ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_done = 1'b0;
end

fwd_fft_dataflow_parent_loop_proc28 grp_dataflow_parent_loop_proc28_fu_82(
    .layer1_reg_load_cast(empty_153_reg_113),
    .ctrl2_reg_load_cast(empty_154_reg_118),
    .c_row_op_st_dout(c_row_op_st_dout),
    .c_row_op_st_empty_n(c_row_op_st_empty_n),
    .c_row_op_st_read(grp_dataflow_parent_loop_proc28_fu_82_c_row_op_st_read),
    .p_read(empty_reg_108),
    .c_row_op_trans_st_din(grp_dataflow_parent_loop_proc28_fu_82_c_row_op_trans_st_din),
    .c_row_op_trans_st_full_n(c_row_op_trans_st_full_n),
    .c_row_op_trans_st_write(grp_dataflow_parent_loop_proc28_fu_82_c_row_op_trans_st_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ctrl2_reg_load_cast_ap_vld(1'b1),
    .p_read_ap_vld(1'b1),
    .ap_start(grp_dataflow_parent_loop_proc28_fu_82_ap_start),
    .ap_done(grp_dataflow_parent_loop_proc28_fu_82_ap_done),
    .ap_ready(grp_dataflow_parent_loop_proc28_fu_82_ap_ready),
    .ap_idle(grp_dataflow_parent_loop_proc28_fu_82_ap_idle),
    .ap_continue(grp_dataflow_parent_loop_proc28_fu_82_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_done <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_done <= 1'b0;
        end else if ((grp_dataflow_parent_loop_proc28_fu_82_ap_done == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_ready <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_ready <= 1'b0;
        end else if ((grp_dataflow_parent_loop_proc28_fu_82_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dataflow_parent_loop_proc28_fu_82_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state2) & (ap_sync_grp_dataflow_parent_loop_proc28_fu_82_ap_ready == 1'b0)) | (~((real_start == 1'b0) | (layer1_reg_c_full_n == 1'b0) | (ctrl2_reg_c_full_n == 1'b0) | (ctrl1_reg_c17_full_n == 1'b0) | (layer1_reg_empty_n == 1'b0) | (ctrl2_reg_empty_n == 1'b0) | (ctrl1_reg_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_dataflow_parent_loop_proc28_fu_82_ap_start_reg <= 1'b1;
        end else if ((grp_dataflow_parent_loop_proc28_fu_82_ap_ready == 1'b1)) begin
            grp_dataflow_parent_loop_proc28_fu_82_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_153_reg_113 <= empty_153_fu_98_p1;
        empty_154_reg_118 <= empty_154_fu_103_p1;
        empty_reg_108 <= empty_fu_93_p1;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (layer1_reg_c_full_n == 1'b0) | (ctrl2_reg_c_full_n == 1'b0) | (ctrl1_reg_c17_full_n == 1'b0) | (layer1_reg_empty_n == 1'b0) | (ctrl2_reg_empty_n == 1'b0) | (ctrl1_reg_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_on_subcall_done)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_row_op_st_read = grp_dataflow_parent_loop_proc28_fu_82_c_row_op_st_read;
    end else begin
        c_row_op_st_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_row_op_trans_st_write = grp_dataflow_parent_loop_proc28_fu_82_c_row_op_trans_st_write;
    end else begin
        c_row_op_trans_st_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ctrl1_reg_blk_n = ctrl1_reg_empty_n;
    end else begin
        ctrl1_reg_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ctrl1_reg_c17_blk_n = ctrl1_reg_c17_full_n;
    end else begin
        ctrl1_reg_c17_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer1_reg_c_full_n == 1'b0) | (ctrl2_reg_c_full_n == 1'b0) | (ctrl1_reg_c17_full_n == 1'b0) | (layer1_reg_empty_n == 1'b0) | (ctrl2_reg_empty_n == 1'b0) | (ctrl1_reg_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ctrl1_reg_c17_write = 1'b1;
    end else begin
        ctrl1_reg_c17_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer1_reg_c_full_n == 1'b0) | (ctrl2_reg_c_full_n == 1'b0) | (ctrl1_reg_c17_full_n == 1'b0) | (layer1_reg_empty_n == 1'b0) | (ctrl2_reg_empty_n == 1'b0) | (ctrl1_reg_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ctrl1_reg_read = 1'b1;
    end else begin
        ctrl1_reg_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ctrl2_reg_blk_n = ctrl2_reg_empty_n;
    end else begin
        ctrl2_reg_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ctrl2_reg_c_blk_n = ctrl2_reg_c_full_n;
    end else begin
        ctrl2_reg_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer1_reg_c_full_n == 1'b0) | (ctrl2_reg_c_full_n == 1'b0) | (ctrl1_reg_c17_full_n == 1'b0) | (layer1_reg_empty_n == 1'b0) | (ctrl2_reg_empty_n == 1'b0) | (ctrl1_reg_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ctrl2_reg_c_write = 1'b1;
    end else begin
        ctrl2_reg_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer1_reg_c_full_n == 1'b0) | (ctrl2_reg_c_full_n == 1'b0) | (ctrl1_reg_c17_full_n == 1'b0) | (layer1_reg_empty_n == 1'b0) | (ctrl2_reg_empty_n == 1'b0) | (ctrl1_reg_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ctrl2_reg_read = 1'b1;
    end else begin
        ctrl2_reg_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        grp_dataflow_parent_loop_proc28_fu_82_ap_continue = 1'b1;
    end else begin
        grp_dataflow_parent_loop_proc28_fu_82_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer1_reg_blk_n = layer1_reg_empty_n;
    end else begin
        layer1_reg_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer1_reg_c_blk_n = layer1_reg_c_full_n;
    end else begin
        layer1_reg_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer1_reg_c_full_n == 1'b0) | (ctrl2_reg_c_full_n == 1'b0) | (ctrl1_reg_c17_full_n == 1'b0) | (layer1_reg_empty_n == 1'b0) | (ctrl2_reg_empty_n == 1'b0) | (ctrl1_reg_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer1_reg_c_write = 1'b1;
    end else begin
        layer1_reg_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer1_reg_c_full_n == 1'b0) | (ctrl2_reg_c_full_n == 1'b0) | (ctrl1_reg_c17_full_n == 1'b0) | (layer1_reg_empty_n == 1'b0) | (ctrl2_reg_empty_n == 1'b0) | (ctrl1_reg_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer1_reg_read = 1'b1;
    end else begin
        layer1_reg_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (layer1_reg_c_full_n == 1'b0) | (ctrl2_reg_c_full_n == 1'b0) | (ctrl1_reg_c17_full_n == 1'b0) | (layer1_reg_empty_n == 1'b0) | (ctrl2_reg_empty_n == 1'b0) | (ctrl1_reg_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (layer1_reg_c_full_n == 1'b0) | (ctrl2_reg_c_full_n == 1'b0) | (ctrl1_reg_c17_full_n == 1'b0) | (layer1_reg_empty_n == 1'b0) | (ctrl2_reg_empty_n == 1'b0) | (ctrl1_reg_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call17 = ((real_start == 1'b0) | (layer1_reg_c_full_n == 1'b0) | (ctrl2_reg_c_full_n == 1'b0) | (ctrl1_reg_c17_full_n == 1'b0) | (layer1_reg_empty_n == 1'b0) | (ctrl2_reg_empty_n == 1'b0) | (ctrl1_reg_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((ap_sync_grp_dataflow_parent_loop_proc28_fu_82_ap_ready & ap_sync_grp_dataflow_parent_loop_proc28_fu_82_ap_done) == 1'b0);
end

assign ap_ready = internal_ap_ready;

assign ap_sync_grp_dataflow_parent_loop_proc28_fu_82_ap_done = (grp_dataflow_parent_loop_proc28_fu_82_ap_done | ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_done);

assign ap_sync_grp_dataflow_parent_loop_proc28_fu_82_ap_ready = (grp_dataflow_parent_loop_proc28_fu_82_ap_ready | ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_82_ap_ready);

assign c_row_op_trans_st_din = grp_dataflow_parent_loop_proc28_fu_82_c_row_op_trans_st_din;

assign ctrl1_reg_c17_din = ctrl1_reg_dout;

assign ctrl2_reg_c_din = ctrl2_reg_dout;

assign empty_153_fu_98_p1 = layer1_reg_dout[15:0];

assign empty_154_fu_103_p1 = ctrl2_reg_dout[7:0];

assign empty_fu_93_p1 = ctrl1_reg_dout[7:0];

assign grp_dataflow_parent_loop_proc28_fu_82_ap_start = grp_dataflow_parent_loop_proc28_fu_82_ap_start_reg;

assign layer1_reg_c_din = layer1_reg_dout;

assign start_out = real_start;

endmodule //fwd_fft_Transpose
