// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FFT_R_stream_2_buf (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_stream_V_dout,
        in_stream_V_empty_n,
        in_stream_V_read,
        input_buffer_address0,
        input_buffer_ce0,
        input_buffer_we0,
        input_buffer_d0,
        ctrl1_reg,
        ap_return
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] in_stream_V_dout;
input   in_stream_V_empty_n;
output   in_stream_V_read;
output  [5:0] input_buffer_address0;
output   input_buffer_ce0;
output   input_buffer_we0;
output  [31:0] input_buffer_d0;
input  [31:0] ctrl1_reg;
output  [31:0] ap_return;

reg ap_idle;
reg in_stream_V_read;
reg input_buffer_ce0;
reg input_buffer_we0;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln1057_fu_92_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in_stream_V_blk_n;
wire   [63:0] i_cast_fu_104_p1;
reg   [7:0] i_fu_50;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_i_1;
wire   [7:0] add_ln52_fu_98_p2;
wire   [7:0] empty_fu_80_p1;
reg   [31:0] ap_return_preg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
reg    ap_condition_107;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
#0 ap_return_preg = 32'd0;
end

FFT_R_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((icmp_ln1057_fu_92_p2 == 1'd0) & (in_stream_V_empty_n == 1'b0))) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((icmp_ln1057_fu_92_p2 == 1'd0) & (in_stream_V_empty_n == 1'b0))) & (icmp_ln1057_fu_92_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_preg <= ctrl1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_107)) begin
        if ((icmp_ln1057_fu_92_p2 == 1'd0)) begin
            i_fu_50 <= add_ln52_fu_98_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_50 <= 8'd0;
        end
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((icmp_ln1057_fu_92_p2 == 1'd0) & (in_stream_V_empty_n == 1'b0)))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((icmp_ln1057_fu_92_p2 == 1'd0) & (in_stream_V_empty_n == 1'b0))) & (icmp_ln1057_fu_92_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((icmp_ln1057_fu_92_p2 == 1'd0) & (in_stream_V_empty_n == 1'b0))) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((icmp_ln1057_fu_92_p2 == 1'd0) & (in_stream_V_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((icmp_ln1057_fu_92_p2 == 1'd0) & (in_stream_V_empty_n == 1'b0))) & (icmp_ln1057_fu_92_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return = ctrl1_reg;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_1 = 8'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_50;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0)) & (icmp_ln1057_fu_92_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        in_stream_V_blk_n = in_stream_V_empty_n;
    end else begin
        in_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((icmp_ln1057_fu_92_p2 == 1'd0) & (in_stream_V_empty_n == 1'b0))) & (icmp_ln1057_fu_92_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        in_stream_V_read = 1'b1;
    end else begin
        in_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((icmp_ln1057_fu_92_p2 == 1'd0) & (in_stream_V_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        input_buffer_ce0 = 1'b1;
    end else begin
        input_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((icmp_ln1057_fu_92_p2 == 1'd0) & (in_stream_V_empty_n == 1'b0))) & (icmp_ln1057_fu_92_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        input_buffer_we0 = 1'b1;
    end else begin
        input_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_fu_98_p2 = (ap_sig_allocacmp_i_1 + 8'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((icmp_ln1057_fu_92_p2 == 1'd0) & (in_stream_V_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_107 = (~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((icmp_ln1057_fu_92_p2 == 1'd0) & (in_stream_V_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_fu_80_p1 = ctrl1_reg[7:0];

assign i_cast_fu_104_p1 = ap_sig_allocacmp_i_1;

assign icmp_ln1057_fu_92_p2 = ((ap_sig_allocacmp_i_1 == empty_fu_80_p1) ? 1'b1 : 1'b0);

assign input_buffer_address0 = i_cast_fu_104_p1;

assign input_buffer_d0 = in_stream_V_dout;

endmodule //FFT_R_stream_2_buf
