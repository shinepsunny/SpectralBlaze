// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Mem_patch_Wr_VITIS_LOOP_561_4_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ctrl1_reg,
        ifmap_CF_M_real1_address0,
        ifmap_CF_M_real1_ce0,
        ifmap_CF_M_real1_we0,
        ifmap_CF_M_real1_d0,
        ifmap_CF_M_imag2_address0,
        ifmap_CF_M_imag2_ce0,
        ifmap_CF_M_imag2_we0,
        ifmap_CF_M_imag2_d0,
        c_fft_col_op_st_V_dout,
        c_fft_col_op_st_V_empty_n,
        c_fft_col_op_st_V_read,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] ctrl1_reg;
output  [5:0] ifmap_CF_M_real1_address0;
output   ifmap_CF_M_real1_ce0;
output  [127:0] ifmap_CF_M_real1_we0;
output  [1023:0] ifmap_CF_M_real1_d0;
output  [5:0] ifmap_CF_M_imag2_address0;
output   ifmap_CF_M_imag2_ce0;
output  [127:0] ifmap_CF_M_imag2_we0;
output  [1023:0] ifmap_CF_M_imag2_d0;
input  [31:0] c_fft_col_op_st_V_dout;
input   c_fft_col_op_st_V_empty_n;
output   c_fft_col_op_st_V_read;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ifmap_CF_M_real1_ce0;
reg[127:0] ifmap_CF_M_real1_we0;
reg ifmap_CF_M_imag2_ce0;
reg[127:0] ifmap_CF_M_imag2_we0;
reg c_fft_col_op_st_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    c_fft_col_op_st_V_blk_n;
wire    ap_CS_fsm_state4;
reg   [0:0] icmp_ln1057_1_reg_493;
wire   [7:0] empty_fu_124_p1;
reg   [7:0] empty_reg_450;
reg   [7:0] x_2_reg_456;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln561_fu_141_p2;
reg   [7:0] add_ln561_reg_464;
wire   [6:0] trunc_ln145_fu_147_p1;
reg   [6:0] trunc_ln145_reg_469;
wire   [0:0] icmp_ln1057_fu_136_p2;
wire   [6:0] trunc_ln145_2_fu_151_p1;
reg   [6:0] trunc_ln145_2_reg_474;
wire   [11:0] shl_ln_fu_155_p3;
reg   [11:0] shl_ln_reg_479;
wire   [11:0] empty_79_fu_163_p2;
reg   [11:0] empty_79_reg_485;
wire   [0:0] icmp_ln1057_1_fu_169_p2;
wire    ap_CS_fsm_state3;
wire   [7:0] add_ln564_fu_174_p2;
reg   [7:0] add_ln564_reg_497;
wire   [63:0] zext_ln1057_fu_180_p1;
reg   [63:0] zext_ln1057_reg_502;
wire   [0:0] icmp_ln145_fu_198_p2;
reg   [0:0] icmp_ln145_reg_508;
wire   [1023:0] shl_ln145_fu_264_p2;
reg   [1023:0] shl_ln145_reg_513;
wire   [1023:0] and_ln145_fu_282_p2;
reg   [1023:0] and_ln145_reg_519;
wire   [0:0] icmp_ln145_1_fu_288_p2;
reg   [0:0] icmp_ln145_1_reg_524;
wire   [1023:0] shl_ln145_3_fu_354_p2;
reg   [1023:0] shl_ln145_3_reg_529;
wire   [1023:0] and_ln145_2_fu_372_p2;
reg   [1023:0] and_ln145_2_reg_535;
reg   [7:0] y_reg_112;
wire    ap_CS_fsm_state5;
reg   [7:0] x_fu_72;
reg    ap_block_state4;
reg    ap_block_state1;
wire   [127:0] shl_ln145_2_fu_414_p2;
wire   [15:0] trunc_ln145_3_fu_184_p1;
wire   [10:0] tmp_fu_202_p3;
wire   [10:0] trunc_ln145_4_fu_209_p1;
wire   [10:0] sub_ln145_fu_216_p2;
wire   [10:0] select_ln145_fu_222_p3;
wire   [10:0] select_ln145_2_fu_238_p3;
wire   [10:0] select_ln145_1_fu_230_p3;
wire   [10:0] sub_ln145_1_fu_246_p2;
wire   [1023:0] zext_ln145_fu_212_p1;
wire   [1023:0] zext_ln145_1_fu_252_p1;
wire   [1023:0] zext_ln145_2_fu_256_p1;
wire   [1023:0] zext_ln145_3_fu_260_p1;
wire   [1023:0] shl_ln145_1_fu_270_p2;
wire   [1023:0] lshr_ln145_fu_276_p2;
wire   [15:0] trunc_ln145_1_fu_188_p4;
wire   [10:0] tmp_23_fu_292_p3;
wire   [10:0] trunc_ln145_5_fu_299_p1;
wire   [10:0] sub_ln145_2_fu_306_p2;
wire   [10:0] select_ln145_4_fu_312_p3;
wire   [10:0] select_ln145_6_fu_328_p3;
wire   [10:0] select_ln145_5_fu_320_p3;
wire   [10:0] sub_ln145_3_fu_336_p2;
wire   [1023:0] zext_ln145_5_fu_302_p1;
wire   [1023:0] zext_ln145_6_fu_342_p1;
wire   [1023:0] zext_ln145_7_fu_346_p1;
wire   [1023:0] zext_ln145_8_fu_350_p1;
wire   [1023:0] shl_ln145_4_fu_360_p2;
wire   [1023:0] lshr_ln145_1_fu_366_p2;
reg   [1023:0] tmp_22_fu_382_p4;
wire   [1023:0] select_ln145_3_fu_391_p3;
wire   [8:0] udiv_fu_403_p3;
wire   [127:0] zext_ln145_4_fu_410_p1;
reg   [1023:0] tmp_24_fu_422_p4;
wire   [1023:0] select_ln145_7_fu_431_p3;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln1057_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        x_fu_72 <= 8'd0;
    end else if ((~((icmp_ln1057_1_reg_493 == 1'd0) & (c_fft_col_op_st_V_empty_n == 1'b0)) & (icmp_ln1057_1_reg_493 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        x_fu_72 <= add_ln561_reg_464;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        y_reg_112 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        y_reg_112 <= add_ln564_reg_497;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln561_reg_464 <= add_ln561_fu_141_p2;
        x_2_reg_456 <= x_fu_72;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln564_reg_497 <= add_ln564_fu_174_p2;
        icmp_ln1057_1_reg_493 <= icmp_ln1057_1_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_1_reg_493 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        and_ln145_2_reg_535 <= and_ln145_2_fu_372_p2;
        and_ln145_reg_519 <= and_ln145_fu_282_p2;
        icmp_ln145_1_reg_524 <= icmp_ln145_1_fu_288_p2;
        icmp_ln145_reg_508 <= icmp_ln145_fu_198_p2;
        shl_ln145_3_reg_529 <= shl_ln145_3_fu_354_p2;
        shl_ln145_reg_513 <= shl_ln145_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_79_reg_485[11 : 4] <= empty_79_fu_163_p2[11 : 4];
        shl_ln_reg_479[11 : 4] <= shl_ln_fu_155_p3[11 : 4];
        trunc_ln145_2_reg_474 <= trunc_ln145_2_fu_151_p1;
        trunc_ln145_reg_469 <= trunc_ln145_fu_147_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_reg_450 <= empty_fu_124_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        zext_ln1057_reg_502[7 : 0] <= zext_ln1057_fu_180_p1[7 : 0];
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln1057_1_reg_493 == 1'd0) & (c_fft_col_op_st_V_empty_n == 1'b0))) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln1057_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_1_reg_493 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        c_fft_col_op_st_V_blk_n = c_fft_col_op_st_V_empty_n;
    end else begin
        c_fft_col_op_st_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln1057_1_reg_493 == 1'd0) & (c_fft_col_op_st_V_empty_n == 1'b0)) & (icmp_ln1057_1_reg_493 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        c_fft_col_op_st_V_read = 1'b1;
    end else begin
        c_fft_col_op_st_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ifmap_CF_M_imag2_ce0 = 1'b1;
    end else begin
        ifmap_CF_M_imag2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ifmap_CF_M_imag2_we0 = shl_ln145_2_fu_414_p2;
    end else begin
        ifmap_CF_M_imag2_we0 = 128'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ifmap_CF_M_real1_ce0 = 1'b1;
    end else begin
        ifmap_CF_M_real1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ifmap_CF_M_real1_we0 = shl_ln145_2_fu_414_p2;
    end else begin
        ifmap_CF_M_real1_we0 = 128'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln1057_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if ((~((icmp_ln1057_1_reg_493 == 1'd0) & (c_fft_col_op_st_V_empty_n == 1'b0)) & (icmp_ln1057_1_reg_493 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln1057_1_reg_493 == 1'd0) & (c_fft_col_op_st_V_empty_n == 1'b0)) & (icmp_ln1057_1_reg_493 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln561_fu_141_p2 = (x_fu_72 + 8'd1);

assign add_ln564_fu_174_p2 = (y_reg_112 + 8'd1);

assign and_ln145_2_fu_372_p2 = (shl_ln145_4_fu_360_p2 & lshr_ln145_1_fu_366_p2);

assign and_ln145_fu_282_p2 = (shl_ln145_1_fu_270_p2 & lshr_ln145_fu_276_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((icmp_ln1057_1_reg_493 == 1'd0) & (c_fft_col_op_st_V_empty_n == 1'b0));
end

assign ap_return = empty_reg_450;

assign empty_79_fu_163_p2 = (shl_ln_fu_155_p3 | 12'd15);

assign empty_fu_124_p1 = ctrl1_reg[7:0];

assign icmp_ln1057_1_fu_169_p2 = ((y_reg_112 == empty_reg_450) ? 1'b1 : 1'b0);

assign icmp_ln1057_fu_136_p2 = ((x_fu_72 == empty_reg_450) ? 1'b1 : 1'b0);

assign icmp_ln145_1_fu_288_p2 = ((shl_ln_reg_479 > empty_79_reg_485) ? 1'b1 : 1'b0);

assign icmp_ln145_fu_198_p2 = ((shl_ln_reg_479 > empty_79_reg_485) ? 1'b1 : 1'b0);

assign ifmap_CF_M_imag2_address0 = zext_ln1057_reg_502;

assign ifmap_CF_M_imag2_d0 = (select_ln145_7_fu_431_p3 & and_ln145_2_reg_535);

assign ifmap_CF_M_real1_address0 = zext_ln1057_reg_502;

assign ifmap_CF_M_real1_d0 = (select_ln145_3_fu_391_p3 & and_ln145_reg_519);

assign lshr_ln145_1_fu_366_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 >> zext_ln145_8_fu_350_p1;

assign lshr_ln145_fu_276_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 >> zext_ln145_3_fu_260_p1;

assign select_ln145_1_fu_230_p3 = ((icmp_ln145_fu_198_p2[0:0] == 1'b1) ? trunc_ln145_4_fu_209_p1 : tmp_fu_202_p3);

assign select_ln145_2_fu_238_p3 = ((icmp_ln145_fu_198_p2[0:0] == 1'b1) ? sub_ln145_fu_216_p2 : tmp_fu_202_p3);

assign select_ln145_3_fu_391_p3 = ((icmp_ln145_reg_508[0:0] == 1'b1) ? tmp_22_fu_382_p4 : shl_ln145_reg_513);

assign select_ln145_4_fu_312_p3 = ((icmp_ln145_1_fu_288_p2[0:0] == 1'b1) ? tmp_23_fu_292_p3 : trunc_ln145_5_fu_299_p1);

assign select_ln145_5_fu_320_p3 = ((icmp_ln145_1_fu_288_p2[0:0] == 1'b1) ? trunc_ln145_5_fu_299_p1 : tmp_23_fu_292_p3);

assign select_ln145_6_fu_328_p3 = ((icmp_ln145_1_fu_288_p2[0:0] == 1'b1) ? sub_ln145_2_fu_306_p2 : tmp_23_fu_292_p3);

assign select_ln145_7_fu_431_p3 = ((icmp_ln145_1_reg_524[0:0] == 1'b1) ? tmp_24_fu_422_p4 : shl_ln145_3_reg_529);

assign select_ln145_fu_222_p3 = ((icmp_ln145_fu_198_p2[0:0] == 1'b1) ? tmp_fu_202_p3 : trunc_ln145_4_fu_209_p1);

assign shl_ln145_1_fu_270_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 << zext_ln145_2_fu_256_p1;

assign shl_ln145_2_fu_414_p2 = 128'd3 << zext_ln145_4_fu_410_p1;

assign shl_ln145_3_fu_354_p2 = zext_ln145_5_fu_302_p1 << zext_ln145_6_fu_342_p1;

assign shl_ln145_4_fu_360_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 << zext_ln145_7_fu_346_p1;

assign shl_ln145_fu_264_p2 = zext_ln145_fu_212_p1 << zext_ln145_1_fu_252_p1;

assign shl_ln_fu_155_p3 = {{x_fu_72}, {4'd0}};

assign sub_ln145_1_fu_246_p2 = (11'd1023 - select_ln145_fu_222_p3);

assign sub_ln145_2_fu_306_p2 = (11'd1023 - tmp_23_fu_292_p3);

assign sub_ln145_3_fu_336_p2 = (11'd1023 - select_ln145_4_fu_312_p3);

assign sub_ln145_fu_216_p2 = (11'd1023 - tmp_fu_202_p3);

integer ap_tvar_int_0;

always @ (shl_ln145_reg_513) begin
    for (ap_tvar_int_0 = 1024 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 1023 - 0) begin
            tmp_22_fu_382_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_22_fu_382_p4[ap_tvar_int_0] = shl_ln145_reg_513[1023 - ap_tvar_int_0];
        end
    end
end

assign tmp_23_fu_292_p3 = {{trunc_ln145_reg_469}, {4'd0}};

integer ap_tvar_int_1;

always @ (shl_ln145_3_reg_529) begin
    for (ap_tvar_int_1 = 1024 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 1023 - 0) begin
            tmp_24_fu_422_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_24_fu_422_p4[ap_tvar_int_1] = shl_ln145_3_reg_529[1023 - ap_tvar_int_1];
        end
    end
end

assign tmp_fu_202_p3 = {{trunc_ln145_2_reg_474}, {4'd0}};

assign trunc_ln145_1_fu_188_p4 = {{c_fft_col_op_st_V_dout[31:16]}};

assign trunc_ln145_2_fu_151_p1 = x_fu_72[6:0];

assign trunc_ln145_3_fu_184_p1 = c_fft_col_op_st_V_dout[15:0];

assign trunc_ln145_4_fu_209_p1 = empty_79_reg_485[10:0];

assign trunc_ln145_5_fu_299_p1 = empty_79_reg_485[10:0];

assign trunc_ln145_fu_147_p1 = x_fu_72[6:0];

assign udiv_fu_403_p3 = {{x_2_reg_456}, {1'd0}};

assign zext_ln1057_fu_180_p1 = y_reg_112;

assign zext_ln145_1_fu_252_p1 = select_ln145_2_fu_238_p3;

assign zext_ln145_2_fu_256_p1 = select_ln145_1_fu_230_p3;

assign zext_ln145_3_fu_260_p1 = sub_ln145_1_fu_246_p2;

assign zext_ln145_4_fu_410_p1 = udiv_fu_403_p3;

assign zext_ln145_5_fu_302_p1 = trunc_ln145_1_fu_188_p4;

assign zext_ln145_6_fu_342_p1 = select_ln145_6_fu_328_p3;

assign zext_ln145_7_fu_346_p1 = select_ln145_5_fu_320_p3;

assign zext_ln145_8_fu_350_p1 = sub_ln145_3_fu_336_p2;

assign zext_ln145_fu_212_p1 = trunc_ln145_3_fu_184_p1;

always @ (posedge ap_clk) begin
    shl_ln_reg_479[3:0] <= 4'b0000;
    empty_79_reg_485[3:0] <= 4'b1111;
    zext_ln1057_reg_502[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //Mem_patch_Wr_VITIS_LOOP_561_4_proc
