// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fwd_fft_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_147_1_VITIS_LOOP_153_3_VITIS_LOOP_156_4_VITIS_LOOP_159_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        c_ifmap_patch_st_dout,
        c_ifmap_patch_st_empty_n,
        c_ifmap_patch_st_read,
        c_ifmap_col_op_st_din,
        c_ifmap_col_op_st_full_n,
        c_ifmap_col_op_st_write,
        Col_Buffer_din,
        Col_Buffer_full_n,
        Col_Buffer_write,
        Col_Buffer_dout,
        Col_Buffer_empty_n,
        Col_Buffer_read,
        sub_i_i,
        bound42,
        bound16,
        cmp_i_i_mid157,
        trunc_ln,
        icmp_ln1057,
        bound,
        icmp_ln1057_21,
        bound4,
        icmp_ln1057_22,
        trunc_ln24,
        p_cast1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] c_ifmap_patch_st_dout;
input   c_ifmap_patch_st_empty_n;
output   c_ifmap_patch_st_read;
output  [31:0] c_ifmap_col_op_st_din;
input   c_ifmap_col_op_st_full_n;
output   c_ifmap_col_op_st_write;
output  [31:0] Col_Buffer_din;
input   Col_Buffer_full_n;
output   Col_Buffer_write;
input  [31:0] Col_Buffer_dout;
input   Col_Buffer_empty_n;
output   Col_Buffer_read;
input  [8:0] sub_i_i;
input  [47:0] bound42;
input  [31:0] bound16;
input  [0:0] cmp_i_i_mid157;
input  [7:0] trunc_ln;
input  [0:0] icmp_ln1057;
input  [15:0] bound;
input  [0:0] icmp_ln1057_21;
input  [23:0] bound4;
input  [0:0] icmp_ln1057_22;
input  [7:0] trunc_ln24;
input  [7:0] p_cast1;

reg ap_idle;
reg c_ifmap_patch_st_read;
reg[31:0] c_ifmap_col_op_st_din;
reg c_ifmap_col_op_st_write;
reg Col_Buffer_write;
reg Col_Buffer_read;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] icmp_ln1057_18_reg_714;
reg   [0:0] or_ln174_reg_718;
reg    ap_predicate_op112_write_state4;
reg   [0:0] select_ln145_9_reg_710;
reg    ap_predicate_op114_read_state4;
reg    ap_predicate_op115_write_state4;
reg    ap_predicate_op117_write_state4;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1057_13_fu_257_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    c_ifmap_col_op_st_blk_n;
wire    ap_block_pp0_stage0;
reg    Col_Buffer_i_blk_n;
reg    Col_Buffer_o_blk_n;
reg    c_ifmap_patch_st_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln1057_13_reg_677;
wire   [0:0] icmp_ln1057_14_fu_277_p2;
reg   [0:0] icmp_ln1057_14_reg_681;
wire   [0:0] select_ln145_3_fu_299_p3;
reg   [0:0] select_ln145_3_reg_688;
wire   [0:0] or_ln145_1_fu_306_p2;
reg   [0:0] or_ln145_1_reg_695;
wire   [0:0] select_ln145_8_fu_312_p3;
reg   [0:0] select_ln145_8_reg_701;
wire   [0:0] select_ln145_9_fu_481_p3;
wire   [0:0] icmp_ln1057_18_fu_535_p2;
wire   [0:0] or_ln174_fu_545_p2;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [7:0] x_fu_98;
wire   [7:0] x_16_fu_551_p2;
wire    ap_loop_init;
reg   [15:0] indvar_flatten_fu_102;
wire   [15:0] select_ln1057_7_fu_346_p3;
reg   [7:0] pnx_fu_106;
wire   [7:0] select_ln1057_fu_510_p3;
reg   [23:0] indvar_flatten11_fu_110;
wire   [23:0] select_ln1057_8_fu_360_p3;
reg   [31:0] indvar_flatten37_fu_114;
wire   [31:0] select_ln1057_9_fu_374_p3;
reg   [47:0] indvar_flatten71_fu_118;
wire   [47:0] add_ln1057_3_fu_262_p2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln1057_16_fu_282_p2;
wire   [0:0] icmp_ln1057_17_fu_294_p2;
wire   [0:0] select_ln145_2_fu_287_p3;
wire   [0:0] or_ln1057_fu_334_p2;
wire   [0:0] or_ln1057_1_fu_340_p2;
wire   [15:0] add_ln1057_fu_328_p2;
wire   [23:0] add_ln1057_4_fu_354_p2;
wire   [31:0] add_ln1057_5_fu_368_p2;
wire   [8:0] pnx_cast_fu_411_p1;
wire   [0:0] cmp_fu_405_p2;
wire   [0:0] cmp_i_i_fu_415_p2;
wire   [0:0] icmp_ln1057_15_fu_434_p2;
wire   [0:0] or_ln145_fu_423_p2;
wire   [0:0] select_ln145_fu_428_p3;
wire   [0:0] select_ln145_1_fu_439_p3;
wire   [7:0] select_ln145_4_fu_445_p3;
wire   [7:0] pnx_8_fu_469_p2;
wire   [0:0] cmp_mid1_fu_475_p2;
wire   [0:0] or_ln145_2_fu_452_p2;
wire   [8:0] pnx_cast_mid1_fu_488_p1;
wire   [0:0] cmp_i_i_mid1_fu_492_p2;
wire   [0:0] select_ln145_6_fu_457_p3;
wire   [0:0] select_ln145_7_fu_463_p3;
wire   [0:0] select_ln145_11_fu_504_p3;
wire   [0:0] or_ln145_3_fu_517_p2;
wire   [0:0] or_ln145_4_fu_522_p2;
wire   [7:0] select_ln145_12_fu_527_p3;
wire   [0:0] select_ln145_10_fu_497_p3;
wire   [0:0] icmp_ln174_fu_540_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fwd_fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten11_fu_110 <= 24'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1057_13_fu_257_p2 == 1'd0))) begin
            indvar_flatten11_fu_110 <= select_ln1057_8_fu_360_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten37_fu_114 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1057_13_fu_257_p2 == 1'd0))) begin
            indvar_flatten37_fu_114 <= select_ln1057_9_fu_374_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten71_fu_118 <= 48'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1057_13_fu_257_p2 == 1'd0))) begin
            indvar_flatten71_fu_118 <= add_ln1057_3_fu_262_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_102 <= 16'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1057_13_fu_257_p2 == 1'd0))) begin
            indvar_flatten_fu_102 <= select_ln1057_7_fu_346_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            pnx_fu_106 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1057_13_reg_677 == 1'd0))) begin
            pnx_fu_106 <= select_ln1057_fu_510_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x_fu_98 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1057_13_reg_677 == 1'd0))) begin
            x_fu_98 <= x_16_fu_551_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln1057_13_reg_677 <= icmp_ln1057_13_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1057_13_fu_257_p2 == 1'd0))) begin
        icmp_ln1057_14_reg_681 <= icmp_ln1057_14_fu_277_p2;
        or_ln145_1_reg_695 <= or_ln145_1_fu_306_p2;
        select_ln145_3_reg_688 <= select_ln145_3_fu_299_p3;
        select_ln145_8_reg_701 <= select_ln145_8_fu_312_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1057_13_reg_677 == 1'd0))) begin
        icmp_ln1057_18_reg_714 <= icmp_ln1057_18_fu_535_p2;
        select_ln145_9_reg_710 <= select_ln145_9_fu_481_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1057_18_fu_535_p2 == 1'd0) & (icmp_ln1057_13_reg_677 == 1'd0))) begin
        or_ln174_reg_718 <= or_ln174_fu_545_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op114_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Col_Buffer_i_blk_n = Col_Buffer_empty_n;
    end else begin
        Col_Buffer_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op112_write_state4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Col_Buffer_o_blk_n = Col_Buffer_full_n;
    end else begin
        Col_Buffer_o_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op114_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Col_Buffer_read = 1'b1;
    end else begin
        Col_Buffer_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op112_write_state4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Col_Buffer_write = 1'b1;
    end else begin
        Col_Buffer_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1057_13_fu_257_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1057_13_reg_677 == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op117_write_state4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op115_write_state4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (icmp_ln1057_18_reg_714 == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        c_ifmap_col_op_st_blk_n = c_ifmap_col_op_st_full_n;
    end else begin
        c_ifmap_col_op_st_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if ((ap_predicate_op117_write_state4 == 1'b1)) begin
            c_ifmap_col_op_st_din = 32'd0;
        end else if ((ap_predicate_op115_write_state4 == 1'b1)) begin
            c_ifmap_col_op_st_din = Col_Buffer_dout;
        end else if ((icmp_ln1057_18_reg_714 == 1'd0)) begin
            c_ifmap_col_op_st_din = c_ifmap_patch_st_dout;
        end else begin
            c_ifmap_col_op_st_din = 'bx;
        end
    end else begin
        c_ifmap_col_op_st_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op117_write_state4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op115_write_state4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1057_18_reg_714 == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        c_ifmap_col_op_st_write = 1'b1;
    end else begin
        c_ifmap_col_op_st_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln1057_18_reg_714 == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        c_ifmap_patch_st_blk_n = c_ifmap_patch_st_empty_n;
    end else begin
        c_ifmap_patch_st_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1057_18_reg_714 == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        c_ifmap_patch_st_read = 1'b1;
    end else begin
        c_ifmap_patch_st_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Col_Buffer_din = c_ifmap_patch_st_dout;

assign add_ln1057_3_fu_262_p2 = (indvar_flatten71_fu_118 + 48'd1);

assign add_ln1057_4_fu_354_p2 = (indvar_flatten11_fu_110 + 24'd1);

assign add_ln1057_5_fu_368_p2 = (indvar_flatten37_fu_114 + 32'd1);

assign add_ln1057_fu_328_p2 = (indvar_flatten_fu_102 + 16'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (((ap_predicate_op117_write_state4 == 1'b1) & (c_ifmap_col_op_st_full_n == 1'b0)) | ((ap_predicate_op115_write_state4 == 1'b1) & (c_ifmap_col_op_st_full_n == 1'b0)) | ((ap_predicate_op114_read_state4 == 1'b1) & (1'b0 == Col_Buffer_empty_n)) | ((ap_predicate_op112_write_state4 == 1'b1) & (1'b0 == Col_Buffer_full_n)) | ((c_ifmap_col_op_st_full_n == 1'b0) & (icmp_ln1057_18_reg_714 == 1'd0)) | ((icmp_ln1057_18_reg_714 == 1'd0) & (c_ifmap_patch_st_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (((ap_predicate_op117_write_state4 == 1'b1) & (c_ifmap_col_op_st_full_n == 1'b0)) | ((ap_predicate_op115_write_state4 == 1'b1) & (c_ifmap_col_op_st_full_n == 1'b0)) | ((ap_predicate_op114_read_state4 == 1'b1) & (1'b0 == Col_Buffer_empty_n)) | ((ap_predicate_op112_write_state4 == 1'b1) & (1'b0 == Col_Buffer_full_n)) | ((c_ifmap_col_op_st_full_n == 1'b0) & (icmp_ln1057_18_reg_714 == 1'd0)) | ((icmp_ln1057_18_reg_714 == 1'd0) & (c_ifmap_patch_st_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter3 == 1'b1) & (((ap_predicate_op117_write_state4 == 1'b1) & (c_ifmap_col_op_st_full_n == 1'b0)) | ((ap_predicate_op115_write_state4 == 1'b1) & (c_ifmap_col_op_st_full_n == 1'b0)) | ((ap_predicate_op114_read_state4 == 1'b1) & (1'b0 == Col_Buffer_empty_n)) | ((ap_predicate_op112_write_state4 == 1'b1) & (1'b0 == Col_Buffer_full_n)) | ((c_ifmap_col_op_st_full_n == 1'b0) & (icmp_ln1057_18_reg_714 == 1'd0)) | ((icmp_ln1057_18_reg_714 == 1'd0) & (c_ifmap_patch_st_empty_n == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (((ap_predicate_op117_write_state4 == 1'b1) & (c_ifmap_col_op_st_full_n == 1'b0)) | ((ap_predicate_op115_write_state4 == 1'b1) & (c_ifmap_col_op_st_full_n == 1'b0)) | ((ap_predicate_op114_read_state4 == 1'b1) & (1'b0 == Col_Buffer_empty_n)) | ((ap_predicate_op112_write_state4 == 1'b1) & (1'b0 == Col_Buffer_full_n)) | ((c_ifmap_col_op_st_full_n == 1'b0) & (icmp_ln1057_18_reg_714 == 1'd0)) | ((icmp_ln1057_18_reg_714 == 1'd0) & (c_ifmap_patch_st_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

always @ (*) begin
    ap_predicate_op112_write_state4 = ((or_ln174_reg_718 == 1'd0) & (icmp_ln1057_18_reg_714 == 1'd0));
end

always @ (*) begin
    ap_predicate_op114_read_state4 = ((select_ln145_9_reg_710 == 1'd0) & (icmp_ln1057_18_reg_714 == 1'd1));
end

always @ (*) begin
    ap_predicate_op115_write_state4 = ((select_ln145_9_reg_710 == 1'd0) & (icmp_ln1057_18_reg_714 == 1'd1));
end

always @ (*) begin
    ap_predicate_op117_write_state4 = ((select_ln145_9_reg_710 == 1'd1) & (icmp_ln1057_18_reg_714 == 1'd1));
end

assign cmp_fu_405_p2 = ((pnx_fu_106 == 8'd0) ? 1'b1 : 1'b0);

assign cmp_i_i_fu_415_p2 = ((pnx_cast_fu_411_p1 == sub_i_i) ? 1'b1 : 1'b0);

assign cmp_i_i_mid1_fu_492_p2 = ((pnx_cast_mid1_fu_488_p1 == sub_i_i) ? 1'b1 : 1'b0);

assign cmp_mid1_fu_475_p2 = ((pnx_8_fu_469_p2 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln1057_13_fu_257_p2 = ((indvar_flatten71_fu_118 == bound42) ? 1'b1 : 1'b0);

assign icmp_ln1057_14_fu_277_p2 = ((indvar_flatten37_fu_114 == bound16) ? 1'b1 : 1'b0);

assign icmp_ln1057_15_fu_434_p2 = ((x_fu_98 == trunc_ln) ? 1'b1 : 1'b0);

assign icmp_ln1057_16_fu_282_p2 = ((indvar_flatten_fu_102 == bound) ? 1'b1 : 1'b0);

assign icmp_ln1057_17_fu_294_p2 = ((indvar_flatten11_fu_110 == bound4) ? 1'b1 : 1'b0);

assign icmp_ln1057_18_fu_535_p2 = ((select_ln145_12_fu_527_p3 < trunc_ln24) ? 1'b1 : 1'b0);

assign icmp_ln174_fu_540_p2 = ((select_ln145_12_fu_527_p3 < p_cast1) ? 1'b1 : 1'b0);

assign or_ln1057_1_fu_340_p2 = (or_ln1057_fu_334_p2 | icmp_ln1057_14_fu_277_p2);

assign or_ln1057_fu_334_p2 = (select_ln145_8_fu_312_p3 | select_ln145_3_fu_299_p3);

assign or_ln145_1_fu_306_p2 = (select_ln145_3_fu_299_p3 | icmp_ln1057_14_fu_277_p2);

assign or_ln145_2_fu_452_p2 = (select_ln145_3_reg_688 | or_ln145_fu_423_p2);

assign or_ln145_3_fu_517_p2 = (select_ln145_8_reg_701 | select_ln145_11_fu_504_p3);

assign or_ln145_4_fu_522_p2 = (or_ln145_3_fu_517_p2 | or_ln145_1_reg_695);

assign or_ln145_fu_423_p2 = (icmp_ln1057_14_reg_681 | cmp_fu_405_p2);

assign or_ln174_fu_545_p2 = (select_ln145_10_fu_497_p3 | icmp_ln174_fu_540_p2);

assign pnx_8_fu_469_p2 = (select_ln145_4_fu_445_p3 + 8'd1);

assign pnx_cast_fu_411_p1 = pnx_fu_106;

assign pnx_cast_mid1_fu_488_p1 = pnx_8_fu_469_p2;

assign select_ln1057_7_fu_346_p3 = ((or_ln1057_1_fu_340_p2[0:0] == 1'b1) ? 16'd1 : add_ln1057_fu_328_p2);

assign select_ln1057_8_fu_360_p3 = ((or_ln145_1_fu_306_p2[0:0] == 1'b1) ? 24'd1 : add_ln1057_4_fu_354_p2);

assign select_ln1057_9_fu_374_p3 = ((icmp_ln1057_14_fu_277_p2[0:0] == 1'b1) ? 32'd1 : add_ln1057_5_fu_368_p2);

assign select_ln1057_fu_510_p3 = ((select_ln145_8_reg_701[0:0] == 1'b1) ? pnx_8_fu_469_p2 : select_ln145_4_fu_445_p3);

assign select_ln145_10_fu_497_p3 = ((select_ln145_8_reg_701[0:0] == 1'b1) ? cmp_i_i_mid1_fu_492_p2 : select_ln145_6_fu_457_p3);

assign select_ln145_11_fu_504_p3 = ((select_ln145_8_reg_701[0:0] == 1'b1) ? icmp_ln1057 : select_ln145_7_fu_463_p3);

assign select_ln145_12_fu_527_p3 = ((or_ln145_4_fu_522_p2[0:0] == 1'b1) ? 8'd0 : x_fu_98);

assign select_ln145_1_fu_439_p3 = ((icmp_ln1057_14_reg_681[0:0] == 1'b1) ? icmp_ln1057 : icmp_ln1057_15_fu_434_p2);

assign select_ln145_2_fu_287_p3 = ((icmp_ln1057_14_fu_277_p2[0:0] == 1'b1) ? icmp_ln1057_21 : icmp_ln1057_16_fu_282_p2);

assign select_ln145_3_fu_299_p3 = ((icmp_ln1057_14_fu_277_p2[0:0] == 1'b1) ? icmp_ln1057_22 : icmp_ln1057_17_fu_294_p2);

assign select_ln145_4_fu_445_p3 = ((or_ln145_1_reg_695[0:0] == 1'b1) ? 8'd0 : pnx_fu_106);

assign select_ln145_6_fu_457_p3 = ((select_ln145_3_reg_688[0:0] == 1'b1) ? cmp_i_i_mid157 : select_ln145_fu_428_p3);

assign select_ln145_7_fu_463_p3 = ((select_ln145_3_reg_688[0:0] == 1'b1) ? icmp_ln1057 : select_ln145_1_fu_439_p3);

assign select_ln145_8_fu_312_p3 = ((select_ln145_3_fu_299_p3[0:0] == 1'b1) ? icmp_ln1057_21 : select_ln145_2_fu_287_p3);

assign select_ln145_9_fu_481_p3 = ((select_ln145_8_reg_701[0:0] == 1'b1) ? cmp_mid1_fu_475_p2 : or_ln145_2_fu_452_p2);

assign select_ln145_fu_428_p3 = ((icmp_ln1057_14_reg_681[0:0] == 1'b1) ? cmp_i_i_mid157 : cmp_i_i_fu_415_p2);

assign x_16_fu_551_p2 = (select_ln145_12_fu_527_p3 + 8'd1);

endmodule //fwd_fft_Col_Wise_Overlap_Gen_Pipeline_VITIS_LOOP_147_1_VITIS_LOOP_153_3_VITIS_LOOP_156_4_VITIS_LOOP_159_5
