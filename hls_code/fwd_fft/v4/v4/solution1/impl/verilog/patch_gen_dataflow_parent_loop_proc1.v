// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module patch_gen_dataflow_parent_loop_proc1 (
        layer1_reg_load_cast,
        ctrl2_reg_load_cast,
        ctrl1_reg,
        ctrl2_reg,
        layer2_reg,
        in1_TDATA,
        in1_TKEEP,
        in1_TSTRB,
        in1_TLAST,
        in2_TDATA,
        in2_TKEEP,
        in2_TSTRB,
        in2_TLAST,
        col_ov_pix_out_V_din,
        col_ov_pix_out_V_full_n,
        col_ov_pix_out_V_write,
        ap_clk,
        ap_rst,
        ctrl2_reg_load_cast_ap_vld,
        ctrl1_reg_ap_vld,
        ctrl2_reg_ap_vld,
        layer2_reg_ap_vld,
        in1_TVALID,
        in1_TREADY,
        in2_TVALID,
        in2_TREADY,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [15:0] layer1_reg_load_cast;
input  [7:0] ctrl2_reg_load_cast;
input  [31:0] ctrl1_reg;
input  [31:0] ctrl2_reg;
input  [31:0] layer2_reg;
input  [15:0] in1_TDATA;
input  [1:0] in1_TKEEP;
input  [1:0] in1_TSTRB;
input  [0:0] in1_TLAST;
input  [15:0] in2_TDATA;
input  [1:0] in2_TKEEP;
input  [1:0] in2_TSTRB;
input  [0:0] in2_TLAST;
output  [31:0] col_ov_pix_out_V_din;
input   col_ov_pix_out_V_full_n;
output   col_ov_pix_out_V_write;
input   ap_clk;
input   ap_rst;
input   ctrl2_reg_load_cast_ap_vld;
input   ctrl1_reg_ap_vld;
input   ctrl2_reg_ap_vld;
input   layer2_reg_ap_vld;
input   in1_TVALID;
output   in1_TREADY;
input   in2_TVALID;
output   in2_TREADY;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg ap_done;
reg ap_ready;
reg ap_idle;

wire   [31:0] dataflow_parent_loop_proc_U0_col_ov_pix_out_V_din;
wire    dataflow_parent_loop_proc_U0_col_ov_pix_out_V_write;
wire    dataflow_parent_loop_proc_U0_in1_TREADY;
wire    dataflow_parent_loop_proc_U0_in2_TREADY;
wire    dataflow_parent_loop_proc_U0_ap_start;
wire    dataflow_parent_loop_proc_U0_ap_done;
wire    dataflow_parent_loop_proc_U0_ap_ready;
wire    dataflow_parent_loop_proc_U0_ap_idle;
reg    dataflow_parent_loop_proc_U0_ap_continue;
reg   [15:0] loop_dataflow_input_count;
reg   [15:0] loop_dataflow_output_count;
wire   [15:0] bound_minus_1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 loop_dataflow_input_count = 16'd0;
#0 loop_dataflow_output_count = 16'd0;
end

patch_gen_dataflow_parent_loop_proc dataflow_parent_loop_proc_U0(
    .ctrl2_reg_load_cast(ctrl2_reg_load_cast),
    .ctrl1_reg(ctrl1_reg),
    .ctrl2_reg(ctrl2_reg),
    .layer2_reg(layer2_reg),
    .in1_TDATA(in1_TDATA),
    .in1_TKEEP(in1_TKEEP),
    .in1_TSTRB(in1_TSTRB),
    .in1_TLAST(in1_TLAST),
    .in2_TDATA(in2_TDATA),
    .in2_TKEEP(in2_TKEEP),
    .in2_TSTRB(in2_TSTRB),
    .in2_TLAST(in2_TLAST),
    .col_ov_pix_out_V_din(dataflow_parent_loop_proc_U0_col_ov_pix_out_V_din),
    .col_ov_pix_out_V_full_n(col_ov_pix_out_V_full_n),
    .col_ov_pix_out_V_write(dataflow_parent_loop_proc_U0_col_ov_pix_out_V_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ctrl1_reg_ap_vld(ctrl1_reg_ap_vld),
    .ctrl2_reg_ap_vld(ctrl2_reg_ap_vld),
    .layer2_reg_ap_vld(layer2_reg_ap_vld),
    .in1_TVALID(in1_TVALID),
    .in1_TREADY(dataflow_parent_loop_proc_U0_in1_TREADY),
    .in2_TVALID(in2_TVALID),
    .in2_TREADY(dataflow_parent_loop_proc_U0_in2_TREADY),
    .ap_start(dataflow_parent_loop_proc_U0_ap_start),
    .ap_done(dataflow_parent_loop_proc_U0_ap_done),
    .ap_ready(dataflow_parent_loop_proc_U0_ap_ready),
    .ap_idle(dataflow_parent_loop_proc_U0_ap_idle),
    .ap_continue(dataflow_parent_loop_proc_U0_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_input_count <= 16'd0;
    end else begin
        if ((~(loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_parent_loop_proc_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= (loop_dataflow_input_count + 16'd1);
        end else if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_parent_loop_proc_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_output_count <= 16'd0;
    end else begin
        if ((~(loop_dataflow_output_count == bound_minus_1) & (dataflow_parent_loop_proc_U0_ap_continue == 1'b1) & (dataflow_parent_loop_proc_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= (loop_dataflow_output_count + 16'd1);
        end else if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_parent_loop_proc_U0_ap_continue == 1'b1) & (dataflow_parent_loop_proc_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= 16'd0;
        end
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_parent_loop_proc_U0_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == 16'd0) & (ap_start == 1'b0) & (dataflow_parent_loop_proc_U0_ap_idle == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_parent_loop_proc_U0_ap_ready == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~(loop_dataflow_output_count == bound_minus_1) | (ap_continue == 1'b1))) begin
        dataflow_parent_loop_proc_U0_ap_continue = 1'b1;
    end else begin
        dataflow_parent_loop_proc_U0_ap_continue = 1'b0;
    end
end

assign bound_minus_1 = (layer1_reg_load_cast - 16'd1);

assign col_ov_pix_out_V_din = dataflow_parent_loop_proc_U0_col_ov_pix_out_V_din;

assign col_ov_pix_out_V_write = dataflow_parent_loop_proc_U0_col_ov_pix_out_V_write;

assign dataflow_parent_loop_proc_U0_ap_start = ap_start;

assign in1_TREADY = dataflow_parent_loop_proc_U0_in1_TREADY;

assign in2_TREADY = dataflow_parent_loop_proc_U0_in2_TREADY;

endmodule //patch_gen_dataflow_parent_loop_proc1
