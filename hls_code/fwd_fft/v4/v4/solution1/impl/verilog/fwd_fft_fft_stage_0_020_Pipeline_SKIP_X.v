// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fwd_fft_fft_stage_0_020_Pipeline_SKIP_X (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        trunc_ln18,
        IN_r_address0,
        IN_r_ce0,
        IN_r_q0,
        IN_r_address1,
        IN_r_ce1,
        IN_r_q1,
        w1_M_value,
        w1_M_value_22,
        OUT_r_address0,
        OUT_r_ce0,
        OUT_r_we0,
        OUT_r_d0,
        OUT_r_address1,
        OUT_r_ce1,
        OUT_r_we1,
        OUT_r_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] trunc_ln18;
output  [5:0] IN_r_address0;
output   IN_r_ce0;
input  [63:0] IN_r_q0;
output  [5:0] IN_r_address1;
output   IN_r_ce1;
input  [63:0] IN_r_q1;
input  [31:0] w1_M_value;
input  [31:0] w1_M_value_22;
output  [5:0] OUT_r_address0;
output   OUT_r_ce0;
output   OUT_r_we0;
output  [63:0] OUT_r_d0;
output  [5:0] OUT_r_address1;
output   OUT_r_ce1;
output   OUT_r_we1;
output  [63:0] OUT_r_d1;

reg ap_idle;
reg IN_r_ce0;
reg IN_r_ce1;
reg OUT_r_ce0;
reg OUT_r_we0;
reg OUT_r_ce1;
reg OUT_r_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
wire    ap_block_state23_pp0_stage0_iter22;
wire    ap_block_state24_pp0_stage0_iter23;
wire    ap_block_state25_pp0_stage0_iter24;
wire    ap_block_state26_pp0_stage0_iter25;
wire    ap_block_state27_pp0_stage0_iter26;
wire    ap_block_state28_pp0_stage0_iter27;
wire    ap_block_state29_pp0_stage0_iter28;
wire    ap_block_state30_pp0_stage0_iter29;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1057_fu_189_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] trunc_ln1057_fu_204_p1;
reg   [5:0] trunc_ln1057_reg_345;
reg   [5:0] trunc_ln1057_reg_345_pp0_iter1_reg;
reg   [5:0] trunc_ln1057_reg_345_pp0_iter2_reg;
reg   [5:0] trunc_ln1057_reg_345_pp0_iter3_reg;
reg   [5:0] trunc_ln1057_reg_345_pp0_iter4_reg;
reg   [5:0] trunc_ln1057_reg_345_pp0_iter5_reg;
reg   [5:0] trunc_ln1057_reg_345_pp0_iter6_reg;
reg   [5:0] trunc_ln1057_reg_345_pp0_iter7_reg;
reg   [5:0] trunc_ln1057_reg_345_pp0_iter8_reg;
reg   [5:0] trunc_ln1057_reg_345_pp0_iter9_reg;
reg   [5:0] trunc_ln1057_reg_345_pp0_iter10_reg;
reg   [5:0] trunc_ln1057_reg_345_pp0_iter11_reg;
reg   [5:0] trunc_ln1057_reg_345_pp0_iter12_reg;
reg   [5:0] trunc_ln1057_reg_345_pp0_iter13_reg;
reg   [5:0] trunc_ln1057_reg_345_pp0_iter14_reg;
reg   [5:0] trunc_ln1057_reg_345_pp0_iter15_reg;
reg   [5:0] trunc_ln1057_reg_345_pp0_iter16_reg;
wire   [63:0] zext_ln24_fu_214_p1;
reg   [63:0] zext_ln24_reg_350;
reg   [63:0] zext_ln24_reg_350_pp0_iter1_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter2_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter3_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter4_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter5_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter6_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter7_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter8_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter9_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter10_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter11_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter12_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter13_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter14_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter15_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter16_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter17_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter18_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter19_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter20_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter21_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter22_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter23_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter24_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter25_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter26_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter27_reg;
reg   [63:0] zext_ln24_reg_350_pp0_iter28_reg;
wire   [31:0] p_r_M_value_fu_249_p1;
reg   [31:0] p_r_M_value_reg_360;
wire   [31:0] p_r_M_value_72_fu_253_p1;
reg   [31:0] p_r_M_value_72_reg_366;
wire   [31:0] grp_fu_160_p2;
reg   [31:0] mul_ac_i_i_reg_372;
wire   [31:0] grp_fu_164_p2;
reg   [31:0] mul_bd_i_i_reg_377;
wire   [31:0] grp_fu_168_p2;
reg   [31:0] mul_ad_i_i_reg_382;
wire   [31:0] grp_fu_172_p2;
reg   [31:0] mul_bc_i_i_reg_387;
wire   [63:0] zext_ln23_fu_257_p1;
reg   [63:0] zext_ln23_reg_392;
reg   [63:0] zext_ln23_reg_392_pp0_iter18_reg;
reg   [63:0] zext_ln23_reg_392_pp0_iter19_reg;
reg   [63:0] zext_ln23_reg_392_pp0_iter20_reg;
reg   [63:0] zext_ln23_reg_392_pp0_iter21_reg;
reg   [63:0] zext_ln23_reg_392_pp0_iter22_reg;
reg   [63:0] zext_ln23_reg_392_pp0_iter23_reg;
reg   [63:0] zext_ln23_reg_392_pp0_iter24_reg;
reg   [63:0] zext_ln23_reg_392_pp0_iter25_reg;
reg   [63:0] zext_ln23_reg_392_pp0_iter26_reg;
reg   [63:0] zext_ln23_reg_392_pp0_iter27_reg;
reg   [63:0] zext_ln23_reg_392_pp0_iter28_reg;
wire   [31:0] trunc_ln23_fu_261_p1;
reg   [31:0] trunc_ln23_reg_402;
reg   [31:0] trunc_ln23_1_reg_407;
wire   [31:0] grp_fu_136_p2;
reg   [31:0] p_r_M_value_76_reg_412;
wire   [31:0] grp_fu_140_p2;
reg   [31:0] p_r_M_value_77_reg_418;
wire   [31:0] t1_M_value_fu_275_p1;
wire   [31:0] t1_M_value_24_fu_280_p1;
wire   [31:0] grp_fu_144_p2;
reg   [31:0] p_r_M_value_6_reg_436;
wire   [31:0] grp_fu_148_p2;
reg   [31:0] p_r_M_value_7_reg_441;
wire   [31:0] grp_fu_152_p2;
reg   [31:0] p_r_M_value_8_reg_446;
wire   [31:0] grp_fu_156_p2;
reg   [31:0] p_r_M_value_9_reg_451;
wire    ap_block_pp0_stage0;
reg   [6:0] k1_fu_60;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_k1_23;
wire   [6:0] k1_24_fu_195_p2;
reg   [7:0] m1_fu_64;
reg   [7:0] ap_sig_allocacmp_m1_load;
wire   [7:0] m1_22_fu_219_p2;
wire   [5:0] or_ln24_fu_208_p2;
wire   [31:0] trunc_ln388_fu_235_p1;
wire   [31:0] trunc_ln388_1_fu_239_p4;
wire   [31:0] bitcast_ln25_1_fu_288_p1;
wire   [31:0] bitcast_ln25_fu_285_p1;
wire   [31:0] bitcast_ln26_1_fu_303_p1;
wire   [31:0] bitcast_ln26_fu_300_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg    ap_loop_exit_ready_pp0_iter22_reg;
reg    ap_loop_exit_ready_pp0_iter23_reg;
reg    ap_loop_exit_ready_pp0_iter24_reg;
reg    ap_loop_exit_ready_pp0_iter25_reg;
reg    ap_loop_exit_ready_pp0_iter26_reg;
reg    ap_loop_exit_ready_pp0_iter27_reg;
reg    ap_loop_exit_ready_pp0_iter28_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fwd_fft_fsub_32ns_32ns_32_10_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_10_full_dsp_1_U80(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_ac_i_i_reg_372),
    .din1(mul_bd_i_i_reg_377),
    .ce(1'b1),
    .dout(grp_fu_136_p2)
);

fwd_fft_fadd_32ns_32ns_32_10_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_10_full_dsp_1_U81(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_ad_i_i_reg_382),
    .din1(mul_bc_i_i_reg_387),
    .ce(1'b1),
    .dout(grp_fu_140_p2)
);

fwd_fft_fadd_32ns_32ns_32_10_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_10_full_dsp_1_U82(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(t1_M_value_fu_275_p1),
    .din1(p_r_M_value_76_reg_412),
    .ce(1'b1),
    .dout(grp_fu_144_p2)
);

fwd_fft_fadd_32ns_32ns_32_10_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_10_full_dsp_1_U83(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(t1_M_value_24_fu_280_p1),
    .din1(p_r_M_value_77_reg_418),
    .ce(1'b1),
    .dout(grp_fu_148_p2)
);

fwd_fft_fsub_32ns_32ns_32_10_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_10_full_dsp_1_U84(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(t1_M_value_fu_275_p1),
    .din1(p_r_M_value_76_reg_412),
    .ce(1'b1),
    .dout(grp_fu_152_p2)
);

fwd_fft_fsub_32ns_32ns_32_10_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_10_full_dsp_1_U85(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(t1_M_value_24_fu_280_p1),
    .din1(p_r_M_value_77_reg_418),
    .ce(1'b1),
    .dout(grp_fu_156_p2)
);

fwd_fft_fmul_32ns_32ns_32_7_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_7_max_dsp_1_U86(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_value_reg_360),
    .din1(w1_M_value),
    .ce(1'b1),
    .dout(grp_fu_160_p2)
);

fwd_fft_fmul_32ns_32ns_32_7_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_7_max_dsp_1_U87(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_value_72_reg_366),
    .din1(w1_M_value_22),
    .ce(1'b1),
    .dout(grp_fu_164_p2)
);

fwd_fft_fmul_32ns_32ns_32_7_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_7_max_dsp_1_U88(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_value_reg_360),
    .din1(w1_M_value_22),
    .ce(1'b1),
    .dout(grp_fu_168_p2)
);

fwd_fft_fmul_32ns_32ns_32_7_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_7_max_dsp_1_U89(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_value_72_reg_366),
    .din1(w1_M_value),
    .ce(1'b1),
    .dout(grp_fu_172_p2)
);

fwd_fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter28_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1057_fu_189_p2 == 1'd0))) begin
            k1_fu_60 <= k1_24_fu_195_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k1_fu_60 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1057_fu_189_p2 == 1'd0))) begin
            m1_fu_64 <= m1_22_fu_219_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            m1_fu_64 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
        ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
        ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
        ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
        ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
        ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
        ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        mul_ac_i_i_reg_372 <= grp_fu_160_p2;
        mul_ad_i_i_reg_382 <= grp_fu_168_p2;
        mul_bc_i_i_reg_387 <= grp_fu_172_p2;
        mul_bd_i_i_reg_377 <= grp_fu_164_p2;
        p_r_M_value_6_reg_436 <= grp_fu_144_p2;
        p_r_M_value_76_reg_412 <= grp_fu_136_p2;
        p_r_M_value_77_reg_418 <= grp_fu_140_p2;
        p_r_M_value_7_reg_441 <= grp_fu_148_p2;
        p_r_M_value_8_reg_446 <= grp_fu_152_p2;
        p_r_M_value_9_reg_451 <= grp_fu_156_p2;
        trunc_ln1057_reg_345_pp0_iter10_reg <= trunc_ln1057_reg_345_pp0_iter9_reg;
        trunc_ln1057_reg_345_pp0_iter11_reg <= trunc_ln1057_reg_345_pp0_iter10_reg;
        trunc_ln1057_reg_345_pp0_iter12_reg <= trunc_ln1057_reg_345_pp0_iter11_reg;
        trunc_ln1057_reg_345_pp0_iter13_reg <= trunc_ln1057_reg_345_pp0_iter12_reg;
        trunc_ln1057_reg_345_pp0_iter14_reg <= trunc_ln1057_reg_345_pp0_iter13_reg;
        trunc_ln1057_reg_345_pp0_iter15_reg <= trunc_ln1057_reg_345_pp0_iter14_reg;
        trunc_ln1057_reg_345_pp0_iter16_reg <= trunc_ln1057_reg_345_pp0_iter15_reg;
        trunc_ln1057_reg_345_pp0_iter2_reg <= trunc_ln1057_reg_345_pp0_iter1_reg;
        trunc_ln1057_reg_345_pp0_iter3_reg <= trunc_ln1057_reg_345_pp0_iter2_reg;
        trunc_ln1057_reg_345_pp0_iter4_reg <= trunc_ln1057_reg_345_pp0_iter3_reg;
        trunc_ln1057_reg_345_pp0_iter5_reg <= trunc_ln1057_reg_345_pp0_iter4_reg;
        trunc_ln1057_reg_345_pp0_iter6_reg <= trunc_ln1057_reg_345_pp0_iter5_reg;
        trunc_ln1057_reg_345_pp0_iter7_reg <= trunc_ln1057_reg_345_pp0_iter6_reg;
        trunc_ln1057_reg_345_pp0_iter8_reg <= trunc_ln1057_reg_345_pp0_iter7_reg;
        trunc_ln1057_reg_345_pp0_iter9_reg <= trunc_ln1057_reg_345_pp0_iter8_reg;
        trunc_ln23_1_reg_407 <= {{IN_r_q0[63:32]}};
        trunc_ln23_reg_402 <= trunc_ln23_fu_261_p1;
        zext_ln23_reg_392[5 : 0] <= zext_ln23_fu_257_p1[5 : 0];
        zext_ln23_reg_392_pp0_iter18_reg[5 : 0] <= zext_ln23_reg_392[5 : 0];
        zext_ln23_reg_392_pp0_iter19_reg[5 : 0] <= zext_ln23_reg_392_pp0_iter18_reg[5 : 0];
        zext_ln23_reg_392_pp0_iter20_reg[5 : 0] <= zext_ln23_reg_392_pp0_iter19_reg[5 : 0];
        zext_ln23_reg_392_pp0_iter21_reg[5 : 0] <= zext_ln23_reg_392_pp0_iter20_reg[5 : 0];
        zext_ln23_reg_392_pp0_iter22_reg[5 : 0] <= zext_ln23_reg_392_pp0_iter21_reg[5 : 0];
        zext_ln23_reg_392_pp0_iter23_reg[5 : 0] <= zext_ln23_reg_392_pp0_iter22_reg[5 : 0];
        zext_ln23_reg_392_pp0_iter24_reg[5 : 0] <= zext_ln23_reg_392_pp0_iter23_reg[5 : 0];
        zext_ln23_reg_392_pp0_iter25_reg[5 : 0] <= zext_ln23_reg_392_pp0_iter24_reg[5 : 0];
        zext_ln23_reg_392_pp0_iter26_reg[5 : 0] <= zext_ln23_reg_392_pp0_iter25_reg[5 : 0];
        zext_ln23_reg_392_pp0_iter27_reg[5 : 0] <= zext_ln23_reg_392_pp0_iter26_reg[5 : 0];
        zext_ln23_reg_392_pp0_iter28_reg[5 : 0] <= zext_ln23_reg_392_pp0_iter27_reg[5 : 0];
        zext_ln24_reg_350_pp0_iter10_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter9_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter11_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter10_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter12_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter11_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter13_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter12_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter14_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter13_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter15_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter14_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter16_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter15_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter17_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter16_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter18_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter17_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter19_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter18_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter20_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter19_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter21_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter20_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter22_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter21_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter23_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter22_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter24_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter23_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter25_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter24_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter26_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter25_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter27_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter26_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter28_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter27_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter2_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter1_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter3_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter2_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter4_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter3_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter5_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter4_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter6_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter5_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter7_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter6_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter8_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter7_reg[5 : 1];
        zext_ln24_reg_350_pp0_iter9_reg[5 : 1] <= zext_ln24_reg_350_pp0_iter8_reg[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        p_r_M_value_72_reg_366 <= p_r_M_value_72_fu_253_p1;
        p_r_M_value_reg_360 <= p_r_M_value_fu_249_p1;
        trunc_ln1057_reg_345_pp0_iter1_reg <= trunc_ln1057_reg_345;
        zext_ln24_reg_350_pp0_iter1_reg[5 : 1] <= zext_ln24_reg_350[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1057_fu_189_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln1057_reg_345 <= trunc_ln1057_fu_204_p1;
        zext_ln24_reg_350[5 : 1] <= zext_ln24_fu_214_p1[5 : 1];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        IN_r_ce0 = 1'b1;
    end else begin
        IN_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        IN_r_ce1 = 1'b1;
    end else begin
        IN_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter29 == 1'b1))) begin
        OUT_r_ce0 = 1'b1;
    end else begin
        OUT_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter29 == 1'b1))) begin
        OUT_r_ce1 = 1'b1;
    end else begin
        OUT_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter29 == 1'b1))) begin
        OUT_r_we0 = 1'b1;
    end else begin
        OUT_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter29 == 1'b1))) begin
        OUT_r_we1 = 1'b1;
    end else begin
        OUT_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1057_fu_189_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter28_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_idle_pp0 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_k1_23 = 7'd0;
    end else begin
        ap_sig_allocacmp_k1_23 = k1_fu_60;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_m1_load = 8'd0;
    end else begin
        ap_sig_allocacmp_m1_load = m1_fu_64;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IN_r_address0 = zext_ln23_fu_257_p1;

assign IN_r_address1 = zext_ln24_fu_214_p1;

assign OUT_r_address0 = zext_ln24_reg_350_pp0_iter28_reg;

assign OUT_r_address1 = zext_ln23_reg_392_pp0_iter28_reg;

assign OUT_r_d0 = {{bitcast_ln26_1_fu_303_p1}, {bitcast_ln26_fu_300_p1}};

assign OUT_r_d1 = {{bitcast_ln25_1_fu_288_p1}, {bitcast_ln25_fu_285_p1}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln25_1_fu_288_p1 = p_r_M_value_7_reg_441;

assign bitcast_ln25_fu_285_p1 = p_r_M_value_6_reg_436;

assign bitcast_ln26_1_fu_303_p1 = p_r_M_value_9_reg_451;

assign bitcast_ln26_fu_300_p1 = p_r_M_value_8_reg_446;

assign icmp_ln1057_fu_189_p2 = ((ap_sig_allocacmp_k1_23 == trunc_ln18) ? 1'b1 : 1'b0);

assign k1_24_fu_195_p2 = (ap_sig_allocacmp_k1_23 + 7'd1);

assign m1_22_fu_219_p2 = (ap_sig_allocacmp_m1_load + 8'd2);

assign or_ln24_fu_208_p2 = (trunc_ln1057_fu_204_p1 | 6'd1);

assign p_r_M_value_72_fu_253_p1 = trunc_ln388_1_fu_239_p4;

assign p_r_M_value_fu_249_p1 = trunc_ln388_fu_235_p1;

assign t1_M_value_24_fu_280_p1 = trunc_ln23_1_reg_407;

assign t1_M_value_fu_275_p1 = trunc_ln23_reg_402;

assign trunc_ln1057_fu_204_p1 = ap_sig_allocacmp_m1_load[5:0];

assign trunc_ln23_fu_261_p1 = IN_r_q0[31:0];

assign trunc_ln388_1_fu_239_p4 = {{IN_r_q1[63:32]}};

assign trunc_ln388_fu_235_p1 = IN_r_q1[31:0];

assign zext_ln23_fu_257_p1 = trunc_ln1057_reg_345_pp0_iter16_reg;

assign zext_ln24_fu_214_p1 = or_ln24_fu_208_p2;

always @ (posedge ap_clk) begin
    zext_ln24_reg_350[0] <= 1'b1;
    zext_ln24_reg_350[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter1_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter1_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter2_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter2_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter3_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter3_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter4_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter4_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter5_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter5_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter6_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter6_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter7_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter7_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter8_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter8_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter9_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter9_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter10_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter10_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter11_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter11_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter12_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter12_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter13_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter13_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter14_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter14_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter15_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter15_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter16_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter16_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter17_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter17_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter18_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter18_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter19_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter19_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter20_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter20_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter21_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter21_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter22_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter22_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter23_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter23_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter24_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter24_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter25_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter25_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter26_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter26_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter27_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter27_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_350_pp0_iter28_reg[0] <= 1'b1;
    zext_ln24_reg_350_pp0_iter28_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln23_reg_392[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln23_reg_392_pp0_iter18_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln23_reg_392_pp0_iter19_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln23_reg_392_pp0_iter20_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln23_reg_392_pp0_iter21_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln23_reg_392_pp0_iter22_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln23_reg_392_pp0_iter23_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln23_reg_392_pp0_iter24_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln23_reg_392_pp0_iter25_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln23_reg_392_pp0_iter26_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln23_reg_392_pp0_iter27_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln23_reg_392_pp0_iter28_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //fwd_fft_fft_stage_0_020_Pipeline_SKIP_X
