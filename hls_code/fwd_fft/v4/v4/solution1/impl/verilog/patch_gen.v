// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="patch_gen_patch_gen,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7cg-fbvb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.896000,HLS_SYN_LAT=4631,HLS_SYN_TPT=none,HLS_SYN_MEM=60,HLS_SYN_DSP=0,HLS_SYN_FF=915,HLS_SYN_LUT=1036,HLS_VERSION=2021_1}" *)

module patch_gen (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1_TDATA,
        in1_TVALID,
        in1_TREADY,
        in1_TKEEP,
        in1_TSTRB,
        in1_TLAST,
        in2_TDATA,
        in2_TVALID,
        in2_TREADY,
        in2_TKEEP,
        in2_TSTRB,
        in2_TLAST,
        col_ov_pix_out_V_din,
        col_ov_pix_out_V_full_n,
        col_ov_pix_out_V_write,
        ctrl1_reg,
        ctrl2_reg,
        layer1_reg,
        layer2_reg
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] in1_TDATA;
input   in1_TVALID;
output   in1_TREADY;
input  [1:0] in1_TKEEP;
input  [1:0] in1_TSTRB;
input  [0:0] in1_TLAST;
input  [15:0] in2_TDATA;
input   in2_TVALID;
output   in2_TREADY;
input  [1:0] in2_TKEEP;
input  [1:0] in2_TSTRB;
input  [0:0] in2_TLAST;
output  [31:0] col_ov_pix_out_V_din;
input   col_ov_pix_out_V_full_n;
output   col_ov_pix_out_V_write;
input  [31:0] ctrl1_reg;
input  [31:0] ctrl2_reg;
input  [31:0] layer1_reg;
input  [31:0] layer2_reg;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg col_ov_pix_out_V_write;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] empty_fu_94_p1;
reg   [15:0] empty_reg_104;
wire    ap_CS_fsm_state2;
wire   [7:0] empty_19_fu_99_p1;
reg   [7:0] empty_19_reg_109;
wire   [31:0] grp_dataflow_parent_loop_proc1_fu_64_col_ov_pix_out_V_din;
wire    grp_dataflow_parent_loop_proc1_fu_64_col_ov_pix_out_V_write;
wire    grp_dataflow_parent_loop_proc1_fu_64_in1_TREADY;
wire    grp_dataflow_parent_loop_proc1_fu_64_in2_TREADY;
wire    grp_dataflow_parent_loop_proc1_fu_64_ap_start;
wire    grp_dataflow_parent_loop_proc1_fu_64_ap_done;
wire    grp_dataflow_parent_loop_proc1_fu_64_ap_ready;
wire    grp_dataflow_parent_loop_proc1_fu_64_ap_idle;
reg    grp_dataflow_parent_loop_proc1_fu_64_ap_continue;
reg    grp_dataflow_parent_loop_proc1_fu_64_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_sync_grp_dataflow_parent_loop_proc1_fu_64_ap_ready;
wire    ap_sync_grp_dataflow_parent_loop_proc1_fu_64_ap_done;
reg    ap_block_state3_on_subcall_done;
reg    ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_ready;
reg    ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_done;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    regslice_both_in1_V_data_V_U_apdone_blk;
wire   [15:0] in1_TDATA_int_regslice;
wire    in1_TVALID_int_regslice;
reg    in1_TREADY_int_regslice;
wire    regslice_both_in1_V_data_V_U_ack_in;
wire    regslice_both_in1_V_keep_V_U_apdone_blk;
wire   [1:0] in1_TKEEP_int_regslice;
wire    regslice_both_in1_V_keep_V_U_vld_out;
wire    regslice_both_in1_V_keep_V_U_ack_in;
wire    regslice_both_in1_V_strb_V_U_apdone_blk;
wire   [1:0] in1_TSTRB_int_regslice;
wire    regslice_both_in1_V_strb_V_U_vld_out;
wire    regslice_both_in1_V_strb_V_U_ack_in;
wire    regslice_both_in1_V_last_V_U_apdone_blk;
wire   [0:0] in1_TLAST_int_regslice;
wire    regslice_both_in1_V_last_V_U_vld_out;
wire    regslice_both_in1_V_last_V_U_ack_in;
wire    regslice_both_in2_V_data_V_U_apdone_blk;
wire   [15:0] in2_TDATA_int_regslice;
wire    in2_TVALID_int_regslice;
reg    in2_TREADY_int_regslice;
wire    regslice_both_in2_V_data_V_U_ack_in;
wire    regslice_both_in2_V_keep_V_U_apdone_blk;
wire   [1:0] in2_TKEEP_int_regslice;
wire    regslice_both_in2_V_keep_V_U_vld_out;
wire    regslice_both_in2_V_keep_V_U_ack_in;
wire    regslice_both_in2_V_strb_V_U_apdone_blk;
wire   [1:0] in2_TSTRB_int_regslice;
wire    regslice_both_in2_V_strb_V_U_vld_out;
wire    regslice_both_in2_V_strb_V_U_ack_in;
wire    regslice_both_in2_V_last_V_U_apdone_blk;
wire   [0:0] in2_TLAST_int_regslice;
wire    regslice_both_in2_V_last_V_U_vld_out;
wire    regslice_both_in2_V_last_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_dataflow_parent_loop_proc1_fu_64_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_ready = 1'b0;
#0 ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_done = 1'b0;
end

patch_gen_dataflow_parent_loop_proc1 grp_dataflow_parent_loop_proc1_fu_64(
    .layer1_reg_load_cast(empty_reg_104),
    .ctrl2_reg_load_cast(empty_19_reg_109),
    .ctrl1_reg(ctrl1_reg),
    .ctrl2_reg(ctrl2_reg),
    .layer2_reg(layer2_reg),
    .in1_TDATA(in1_TDATA_int_regslice),
    .in1_TKEEP(in1_TKEEP_int_regslice),
    .in1_TSTRB(in1_TSTRB_int_regslice),
    .in1_TLAST(in1_TLAST_int_regslice),
    .in2_TDATA(in2_TDATA_int_regslice),
    .in2_TKEEP(in2_TKEEP_int_regslice),
    .in2_TSTRB(in2_TSTRB_int_regslice),
    .in2_TLAST(in2_TLAST_int_regslice),
    .col_ov_pix_out_V_din(grp_dataflow_parent_loop_proc1_fu_64_col_ov_pix_out_V_din),
    .col_ov_pix_out_V_full_n(col_ov_pix_out_V_full_n),
    .col_ov_pix_out_V_write(grp_dataflow_parent_loop_proc1_fu_64_col_ov_pix_out_V_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ctrl2_reg_load_cast_ap_vld(1'b1),
    .ctrl1_reg_ap_vld(1'b1),
    .ctrl2_reg_ap_vld(1'b1),
    .layer2_reg_ap_vld(1'b1),
    .in1_TVALID(in1_TVALID_int_regslice),
    .in1_TREADY(grp_dataflow_parent_loop_proc1_fu_64_in1_TREADY),
    .in2_TVALID(in2_TVALID_int_regslice),
    .in2_TREADY(grp_dataflow_parent_loop_proc1_fu_64_in2_TREADY),
    .ap_start(grp_dataflow_parent_loop_proc1_fu_64_ap_start),
    .ap_done(grp_dataflow_parent_loop_proc1_fu_64_ap_done),
    .ap_ready(grp_dataflow_parent_loop_proc1_fu_64_ap_ready),
    .ap_idle(grp_dataflow_parent_loop_proc1_fu_64_ap_idle),
    .ap_continue(grp_dataflow_parent_loop_proc1_fu_64_ap_continue)
);

patch_gen_regslice_both #(
    .DataWidth( 16 ))
regslice_both_in1_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_TDATA),
    .vld_in(in1_TVALID),
    .ack_in(regslice_both_in1_V_data_V_U_ack_in),
    .data_out(in1_TDATA_int_regslice),
    .vld_out(in1_TVALID_int_regslice),
    .ack_out(in1_TREADY_int_regslice),
    .apdone_blk(regslice_both_in1_V_data_V_U_apdone_blk)
);

patch_gen_regslice_both #(
    .DataWidth( 2 ))
regslice_both_in1_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_TKEEP),
    .vld_in(in1_TVALID),
    .ack_in(regslice_both_in1_V_keep_V_U_ack_in),
    .data_out(in1_TKEEP_int_regslice),
    .vld_out(regslice_both_in1_V_keep_V_U_vld_out),
    .ack_out(in1_TREADY_int_regslice),
    .apdone_blk(regslice_both_in1_V_keep_V_U_apdone_blk)
);

patch_gen_regslice_both #(
    .DataWidth( 2 ))
regslice_both_in1_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_TSTRB),
    .vld_in(in1_TVALID),
    .ack_in(regslice_both_in1_V_strb_V_U_ack_in),
    .data_out(in1_TSTRB_int_regslice),
    .vld_out(regslice_both_in1_V_strb_V_U_vld_out),
    .ack_out(in1_TREADY_int_regslice),
    .apdone_blk(regslice_both_in1_V_strb_V_U_apdone_blk)
);

patch_gen_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in1_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_TLAST),
    .vld_in(in1_TVALID),
    .ack_in(regslice_both_in1_V_last_V_U_ack_in),
    .data_out(in1_TLAST_int_regslice),
    .vld_out(regslice_both_in1_V_last_V_U_vld_out),
    .ack_out(in1_TREADY_int_regslice),
    .apdone_blk(regslice_both_in1_V_last_V_U_apdone_blk)
);

patch_gen_regslice_both #(
    .DataWidth( 16 ))
regslice_both_in2_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_TDATA),
    .vld_in(in2_TVALID),
    .ack_in(regslice_both_in2_V_data_V_U_ack_in),
    .data_out(in2_TDATA_int_regslice),
    .vld_out(in2_TVALID_int_regslice),
    .ack_out(in2_TREADY_int_regslice),
    .apdone_blk(regslice_both_in2_V_data_V_U_apdone_blk)
);

patch_gen_regslice_both #(
    .DataWidth( 2 ))
regslice_both_in2_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_TKEEP),
    .vld_in(in2_TVALID),
    .ack_in(regslice_both_in2_V_keep_V_U_ack_in),
    .data_out(in2_TKEEP_int_regslice),
    .vld_out(regslice_both_in2_V_keep_V_U_vld_out),
    .ack_out(in2_TREADY_int_regslice),
    .apdone_blk(regslice_both_in2_V_keep_V_U_apdone_blk)
);

patch_gen_regslice_both #(
    .DataWidth( 2 ))
regslice_both_in2_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_TSTRB),
    .vld_in(in2_TVALID),
    .ack_in(regslice_both_in2_V_strb_V_U_ack_in),
    .data_out(in2_TSTRB_int_regslice),
    .vld_out(regslice_both_in2_V_strb_V_U_vld_out),
    .ack_out(in2_TREADY_int_regslice),
    .apdone_blk(regslice_both_in2_V_strb_V_U_apdone_blk)
);

patch_gen_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in2_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_TLAST),
    .vld_in(in2_TVALID),
    .ack_in(regslice_both_in2_V_last_V_U_ack_in),
    .data_out(in2_TLAST_int_regslice),
    .vld_out(regslice_both_in2_V_last_V_U_vld_out),
    .ack_out(in2_TREADY_int_regslice),
    .apdone_blk(regslice_both_in2_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_done <= 1'b0;
        end else if ((grp_dataflow_parent_loop_proc1_fu_64_ap_done == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_ready <= 1'b0;
        end else if ((grp_dataflow_parent_loop_proc1_fu_64_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_dataflow_parent_loop_proc1_fu_64_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) | ((ap_sync_grp_dataflow_parent_loop_proc1_fu_64_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state3)))) begin
            grp_dataflow_parent_loop_proc1_fu_64_ap_start_reg <= 1'b1;
        end else if ((grp_dataflow_parent_loop_proc1_fu_64_ap_ready == 1'b1)) begin
            grp_dataflow_parent_loop_proc1_fu_64_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_19_reg_109 <= empty_19_fu_99_p1;
        empty_reg_104 <= empty_fu_94_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_on_subcall_done)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        col_ov_pix_out_V_write = grp_dataflow_parent_loop_proc1_fu_64_col_ov_pix_out_V_write;
    end else begin
        col_ov_pix_out_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        grp_dataflow_parent_loop_proc1_fu_64_ap_continue = 1'b1;
    end else begin
        grp_dataflow_parent_loop_proc1_fu_64_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in1_TREADY_int_regslice = grp_dataflow_parent_loop_proc1_fu_64_in1_TREADY;
    end else begin
        in1_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in2_TREADY_int_regslice = grp_dataflow_parent_loop_proc1_fu_64_in2_TREADY;
    end else begin
        in2_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state3_on_subcall_done = ((ap_sync_grp_dataflow_parent_loop_proc1_fu_64_ap_ready & ap_sync_grp_dataflow_parent_loop_proc1_fu_64_ap_done) == 1'b0);
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_dataflow_parent_loop_proc1_fu_64_ap_done = (grp_dataflow_parent_loop_proc1_fu_64_ap_done | ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_done);

assign ap_sync_grp_dataflow_parent_loop_proc1_fu_64_ap_ready = (grp_dataflow_parent_loop_proc1_fu_64_ap_ready | ap_sync_reg_grp_dataflow_parent_loop_proc1_fu_64_ap_ready);

assign col_ov_pix_out_V_din = grp_dataflow_parent_loop_proc1_fu_64_col_ov_pix_out_V_din;

assign empty_19_fu_99_p1 = ctrl2_reg[7:0];

assign empty_fu_94_p1 = layer1_reg[15:0];

assign grp_dataflow_parent_loop_proc1_fu_64_ap_start = grp_dataflow_parent_loop_proc1_fu_64_ap_start_reg;

assign in1_TREADY = regslice_both_in1_V_data_V_U_ack_in;

assign in2_TREADY = regslice_both_in2_V_data_V_U_ack_in;

endmodule //patch_gen
