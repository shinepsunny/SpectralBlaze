// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fwd_fft_fft_stage24_Pipeline_SKIP_X (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        trunc_ln2,
        IN_M_real_address0,
        IN_M_real_ce0,
        IN_M_real_q0,
        IN_M_real_address1,
        IN_M_real_ce1,
        IN_M_real_q1,
        IN_M_imag_address0,
        IN_M_imag_ce0,
        IN_M_imag_q0,
        IN_M_imag_address1,
        IN_M_imag_ce1,
        IN_M_imag_q1,
        OUT_r_address0,
        OUT_r_ce0,
        OUT_r_we0,
        OUT_r_d0,
        OUT_r_address1,
        OUT_r_ce1,
        OUT_r_we1,
        OUT_r_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] trunc_ln2;
output  [5:0] IN_M_real_address0;
output   IN_M_real_ce0;
input  [15:0] IN_M_real_q0;
output  [5:0] IN_M_real_address1;
output   IN_M_real_ce1;
input  [15:0] IN_M_real_q1;
output  [5:0] IN_M_imag_address0;
output   IN_M_imag_ce0;
input  [15:0] IN_M_imag_q0;
output  [5:0] IN_M_imag_address1;
output   IN_M_imag_ce1;
input  [15:0] IN_M_imag_q1;
output  [5:0] OUT_r_address0;
output   OUT_r_ce0;
output   OUT_r_we0;
output  [31:0] OUT_r_d0;
output  [5:0] OUT_r_address1;
output   OUT_r_ce1;
output   OUT_r_we1;
output  [31:0] OUT_r_d1;

reg ap_idle;
reg IN_M_real_ce0;
reg IN_M_real_ce1;
reg IN_M_imag_ce0;
reg IN_M_imag_ce1;
reg OUT_r_ce0;
reg OUT_r_we0;
reg OUT_r_ce1;
reg OUT_r_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1057_fu_202_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln1057_fu_217_p1;
reg   [63:0] zext_ln1057_reg_306;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln22_fu_233_p1;
reg   [63:0] zext_ln22_reg_321;
wire    ap_block_pp0_stage0;
reg   [6:0] k1_fu_52;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_k1_3;
wire   [6:0] k1_4_fu_208_p2;
reg   [7:0] m1_fu_56;
reg   [7:0] ap_sig_allocacmp_m1_load;
wire   [7:0] add_ln33_fu_239_p2;
wire   [15:0] mul6_i_i_fu_182_p2;
wire   [15:0] p_r_fu_157_p2;
wire   [15:0] p_r_M_imag_7_fu_141_p2;
wire   [15:0] mul3_i_i_fu_175_p2;
wire   [5:0] trunc_ln1057_fu_223_p1;
wire   [5:0] or_ln22_fu_227_p2;
wire   [15:0] p_r_M_real_3_fu_146_p2;
wire   [15:0] p_r_M_imag_3_fu_151_p2;
wire   [15:0] bitcast_ln23_1_fu_259_p1;
wire   [15:0] bitcast_ln23_fu_255_p1;
wire   [15:0] p_r_M_real_4_fu_163_p2;
wire   [15:0] p_r_M_imag_4_fu_169_p2;
wire   [15:0] bitcast_ln24_1_fu_276_p1;
wire   [15:0] bitcast_ln24_fu_272_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fwd_fft_hadd_16ns_16ns_16_1_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hadd_16ns_16ns_16_1_full_dsp_1_U83(
    .din0(mul6_i_i_fu_182_p2),
    .din1(IN_M_imag_q0),
    .dout(p_r_M_imag_7_fu_141_p2)
);

fwd_fft_hadd_16ns_16ns_16_1_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hadd_16ns_16ns_16_1_full_dsp_1_U84(
    .din0(IN_M_real_q1),
    .din1(p_r_fu_157_p2),
    .dout(p_r_M_real_3_fu_146_p2)
);

fwd_fft_hadd_16ns_16ns_16_1_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hadd_16ns_16ns_16_1_full_dsp_1_U85(
    .din0(IN_M_imag_q1),
    .din1(p_r_M_imag_7_fu_141_p2),
    .dout(p_r_M_imag_3_fu_151_p2)
);

fwd_fft_hsub_16ns_16ns_16_1_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hsub_16ns_16ns_16_1_full_dsp_1_U86(
    .din0(IN_M_real_q0),
    .din1(mul3_i_i_fu_175_p2),
    .dout(p_r_fu_157_p2)
);

fwd_fft_hsub_16ns_16ns_16_1_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hsub_16ns_16ns_16_1_full_dsp_1_U87(
    .din0(IN_M_real_q1),
    .din1(p_r_fu_157_p2),
    .dout(p_r_M_real_4_fu_163_p2)
);

fwd_fft_hsub_16ns_16ns_16_1_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hsub_16ns_16ns_16_1_full_dsp_1_U88(
    .din0(IN_M_imag_q1),
    .din1(p_r_M_imag_7_fu_141_p2),
    .dout(p_r_M_imag_4_fu_169_p2)
);

fwd_fft_hmul_16ns_16ns_16_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hmul_16ns_16ns_16_1_max_dsp_1_U89(
    .din0(IN_M_imag_q0),
    .din1(16'd0),
    .dout(mul3_i_i_fu_175_p2)
);

fwd_fft_hmul_16ns_16ns_16_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hmul_16ns_16ns_16_1_max_dsp_1_U90(
    .din0(IN_M_real_q0),
    .din1(16'd0),
    .dout(mul6_i_i_fu_182_p2)
);

fwd_fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1057_fu_202_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k1_fu_52 <= k1_4_fu_208_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k1_fu_52 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1057_fu_202_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            m1_fu_56 <= add_ln33_fu_239_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            m1_fu_56 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_fu_202_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln1057_reg_306[7 : 0] <= zext_ln1057_fu_217_p1[7 : 0];
        zext_ln22_reg_321[5 : 1] <= zext_ln22_fu_233_p1[5 : 1];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IN_M_imag_ce0 = 1'b1;
    end else begin
        IN_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IN_M_imag_ce1 = 1'b1;
    end else begin
        IN_M_imag_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IN_M_real_ce0 = 1'b1;
    end else begin
        IN_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IN_M_real_ce1 = 1'b1;
    end else begin
        IN_M_real_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OUT_r_ce0 = 1'b1;
    end else begin
        OUT_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OUT_r_ce1 = 1'b1;
    end else begin
        OUT_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OUT_r_we0 = 1'b1;
    end else begin
        OUT_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OUT_r_we1 = 1'b1;
    end else begin
        OUT_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_202_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_k1_3 = 7'd0;
    end else begin
        ap_sig_allocacmp_k1_3 = k1_fu_52;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_m1_load = 8'd0;
    end else begin
        ap_sig_allocacmp_m1_load = m1_fu_56;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IN_M_imag_address0 = zext_ln22_fu_233_p1;

assign IN_M_imag_address1 = zext_ln1057_fu_217_p1;

assign IN_M_real_address0 = zext_ln22_fu_233_p1;

assign IN_M_real_address1 = zext_ln1057_fu_217_p1;

assign OUT_r_address0 = zext_ln22_reg_321;

assign OUT_r_address1 = zext_ln1057_reg_306;

assign OUT_r_d0 = {{bitcast_ln24_1_fu_276_p1}, {bitcast_ln24_fu_272_p1}};

assign OUT_r_d1 = {{bitcast_ln23_1_fu_259_p1}, {bitcast_ln23_fu_255_p1}};

assign add_ln33_fu_239_p2 = (ap_sig_allocacmp_m1_load + 8'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln23_1_fu_259_p1 = p_r_M_imag_3_fu_151_p2;

assign bitcast_ln23_fu_255_p1 = p_r_M_real_3_fu_146_p2;

assign bitcast_ln24_1_fu_276_p1 = p_r_M_imag_4_fu_169_p2;

assign bitcast_ln24_fu_272_p1 = p_r_M_real_4_fu_163_p2;

assign icmp_ln1057_fu_202_p2 = ((ap_sig_allocacmp_k1_3 == trunc_ln2) ? 1'b1 : 1'b0);

assign k1_4_fu_208_p2 = (ap_sig_allocacmp_k1_3 + 7'd1);

assign or_ln22_fu_227_p2 = (trunc_ln1057_fu_223_p1 | 6'd1);

assign trunc_ln1057_fu_223_p1 = ap_sig_allocacmp_m1_load[5:0];

assign zext_ln1057_fu_217_p1 = ap_sig_allocacmp_m1_load;

assign zext_ln22_fu_233_p1 = or_ln22_fu_227_p2;

always @ (posedge ap_clk) begin
    zext_ln1057_reg_306[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln22_reg_321[0] <= 1'b1;
    zext_ln22_reg_321[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //fwd_fft_fft_stage24_Pipeline_SKIP_X
