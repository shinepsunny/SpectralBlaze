// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Rd_Mem_Rd_Mem_Pipeline_VITIS_LOOP_313_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln319,
        burst_buffer2_address0,
        burst_buffer2_ce0,
        burst_buffer2_we0,
        burst_buffer2_d0,
        empty,
        cmp_i56,
        gmem_load
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [10:0] zext_ln319;
output  [10:0] burst_buffer2_address0;
output   burst_buffer2_ce0;
output   burst_buffer2_we0;
output  [127:0] burst_buffer2_d0;
input  [16:0] empty;
input  [0:0] cmp_i56;
input  [127:0] gmem_load;

reg ap_idle;
reg[10:0] burst_buffer2_address0;
reg burst_buffer2_ce0;
reg burst_buffer2_we0;
reg[127:0] burst_buffer2_d0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1057_fu_124_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] cmp_i56_read_reg_172;
wire   [63:0] p_cast_fu_98_p1;
reg   [63:0] p_cast_reg_182;
wire   [63:0] zext_ln319_1_fu_119_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln323_fu_144_p1;
reg   [63:0] ifs_fu_48;
wire   [63:0] add_ln313_fu_149_p2;
wire    ap_loop_init;
wire   [10:0] trunc_ln319_fu_110_p1;
wire   [10:0] add_ln319_fu_114_p2;
wire   [10:0] tmp_8_fu_129_p4;
wire   [10:0] add_ln323_fu_139_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_173;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Rd_Mem_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ifs_fu_48 <= 64'd0;
        end else if (((icmp_ln1057_fu_124_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            ifs_fu_48 <= add_ln313_fu_149_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_cast_reg_182[16 : 0] <= p_cast_fu_98_p1[16 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_124_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_173)) begin
        if ((cmp_i56_read_reg_172 == 1'd1)) begin
            burst_buffer2_address0 = zext_ln323_fu_144_p1;
        end else if ((cmp_i56_read_reg_172 == 1'd0)) begin
            burst_buffer2_address0 = zext_ln319_1_fu_119_p1;
        end else begin
            burst_buffer2_address0 = 'bx;
        end
    end else begin
        burst_buffer2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((cmp_i56_read_reg_172 == 1'd0) & (icmp_ln1057_fu_124_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((cmp_i56_read_reg_172 == 1'd1) & (icmp_ln1057_fu_124_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        burst_buffer2_ce0 = 1'b1;
    end else begin
        burst_buffer2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_173)) begin
        if ((cmp_i56_read_reg_172 == 1'd1)) begin
            burst_buffer2_d0 = gmem_load;
        end else if ((cmp_i56_read_reg_172 == 1'd0)) begin
            burst_buffer2_d0 = 128'd0;
        end else begin
            burst_buffer2_d0 = 'bx;
        end
    end else begin
        burst_buffer2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((cmp_i56_read_reg_172 == 1'd0) & (icmp_ln1057_fu_124_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((cmp_i56_read_reg_172 == 1'd1) & (icmp_ln1057_fu_124_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        burst_buffer2_we0 = 1'b1;
    end else begin
        burst_buffer2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln313_fu_149_p2 = (ifs_fu_48 + 64'd8);

assign add_ln319_fu_114_p2 = (zext_ln319 + trunc_ln319_fu_110_p1);

assign add_ln323_fu_139_p2 = (zext_ln319 + tmp_8_fu_129_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_173 = ((icmp_ln1057_fu_124_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign cmp_i56_read_reg_172 = cmp_i56;

assign icmp_ln1057_fu_124_p2 = ((ifs_fu_48 == p_cast_reg_182) ? 1'b1 : 1'b0);

assign p_cast_fu_98_p1 = empty;

assign tmp_8_fu_129_p4 = {{ifs_fu_48[13:3]}};

assign trunc_ln319_fu_110_p1 = ifs_fu_48[10:0];

assign zext_ln319_1_fu_119_p1 = add_ln319_fu_114_p2;

assign zext_ln323_fu_144_p1 = add_ln323_fu_139_p2;

always @ (posedge ap_clk) begin
    p_cast_reg_182[63:17] <= 47'b00000000000000000000000000000000000000000000000;
end

endmodule //Rd_Mem_Rd_Mem_Pipeline_VITIS_LOOP_313_6
