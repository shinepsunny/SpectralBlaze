// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Mem_patch_Wr_VITIS_LOOP_570_6_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        ifmap_CF_M_real1_address0,
        ifmap_CF_M_real1_ce0,
        ifmap_CF_M_real1_q0,
        ifmap_CF_M_imag2_address0,
        ifmap_CF_M_imag2_ce0,
        ifmap_CF_M_imag2_q0,
        fft_out,
        fft_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] p_read;
output  [5:0] ifmap_CF_M_real1_address0;
output   ifmap_CF_M_real1_ce0;
input  [1023:0] ifmap_CF_M_real1_q0;
output  [5:0] ifmap_CF_M_imag2_address0;
output   ifmap_CF_M_imag2_ce0;
input  [1023:0] ifmap_CF_M_imag2_q0;
output  [127:0] fft_out;
output   fft_out_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ifmap_CF_M_real1_ce0;
reg ifmap_CF_M_imag2_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] cmp_i_i2652_fu_91_p2;
reg   [0:0] cmp_i_i2652_reg_165;
wire   [8:0] p_read_cast_fu_97_p1;
reg   [8:0] p_read_cast_reg_169;
wire   [7:0] add_ln570_fu_114_p2;
reg   [7:0] add_ln570_reg_177;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1057_fu_109_p2;
reg   [6:0] tmp_reg_192;
reg   [1023:0] ifmap_CF_M_real1_load_reg_197;
wire    ap_CS_fsm_state3;
reg   [1023:0] ifmap_CF_M_imag2_load_reg_202;
wire   [8:0] tmp_21_fu_141_p3;
reg   [8:0] tmp_21_reg_207;
wire    grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80_ap_start;
wire    grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80_ap_done;
wire    grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80_ap_idle;
wire    grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80_ap_ready;
wire   [127:0] grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80_fft_out;
wire    grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80_fft_out_ap_vld;
reg    grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80_ap_start_reg;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln546_fu_120_p1;
reg   [7:0] y_fu_44;
reg    ap_block_state4_on_subcall_done;
reg    ap_block_state1;
wire   [8:0] add_ln1057_fu_126_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80_ap_start_reg = 1'b0;
end

Mem_patch_Wr_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7 grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80_ap_start),
    .ap_done(grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80_ap_done),
    .ap_idle(grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80_ap_idle),
    .ap_ready(grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80_ap_ready),
    .empty(tmp_21_reg_207),
    .ifmap_CF_M_real1_load(ifmap_CF_M_real1_load_reg_197),
    .ifmap_CF_M_imag2_load(ifmap_CF_M_imag2_load_reg_202),
    .fft_out(grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80_fft_out),
    .fft_out_ap_vld(grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80_fft_out_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln1057_fu_109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80_ap_start_reg <= 1'b1;
        end else if ((grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80_ap_ready == 1'b1)) begin
            grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_fu_44 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        y_fu_44 <= add_ln570_reg_177;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln570_reg_177 <= add_ln570_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        cmp_i_i2652_reg_165 <= cmp_i_i2652_fu_91_p2;
        p_read_cast_reg_169[7 : 0] <= p_read_cast_fu_97_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ifmap_CF_M_imag2_load_reg_202 <= ifmap_CF_M_imag2_q0;
        ifmap_CF_M_real1_load_reg_197 <= ifmap_CF_M_real1_q0;
        tmp_21_reg_207[8 : 2] <= tmp_21_fu_141_p3[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_fu_109_p2 == 1'd0) & (cmp_i_i2652_reg_165 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_192 <= {{add_ln1057_fu_126_p2[8:2]}};
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_on_subcall_done)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ifmap_CF_M_imag2_ce0 = 1'b1;
    end else begin
        ifmap_CF_M_imag2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ifmap_CF_M_real1_ce0 = 1'b1;
    end else begin
        ifmap_CF_M_real1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln1057_fu_109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((icmp_ln1057_fu_109_p2 == 1'd0) & (cmp_i_i2652_reg_165 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1057_fu_126_p2 = (p_read_cast_reg_169 + 9'd3);

assign add_ln570_fu_114_p2 = (y_fu_44 + 8'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state4_on_subcall_done = ((grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80_ap_done == 1'b0) & (cmp_i_i2652_reg_165 == 1'd0));
end

assign cmp_i_i2652_fu_91_p2 = ((p_read == 8'd0) ? 1'b1 : 1'b0);

assign fft_out = grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80_fft_out;

assign fft_out_ap_vld = grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80_fft_out_ap_vld;

assign grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80_ap_start = grp_VITIS_LOOP_570_6_proc_Pipeline_VITIS_LOOP_573_7_fu_80_ap_start_reg;

assign icmp_ln1057_fu_109_p2 = ((y_fu_44 == p_read) ? 1'b1 : 1'b0);

assign ifmap_CF_M_imag2_address0 = zext_ln546_fu_120_p1;

assign ifmap_CF_M_real1_address0 = zext_ln546_fu_120_p1;

assign p_read_cast_fu_97_p1 = p_read;

assign tmp_21_fu_141_p3 = {{tmp_reg_192}, {2'd0}};

assign zext_ln546_fu_120_p1 = y_fu_44;

always @ (posedge ap_clk) begin
    p_read_cast_reg_169[8] <= 1'b0;
    tmp_21_reg_207[1:0] <= 2'b00;
end

endmodule //Mem_patch_Wr_VITIS_LOOP_570_6_proc
