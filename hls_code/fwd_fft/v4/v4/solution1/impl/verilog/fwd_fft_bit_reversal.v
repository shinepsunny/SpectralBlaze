// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fwd_fft_bit_reversal (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        IN_r_address0,
        IN_r_ce0,
        IN_r_q0,
        OUT_r_address0,
        OUT_r_ce0,
        OUT_r_we0,
        OUT_r_d0,
        p_read,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [5:0] IN_r_address0;
output   IN_r_ce0;
input  [63:0] IN_r_q0;
output  [5:0] OUT_r_address0;
output   OUT_r_ce0;
output   OUT_r_we0;
output  [63:0] OUT_r_d0;
input  [31:0] p_read;
output  [31:0] ap_return;

reg ap_idle;
reg IN_r_ce0;
reg OUT_r_ce0;
reg OUT_r_we0;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1057_fu_113_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [7:0] x_14_reg_194;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln573_fu_173_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln1057_fu_183_p1;
reg   [7:0] x_fu_54;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_x_14;
wire   [7:0] add_ln55_fu_119_p2;
wire   [7:0] empty_fu_91_p1;
wire   [2:0] p_cast_cast_cast_fu_95_p4;
wire   [2:0] sub_ln674_fu_135_p2;
wire   [2:0] sub_ln674_2_fu_141_p2;
reg   [5:0] tmp_fu_125_p4;
wire   [5:0] zext_ln674_fu_147_p1;
wire   [5:0] zext_ln674_2_fu_151_p1;
wire   [5:0] lshr_ln674_fu_155_p2;
wire   [5:0] lshr_ln674_2_fu_161_p2;
wire   [5:0] p_Result_s_fu_167_p2;
reg   [31:0] ap_return_preg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_95;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_return_preg = 32'd0;
end

fwd_fft_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if (((icmp_ln1057_fu_113_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_return_preg <= p_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_95)) begin
        if ((icmp_ln1057_fu_113_p2 == 1'd0)) begin
            x_fu_54 <= add_ln55_fu_119_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            x_fu_54 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_14_reg_194 <= ap_sig_allocacmp_x_14;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IN_r_ce0 = 1'b1;
    end else begin
        IN_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OUT_r_ce0 = 1'b1;
    end else begin
        OUT_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OUT_r_we0 = 1'b1;
    end else begin
        OUT_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_113_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_113_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_return = p_read;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_x_14 = 8'd0;
    end else begin
        ap_sig_allocacmp_x_14 = x_fu_54;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IN_r_address0 = zext_ln573_fu_173_p1;

assign OUT_r_address0 = zext_ln1057_fu_183_p1;

assign OUT_r_d0 = IN_r_q0;

assign add_ln55_fu_119_p2 = (ap_sig_allocacmp_x_14 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_95 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_fu_91_p1 = p_read[7:0];

assign icmp_ln1057_fu_113_p2 = ((ap_sig_allocacmp_x_14 == empty_fu_91_p1) ? 1'b1 : 1'b0);

assign lshr_ln674_2_fu_161_p2 = 6'd63 >> zext_ln674_2_fu_151_p1;

assign lshr_ln674_fu_155_p2 = tmp_fu_125_p4 >> zext_ln674_fu_147_p1;

assign p_Result_s_fu_167_p2 = (lshr_ln674_fu_155_p2 & lshr_ln674_2_fu_161_p2);

assign p_cast_cast_cast_fu_95_p4 = {{p_read[10:8]}};

assign sub_ln674_2_fu_141_p2 = ($signed(3'd6) - $signed(p_cast_cast_cast_fu_95_p4));

assign sub_ln674_fu_135_p2 = ($signed(3'd6) - $signed(p_cast_cast_cast_fu_95_p4));

integer ap_tvar_int_0;

always @ (ap_sig_allocacmp_x_14) begin
    for (ap_tvar_int_0 = 6 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 5 - 0) begin
            tmp_fu_125_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_fu_125_p4[ap_tvar_int_0] = ap_sig_allocacmp_x_14[5 - ap_tvar_int_0];
        end
    end
end

assign zext_ln1057_fu_183_p1 = x_14_reg_194;

assign zext_ln573_fu_173_p1 = p_Result_s_fu_167_p2;

assign zext_ln674_2_fu_151_p1 = sub_ln674_2_fu_141_p2;

assign zext_ln674_fu_147_p1 = sub_ln674_fu_135_p2;

endmodule //fwd_fft_bit_reversal
