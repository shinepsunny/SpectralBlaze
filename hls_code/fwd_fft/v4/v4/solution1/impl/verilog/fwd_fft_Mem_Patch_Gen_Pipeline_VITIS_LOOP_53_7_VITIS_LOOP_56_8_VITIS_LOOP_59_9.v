// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fwd_fft_Mem_Patch_Gen_Pipeline_VITIS_LOOP_53_7_VITIS_LOOP_56_8_VITIS_LOOP_59_9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        c_ifmap_patch_st_din,
        c_ifmap_patch_st_full_n,
        c_ifmap_patch_st_write,
        mul_ln30,
        p_cast,
        bound4,
        bound,
        p_cast3_cast,
        cmp_i_not_mid119,
        p_cast6,
        icmp_ln1057_15,
        burst_buffer1_address0,
        burst_buffer1_ce0,
        burst_buffer1_q0,
        burst_buffer2_address0,
        burst_buffer2_ce0,
        burst_buffer2_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] c_ifmap_patch_st_din;
input   c_ifmap_patch_st_full_n;
output   c_ifmap_patch_st_write;
input  [15:0] mul_ln30;
input  [15:0] p_cast;
input  [23:0] bound4;
input  [15:0] bound;
input  [7:0] p_cast3_cast;
input  [0:0] cmp_i_not_mid119;
input  [7:0] p_cast6;
input  [0:0] icmp_ln1057_15;
output  [10:0] burst_buffer1_address0;
output   burst_buffer1_ce0;
input  [127:0] burst_buffer1_q0;
output  [10:0] burst_buffer2_address0;
output   burst_buffer2_ce0;
input  [127:0] burst_buffer2_q0;

reg ap_idle;
reg c_ifmap_patch_st_write;
reg burst_buffer1_ce0;
reg burst_buffer2_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1057_fu_255_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    c_ifmap_patch_st_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] p_cast3_cast_cast_fu_213_p1;
reg   [15:0] p_cast3_cast_cast_reg_795;
reg   [0:0] icmp_ln1057_reg_800;
reg   [0:0] icmp_ln1057_reg_800_pp0_iter2_reg;
wire   [0:0] icmp_ln1057_8_fu_278_p2;
reg   [0:0] icmp_ln1057_8_reg_804;
reg   [0:0] icmp_ln1057_8_reg_804_pp0_iter2_reg;
reg   [0:0] icmp_ln1057_8_reg_804_pp0_iter3_reg;
reg   [7:0] y_4_reg_818;
wire   [0:0] rev20_fu_341_p2;
reg   [0:0] rev20_reg_823;
wire   [0:0] select_ln13_3_fu_362_p3;
reg   [0:0] select_ln13_3_reg_828;
wire   [7:0] add_ln56_fu_368_p2;
reg   [7:0] add_ln56_reg_834;
wire   [15:0] add_i_i_mid1_fu_391_p2;
reg   [15:0] add_i_i_mid1_reg_839;
wire   [0:0] or_ln63_fu_490_p2;
reg   [0:0] or_ln63_reg_849;
reg   [0:0] or_ln63_reg_849_pp0_iter5_reg;
wire  signed [35:0] shl_ln2_fu_512_p3;
reg  signed [35:0] shl_ln2_reg_865;
wire   [64:0] add_ln130_fu_534_p2;
reg   [64:0] add_ln130_reg_870;
wire   [0:0] icmp_ln130_fu_550_p2;
reg   [0:0] icmp_ln130_reg_875;
reg   [127:0] burst_buffer1_load_reg_880;
wire   [127:0] zext_ln130_fu_619_p1;
reg   [127:0] zext_ln130_reg_885;
wire   [127:0] sub_ln130_fu_645_p2;
reg   [127:0] sub_ln130_reg_891;
reg   [127:0] burst_buffer2_load_reg_897;
reg    ap_condition_exit_pp0_iter3_stage0;
wire   [63:0] zext_ln54_fu_506_p1;
reg   [7:0] lhs_fu_104;
wire   [7:0] x_fu_408_p2;
wire    ap_loop_init;
reg   [31:0] rd_i_1_fu_108;
wire   [31:0] rd_i_fu_590_p3;
reg   [31:0] rd_j_1_fu_112;
wire   [31:0] rd_j_fu_598_p3;
reg   [7:0] y_fu_116;
wire   [7:0] select_ln1057_5_fu_396_p3;
reg   [15:0] indvar_flatten_fu_120;
wire   [15:0] select_ln1057_6_fu_301_p3;
reg   [7:0] pnx_fu_124;
wire   [7:0] select_ln13_1_fu_283_p3;
reg   [23:0] indvar_flatten23_fu_128;
wire   [23:0] add_ln1057_2_fu_260_p2;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] pnx_5_fu_272_p2;
wire   [15:0] add_ln1057_fu_295_p2;
wire   [15:0] y_cast_fu_327_p1;
wire   [15:0] add_i_i_fu_331_p2;
wire   [0:0] ult_fu_336_p2;
wire   [0:0] icmp_ln1057_9_fu_357_p2;
wire   [7:0] select_ln13_fu_350_p3;
wire   [0:0] or_ln1057_fu_374_p2;
wire   [15:0] y_cast_mid1_fu_387_p1;
wire   [7:0] select_ln1057_fu_379_p3;
wire   [5:0] trunc_ln54_1_fu_438_p1;
wire   [5:0] trunc_ln54_fu_435_p1;
wire   [5:0] select_ln13_4_fu_441_p3;
wire   [5:0] select_ln1057_3_fu_448_p3;
wire   [0:0] ult21_fu_463_p2;
wire   [0:0] rev22_fu_467_p2;
wire   [0:0] select_ln13_2_fu_430_p3;
wire   [15:0] grp_fu_700_p3;
wire   [0:0] icmp_ln63_fu_480_p2;
wire   [0:0] xor_ln63_fu_484_p2;
wire   [0:0] select_ln1057_4_fu_473_p3;
wire   [10:0] tmp_15_cast_fu_455_p3;
wire   [10:0] trunc_ln54_2_fu_496_p1;
wire   [10:0] add_ln54_fu_500_p2;
wire   [35:0] or_ln130_fu_520_p2;
wire  signed [63:0] sext_ln130_1_fu_526_p1;
wire   [64:0] zext_ln130_1_fu_530_p1;
wire   [57:0] tmp_fu_540_p4;
wire   [31:0] rd_j_2_fu_556_p2;
wire   [0:0] icmp_ln67_fu_562_p2;
wire   [31:0] add_ln68_fu_568_p2;
wire   [31:0] rd_i_2_fu_574_p3;
wire   [31:0] rd_j_3_fu_582_p3;
wire  signed [63:0] sext_ln130_fu_616_p1;
wire   [127:0] zext_ln130_2_fu_623_p1;
wire   [127:0] shl_ln130_fu_626_p2;
wire   [127:0] select_ln130_fu_632_p3;
wire   [127:0] shl_ln130_1_fu_639_p2;
wire   [127:0] and_ln130_fu_651_p2;
wire   [127:0] lshr_ln130_fu_655_p2;
wire   [127:0] and_ln130_1_fu_664_p2;
wire   [127:0] lshr_ln130_1_fu_668_p2;
wire   [15:0] trunc_ln130_1_fu_673_p1;
wire   [15:0] trunc_ln130_fu_660_p1;
wire   [15:0] select_ln63_fu_677_p3;
wire   [15:0] select_ln63_1_fu_684_p3;
wire   [7:0] grp_fu_700_p0;
wire   [7:0] grp_fu_700_p1;
wire   [7:0] grp_fu_700_p2;
reg    grp_fu_700_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [15:0] grp_fu_700_p00;
wire   [15:0] grp_fu_700_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fwd_fft_mac_muladd_8ns_8ns_8ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_8ns_16_4_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_700_p0),
    .din1(grp_fu_700_p1),
    .din2(grp_fu_700_p2),
    .ce(grp_fu_700_ce),
    .dout(grp_fu_700_p3)
);

fwd_fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter3_stage0)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten23_fu_128 <= 24'd0;
        end else if (((icmp_ln1057_fu_255_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten23_fu_128 <= add_ln1057_2_fu_260_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_120 <= 16'd0;
        end else if (((icmp_ln1057_fu_255_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_120 <= select_ln1057_6_fu_301_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lhs_fu_104 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln1057_reg_800_pp0_iter2_reg == 1'd0))) begin
            lhs_fu_104 <= x_fu_408_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            pnx_fu_124 <= 8'd0;
        end else if (((icmp_ln1057_fu_255_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            pnx_fu_124 <= select_ln13_1_fu_283_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            rd_i_1_fu_108 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            rd_i_1_fu_108 <= rd_i_fu_590_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            rd_j_1_fu_112 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            rd_j_1_fu_112 <= rd_j_fu_598_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            y_fu_116 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln1057_reg_800_pp0_iter2_reg == 1'd0))) begin
            y_fu_116 <= select_ln1057_5_fu_396_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1057_reg_800_pp0_iter2_reg == 1'd0))) begin
        add_i_i_mid1_reg_839 <= add_i_i_mid1_fu_391_p2;
        add_ln56_reg_834 <= add_ln56_fu_368_p2;
        select_ln13_3_reg_828 <= select_ln13_3_fu_362_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln130_reg_870[64 : 4] <= add_ln130_fu_534_p2[64 : 4];
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        burst_buffer1_load_reg_880 <= burst_buffer1_q0;
        burst_buffer2_load_reg_897 <= burst_buffer2_q0;
        icmp_ln1057_8_reg_804_pp0_iter2_reg <= icmp_ln1057_8_reg_804;
        icmp_ln1057_8_reg_804_pp0_iter3_reg <= icmp_ln1057_8_reg_804_pp0_iter2_reg;
        icmp_ln1057_reg_800_pp0_iter2_reg <= icmp_ln1057_reg_800;
        icmp_ln130_reg_875 <= icmp_ln130_fu_550_p2;
        or_ln63_reg_849 <= or_ln63_fu_490_p2;
        or_ln63_reg_849_pp0_iter5_reg <= or_ln63_reg_849;
        shl_ln2_reg_865[35 : 4] <= shl_ln2_fu_512_p3[35 : 4];
        sub_ln130_reg_891 <= sub_ln130_fu_645_p2;
        y_4_reg_818 <= y_fu_116;
        zext_ln130_reg_885[63 : 4] <= zext_ln130_fu_619_p1[63 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln1057_reg_800 <= icmp_ln1057_fu_255_p2;
        p_cast3_cast_cast_reg_795[7 : 0] <= p_cast3_cast_cast_fu_213_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_fu_255_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1057_8_reg_804 <= icmp_ln1057_8_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1057_8_reg_804_pp0_iter2_reg == 1'd0))) begin
        rev20_reg_823 <= rev20_fu_341_p2;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_255_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln1057_reg_800_pp0_iter2_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        burst_buffer1_ce0 = 1'b1;
    end else begin
        burst_buffer1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        burst_buffer2_ce0 = 1'b1;
    end else begin
        burst_buffer2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        c_ifmap_patch_st_blk_n = c_ifmap_patch_st_full_n;
    end else begin
        c_ifmap_patch_st_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        c_ifmap_patch_st_write = 1'b1;
    end else begin
        c_ifmap_patch_st_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_700_ce = 1'b1;
    end else begin
        grp_fu_700_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_i_i_fu_331_p2 = (mul_ln30 + y_cast_fu_327_p1);

assign add_i_i_mid1_fu_391_p2 = (mul_ln30 + y_cast_mid1_fu_387_p1);

assign add_ln1057_2_fu_260_p2 = (indvar_flatten23_fu_128 + 24'd1);

assign add_ln1057_fu_295_p2 = (indvar_flatten_fu_120 + 16'd1);

assign add_ln130_fu_534_p2 = (zext_ln130_1_fu_530_p1 + 65'd1);

assign add_ln54_fu_500_p2 = (tmp_15_cast_fu_455_p3 + trunc_ln54_2_fu_496_p1);

assign add_ln56_fu_368_p2 = (select_ln13_fu_350_p3 + 8'd1);

assign add_ln68_fu_568_p2 = (rd_i_1_fu_108 + 32'd1);

assign and_ln130_1_fu_664_p2 = (sub_ln130_reg_891 & burst_buffer2_load_reg_897);

assign and_ln130_fu_651_p2 = (sub_ln130_reg_891 & burst_buffer1_load_reg_880);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((c_ifmap_patch_st_full_n == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((c_ifmap_patch_st_full_n == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((c_ifmap_patch_st_full_n == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter6 = (c_ifmap_patch_st_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign burst_buffer1_address0 = zext_ln54_fu_506_p1;

assign burst_buffer2_address0 = zext_ln54_fu_506_p1;

assign c_ifmap_patch_st_din = {{select_ln63_fu_677_p3}, {select_ln63_1_fu_684_p3}};

assign grp_fu_700_p0 = grp_fu_700_p00;

assign grp_fu_700_p00 = select_ln13_1_fu_283_p3;

assign grp_fu_700_p1 = p_cast3_cast_cast_reg_795;

assign grp_fu_700_p2 = grp_fu_700_p20;

assign grp_fu_700_p20 = select_ln1057_fu_379_p3;

assign icmp_ln1057_8_fu_278_p2 = ((indvar_flatten_fu_120 == bound) ? 1'b1 : 1'b0);

assign icmp_ln1057_9_fu_357_p2 = ((lhs_fu_104 == p_cast6) ? 1'b1 : 1'b0);

assign icmp_ln1057_fu_255_p2 = ((indvar_flatten23_fu_128 == bound4) ? 1'b1 : 1'b0);

assign icmp_ln130_fu_550_p2 = ((tmp_fu_540_p4 != 58'd0) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_480_p2 = ((grp_fu_700_p3 < p_cast) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_562_p2 = ((rd_j_2_fu_556_p2 == 32'd8) ? 1'b1 : 1'b0);

assign lshr_ln130_1_fu_668_p2 = and_ln130_1_fu_664_p2 >> zext_ln130_reg_885;

assign lshr_ln130_fu_655_p2 = and_ln130_fu_651_p2 >> zext_ln130_reg_885;

assign or_ln1057_fu_374_p2 = (select_ln13_3_fu_362_p3 | icmp_ln1057_8_reg_804_pp0_iter2_reg);

assign or_ln130_fu_520_p2 = (shl_ln2_fu_512_p3 | 36'd15);

assign or_ln63_fu_490_p2 = (xor_ln63_fu_484_p2 | select_ln1057_4_fu_473_p3);

assign p_cast3_cast_cast_fu_213_p1 = p_cast3_cast;

assign pnx_5_fu_272_p2 = (pnx_fu_124 + 8'd1);

assign rd_i_2_fu_574_p3 = ((icmp_ln67_fu_562_p2[0:0] == 1'b1) ? add_ln68_fu_568_p2 : rd_i_1_fu_108);

assign rd_i_fu_590_p3 = ((or_ln63_fu_490_p2[0:0] == 1'b1) ? rd_i_1_fu_108 : rd_i_2_fu_574_p3);

assign rd_j_2_fu_556_p2 = (rd_j_1_fu_112 + 32'd1);

assign rd_j_3_fu_582_p3 = ((icmp_ln67_fu_562_p2[0:0] == 1'b1) ? 32'd0 : rd_j_2_fu_556_p2);

assign rd_j_fu_598_p3 = ((or_ln63_fu_490_p2[0:0] == 1'b1) ? rd_j_1_fu_112 : rd_j_3_fu_582_p3);

assign rev20_fu_341_p2 = (ult_fu_336_p2 ^ 1'd1);

assign rev22_fu_467_p2 = (ult21_fu_463_p2 ^ 1'd1);

assign select_ln1057_3_fu_448_p3 = ((select_ln13_3_reg_828[0:0] == 1'b1) ? trunc_ln54_fu_435_p1 : select_ln13_4_fu_441_p3);

assign select_ln1057_4_fu_473_p3 = ((select_ln13_3_reg_828[0:0] == 1'b1) ? rev22_fu_467_p2 : select_ln13_2_fu_430_p3);

assign select_ln1057_5_fu_396_p3 = ((select_ln13_3_fu_362_p3[0:0] == 1'b1) ? add_ln56_fu_368_p2 : select_ln13_fu_350_p3);

assign select_ln1057_6_fu_301_p3 = ((icmp_ln1057_8_fu_278_p2[0:0] == 1'b1) ? 16'd1 : add_ln1057_fu_295_p2);

assign select_ln1057_fu_379_p3 = ((or_ln1057_fu_374_p2[0:0] == 1'b1) ? 8'd0 : lhs_fu_104);

assign select_ln130_fu_632_p3 = ((icmp_ln130_reg_875[0:0] == 1'b1) ? 128'd0 : shl_ln130_fu_626_p2);

assign select_ln13_1_fu_283_p3 = ((icmp_ln1057_8_fu_278_p2[0:0] == 1'b1) ? pnx_5_fu_272_p2 : pnx_fu_124);

assign select_ln13_2_fu_430_p3 = ((icmp_ln1057_8_reg_804_pp0_iter3_reg[0:0] == 1'b1) ? cmp_i_not_mid119 : rev20_reg_823);

assign select_ln13_3_fu_362_p3 = ((icmp_ln1057_8_reg_804_pp0_iter2_reg[0:0] == 1'b1) ? icmp_ln1057_15 : icmp_ln1057_9_fu_357_p2);

assign select_ln13_4_fu_441_p3 = ((icmp_ln1057_8_reg_804_pp0_iter3_reg[0:0] == 1'b1) ? 6'd0 : trunc_ln54_1_fu_438_p1);

assign select_ln13_fu_350_p3 = ((icmp_ln1057_8_reg_804_pp0_iter2_reg[0:0] == 1'b1) ? 8'd0 : y_fu_116);

assign select_ln63_1_fu_684_p3 = ((or_ln63_reg_849_pp0_iter5_reg[0:0] == 1'b1) ? 16'd0 : trunc_ln130_fu_660_p1);

assign select_ln63_fu_677_p3 = ((or_ln63_reg_849_pp0_iter5_reg[0:0] == 1'b1) ? 16'd0 : trunc_ln130_1_fu_673_p1);

assign sext_ln130_1_fu_526_p1 = $signed(or_ln130_fu_520_p2);

assign sext_ln130_fu_616_p1 = shl_ln2_reg_865;

assign shl_ln130_1_fu_639_p2 = 128'd1 << zext_ln130_fu_619_p1;

assign shl_ln130_fu_626_p2 = 128'd1 << zext_ln130_2_fu_623_p1;

assign shl_ln2_fu_512_p3 = {{rd_j_1_fu_112}, {4'd0}};

assign sub_ln130_fu_645_p2 = (select_ln130_fu_632_p3 - shl_ln130_1_fu_639_p2);

assign tmp_15_cast_fu_455_p3 = {{select_ln1057_3_fu_448_p3}, {5'd0}};

assign tmp_fu_540_p4 = {{add_ln130_fu_534_p2[64:7]}};

assign trunc_ln130_1_fu_673_p1 = lshr_ln130_1_fu_668_p2[15:0];

assign trunc_ln130_fu_660_p1 = lshr_ln130_fu_655_p2[15:0];

assign trunc_ln54_1_fu_438_p1 = y_4_reg_818[5:0];

assign trunc_ln54_2_fu_496_p1 = rd_i_1_fu_108[10:0];

assign trunc_ln54_fu_435_p1 = add_ln56_reg_834[5:0];

assign ult21_fu_463_p2 = ((add_i_i_mid1_reg_839 < p_cast) ? 1'b1 : 1'b0);

assign ult_fu_336_p2 = ((add_i_i_fu_331_p2 < p_cast) ? 1'b1 : 1'b0);

assign x_fu_408_p2 = (select_ln1057_fu_379_p3 + 8'd1);

assign xor_ln63_fu_484_p2 = (icmp_ln63_fu_480_p2 ^ 1'd1);

assign y_cast_fu_327_p1 = y_fu_116;

assign y_cast_mid1_fu_387_p1 = add_ln56_fu_368_p2;

assign zext_ln130_1_fu_530_p1 = $unsigned(sext_ln130_1_fu_526_p1);

assign zext_ln130_2_fu_623_p1 = add_ln130_reg_870;

assign zext_ln130_fu_619_p1 = $unsigned(sext_ln130_fu_616_p1);

assign zext_ln54_fu_506_p1 = add_ln54_fu_500_p2;

always @ (posedge ap_clk) begin
    p_cast3_cast_cast_reg_795[15:8] <= 8'b00000000;
    shl_ln2_reg_865[3:0] <= 4'b0000;
    add_ln130_reg_870[3:0] <= 4'b0000;
    zext_ln130_reg_885[3:0] <= 4'b0000;
    zext_ln130_reg_885[127:64] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //fwd_fft_Mem_Patch_Gen_Pipeline_VITIS_LOOP_53_7_VITIS_LOOP_56_8_VITIS_LOOP_59_9
