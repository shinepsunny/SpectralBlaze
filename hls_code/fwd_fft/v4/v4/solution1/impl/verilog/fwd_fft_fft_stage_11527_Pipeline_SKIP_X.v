// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fwd_fft_fft_stage_11527_Pipeline_SKIP_X (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        trunc_ln16,
        IN_r_address0,
        IN_r_ce0,
        IN_r_q0,
        IN_r_address1,
        IN_r_ce1,
        IN_r_q1,
        OUT_r_address0,
        OUT_r_ce0,
        OUT_r_we0,
        OUT_r_d0,
        OUT_r_address1,
        OUT_r_ce1,
        OUT_r_we1,
        OUT_r_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] trunc_ln16;
output  [5:0] IN_r_address0;
output   IN_r_ce0;
input  [31:0] IN_r_q0;
output  [5:0] IN_r_address1;
output   IN_r_ce1;
input  [31:0] IN_r_q1;
output  [5:0] OUT_r_address0;
output   OUT_r_ce0;
output   OUT_r_we0;
output  [31:0] OUT_r_d0;
output  [5:0] OUT_r_address1;
output   OUT_r_ce1;
output   OUT_r_we1;
output  [31:0] OUT_r_d1;

reg ap_idle;
reg IN_r_ce0;
reg IN_r_ce1;
reg OUT_r_ce0;
reg OUT_r_we0;
reg OUT_r_ce1;
reg OUT_r_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1057_fu_222_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [7:0] w_M_real40_address0;
reg    w_M_real40_ce0;
wire   [15:0] w_M_real40_q0;
wire   [7:0] w_M_imag31_address0;
reg    w_M_imag31_ce0;
wire   [15:0] w_M_imag31_q0;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln21_fu_269_p1;
reg   [63:0] zext_ln21_reg_481;
wire   [63:0] zext_ln22_fu_280_p1;
reg   [63:0] zext_ln22_reg_491;
wire   [63:0] zext_ln20_fu_257_p1;
wire    ap_block_pp0_stage0;
reg   [6:0] k1_fu_58;
wire   [6:0] k1_16_fu_227_p2;
wire    ap_loop_init;
reg   [31:0] j1_fu_62;
wire   [31:0] j1_18_fu_325_p3;
reg   [31:0] m1_fu_66;
wire   [31:0] m1_12_fu_333_p3;
wire   [15:0] mul6_i_i_fu_192_p2;
wire   [15:0] mul9_i_i_fu_198_p2;
wire   [15:0] t1_M_real_fu_370_p1;
wire   [15:0] p_r_fu_165_p2;
wire   [15:0] t1_M_imag_fu_376_p1;
wire   [15:0] p_r_M_imag_24_fu_152_p2;
wire   [15:0] mul_i_i_fu_180_p2;
wire   [15:0] mul3_i_i_fu_186_p2;
wire   [15:0] p_r_M_real_fu_396_p1;
wire   [15:0] p_r_M_imag_fu_402_p1;
wire   [7:0] trunc_ln20_fu_247_p1;
wire   [7:0] add_ln20_fu_251_p2;
wire   [5:0] trunc_ln1057_6_fu_243_p1;
wire   [5:0] trunc_ln1057_fu_239_p1;
wire   [5:0] add_ln21_fu_263_p2;
wire   [5:0] add_ln22_fu_274_p2;
wire   [0:0] icmp_ln30_fu_297_p2;
wire   [31:0] add_ln33_fu_303_p2;
wire   [0:0] icmp_ln26_fu_285_p2;
wire   [31:0] j1_16_fu_291_p2;
wire   [31:0] j1_17_fu_309_p3;
wire   [31:0] m1_11_fu_317_p3;
wire   [15:0] trunc_ln21_fu_356_p1;
wire   [15:0] trunc_ln21_2_fu_360_p4;
wire   [15:0] trunc_ln388_fu_382_p1;
wire   [15:0] trunc_ln388_2_fu_386_p4;
wire   [15:0] p_r_M_real_7_fu_156_p2;
wire   [15:0] p_r_M_imag_8_fu_160_p2;
wire   [15:0] bitcast_ln23_1_fu_412_p1;
wire   [15:0] bitcast_ln23_fu_408_p1;
wire   [15:0] p_r_M_real_8_fu_170_p2;
wire   [15:0] p_r_M_imag_9_fu_175_p2;
wire   [15:0] bitcast_ln24_1_fu_429_p1;
wire   [15:0] bitcast_ln24_fu_425_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fwd_fft_fft_stage_11325_Pipeline_SKIP_X_w_M_real42 #(
    .DataWidth( 16 ),
    .AddressRange( 192 ),
    .AddressWidth( 8 ))
w_M_real40_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_M_real40_address0),
    .ce0(w_M_real40_ce0),
    .q0(w_M_real40_q0)
);

fwd_fft_fft_stage_11325_Pipeline_SKIP_X_w_M_imag33 #(
    .DataWidth( 16 ),
    .AddressRange( 192 ),
    .AddressWidth( 8 ))
w_M_imag31_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_M_imag31_address0),
    .ce0(w_M_imag31_ce0),
    .q0(w_M_imag31_q0)
);

fwd_fft_hadd_16ns_16ns_16_1_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hadd_16ns_16ns_16_1_full_dsp_1_U147(
    .din0(mul6_i_i_fu_192_p2),
    .din1(mul9_i_i_fu_198_p2),
    .dout(p_r_M_imag_24_fu_152_p2)
);

fwd_fft_hadd_16ns_16ns_16_1_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hadd_16ns_16ns_16_1_full_dsp_1_U148(
    .din0(t1_M_real_fu_370_p1),
    .din1(p_r_fu_165_p2),
    .dout(p_r_M_real_7_fu_156_p2)
);

fwd_fft_hadd_16ns_16ns_16_1_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hadd_16ns_16ns_16_1_full_dsp_1_U149(
    .din0(t1_M_imag_fu_376_p1),
    .din1(p_r_M_imag_24_fu_152_p2),
    .dout(p_r_M_imag_8_fu_160_p2)
);

fwd_fft_hsub_16ns_16ns_16_1_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hsub_16ns_16ns_16_1_full_dsp_1_U150(
    .din0(mul_i_i_fu_180_p2),
    .din1(mul3_i_i_fu_186_p2),
    .dout(p_r_fu_165_p2)
);

fwd_fft_hsub_16ns_16ns_16_1_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hsub_16ns_16ns_16_1_full_dsp_1_U151(
    .din0(t1_M_real_fu_370_p1),
    .din1(p_r_fu_165_p2),
    .dout(p_r_M_real_8_fu_170_p2)
);

fwd_fft_hsub_16ns_16ns_16_1_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hsub_16ns_16ns_16_1_full_dsp_1_U152(
    .din0(t1_M_imag_fu_376_p1),
    .din1(p_r_M_imag_24_fu_152_p2),
    .dout(p_r_M_imag_9_fu_175_p2)
);

fwd_fft_hmul_16ns_16ns_16_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hmul_16ns_16ns_16_1_max_dsp_1_U153(
    .din0(p_r_M_real_fu_396_p1),
    .din1(w_M_real40_q0),
    .dout(mul_i_i_fu_180_p2)
);

fwd_fft_hmul_16ns_16ns_16_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hmul_16ns_16ns_16_1_max_dsp_1_U154(
    .din0(p_r_M_imag_fu_402_p1),
    .din1(w_M_imag31_q0),
    .dout(mul3_i_i_fu_186_p2)
);

fwd_fft_hmul_16ns_16ns_16_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hmul_16ns_16ns_16_1_max_dsp_1_U155(
    .din0(p_r_M_real_fu_396_p1),
    .din1(w_M_imag31_q0),
    .dout(mul6_i_i_fu_192_p2)
);

fwd_fft_hmul_16ns_16ns_16_1_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hmul_16ns_16ns_16_1_max_dsp_1_U156(
    .din0(p_r_M_imag_fu_402_p1),
    .din1(w_M_real40_q0),
    .dout(mul9_i_i_fu_198_p2)
);

fwd_fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j1_fu_62 <= 32'd0;
        end else if (((icmp_ln1057_fu_222_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j1_fu_62 <= j1_18_fu_325_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            k1_fu_58 <= 7'd0;
        end else if (((icmp_ln1057_fu_222_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            k1_fu_58 <= k1_16_fu_227_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            m1_fu_66 <= 32'd0;
        end else if (((icmp_ln1057_fu_222_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            m1_fu_66 <= m1_12_fu_333_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_fu_222_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln21_reg_481[5 : 0] <= zext_ln21_fu_269_p1[5 : 0];
        zext_ln22_reg_491[5 : 0] <= zext_ln22_fu_280_p1[5 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IN_r_ce0 = 1'b1;
    end else begin
        IN_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IN_r_ce1 = 1'b1;
    end else begin
        IN_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        OUT_r_ce0 = 1'b1;
    end else begin
        OUT_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        OUT_r_ce1 = 1'b1;
    end else begin
        OUT_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        OUT_r_we0 = 1'b1;
    end else begin
        OUT_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        OUT_r_we1 = 1'b1;
    end else begin
        OUT_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_222_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_M_imag31_ce0 = 1'b1;
    end else begin
        w_M_imag31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_M_real40_ce0 = 1'b1;
    end else begin
        w_M_real40_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IN_r_address0 = zext_ln22_fu_280_p1;

assign IN_r_address1 = zext_ln21_fu_269_p1;

assign OUT_r_address0 = zext_ln22_reg_491;

assign OUT_r_address1 = zext_ln21_reg_481;

assign OUT_r_d0 = {{bitcast_ln24_1_fu_429_p1}, {bitcast_ln24_fu_425_p1}};

assign OUT_r_d1 = {{bitcast_ln23_1_fu_412_p1}, {bitcast_ln23_fu_408_p1}};

assign add_ln20_fu_251_p2 = (trunc_ln20_fu_247_p1 + 8'd96);

assign add_ln21_fu_263_p2 = (trunc_ln1057_6_fu_243_p1 + trunc_ln1057_fu_239_p1);

assign add_ln22_fu_274_p2 = (add_ln21_fu_263_p2 + 6'd8);

assign add_ln33_fu_303_p2 = (m1_fu_66 + 32'd16);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign bitcast_ln23_1_fu_412_p1 = p_r_M_imag_8_fu_160_p2;

assign bitcast_ln23_fu_408_p1 = p_r_M_real_7_fu_156_p2;

assign bitcast_ln24_1_fu_429_p1 = p_r_M_imag_9_fu_175_p2;

assign bitcast_ln24_fu_425_p1 = p_r_M_real_8_fu_170_p2;

assign icmp_ln1057_fu_222_p2 = ((k1_fu_58 == trunc_ln16) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_285_p2 = ((j1_fu_62 < 32'd7) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_297_p2 = ((j1_fu_62 == 32'd7) ? 1'b1 : 1'b0);

assign j1_16_fu_291_p2 = (j1_fu_62 + 32'd1);

assign j1_17_fu_309_p3 = ((icmp_ln30_fu_297_p2[0:0] == 1'b1) ? 32'd0 : j1_fu_62);

assign j1_18_fu_325_p3 = ((icmp_ln26_fu_285_p2[0:0] == 1'b1) ? j1_16_fu_291_p2 : j1_17_fu_309_p3);

assign k1_16_fu_227_p2 = (k1_fu_58 + 7'd1);

assign m1_11_fu_317_p3 = ((icmp_ln30_fu_297_p2[0:0] == 1'b1) ? add_ln33_fu_303_p2 : m1_fu_66);

assign m1_12_fu_333_p3 = ((icmp_ln26_fu_285_p2[0:0] == 1'b1) ? m1_fu_66 : m1_11_fu_317_p3);

assign p_r_M_imag_fu_402_p1 = trunc_ln388_2_fu_386_p4;

assign p_r_M_real_fu_396_p1 = trunc_ln388_fu_382_p1;

assign t1_M_imag_fu_376_p1 = trunc_ln21_2_fu_360_p4;

assign t1_M_real_fu_370_p1 = trunc_ln21_fu_356_p1;

assign trunc_ln1057_6_fu_243_p1 = j1_fu_62[5:0];

assign trunc_ln1057_fu_239_p1 = m1_fu_66[5:0];

assign trunc_ln20_fu_247_p1 = j1_fu_62[7:0];

assign trunc_ln21_2_fu_360_p4 = {{IN_r_q1[31:16]}};

assign trunc_ln21_fu_356_p1 = IN_r_q1[15:0];

assign trunc_ln388_2_fu_386_p4 = {{IN_r_q0[31:16]}};

assign trunc_ln388_fu_382_p1 = IN_r_q0[15:0];

assign w_M_imag31_address0 = zext_ln20_fu_257_p1;

assign w_M_real40_address0 = zext_ln20_fu_257_p1;

assign zext_ln20_fu_257_p1 = add_ln20_fu_251_p2;

assign zext_ln21_fu_269_p1 = add_ln21_fu_263_p2;

assign zext_ln22_fu_280_p1 = add_ln22_fu_274_p2;

always @ (posedge ap_clk) begin
    zext_ln21_reg_481[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln22_reg_491[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //fwd_fft_fft_stage_11527_Pipeline_SKIP_X
