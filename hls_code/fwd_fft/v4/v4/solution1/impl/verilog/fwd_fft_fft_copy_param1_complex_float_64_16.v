// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fwd_fft_fft_copy_param1_complex_float_64_16 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_0_address0,
        in_0_ce0,
        in_0_q0,
        in_1_address0,
        in_1_ce0,
        in_1_q0,
        xn1_din,
        xn1_full_n,
        xn1_write,
        p_read,
        config_s2_din,
        config_s2_full_n,
        config_s2_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [5:0] in_0_address0;
output   in_0_ce0;
input  [31:0] in_0_q0;
output  [5:0] in_1_address0;
output   in_1_ce0;
input  [31:0] in_1_q0;
output  [63:0] xn1_din;
input   xn1_full_n;
output   xn1_write;
input  [15:0] p_read;
output  [15:0] config_s2_din;
input   config_s2_full_n;
output   config_s2_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg xn1_write;
reg config_s2_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    config_s2_blk_n;
wire    grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_ap_start;
wire    grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_ap_done;
wire    grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_ap_idle;
wire    grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_ap_ready;
wire   [63:0] grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_xn1_din;
wire    grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_xn1_write;
wire   [5:0] grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_in_0_address0;
wire    grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_in_0_ce0;
wire   [5:0] grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_in_1_address0;
wire    grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_in_1_ce0;
reg    grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    ap_block_state1;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_ap_start_reg = 1'b0;
end

fwd_fft_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1 grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_ap_start),
    .ap_done(grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_ap_done),
    .ap_idle(grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_ap_idle),
    .ap_ready(grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_ap_ready),
    .xn1_din(grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_xn1_din),
    .xn1_full_n(xn1_full_n),
    .xn1_write(grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_xn1_write),
    .in_0_address0(grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_in_0_address0),
    .in_0_ce0(grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_in_0_ce0),
    .in_0_q0(in_0_q0),
    .in_1_address0(grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_in_1_address0),
    .in_1_ce0(grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_in_1_ce0),
    .in_1_q0(in_1_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_ap_start_reg <= 1'b1;
        end else if ((grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_ap_ready == 1'b1)) begin
            grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((config_s2_full_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        config_s2_blk_n = config_s2_full_n;
    end else begin
        config_s2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((config_s2_full_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        config_s2_write = 1'b1;
    end else begin
        config_s2_write = 1'b0;
    end
end

always @ (*) begin
    if (((grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        xn1_write = grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_xn1_write;
    end else begin
        xn1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((config_s2_full_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((config_s2_full_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign config_s2_din = p_read;

assign grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_ap_start = grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_ap_start_reg;

assign in_0_address0 = grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_in_0_address0;

assign in_0_ce0 = grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_in_0_ce0;

assign in_1_address0 = grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_in_1_address0;

assign in_1_ce0 = grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_in_1_ce0;

assign start_out = real_start;

assign xn1_din = grp_fft_copy_param1_complex_float_64_16_Pipeline_VITIS_LOOP_531_1_fu_42_xn1_din;

endmodule //fwd_fft_fft_copy_param1_complex_float_64_16
