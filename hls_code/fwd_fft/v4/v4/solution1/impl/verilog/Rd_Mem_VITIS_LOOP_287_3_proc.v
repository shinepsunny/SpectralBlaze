// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Rd_Mem_VITIS_LOOP_287_3_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ctrl1_reg,
        ctrl2_reg,
        pny_2,
        layer2_reg,
        burst_buffer1_address0,
        burst_buffer1_ce0,
        burst_buffer1_we0,
        burst_buffer1_d0,
        in_r
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_pp0_stage0 = 7'd32;
parameter    ap_ST_fsm_state8 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] ctrl1_reg;
input  [31:0] ctrl2_reg;
input  [7:0] pny_2;
input  [31:0] layer2_reg;
output  [10:0] burst_buffer1_address0;
output   burst_buffer1_ce0;
output   burst_buffer1_we0;
output  [127:0] burst_buffer1_d0;
input  [127:0] in_r;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg burst_buffer1_ce0;
reg burst_buffer1_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] p_cast_fu_133_p4;
reg   [7:0] p_cast_reg_411;
wire   [15:0] p_cast10_cast_fu_143_p1;
reg   [15:0] p_cast10_cast_reg_416;
wire   [15:0] conv3_i_fu_155_p2;
reg   [15:0] conv3_i_reg_421;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln287_fu_198_p1;
reg   [63:0] zext_ln287_reg_437;
wire    ap_CS_fsm_state5;
wire   [15:0] mul_i_i116_fu_205_p2;
reg   [15:0] mul_i_i116_reg_442;
wire   [15:0] tmp_fu_210_p4;
reg   [15:0] tmp_reg_448;
wire   [63:0] zext_ln290_fu_220_p1;
reg   [63:0] zext_ln290_reg_454;
wire  signed [68:0] grp_fu_384_p2;
reg   [68:0] bound_reg_464;
wire   [0:0] rev23_fu_244_p2;
reg   [0:0] rev23_reg_469;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state6_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln1057_2_fu_270_p2;
reg   [0:0] icmp_ln1057_2_reg_477;
wire   [0:0] icmp_ln1057_fu_250_p2;
wire   [63:0] select_ln279_fu_275_p3;
reg   [63:0] select_ln279_reg_482;
wire   [5:0] trunc_ln300_fu_291_p1;
reg   [5:0] trunc_ln300_reg_488;
wire   [0:0] ult_fu_304_p2;
reg   [0:0] ult_reg_493;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state6;
reg    ap_enable_reg_pp0_iter1;
wire   [63:0] zext_ln300_fu_379_p1;
wire    ap_block_pp0_stage0;
wire   [0:0] or_ln294_fu_358_p2;
reg   [63:0] ifs_fu_78;
wire   [63:0] add_ln290_fu_309_p2;
reg    ap_block_state1;
reg   [7:0] lsy_fu_82;
wire   [7:0] select_ln279_3_fu_283_p3;
reg   [68:0] indvar_flatten_fu_86;
wire   [68:0] add_ln1057_fu_255_p2;
wire   [7:0] empty_fu_147_p1;
wire   [7:0] conv3_i_fu_155_p0;
wire   [7:0] conv3_i_fu_155_p1;
wire   [15:0] empty_37_fu_176_p2;
wire   [12:0] tmp_2_fu_181_p4;
wire   [7:0] mul_i_i116_fu_205_p0;
wire   [7:0] mul_i_i116_fu_205_p1;
wire   [15:0] lsy_cast_i_fu_230_p1;
wire   [15:0] add_i_i99_i_fu_234_p2;
wire   [0:0] ult22_fu_239_p2;
wire   [7:0] add_ln287_fu_264_p2;
wire   [15:0] lsy_cast_i_mid1_fu_295_p1;
wire   [15:0] add_i_i99_i_mid1_fu_299_p2;
wire   [0:0] rev20_fu_337_p2;
wire   [0:0] icmp_ln1061_fu_348_p2;
wire   [0:0] select_ln279_4_fu_342_p3;
wire   [0:0] xor_ln1061_fu_352_p2;
wire   [10:0] tmp_6_cast_fu_330_p3;
wire   [10:0] tmp_7_fu_364_p4;
wire   [10:0] add_ln300_fu_373_p2;
wire   [7:0] grp_fu_384_p0;
wire   [12:0] grp_fu_384_p1;
wire    ap_CS_fsm_state8;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [15:0] conv3_i_fu_155_p00;
wire   [15:0] conv3_i_fu_155_p10;
wire   [68:0] grp_fu_384_p00;
wire   [68:0] grp_fu_384_p10;
wire   [15:0] mul_i_i116_fu_205_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

Rd_Mem_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U1(
    .din0(conv3_i_fu_155_p0),
    .din1(conv3_i_fu_155_p1),
    .dout(conv3_i_fu_155_p2)
);

Rd_Mem_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U2(
    .din0(mul_i_i116_fu_205_p0),
    .din1(mul_i_i116_fu_205_p1),
    .dout(mul_i_i116_fu_205_p2)
);

Rd_Mem_mul_mul_8ns_13ns_69_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 69 ))
mul_mul_8ns_13ns_69_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_384_p0),
    .din1(grp_fu_384_p1),
    .ce(1'b1),
    .dout(grp_fu_384_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state6))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state6))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ifs_fu_78 <= 64'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1057_fu_250_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ifs_fu_78 <= add_ln290_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_fu_86 <= 69'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1057_fu_250_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_fu_86 <= add_ln1057_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        lsy_fu_82 <= 8'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1057_fu_250_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lsy_fu_82 <= select_ln279_3_fu_283_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bound_reg_464 <= grp_fu_384_p2;
        mul_i_i116_reg_442 <= mul_i_i116_fu_205_p2;
        tmp_reg_448 <= {{layer2_reg[31:16]}};
        zext_ln287_reg_437[15 : 0] <= zext_ln287_fu_198_p1[15 : 0];
        zext_ln290_reg_454[15 : 0] <= zext_ln290_fu_220_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        conv3_i_reg_421 <= conv3_i_fu_155_p2;
        p_cast10_cast_reg_416[7 : 0] <= p_cast10_cast_fu_143_p1[7 : 0];
        p_cast_reg_411 <= {{ctrl1_reg[31:24]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_fu_250_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1057_2_reg_477 <= icmp_ln1057_2_fu_270_p2;
        select_ln279_reg_482 <= select_ln279_fu_275_p3;
        trunc_ln300_reg_488 <= trunc_ln300_fu_291_p1;
        ult_reg_493 <= ult_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rev23_reg_469 <= rev23_fu_244_p2;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln1057_fu_250_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        burst_buffer1_ce0 = 1'b1;
    end else begin
        burst_buffer1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln294_fu_358_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        burst_buffer1_we0 = 1'b1;
    end else begin
        burst_buffer1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1057_fu_250_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1057_fu_250_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_i_i99_i_fu_234_p2 = (mul_i_i116_reg_442 + lsy_cast_i_fu_230_p1);

assign add_i_i99_i_mid1_fu_299_p2 = (mul_i_i116_reg_442 + lsy_cast_i_mid1_fu_295_p1);

assign add_ln1057_fu_255_p2 = (indvar_flatten_fu_86 + 69'd1);

assign add_ln287_fu_264_p2 = (lsy_fu_82 + 8'd1);

assign add_ln290_fu_309_p2 = (select_ln279_fu_275_p3 + 64'd8);

assign add_ln300_fu_373_p2 = (tmp_6_cast_fu_330_p3 + tmp_7_fu_364_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign burst_buffer1_address0 = zext_ln300_fu_379_p1;

assign burst_buffer1_d0 = in_r;

assign conv3_i_fu_155_p0 = conv3_i_fu_155_p00;

assign conv3_i_fu_155_p00 = p_cast_fu_133_p4;

assign conv3_i_fu_155_p1 = conv3_i_fu_155_p10;

assign conv3_i_fu_155_p10 = empty_fu_147_p1;

assign empty_37_fu_176_p2 = (conv3_i_reg_421 + 16'd7);

assign empty_fu_147_p1 = ctrl2_reg[7:0];

assign grp_fu_384_p0 = grp_fu_384_p00;

assign grp_fu_384_p00 = p_cast_reg_411;

assign grp_fu_384_p1 = grp_fu_384_p10;

assign grp_fu_384_p10 = tmp_2_fu_181_p4;

assign icmp_ln1057_2_fu_270_p2 = (($signed(ifs_fu_78) < $signed(zext_ln287_reg_437)) ? 1'b1 : 1'b0);

assign icmp_ln1057_fu_250_p2 = ((indvar_flatten_fu_86 == bound_reg_464) ? 1'b1 : 1'b0);

assign icmp_ln1061_fu_348_p2 = (($signed(select_ln279_reg_482) < $signed(zext_ln290_reg_454)) ? 1'b1 : 1'b0);

assign lsy_cast_i_fu_230_p1 = lsy_fu_82;

assign lsy_cast_i_mid1_fu_295_p1 = add_ln287_fu_264_p2;

assign mul_i_i116_fu_205_p0 = mul_i_i116_fu_205_p00;

assign mul_i_i116_fu_205_p00 = pny_2;

assign mul_i_i116_fu_205_p1 = p_cast10_cast_reg_416;

assign or_ln294_fu_358_p2 = (xor_ln1061_fu_352_p2 | select_ln279_4_fu_342_p3);

assign p_cast10_cast_fu_143_p1 = p_cast_fu_133_p4;

assign p_cast_fu_133_p4 = {{ctrl1_reg[31:24]}};

assign rev20_fu_337_p2 = (ult_reg_493 ^ 1'd1);

assign rev23_fu_244_p2 = (ult22_fu_239_p2 ^ 1'd1);

assign select_ln279_3_fu_283_p3 = ((icmp_ln1057_2_fu_270_p2[0:0] == 1'b1) ? lsy_fu_82 : add_ln287_fu_264_p2);

assign select_ln279_4_fu_342_p3 = ((icmp_ln1057_2_reg_477[0:0] == 1'b1) ? rev23_reg_469 : rev20_fu_337_p2);

assign select_ln279_fu_275_p3 = ((icmp_ln1057_2_fu_270_p2[0:0] == 1'b1) ? ifs_fu_78 : 64'd0);

assign tmp_2_fu_181_p4 = {{empty_37_fu_176_p2[15:3]}};

assign tmp_6_cast_fu_330_p3 = {{trunc_ln300_reg_488}, {5'd0}};

assign tmp_7_fu_364_p4 = {{select_ln279_reg_482[13:3]}};

assign tmp_fu_210_p4 = {{layer2_reg[31:16]}};

assign trunc_ln300_fu_291_p1 = select_ln279_3_fu_283_p3[5:0];

assign ult22_fu_239_p2 = ((add_i_i99_i_fu_234_p2 < tmp_reg_448) ? 1'b1 : 1'b0);

assign ult_fu_304_p2 = ((add_i_i99_i_mid1_fu_299_p2 < tmp_reg_448) ? 1'b1 : 1'b0);

assign xor_ln1061_fu_352_p2 = (icmp_ln1061_fu_348_p2 ^ 1'd1);

assign zext_ln287_fu_198_p1 = conv3_i_reg_421;

assign zext_ln290_fu_220_p1 = tmp_fu_210_p4;

assign zext_ln300_fu_379_p1 = add_ln300_fu_373_p2;

always @ (posedge ap_clk) begin
    p_cast10_cast_reg_416[15:8] <= 8'b00000000;
    zext_ln287_reg_437[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln290_reg_454[63:16] <= 48'b000000000000000000000000000000000000000000000000;
end

endmodule //Rd_Mem_VITIS_LOOP_287_3_proc
