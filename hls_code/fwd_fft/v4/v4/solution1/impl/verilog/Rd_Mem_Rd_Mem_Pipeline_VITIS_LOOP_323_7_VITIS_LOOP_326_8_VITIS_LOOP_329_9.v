// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Rd_Mem_Rd_Mem_Pipeline_VITIS_LOOP_323_7_VITIS_LOOP_326_8_VITIS_LOOP_329_9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        col_ov_pix_out_V_din,
        col_ov_pix_out_V_full_n,
        col_ov_pix_out_V_write,
        bound4,
        bound,
        p_partselect3,
        icmp_ln1057_4,
        burst_buffer1_address0,
        burst_buffer1_ce0,
        burst_buffer1_q0,
        burst_buffer2_address0,
        burst_buffer2_ce0,
        burst_buffer2_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] col_ov_pix_out_V_din;
input   col_ov_pix_out_V_full_n;
output   col_ov_pix_out_V_write;
input  [23:0] bound4;
input  [15:0] bound;
input  [7:0] p_partselect3;
input  [0:0] icmp_ln1057_4;
output  [10:0] burst_buffer1_address0;
output   burst_buffer1_ce0;
input  [127:0] burst_buffer1_q0;
output  [10:0] burst_buffer2_address0;
output   burst_buffer2_ce0;
input  [127:0] burst_buffer2_q0;

reg ap_idle;
reg col_ov_pix_out_V_write;
reg burst_buffer1_ce0;
reg burst_buffer2_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1057_fu_208_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    col_ov_pix_out_V_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] rd_j_1_load_reg_593;
reg   [7:0] y_load_reg_598;
wire   [0:0] icmp_ln1057_1_fu_231_p2;
reg   [0:0] icmp_ln1057_1_reg_603;
wire   [0:0] select_ln281_1_fu_249_p3;
reg   [0:0] select_ln281_1_reg_608;
wire   [7:0] add_ln326_fu_256_p2;
reg   [7:0] add_ln326_reg_613;
wire   [0:0] icmp_ln335_fu_276_p2;
reg   [0:0] icmp_ln335_reg_618;
wire  signed [35:0] shl_ln2_fu_396_p3;
reg  signed [35:0] shl_ln2_reg_633;
wire   [64:0] add_ln130_fu_417_p2;
reg   [64:0] add_ln130_reg_638;
wire   [0:0] icmp_ln130_fu_433_p2;
reg   [0:0] icmp_ln130_reg_643;
reg   [127:0] burst_buffer1_load_reg_648;
wire   [127:0] zext_ln130_fu_460_p1;
reg   [127:0] zext_ln130_reg_653;
wire   [127:0] sub_ln130_fu_486_p2;
reg   [127:0] sub_ln130_reg_659;
reg   [127:0] burst_buffer2_load_reg_665;
wire   [63:0] zext_ln54_fu_390_p1;
reg   [7:0] x_fu_94;
wire   [7:0] x_1_fu_302_p3;
wire    ap_loop_init;
reg   [31:0] rd_i_1_fu_98;
wire   [31:0] rd_i_fu_445_p3;
reg   [31:0] rd_j_1_fu_102;
wire   [31:0] rd_j_fu_282_p3;
reg   [7:0] y_fu_106;
wire   [7:0] select_ln1057_1_fu_262_p3;
reg   [15:0] indvar_flatten_fu_110;
wire   [15:0] select_ln1057_2_fu_316_p3;
reg   [23:0] indvar_flatten17_fu_114;
wire   [23:0] add_ln1057_fu_213_p2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln1057_2_fu_244_p2;
wire   [7:0] select_ln281_fu_236_p3;
wire   [31:0] rd_j_2_fu_270_p2;
wire   [0:0] or_ln329_fu_296_p2;
wire   [7:0] add_ln329_fu_290_p2;
wire   [15:0] add_ln1057_1_fu_310_p2;
wire   [5:0] trunc_ln54_1_fu_355_p1;
wire   [5:0] trunc_ln54_fu_352_p1;
wire   [5:0] select_ln281_2_fu_358_p3;
wire   [5:0] select_ln1057_fu_365_p3;
wire   [10:0] tmp_4_cast_fu_372_p3;
wire   [10:0] trunc_ln54_2_fu_380_p1;
wire   [10:0] add_ln54_fu_384_p2;
wire   [35:0] or_ln130_fu_403_p2;
wire  signed [63:0] sext_ln130_1_fu_409_p1;
wire   [64:0] zext_ln130_1_fu_413_p1;
wire   [57:0] tmp_fu_423_p4;
wire   [31:0] add_ln336_fu_439_p2;
wire  signed [63:0] sext_ln130_fu_457_p1;
wire   [127:0] zext_ln130_2_fu_464_p1;
wire   [127:0] shl_ln130_fu_467_p2;
wire   [127:0] select_ln130_fu_473_p3;
wire   [127:0] shl_ln130_1_fu_480_p2;
wire   [127:0] and_ln130_fu_492_p2;
wire   [127:0] lshr_ln130_fu_496_p2;
wire   [127:0] and_ln130_1_fu_505_p2;
wire   [127:0] lshr_ln130_1_fu_509_p2;
wire   [15:0] trunc_ln130_1_fu_514_p1;
wire   [15:0] trunc_ln130_fu_501_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Rd_Mem_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten17_fu_114 <= 24'd0;
        end else if (((icmp_ln1057_fu_208_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten17_fu_114 <= add_ln1057_fu_213_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_110 <= 16'd0;
        end else if (((icmp_ln1057_fu_208_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_110 <= select_ln1057_2_fu_316_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            rd_i_1_fu_98 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            rd_i_1_fu_98 <= rd_i_fu_445_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            rd_j_1_fu_102 <= 32'd0;
        end else if (((icmp_ln1057_fu_208_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            rd_j_1_fu_102 <= rd_j_fu_282_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            x_fu_94 <= 8'd0;
        end else if (((icmp_ln1057_fu_208_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            x_fu_94 <= x_1_fu_302_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            y_fu_106 <= 8'd0;
        end else if (((icmp_ln1057_fu_208_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            y_fu_106 <= select_ln1057_1_fu_262_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln130_reg_638[64 : 4] <= add_ln130_fu_417_p2[64 : 4];
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        burst_buffer1_load_reg_648 <= burst_buffer1_q0;
        burst_buffer2_load_reg_665 <= burst_buffer2_q0;
        icmp_ln130_reg_643 <= icmp_ln130_fu_433_p2;
        shl_ln2_reg_633[35 : 4] <= shl_ln2_fu_396_p3[35 : 4];
        sub_ln130_reg_659 <= sub_ln130_fu_486_p2;
        zext_ln130_reg_653[63 : 4] <= zext_ln130_fu_460_p1[63 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_fu_208_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln326_reg_613 <= add_ln326_fu_256_p2;
        icmp_ln1057_1_reg_603 <= icmp_ln1057_1_fu_231_p2;
        icmp_ln335_reg_618 <= icmp_ln335_fu_276_p2;
        rd_j_1_load_reg_593 <= rd_j_1_fu_102;
        select_ln281_1_reg_608 <= select_ln281_1_fu_249_p3;
        y_load_reg_598 <= y_fu_106;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_208_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        burst_buffer1_ce0 = 1'b1;
    end else begin
        burst_buffer1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        burst_buffer2_ce0 = 1'b1;
    end else begin
        burst_buffer2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        col_ov_pix_out_V_blk_n = col_ov_pix_out_V_full_n;
    end else begin
        col_ov_pix_out_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        col_ov_pix_out_V_write = 1'b1;
    end else begin
        col_ov_pix_out_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1057_1_fu_310_p2 = (indvar_flatten_fu_110 + 16'd1);

assign add_ln1057_fu_213_p2 = (indvar_flatten17_fu_114 + 24'd1);

assign add_ln130_fu_417_p2 = (zext_ln130_1_fu_413_p1 + 65'd1);

assign add_ln326_fu_256_p2 = (select_ln281_fu_236_p3 + 8'd1);

assign add_ln329_fu_290_p2 = (x_fu_94 + 8'd1);

assign add_ln336_fu_439_p2 = (rd_i_1_fu_98 + 32'd1);

assign add_ln54_fu_384_p2 = (tmp_4_cast_fu_372_p3 + trunc_ln54_2_fu_380_p1);

assign and_ln130_1_fu_505_p2 = (sub_ln130_reg_659 & burst_buffer2_load_reg_665);

assign and_ln130_fu_492_p2 = (sub_ln130_reg_659 & burst_buffer1_load_reg_648);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((col_ov_pix_out_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((col_ov_pix_out_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((col_ov_pix_out_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (col_ov_pix_out_V_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign burst_buffer1_address0 = zext_ln54_fu_390_p1;

assign burst_buffer2_address0 = zext_ln54_fu_390_p1;

assign col_ov_pix_out_V_din = {{trunc_ln130_1_fu_514_p1}, {trunc_ln130_fu_501_p1}};

assign icmp_ln1057_1_fu_231_p2 = ((indvar_flatten_fu_110 == bound) ? 1'b1 : 1'b0);

assign icmp_ln1057_2_fu_244_p2 = ((x_fu_94 == p_partselect3) ? 1'b1 : 1'b0);

assign icmp_ln1057_fu_208_p2 = ((indvar_flatten17_fu_114 == bound4) ? 1'b1 : 1'b0);

assign icmp_ln130_fu_433_p2 = ((tmp_fu_423_p4 != 58'd0) ? 1'b1 : 1'b0);

assign icmp_ln335_fu_276_p2 = ((rd_j_2_fu_270_p2 == 32'd8) ? 1'b1 : 1'b0);

assign lshr_ln130_1_fu_509_p2 = and_ln130_1_fu_505_p2 >> zext_ln130_reg_653;

assign lshr_ln130_fu_496_p2 = and_ln130_fu_492_p2 >> zext_ln130_reg_653;

assign or_ln130_fu_403_p2 = (shl_ln2_fu_396_p3 | 36'd15);

assign or_ln329_fu_296_p2 = (select_ln281_1_fu_249_p3 | icmp_ln1057_1_fu_231_p2);

assign rd_i_fu_445_p3 = ((icmp_ln335_reg_618[0:0] == 1'b1) ? add_ln336_fu_439_p2 : rd_i_1_fu_98);

assign rd_j_2_fu_270_p2 = (rd_j_1_fu_102 + 32'd1);

assign rd_j_fu_282_p3 = ((icmp_ln335_fu_276_p2[0:0] == 1'b1) ? 32'd0 : rd_j_2_fu_270_p2);

assign select_ln1057_1_fu_262_p3 = ((select_ln281_1_fu_249_p3[0:0] == 1'b1) ? add_ln326_fu_256_p2 : select_ln281_fu_236_p3);

assign select_ln1057_2_fu_316_p3 = ((icmp_ln1057_1_fu_231_p2[0:0] == 1'b1) ? 16'd1 : add_ln1057_1_fu_310_p2);

assign select_ln1057_fu_365_p3 = ((select_ln281_1_reg_608[0:0] == 1'b1) ? trunc_ln54_fu_352_p1 : select_ln281_2_fu_358_p3);

assign select_ln130_fu_473_p3 = ((icmp_ln130_reg_643[0:0] == 1'b1) ? 128'd0 : shl_ln130_fu_467_p2);

assign select_ln281_1_fu_249_p3 = ((icmp_ln1057_1_fu_231_p2[0:0] == 1'b1) ? icmp_ln1057_4 : icmp_ln1057_2_fu_244_p2);

assign select_ln281_2_fu_358_p3 = ((icmp_ln1057_1_reg_603[0:0] == 1'b1) ? 6'd0 : trunc_ln54_1_fu_355_p1);

assign select_ln281_fu_236_p3 = ((icmp_ln1057_1_fu_231_p2[0:0] == 1'b1) ? 8'd0 : y_fu_106);

assign sext_ln130_1_fu_409_p1 = $signed(or_ln130_fu_403_p2);

assign sext_ln130_fu_457_p1 = shl_ln2_reg_633;

assign shl_ln130_1_fu_480_p2 = 128'd1 << zext_ln130_fu_460_p1;

assign shl_ln130_fu_467_p2 = 128'd1 << zext_ln130_2_fu_464_p1;

assign shl_ln2_fu_396_p3 = {{rd_j_1_load_reg_593}, {4'd0}};

assign sub_ln130_fu_486_p2 = (select_ln130_fu_473_p3 - shl_ln130_1_fu_480_p2);

assign tmp_4_cast_fu_372_p3 = {{select_ln1057_fu_365_p3}, {5'd0}};

assign tmp_fu_423_p4 = {{add_ln130_fu_417_p2[64:7]}};

assign trunc_ln130_1_fu_514_p1 = lshr_ln130_1_fu_509_p2[15:0];

assign trunc_ln130_fu_501_p1 = lshr_ln130_fu_496_p2[15:0];

assign trunc_ln54_1_fu_355_p1 = y_load_reg_598[5:0];

assign trunc_ln54_2_fu_380_p1 = rd_i_1_fu_98[10:0];

assign trunc_ln54_fu_352_p1 = add_ln326_reg_613[5:0];

assign x_1_fu_302_p3 = ((or_ln329_fu_296_p2[0:0] == 1'b1) ? 8'd1 : add_ln329_fu_290_p2);

assign zext_ln130_1_fu_413_p1 = $unsigned(sext_ln130_1_fu_409_p1);

assign zext_ln130_2_fu_464_p1 = add_ln130_reg_638;

assign zext_ln130_fu_460_p1 = $unsigned(sext_ln130_fu_457_p1);

assign zext_ln54_fu_390_p1 = add_ln54_fu_384_p2;

always @ (posedge ap_clk) begin
    shl_ln2_reg_633[3:0] <= 4'b0000;
    add_ln130_reg_638[3:0] <= 4'b0000;
    zext_ln130_reg_653[3:0] <= 4'b0000;
    zext_ln130_reg_653[127:64] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //Rd_Mem_Rd_Mem_Pipeline_VITIS_LOOP_323_7_VITIS_LOOP_326_8_VITIS_LOOP_329_9
