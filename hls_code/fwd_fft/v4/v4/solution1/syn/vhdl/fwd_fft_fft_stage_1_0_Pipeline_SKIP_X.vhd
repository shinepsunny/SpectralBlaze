-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fwd_fft_fft_stage_1_0_Pipeline_SKIP_X is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    trunc_ln18 : IN STD_LOGIC_VECTOR (6 downto 0);
    IN_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    IN_r_ce0 : OUT STD_LOGIC;
    IN_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    IN_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    IN_r_ce1 : OUT STD_LOGIC;
    IN_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    OUT_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OUT_r_ce0 : OUT STD_LOGIC;
    OUT_r_we0 : OUT STD_LOGIC;
    OUT_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OUT_r_ce1 : OUT STD_LOGIC;
    OUT_r_we1 : OUT STD_LOGIC;
    OUT_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fwd_fft_fft_stage_1_0_Pipeline_SKIP_X is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_20 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1057_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal w_M_real42_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_M_real42_ce0 : STD_LOGIC;
    signal w_M_real42_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_M_imag31_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_M_imag31_ce0 : STD_LOGIC;
    signal w_M_imag31_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln22_fu_237_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_reg_445 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln23_fu_241_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln23_reg_450 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln23_reg_450_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln23_reg_450_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln23_reg_450_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln23_reg_450_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln23_reg_450_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln23_reg_450_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln23_reg_450_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln23_reg_450_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln23_reg_450_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln24_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_reg_466 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_reg_466_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_reg_466_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_reg_466_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_reg_466_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_reg_466_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_reg_466_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_reg_466_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_reg_466_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_reg_466_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_reg_466_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_reg_466_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_reg_466_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_reg_466_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_reg_466_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_reg_466_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w1_M_real_reg_476 : STD_LOGIC_VECTOR (15 downto 0);
    signal w1_M_imag_reg_482 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_fu_349_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_reg_488 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_fu_353_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_reg_494 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_178_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_i_i_reg_500 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_182_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul3_i_i_reg_505 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul6_i_i_reg_510 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_190_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul9_i_i_reg_515 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln23_fu_357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_520 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_520_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_520_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_520_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_520_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_520_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_520_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln23_fu_361_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln23_reg_530 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln23_1_reg_535 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_166_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_reg_540 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_154_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_28_reg_546 : STD_LOGIC_VECTOR (15 downto 0);
    signal t1_M_real_fu_375_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal t1_M_imag_fu_380_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_158_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_3_reg_564 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_162_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_3_reg_569 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_170_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_4_reg_574 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_174_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_4_reg_579 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln22_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal k1_fu_60 : STD_LOGIC_VECTOR (6 downto 0);
    signal k1_18_fu_217_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j1_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal j1_25_fu_283_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m1_fu_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal m1_18_fu_291_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1057_9_fu_233_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1057_fu_229_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln31_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln34_fu_259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln27_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln27_fu_273_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal m1_17_fu_265_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln22_fu_314_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_fu_325_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln388_fu_335_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln388_1_fu_339_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln25_1_fu_388_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln25_fu_385_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln26_1_fu_403_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln26_fu_400_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fwd_fft_hadd_16ns_16ns_16_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fwd_fft_hsub_16ns_16ns_16_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fwd_fft_hmul_16ns_16ns_16_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fwd_fft_fft_stage_0_018_w_M_real40 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fwd_fft_fft_stage_0_018_w_M_imag29 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fwd_fft_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    w_M_real42_U : component fwd_fft_fft_stage_0_018_w_M_real40
    generic map (
        DataWidth => 16,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_M_real42_address0,
        ce0 => w_M_real42_ce0,
        q0 => w_M_real42_q0);

    w_M_imag31_U : component fwd_fft_fft_stage_0_018_w_M_imag29
    generic map (
        DataWidth => 16,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_M_imag31_address0,
        ce0 => w_M_imag31_ce0,
        q0 => w_M_imag31_q0);

    hadd_16ns_16ns_16_5_full_dsp_1_U317 : component fwd_fft_hadd_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul6_i_i_reg_510,
        din1 => mul9_i_i_reg_515,
        ce => ap_const_logic_1,
        dout => grp_fu_154_p2);

    hadd_16ns_16ns_16_5_full_dsp_1_U318 : component fwd_fft_hadd_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => t1_M_real_fu_375_p1,
        din1 => p_r_reg_540,
        ce => ap_const_logic_1,
        dout => grp_fu_158_p2);

    hadd_16ns_16ns_16_5_full_dsp_1_U319 : component fwd_fft_hadd_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => t1_M_imag_fu_380_p1,
        din1 => p_r_M_imag_28_reg_546,
        ce => ap_const_logic_1,
        dout => grp_fu_162_p2);

    hsub_16ns_16ns_16_5_full_dsp_1_U320 : component fwd_fft_hsub_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_i_i_reg_500,
        din1 => mul3_i_i_reg_505,
        ce => ap_const_logic_1,
        dout => grp_fu_166_p2);

    hsub_16ns_16ns_16_5_full_dsp_1_U321 : component fwd_fft_hsub_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => t1_M_real_fu_375_p1,
        din1 => p_r_reg_540,
        ce => ap_const_logic_1,
        dout => grp_fu_170_p2);

    hsub_16ns_16ns_16_5_full_dsp_1_U322 : component fwd_fft_hsub_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => t1_M_imag_fu_380_p1,
        din1 => p_r_M_imag_28_reg_546,
        ce => ap_const_logic_1,
        dout => grp_fu_174_p2);

    hmul_16ns_16ns_16_4_max_dsp_1_U323 : component fwd_fft_hmul_16ns_16ns_16_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_reg_488,
        din1 => w1_M_real_reg_476,
        ce => ap_const_logic_1,
        dout => grp_fu_178_p2);

    hmul_16ns_16ns_16_4_max_dsp_1_U324 : component fwd_fft_hmul_16ns_16ns_16_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_reg_494,
        din1 => w1_M_imag_reg_482,
        ce => ap_const_logic_1,
        dout => grp_fu_182_p2);

    hmul_16ns_16ns_16_4_max_dsp_1_U325 : component fwd_fft_hmul_16ns_16ns_16_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_reg_488,
        din1 => w1_M_imag_reg_482,
        ce => ap_const_logic_1,
        dout => grp_fu_186_p2);

    hmul_16ns_16ns_16_4_max_dsp_1_U326 : component fwd_fft_hmul_16ns_16ns_16_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_reg_494,
        din1 => w1_M_real_reg_476,
        ce => ap_const_logic_1,
        dout => grp_fu_190_p2);

    flow_control_loop_pipe_sequential_init_U : component fwd_fft_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j1_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j1_fu_64 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1057_fu_212_p2 = ap_const_lv1_0))) then 
                    j1_fu_64 <= j1_25_fu_283_p3;
                end if;
            end if; 
        end if;
    end process;

    k1_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k1_fu_60 <= ap_const_lv7_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1057_fu_212_p2 = ap_const_lv1_0))) then 
                    k1_fu_60 <= k1_18_fu_217_p2;
                end if;
            end if; 
        end if;
    end process;

    m1_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    m1_fu_68 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1057_fu_212_p2 = ap_const_lv1_0))) then 
                    m1_fu_68 <= m1_18_fu_291_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1057_fu_212_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln23_reg_450 <= add_ln23_fu_241_p2;
                trunc_ln22_reg_445 <= trunc_ln22_fu_237_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln23_reg_450_pp0_iter10_reg <= add_ln23_reg_450_pp0_iter9_reg;
                add_ln23_reg_450_pp0_iter2_reg <= add_ln23_reg_450;
                add_ln23_reg_450_pp0_iter3_reg <= add_ln23_reg_450_pp0_iter2_reg;
                add_ln23_reg_450_pp0_iter4_reg <= add_ln23_reg_450_pp0_iter3_reg;
                add_ln23_reg_450_pp0_iter5_reg <= add_ln23_reg_450_pp0_iter4_reg;
                add_ln23_reg_450_pp0_iter6_reg <= add_ln23_reg_450_pp0_iter5_reg;
                add_ln23_reg_450_pp0_iter7_reg <= add_ln23_reg_450_pp0_iter6_reg;
                add_ln23_reg_450_pp0_iter8_reg <= add_ln23_reg_450_pp0_iter7_reg;
                add_ln23_reg_450_pp0_iter9_reg <= add_ln23_reg_450_pp0_iter8_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                mul3_i_i_reg_505 <= grp_fu_182_p2;
                mul6_i_i_reg_510 <= grp_fu_186_p2;
                mul9_i_i_reg_515 <= grp_fu_190_p2;
                mul_i_i_reg_500 <= grp_fu_178_p2;
                p_r_M_imag_28_reg_546 <= grp_fu_154_p2;
                p_r_M_imag_3_reg_569 <= grp_fu_162_p2;
                p_r_M_imag_4_reg_579 <= grp_fu_174_p2;
                p_r_M_imag_reg_494 <= p_r_M_imag_fu_353_p1;
                p_r_M_real_3_reg_564 <= grp_fu_158_p2;
                p_r_M_real_4_reg_574 <= grp_fu_170_p2;
                p_r_M_real_reg_488 <= p_r_M_real_fu_349_p1;
                p_r_reg_540 <= grp_fu_166_p2;
                trunc_ln23_1_reg_535 <= IN_r_q0(31 downto 16);
                trunc_ln23_reg_530 <= trunc_ln23_fu_361_p1;
                w1_M_imag_reg_482 <= w_M_imag31_q0;
                w1_M_real_reg_476 <= w_M_real42_q0;
                    zext_ln23_reg_520(5 downto 0) <= zext_ln23_fu_357_p1(5 downto 0);
                    zext_ln23_reg_520_pp0_iter12_reg(5 downto 0) <= zext_ln23_reg_520(5 downto 0);
                    zext_ln23_reg_520_pp0_iter13_reg(5 downto 0) <= zext_ln23_reg_520_pp0_iter12_reg(5 downto 0);
                    zext_ln23_reg_520_pp0_iter14_reg(5 downto 0) <= zext_ln23_reg_520_pp0_iter13_reg(5 downto 0);
                    zext_ln23_reg_520_pp0_iter15_reg(5 downto 0) <= zext_ln23_reg_520_pp0_iter14_reg(5 downto 0);
                    zext_ln23_reg_520_pp0_iter16_reg(5 downto 0) <= zext_ln23_reg_520_pp0_iter15_reg(5 downto 0);
                    zext_ln23_reg_520_pp0_iter17_reg(5 downto 0) <= zext_ln23_reg_520_pp0_iter16_reg(5 downto 0);
                    zext_ln24_reg_466(5 downto 0) <= zext_ln24_fu_330_p1(5 downto 0);
                    zext_ln24_reg_466_pp0_iter10_reg(5 downto 0) <= zext_ln24_reg_466_pp0_iter9_reg(5 downto 0);
                    zext_ln24_reg_466_pp0_iter11_reg(5 downto 0) <= zext_ln24_reg_466_pp0_iter10_reg(5 downto 0);
                    zext_ln24_reg_466_pp0_iter12_reg(5 downto 0) <= zext_ln24_reg_466_pp0_iter11_reg(5 downto 0);
                    zext_ln24_reg_466_pp0_iter13_reg(5 downto 0) <= zext_ln24_reg_466_pp0_iter12_reg(5 downto 0);
                    zext_ln24_reg_466_pp0_iter14_reg(5 downto 0) <= zext_ln24_reg_466_pp0_iter13_reg(5 downto 0);
                    zext_ln24_reg_466_pp0_iter15_reg(5 downto 0) <= zext_ln24_reg_466_pp0_iter14_reg(5 downto 0);
                    zext_ln24_reg_466_pp0_iter16_reg(5 downto 0) <= zext_ln24_reg_466_pp0_iter15_reg(5 downto 0);
                    zext_ln24_reg_466_pp0_iter17_reg(5 downto 0) <= zext_ln24_reg_466_pp0_iter16_reg(5 downto 0);
                    zext_ln24_reg_466_pp0_iter3_reg(5 downto 0) <= zext_ln24_reg_466(5 downto 0);
                    zext_ln24_reg_466_pp0_iter4_reg(5 downto 0) <= zext_ln24_reg_466_pp0_iter3_reg(5 downto 0);
                    zext_ln24_reg_466_pp0_iter5_reg(5 downto 0) <= zext_ln24_reg_466_pp0_iter4_reg(5 downto 0);
                    zext_ln24_reg_466_pp0_iter6_reg(5 downto 0) <= zext_ln24_reg_466_pp0_iter5_reg(5 downto 0);
                    zext_ln24_reg_466_pp0_iter7_reg(5 downto 0) <= zext_ln24_reg_466_pp0_iter6_reg(5 downto 0);
                    zext_ln24_reg_466_pp0_iter8_reg(5 downto 0) <= zext_ln24_reg_466_pp0_iter7_reg(5 downto 0);
                    zext_ln24_reg_466_pp0_iter9_reg(5 downto 0) <= zext_ln24_reg_466_pp0_iter8_reg(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    zext_ln24_reg_466(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_reg_466_pp0_iter3_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_reg_466_pp0_iter4_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_reg_466_pp0_iter5_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_reg_466_pp0_iter6_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_reg_466_pp0_iter7_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_reg_466_pp0_iter8_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_reg_466_pp0_iter9_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_reg_466_pp0_iter10_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_reg_466_pp0_iter11_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_reg_466_pp0_iter12_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_reg_466_pp0_iter13_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_reg_466_pp0_iter14_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_reg_466_pp0_iter15_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_reg_466_pp0_iter16_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_reg_466_pp0_iter17_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_520(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_520_pp0_iter12_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_520_pp0_iter13_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_520_pp0_iter14_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_520_pp0_iter15_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_520_pp0_iter16_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_520_pp0_iter17_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    IN_r_address0 <= zext_ln23_fu_357_p1(6 - 1 downto 0);
    IN_r_address1 <= zext_ln24_fu_330_p1(6 - 1 downto 0);

    IN_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            IN_r_ce0 <= ap_const_logic_1;
        else 
            IN_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    IN_r_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            IN_r_ce1 <= ap_const_logic_1;
        else 
            IN_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_r_address0 <= zext_ln24_reg_466_pp0_iter17_reg(6 - 1 downto 0);
    OUT_r_address1 <= zext_ln23_reg_520_pp0_iter17_reg(6 - 1 downto 0);

    OUT_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_r_ce0 <= ap_const_logic_1;
        else 
            OUT_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_ce1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_r_ce1 <= ap_const_logic_1;
        else 
            OUT_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_r_d0 <= (bitcast_ln26_1_fu_403_p1 & bitcast_ln26_fu_400_p1);
    OUT_r_d1 <= (bitcast_ln25_1_fu_388_p1 & bitcast_ln25_fu_385_p1);

    OUT_r_we0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_r_we0 <= ap_const_logic_1;
        else 
            OUT_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_we1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_r_we1 <= ap_const_logic_1;
        else 
            OUT_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln22_fu_314_p2 <= std_logic_vector(unsigned(trunc_ln22_reg_445) + unsigned(ap_const_lv8_20));
    add_ln23_fu_241_p2 <= std_logic_vector(unsigned(trunc_ln1057_9_fu_233_p1) + unsigned(trunc_ln1057_fu_229_p1));
    add_ln24_fu_325_p2 <= std_logic_vector(unsigned(add_ln23_reg_450) + unsigned(ap_const_lv6_2));
    add_ln34_fu_259_p2 <= std_logic_vector(unsigned(m1_fu_68) + unsigned(ap_const_lv32_4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1057_fu_212_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1057_fu_212_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter17_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln25_1_fu_388_p1 <= p_r_M_imag_3_reg_569;
    bitcast_ln25_fu_385_p1 <= p_r_M_real_3_reg_564;
    bitcast_ln26_1_fu_403_p1 <= p_r_M_imag_4_reg_579;
    bitcast_ln26_fu_400_p1 <= p_r_M_real_4_reg_574;
    icmp_ln1057_fu_212_p2 <= "1" when (k1_fu_60 = trunc_ln18) else "0";
    icmp_ln27_fu_247_p2 <= "1" when (j1_fu_64 = ap_const_lv32_0) else "0";
    icmp_ln31_fu_253_p2 <= "1" when (j1_fu_64 = ap_const_lv32_1) else "0";
    j1_25_fu_283_p3 <= 
        zext_ln27_fu_273_p1 when (or_ln27_fu_277_p2(0) = '1') else 
        j1_fu_64;
    k1_18_fu_217_p2 <= std_logic_vector(unsigned(k1_fu_60) + unsigned(ap_const_lv7_1));
    m1_17_fu_265_p3 <= 
        add_ln34_fu_259_p2 when (icmp_ln31_fu_253_p2(0) = '1') else 
        m1_fu_68;
    m1_18_fu_291_p3 <= 
        m1_fu_68 when (icmp_ln27_fu_247_p2(0) = '1') else 
        m1_17_fu_265_p3;
    or_ln27_fu_277_p2 <= (icmp_ln31_fu_253_p2 or icmp_ln27_fu_247_p2);
    p_r_M_imag_fu_353_p1 <= trunc_ln388_1_fu_339_p4;
    p_r_M_real_fu_349_p1 <= trunc_ln388_fu_335_p1;
    t1_M_imag_fu_380_p1 <= trunc_ln23_1_reg_535;
    t1_M_real_fu_375_p1 <= trunc_ln23_reg_530;
    trunc_ln1057_9_fu_233_p1 <= j1_fu_64(6 - 1 downto 0);
    trunc_ln1057_fu_229_p1 <= m1_fu_68(6 - 1 downto 0);
    trunc_ln22_fu_237_p1 <= j1_fu_64(8 - 1 downto 0);
    trunc_ln23_fu_361_p1 <= IN_r_q0(16 - 1 downto 0);
    trunc_ln388_1_fu_339_p4 <= IN_r_q1(31 downto 16);
    trunc_ln388_fu_335_p1 <= IN_r_q1(16 - 1 downto 0);
    w_M_imag31_address0 <= zext_ln22_fu_319_p1(8 - 1 downto 0);

    w_M_imag31_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            w_M_imag31_ce0 <= ap_const_logic_1;
        else 
            w_M_imag31_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_M_real42_address0 <= zext_ln22_fu_319_p1(8 - 1 downto 0);

    w_M_real42_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            w_M_real42_ce0 <= ap_const_logic_1;
        else 
            w_M_real42_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln22_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln22_fu_314_p2),64));
    zext_ln23_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_reg_450_pp0_iter10_reg),64));
    zext_ln24_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_fu_325_p2),64));
    zext_ln27_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln27_fu_247_p2),32));
end behav;
