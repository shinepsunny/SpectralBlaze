-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fwd_fft_FFT_C is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    c_row_op_trans_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    c_row_op_trans_st_empty_n : IN STD_LOGIC;
    c_row_op_trans_st_read : OUT STD_LOGIC;
    c_fft_col_op_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_fft_col_op_st_full_n : IN STD_LOGIC;
    c_fft_col_op_st_write : OUT STD_LOGIC;
    ctrl1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ctrl1_reg_empty_n : IN STD_LOGIC;
    ctrl1_reg_read : OUT STD_LOGIC;
    ctrl2_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ctrl2_reg_empty_n : IN STD_LOGIC;
    ctrl2_reg_read : OUT STD_LOGIC;
    layer1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_reg_empty_n : IN STD_LOGIC;
    layer1_reg_read : OUT STD_LOGIC;
    ctrl1_reg_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctrl1_reg_c_full_n : IN STD_LOGIC;
    ctrl1_reg_c_write : OUT STD_LOGIC;
    ctrl2_reg_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctrl2_reg_c_full_n : IN STD_LOGIC;
    ctrl2_reg_c_write : OUT STD_LOGIC;
    layer1_reg_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer1_reg_c_full_n : IN STD_LOGIC;
    layer1_reg_c_write : OUT STD_LOGIC );
end;


architecture behav of fwd_fft_FFT_C is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ctrl1_reg_blk_n : STD_LOGIC;
    signal ctrl2_reg_blk_n : STD_LOGIC;
    signal layer1_reg_blk_n : STD_LOGIC;
    signal ctrl1_reg_c_blk_n : STD_LOGIC;
    signal ctrl2_reg_c_blk_n : STD_LOGIC;
    signal layer1_reg_c_blk_n : STD_LOGIC;
    signal ctrl1_reg_read_reg_191 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_fu_140_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_reg_196 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_fu_144_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_reg_201 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln225_fu_148_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln225_reg_207 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_dataflow_parent_loop_proc12_fu_106_c_row_op_trans_st_read : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc12_fu_106_c_fft_col_op_st_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc12_fu_106_c_fft_col_op_st_write : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc12_fu_106_ap_start : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc12_fu_106_ap_done : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc12_fu_106_ap_ready : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc12_fu_106_ap_idle : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc12_fu_106_ap_continue : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc12_fu_106_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_sync_grp_dataflow_parent_loop_proc12_fu_106_ap_ready : STD_LOGIC;
    signal ap_sync_grp_dataflow_parent_loop_proc12_fu_106_ap_done : STD_LOGIC;
    signal ap_block_state9_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_dataflow_parent_loop_proc12_fu_106_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_dataflow_parent_loop_proc12_fu_106_ap_done : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal ret_2_fu_161_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_2_fu_161_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_2_fu_161_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_177_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_177_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_177_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_184_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_184_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal grp_fu_177_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_177_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_184_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_184_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_2_fu_161_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_2_fu_161_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fwd_fft_dataflow_parent_loop_proc12 IS
    port (
        n : IN STD_LOGIC_VECTOR (31 downto 0);
        c_row_op_trans_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_row_op_trans_st_empty_n : IN STD_LOGIC;
        c_row_op_trans_st_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        c_fft_col_op_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_fft_col_op_st_full_n : IN STD_LOGIC;
        c_fft_col_op_st_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_read_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component fwd_fft_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fwd_fft_mul_mul_16ns_8ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component fwd_fft_mul_mul_24ns_16ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_dataflow_parent_loop_proc12_fu_106 : component fwd_fft_dataflow_parent_loop_proc12
    port map (
        n => n_reg_232,
        c_row_op_trans_st_dout => c_row_op_trans_st_dout,
        c_row_op_trans_st_empty_n => c_row_op_trans_st_empty_n,
        c_row_op_trans_st_read => grp_dataflow_parent_loop_proc12_fu_106_c_row_op_trans_st_read,
        p_read => ctrl1_reg_read_reg_191,
        c_fft_col_op_st_din => grp_dataflow_parent_loop_proc12_fu_106_c_fft_col_op_st_din,
        c_fft_col_op_st_full_n => c_fft_col_op_st_full_n,
        c_fft_col_op_st_write => grp_dataflow_parent_loop_proc12_fu_106_c_fft_col_op_st_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        p_read_ap_vld => ap_const_logic_1,
        ap_start => grp_dataflow_parent_loop_proc12_fu_106_ap_start,
        ap_done => grp_dataflow_parent_loop_proc12_fu_106_ap_done,
        ap_ready => grp_dataflow_parent_loop_proc12_fu_106_ap_ready,
        ap_idle => grp_dataflow_parent_loop_proc12_fu_106_ap_idle,
        ap_continue => grp_dataflow_parent_loop_proc12_fu_106_ap_continue);

    mul_8ns_8ns_16_1_1_U429 : component fwd_fft_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => ret_2_fu_161_p0,
        din1 => ret_2_fu_161_p1,
        dout => ret_2_fu_161_p2);

    mul_mul_16ns_8ns_24_4_1_U430 : component fwd_fft_mul_mul_16ns_8ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_177_p0,
        din1 => grp_fu_177_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_177_p2);

    mul_mul_24ns_16ns_32_4_1_U431 : component fwd_fft_mul_mul_24ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_184_p0,
        din1 => grp_fu_184_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_184_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc12_fu_106_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc12_fu_106_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc12_fu_106_ap_done <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc12_fu_106_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc12_fu_106_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc12_fu_106_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc12_fu_106_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc12_fu_106_ap_ready <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc12_fu_106_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc12_fu_106_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dataflow_parent_loop_proc12_fu_106_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dataflow_parent_loop_proc12_fu_106_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_sync_grp_dataflow_parent_loop_proc12_fu_106_ap_ready = ap_const_logic_0)))) then 
                    grp_dataflow_parent_loop_proc12_fu_106_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dataflow_parent_loop_proc12_fu_106_ap_ready = ap_const_logic_1)) then 
                    grp_dataflow_parent_loop_proc12_fu_106_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                ctrl1_reg_read_reg_191 <= ctrl1_reg_dout;
                lhs_reg_196 <= lhs_fu_140_p1;
                rhs_reg_201 <= rhs_fu_144_p1;
                trunc_ln225_reg_207 <= trunc_ln225_fu_148_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                n_reg_232 <= grp_fu_184_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_c_full_n, layer1_reg_c_full_n, ap_CS_fsm_state9, ap_block_state9_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((layer1_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_c_full_n, layer1_reg_c_full_n)
    begin
        if (((layer1_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(ap_block_state9_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state9_on_subcall_done)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_c_full_n, layer1_reg_c_full_n)
    begin
                ap_block_state1 <= ((layer1_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state9_on_subcall_done_assign_proc : process(ap_sync_grp_dataflow_parent_loop_proc12_fu_106_ap_ready, ap_sync_grp_dataflow_parent_loop_proc12_fu_106_ap_done)
    begin
                ap_block_state9_on_subcall_done <= ((ap_sync_grp_dataflow_parent_loop_proc12_fu_106_ap_ready and ap_sync_grp_dataflow_parent_loop_proc12_fu_106_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state9, ap_block_state9_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, ap_block_state9_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_dataflow_parent_loop_proc12_fu_106_ap_done <= (grp_dataflow_parent_loop_proc12_fu_106_ap_done or ap_sync_reg_grp_dataflow_parent_loop_proc12_fu_106_ap_done);
    ap_sync_grp_dataflow_parent_loop_proc12_fu_106_ap_ready <= (grp_dataflow_parent_loop_proc12_fu_106_ap_ready or ap_sync_reg_grp_dataflow_parent_loop_proc12_fu_106_ap_ready);
    c_fft_col_op_st_din <= grp_dataflow_parent_loop_proc12_fu_106_c_fft_col_op_st_din;

    c_fft_col_op_st_write_assign_proc : process(grp_dataflow_parent_loop_proc12_fu_106_c_fft_col_op_st_write, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            c_fft_col_op_st_write <= grp_dataflow_parent_loop_proc12_fu_106_c_fft_col_op_st_write;
        else 
            c_fft_col_op_st_write <= ap_const_logic_0;
        end if; 
    end process;


    c_row_op_trans_st_read_assign_proc : process(grp_dataflow_parent_loop_proc12_fu_106_c_row_op_trans_st_read, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            c_row_op_trans_st_read <= grp_dataflow_parent_loop_proc12_fu_106_c_row_op_trans_st_read;
        else 
            c_row_op_trans_st_read <= ap_const_logic_0;
        end if; 
    end process;


    ctrl1_reg_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl1_reg_blk_n <= ctrl1_reg_empty_n;
        else 
            ctrl1_reg_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ctrl1_reg_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_c_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl1_reg_c_blk_n <= ctrl1_reg_c_full_n;
        else 
            ctrl1_reg_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ctrl1_reg_c_din <= ctrl1_reg_dout;

    ctrl1_reg_c_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_c_full_n, layer1_reg_c_full_n)
    begin
        if ((not(((layer1_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl1_reg_c_write <= ap_const_logic_1;
        else 
            ctrl1_reg_c_write <= ap_const_logic_0;
        end if; 
    end process;


    ctrl1_reg_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_c_full_n, layer1_reg_c_full_n)
    begin
        if ((not(((layer1_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl1_reg_read <= ap_const_logic_1;
        else 
            ctrl1_reg_read <= ap_const_logic_0;
        end if; 
    end process;


    ctrl2_reg_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl2_reg_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl2_reg_blk_n <= ctrl2_reg_empty_n;
        else 
            ctrl2_reg_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ctrl2_reg_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl2_reg_c_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl2_reg_c_blk_n <= ctrl2_reg_c_full_n;
        else 
            ctrl2_reg_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ctrl2_reg_c_din <= ctrl2_reg_dout;

    ctrl2_reg_c_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_c_full_n, layer1_reg_c_full_n)
    begin
        if ((not(((layer1_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl2_reg_c_write <= ap_const_logic_1;
        else 
            ctrl2_reg_c_write <= ap_const_logic_0;
        end if; 
    end process;


    ctrl2_reg_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_c_full_n, layer1_reg_c_full_n)
    begin
        if ((not(((layer1_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl2_reg_read <= ap_const_logic_1;
        else 
            ctrl2_reg_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_dataflow_parent_loop_proc12_fu_106_ap_continue_assign_proc : process(ap_CS_fsm_state9, ap_block_state9_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then 
            grp_dataflow_parent_loop_proc12_fu_106_ap_continue <= ap_const_logic_1;
        else 
            grp_dataflow_parent_loop_proc12_fu_106_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_dataflow_parent_loop_proc12_fu_106_ap_start <= grp_dataflow_parent_loop_proc12_fu_106_ap_start_reg;
    grp_fu_177_p0 <= grp_fu_177_p00(16 - 1 downto 0);
    grp_fu_177_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_2_fu_161_p2),24));
    grp_fu_177_p1 <= grp_fu_177_p10(8 - 1 downto 0);
    grp_fu_177_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_reg_201),24));
    grp_fu_184_p0 <= grp_fu_184_p00(24 - 1 downto 0);
    grp_fu_184_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_177_p2),32));
    grp_fu_184_p1 <= grp_fu_184_p10(16 - 1 downto 0);
    grp_fu_184_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln225_reg_207),32));

    layer1_reg_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, layer1_reg_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer1_reg_blk_n <= layer1_reg_empty_n;
        else 
            layer1_reg_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer1_reg_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, layer1_reg_c_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer1_reg_c_blk_n <= layer1_reg_c_full_n;
        else 
            layer1_reg_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer1_reg_c_din <= layer1_reg_dout;

    layer1_reg_c_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_c_full_n, layer1_reg_c_full_n)
    begin
        if ((not(((layer1_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer1_reg_c_write <= ap_const_logic_1;
        else 
            layer1_reg_c_write <= ap_const_logic_0;
        end if; 
    end process;


    layer1_reg_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_reg_empty_n, ctrl2_reg_empty_n, layer1_reg_empty_n, ctrl1_reg_c_full_n, ctrl2_reg_c_full_n, layer1_reg_c_full_n)
    begin
        if ((not(((layer1_reg_c_full_n = ap_const_logic_0) or (ctrl2_reg_c_full_n = ap_const_logic_0) or (ctrl1_reg_c_full_n = ap_const_logic_0) or (layer1_reg_empty_n = ap_const_logic_0) or (ctrl2_reg_empty_n = ap_const_logic_0) or (ctrl1_reg_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer1_reg_read <= ap_const_logic_1;
        else 
            layer1_reg_read <= ap_const_logic_0;
        end if; 
    end process;

    lhs_fu_140_p1 <= ctrl1_reg_dout(8 - 1 downto 0);
    ret_2_fu_161_p0 <= ret_2_fu_161_p00(8 - 1 downto 0);
    ret_2_fu_161_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_reg_201),16));
    ret_2_fu_161_p1 <= ret_2_fu_161_p10(8 - 1 downto 0);
    ret_2_fu_161_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_reg_196),16));
    rhs_fu_144_p1 <= ctrl2_reg_dout(8 - 1 downto 0);
    trunc_ln225_fu_148_p1 <= layer1_reg_dout(16 - 1 downto 0);
end behav;
