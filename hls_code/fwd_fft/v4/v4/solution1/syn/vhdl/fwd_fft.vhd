-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fwd_fft is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 128;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_ctrl_bus_AWVALID : IN STD_LOGIC;
    s_axi_ctrl_bus_AWREADY : OUT STD_LOGIC;
    s_axi_ctrl_bus_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_bus_WVALID : IN STD_LOGIC;
    s_axi_ctrl_bus_WREADY : OUT STD_LOGIC;
    s_axi_ctrl_bus_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_bus_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_ctrl_bus_ARVALID : IN STD_LOGIC;
    s_axi_ctrl_bus_ARREADY : OUT STD_LOGIC;
    s_axi_ctrl_bus_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_bus_RVALID : OUT STD_LOGIC;
    s_axi_ctrl_bus_RREADY : IN STD_LOGIC;
    s_axi_ctrl_bus_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_bus_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ctrl_bus_BVALID : OUT STD_LOGIC;
    s_axi_ctrl_bus_BREADY : IN STD_LOGIC;
    s_axi_ctrl_bus_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of fwd_fft is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fwd_fft_fwd_fft,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7cg-fbvb900-1-i,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.536000,HLS_SYN_LAT=91532,HLS_SYN_TPT=91505,HLS_SYN_MEM=147,HLS_SYN_DSP=0,HLS_SYN_FF=32400,HLS_SYN_LUT=34812,HLS_VERSION=2021_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal in1 : STD_LOGIC_VECTOR (63 downto 0);
    signal in2 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_r : STD_LOGIC_VECTOR (63 downto 0);
    signal ctrl1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal layer1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal layer2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal entry_proc47_U0_ap_start : STD_LOGIC;
    signal entry_proc47_U0_ap_done : STD_LOGIC;
    signal entry_proc47_U0_ap_continue : STD_LOGIC;
    signal entry_proc47_U0_ap_idle : STD_LOGIC;
    signal entry_proc47_U0_ap_ready : STD_LOGIC;
    signal entry_proc47_U0_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal out_c_channel_full_n : STD_LOGIC;
    signal Mem_Patch_Gen_U0_ap_start : STD_LOGIC;
    signal Mem_Patch_Gen_U0_ap_done : STD_LOGIC;
    signal Mem_Patch_Gen_U0_ap_continue : STD_LOGIC;
    signal Mem_Patch_Gen_U0_ap_idle : STD_LOGIC;
    signal Mem_Patch_Gen_U0_ap_ready : STD_LOGIC;
    signal Mem_Patch_Gen_U0_start_out : STD_LOGIC;
    signal Mem_Patch_Gen_U0_start_write : STD_LOGIC;
    signal Mem_Patch_Gen_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal Mem_Patch_Gen_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal Mem_Patch_Gen_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal Mem_Patch_Gen_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal Mem_Patch_Gen_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mem_Patch_Gen_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal Mem_Patch_Gen_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal Mem_Patch_Gen_U0_c_ifmap_patch_st_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Mem_Patch_Gen_U0_c_ifmap_patch_st_write : STD_LOGIC;
    signal Mem_Patch_Gen_U0_ctrl1_reg_c21_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Mem_Patch_Gen_U0_ctrl1_reg_c21_write : STD_LOGIC;
    signal Mem_Patch_Gen_U0_ctrl2_reg_c26_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Mem_Patch_Gen_U0_ctrl2_reg_c26_write : STD_LOGIC;
    signal Mem_Patch_Gen_U0_layer1_reg_c31_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Mem_Patch_Gen_U0_layer1_reg_c31_write : STD_LOGIC;
    signal Col_Wise_Overlap_Gen_U0_ap_start : STD_LOGIC;
    signal Col_Wise_Overlap_Gen_U0_ap_done : STD_LOGIC;
    signal Col_Wise_Overlap_Gen_U0_ap_continue : STD_LOGIC;
    signal Col_Wise_Overlap_Gen_U0_ap_idle : STD_LOGIC;
    signal Col_Wise_Overlap_Gen_U0_ap_ready : STD_LOGIC;
    signal Col_Wise_Overlap_Gen_U0_start_out : STD_LOGIC;
    signal Col_Wise_Overlap_Gen_U0_start_write : STD_LOGIC;
    signal Col_Wise_Overlap_Gen_U0_c_ifmap_patch_st_read : STD_LOGIC;
    signal Col_Wise_Overlap_Gen_U0_c_ifmap_col_op_st_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Col_Wise_Overlap_Gen_U0_c_ifmap_col_op_st_write : STD_LOGIC;
    signal Col_Wise_Overlap_Gen_U0_ctrl1_reg_read : STD_LOGIC;
    signal Col_Wise_Overlap_Gen_U0_ctrl2_reg_read : STD_LOGIC;
    signal Col_Wise_Overlap_Gen_U0_layer1_reg_read : STD_LOGIC;
    signal Col_Wise_Overlap_Gen_U0_ctrl1_reg_c20_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Col_Wise_Overlap_Gen_U0_ctrl1_reg_c20_write : STD_LOGIC;
    signal Col_Wise_Overlap_Gen_U0_ctrl2_reg_c25_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Col_Wise_Overlap_Gen_U0_ctrl2_reg_c25_write : STD_LOGIC;
    signal Col_Wise_Overlap_Gen_U0_layer1_reg_c30_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Col_Wise_Overlap_Gen_U0_layer1_reg_c30_write : STD_LOGIC;
    signal FFT_R_U0_ap_start : STD_LOGIC;
    signal FFT_R_U0_ap_done : STD_LOGIC;
    signal FFT_R_U0_ap_continue : STD_LOGIC;
    signal FFT_R_U0_ap_idle : STD_LOGIC;
    signal FFT_R_U0_ap_ready : STD_LOGIC;
    signal FFT_R_U0_start_out : STD_LOGIC;
    signal FFT_R_U0_start_write : STD_LOGIC;
    signal FFT_R_U0_c_ifmap_col_op_st_read : STD_LOGIC;
    signal FFT_R_U0_c_fft_row_op_st_din : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_R_U0_c_fft_row_op_st_write : STD_LOGIC;
    signal FFT_R_U0_ctrl1_reg_read : STD_LOGIC;
    signal FFT_R_U0_ctrl2_reg_read : STD_LOGIC;
    signal FFT_R_U0_layer1_reg_read : STD_LOGIC;
    signal FFT_R_U0_ctrl1_reg_c19_din : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_R_U0_ctrl1_reg_c19_write : STD_LOGIC;
    signal FFT_R_U0_ctrl2_reg_c24_din : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_R_U0_ctrl2_reg_c24_write : STD_LOGIC;
    signal FFT_R_U0_layer1_reg_c29_din : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_R_U0_layer1_reg_c29_write : STD_LOGIC;
    signal Row_Wise_Synch_U0_ap_start : STD_LOGIC;
    signal Row_Wise_Synch_U0_ap_done : STD_LOGIC;
    signal Row_Wise_Synch_U0_ap_continue : STD_LOGIC;
    signal Row_Wise_Synch_U0_ap_idle : STD_LOGIC;
    signal Row_Wise_Synch_U0_ap_ready : STD_LOGIC;
    signal Row_Wise_Synch_U0_start_out : STD_LOGIC;
    signal Row_Wise_Synch_U0_start_write : STD_LOGIC;
    signal Row_Wise_Synch_U0_c_fft_row_op_st_read : STD_LOGIC;
    signal Row_Wise_Synch_U0_c_row_op_st_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Row_Wise_Synch_U0_c_row_op_st_write : STD_LOGIC;
    signal Row_Wise_Synch_U0_ctrl1_reg_read : STD_LOGIC;
    signal Row_Wise_Synch_U0_ctrl2_reg_read : STD_LOGIC;
    signal Row_Wise_Synch_U0_layer1_reg_read : STD_LOGIC;
    signal Row_Wise_Synch_U0_ctrl1_reg_c18_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Row_Wise_Synch_U0_ctrl1_reg_c18_write : STD_LOGIC;
    signal Row_Wise_Synch_U0_ctrl2_reg_c23_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Row_Wise_Synch_U0_ctrl2_reg_c23_write : STD_LOGIC;
    signal Row_Wise_Synch_U0_layer1_reg_c28_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Row_Wise_Synch_U0_layer1_reg_c28_write : STD_LOGIC;
    signal Transpose_U0_ap_start : STD_LOGIC;
    signal Transpose_U0_ap_done : STD_LOGIC;
    signal Transpose_U0_ap_continue : STD_LOGIC;
    signal Transpose_U0_ap_idle : STD_LOGIC;
    signal Transpose_U0_ap_ready : STD_LOGIC;
    signal Transpose_U0_start_out : STD_LOGIC;
    signal Transpose_U0_start_write : STD_LOGIC;
    signal Transpose_U0_c_row_op_st_read : STD_LOGIC;
    signal Transpose_U0_c_row_op_trans_st_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Transpose_U0_c_row_op_trans_st_write : STD_LOGIC;
    signal Transpose_U0_ctrl1_reg_read : STD_LOGIC;
    signal Transpose_U0_ctrl2_reg_read : STD_LOGIC;
    signal Transpose_U0_layer1_reg_read : STD_LOGIC;
    signal Transpose_U0_ctrl1_reg_c17_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Transpose_U0_ctrl1_reg_c17_write : STD_LOGIC;
    signal Transpose_U0_ctrl2_reg_c22_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Transpose_U0_ctrl2_reg_c22_write : STD_LOGIC;
    signal Transpose_U0_layer1_reg_c27_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Transpose_U0_layer1_reg_c27_write : STD_LOGIC;
    signal FFT_C_U0_ap_start : STD_LOGIC;
    signal FFT_C_U0_ap_done : STD_LOGIC;
    signal FFT_C_U0_ap_continue : STD_LOGIC;
    signal FFT_C_U0_ap_idle : STD_LOGIC;
    signal FFT_C_U0_ap_ready : STD_LOGIC;
    signal FFT_C_U0_c_row_op_trans_st_read : STD_LOGIC;
    signal FFT_C_U0_c_fft_col_op_st_din : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_C_U0_c_fft_col_op_st_write : STD_LOGIC;
    signal FFT_C_U0_ctrl1_reg_read : STD_LOGIC;
    signal FFT_C_U0_ctrl2_reg_read : STD_LOGIC;
    signal FFT_C_U0_layer1_reg_read : STD_LOGIC;
    signal FFT_C_U0_ctrl1_reg_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_C_U0_ctrl1_reg_c_write : STD_LOGIC;
    signal FFT_C_U0_ctrl2_reg_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_C_U0_ctrl2_reg_c_write : STD_LOGIC;
    signal FFT_C_U0_layer1_reg_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_C_U0_layer1_reg_c_write : STD_LOGIC;
    signal Mem_patch_Wr_U0_ap_start : STD_LOGIC;
    signal Mem_patch_Wr_U0_ap_done : STD_LOGIC;
    signal Mem_patch_Wr_U0_ap_continue : STD_LOGIC;
    signal Mem_patch_Wr_U0_ap_idle : STD_LOGIC;
    signal Mem_patch_Wr_U0_ap_ready : STD_LOGIC;
    signal Mem_patch_Wr_U0_c_fft_col_op_st_read : STD_LOGIC;
    signal Mem_patch_Wr_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal Mem_patch_Wr_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal Mem_patch_Wr_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal Mem_patch_Wr_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal Mem_patch_Wr_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mem_patch_Wr_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal Mem_patch_Wr_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal Mem_patch_Wr_U0_ctrl1_reg_read : STD_LOGIC;
    signal Mem_patch_Wr_U0_ctrl2_reg_read : STD_LOGIC;
    signal Mem_patch_Wr_U0_layer1_reg_read : STD_LOGIC;
    signal out_c_channel_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal out_c_channel_empty_n : STD_LOGIC;
    signal c_ifmap_patch_st_full_n : STD_LOGIC;
    signal c_ifmap_patch_st_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal c_ifmap_patch_st_empty_n : STD_LOGIC;
    signal ctrl1_reg_c21_full_n : STD_LOGIC;
    signal ctrl1_reg_c21_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_reg_c21_empty_n : STD_LOGIC;
    signal ctrl2_reg_c26_full_n : STD_LOGIC;
    signal ctrl2_reg_c26_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl2_reg_c26_empty_n : STD_LOGIC;
    signal layer1_reg_c31_full_n : STD_LOGIC;
    signal layer1_reg_c31_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal layer1_reg_c31_empty_n : STD_LOGIC;
    signal c_ifmap_col_op_st_full_n : STD_LOGIC;
    signal c_ifmap_col_op_st_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal c_ifmap_col_op_st_empty_n : STD_LOGIC;
    signal ctrl1_reg_c20_full_n : STD_LOGIC;
    signal ctrl1_reg_c20_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_reg_c20_empty_n : STD_LOGIC;
    signal ctrl2_reg_c25_full_n : STD_LOGIC;
    signal ctrl2_reg_c25_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl2_reg_c25_empty_n : STD_LOGIC;
    signal layer1_reg_c30_full_n : STD_LOGIC;
    signal layer1_reg_c30_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal layer1_reg_c30_empty_n : STD_LOGIC;
    signal c_fft_row_op_st_full_n : STD_LOGIC;
    signal c_fft_row_op_st_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal c_fft_row_op_st_empty_n : STD_LOGIC;
    signal ctrl1_reg_c19_full_n : STD_LOGIC;
    signal ctrl1_reg_c19_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_reg_c19_empty_n : STD_LOGIC;
    signal ctrl2_reg_c24_full_n : STD_LOGIC;
    signal ctrl2_reg_c24_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl2_reg_c24_empty_n : STD_LOGIC;
    signal layer1_reg_c29_full_n : STD_LOGIC;
    signal layer1_reg_c29_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal layer1_reg_c29_empty_n : STD_LOGIC;
    signal c_row_op_st_full_n : STD_LOGIC;
    signal c_row_op_st_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal c_row_op_st_empty_n : STD_LOGIC;
    signal ctrl1_reg_c18_full_n : STD_LOGIC;
    signal ctrl1_reg_c18_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_reg_c18_empty_n : STD_LOGIC;
    signal ctrl2_reg_c23_full_n : STD_LOGIC;
    signal ctrl2_reg_c23_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl2_reg_c23_empty_n : STD_LOGIC;
    signal layer1_reg_c28_full_n : STD_LOGIC;
    signal layer1_reg_c28_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal layer1_reg_c28_empty_n : STD_LOGIC;
    signal c_row_op_trans_st_full_n : STD_LOGIC;
    signal c_row_op_trans_st_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal c_row_op_trans_st_empty_n : STD_LOGIC;
    signal ctrl1_reg_c17_full_n : STD_LOGIC;
    signal ctrl1_reg_c17_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_reg_c17_empty_n : STD_LOGIC;
    signal ctrl2_reg_c22_full_n : STD_LOGIC;
    signal ctrl2_reg_c22_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl2_reg_c22_empty_n : STD_LOGIC;
    signal layer1_reg_c27_full_n : STD_LOGIC;
    signal layer1_reg_c27_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal layer1_reg_c27_empty_n : STD_LOGIC;
    signal c_fft_col_op_st_full_n : STD_LOGIC;
    signal c_fft_col_op_st_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal c_fft_col_op_st_empty_n : STD_LOGIC;
    signal ctrl1_reg_c_full_n : STD_LOGIC;
    signal ctrl1_reg_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_reg_c_empty_n : STD_LOGIC;
    signal ctrl2_reg_c_full_n : STD_LOGIC;
    signal ctrl2_reg_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl2_reg_c_empty_n : STD_LOGIC;
    signal layer1_reg_c_full_n : STD_LOGIC;
    signal layer1_reg_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal layer1_reg_c_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc47_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc47_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_Mem_Patch_Gen_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Mem_Patch_Gen_U0_ap_ready : STD_LOGIC;
    signal start_for_Col_Wise_Overlap_Gen_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Col_Wise_Overlap_Gen_U0_full_n : STD_LOGIC;
    signal start_for_Col_Wise_Overlap_Gen_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Col_Wise_Overlap_Gen_U0_empty_n : STD_LOGIC;
    signal start_for_FFT_R_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FFT_R_U0_full_n : STD_LOGIC;
    signal start_for_FFT_R_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FFT_R_U0_empty_n : STD_LOGIC;
    signal start_for_Row_Wise_Synch_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Row_Wise_Synch_U0_full_n : STD_LOGIC;
    signal start_for_Row_Wise_Synch_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Row_Wise_Synch_U0_empty_n : STD_LOGIC;
    signal start_for_Transpose_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Transpose_U0_full_n : STD_LOGIC;
    signal start_for_Transpose_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Transpose_U0_empty_n : STD_LOGIC;
    signal start_for_FFT_C_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FFT_C_U0_full_n : STD_LOGIC;
    signal start_for_FFT_C_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FFT_C_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fwd_fft_entry_proc47 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fwd_fft_Mem_Patch_Gen IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in1 : IN STD_LOGIC_VECTOR (63 downto 0);
        in2 : IN STD_LOGIC_VECTOR (63 downto 0);
        c_ifmap_patch_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_ifmap_patch_st_full_n : IN STD_LOGIC;
        c_ifmap_patch_st_write : OUT STD_LOGIC;
        ctrl1_reg : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl2_reg : IN STD_LOGIC_VECTOR (31 downto 0);
        layer1_reg : IN STD_LOGIC_VECTOR (31 downto 0);
        layer2_reg : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_reg_c21_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_reg_c21_full_n : IN STD_LOGIC;
        ctrl1_reg_c21_write : OUT STD_LOGIC;
        ctrl2_reg_c26_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl2_reg_c26_full_n : IN STD_LOGIC;
        ctrl2_reg_c26_write : OUT STD_LOGIC;
        layer1_reg_c31_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        layer1_reg_c31_full_n : IN STD_LOGIC;
        layer1_reg_c31_write : OUT STD_LOGIC );
    end component;


    component fwd_fft_Col_Wise_Overlap_Gen IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        c_ifmap_patch_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_ifmap_patch_st_empty_n : IN STD_LOGIC;
        c_ifmap_patch_st_read : OUT STD_LOGIC;
        c_ifmap_col_op_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_ifmap_col_op_st_full_n : IN STD_LOGIC;
        c_ifmap_col_op_st_write : OUT STD_LOGIC;
        ctrl1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_reg_empty_n : IN STD_LOGIC;
        ctrl1_reg_read : OUT STD_LOGIC;
        ctrl2_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl2_reg_empty_n : IN STD_LOGIC;
        ctrl2_reg_read : OUT STD_LOGIC;
        layer1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        layer1_reg_empty_n : IN STD_LOGIC;
        layer1_reg_read : OUT STD_LOGIC;
        ctrl1_reg_c20_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_reg_c20_full_n : IN STD_LOGIC;
        ctrl1_reg_c20_write : OUT STD_LOGIC;
        ctrl2_reg_c25_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl2_reg_c25_full_n : IN STD_LOGIC;
        ctrl2_reg_c25_write : OUT STD_LOGIC;
        layer1_reg_c30_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        layer1_reg_c30_full_n : IN STD_LOGIC;
        layer1_reg_c30_write : OUT STD_LOGIC );
    end component;


    component fwd_fft_FFT_R IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        c_ifmap_col_op_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_ifmap_col_op_st_empty_n : IN STD_LOGIC;
        c_ifmap_col_op_st_read : OUT STD_LOGIC;
        c_fft_row_op_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_fft_row_op_st_full_n : IN STD_LOGIC;
        c_fft_row_op_st_write : OUT STD_LOGIC;
        ctrl1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_reg_empty_n : IN STD_LOGIC;
        ctrl1_reg_read : OUT STD_LOGIC;
        ctrl2_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl2_reg_empty_n : IN STD_LOGIC;
        ctrl2_reg_read : OUT STD_LOGIC;
        layer1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        layer1_reg_empty_n : IN STD_LOGIC;
        layer1_reg_read : OUT STD_LOGIC;
        ctrl1_reg_c19_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_reg_c19_full_n : IN STD_LOGIC;
        ctrl1_reg_c19_write : OUT STD_LOGIC;
        ctrl2_reg_c24_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl2_reg_c24_full_n : IN STD_LOGIC;
        ctrl2_reg_c24_write : OUT STD_LOGIC;
        layer1_reg_c29_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        layer1_reg_c29_full_n : IN STD_LOGIC;
        layer1_reg_c29_write : OUT STD_LOGIC );
    end component;


    component fwd_fft_Row_Wise_Synch IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        c_fft_row_op_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_fft_row_op_st_empty_n : IN STD_LOGIC;
        c_fft_row_op_st_read : OUT STD_LOGIC;
        c_row_op_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_row_op_st_full_n : IN STD_LOGIC;
        c_row_op_st_write : OUT STD_LOGIC;
        ctrl1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_reg_empty_n : IN STD_LOGIC;
        ctrl1_reg_read : OUT STD_LOGIC;
        ctrl2_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl2_reg_empty_n : IN STD_LOGIC;
        ctrl2_reg_read : OUT STD_LOGIC;
        layer1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        layer1_reg_empty_n : IN STD_LOGIC;
        layer1_reg_read : OUT STD_LOGIC;
        ctrl1_reg_c18_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_reg_c18_full_n : IN STD_LOGIC;
        ctrl1_reg_c18_write : OUT STD_LOGIC;
        ctrl2_reg_c23_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl2_reg_c23_full_n : IN STD_LOGIC;
        ctrl2_reg_c23_write : OUT STD_LOGIC;
        layer1_reg_c28_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        layer1_reg_c28_full_n : IN STD_LOGIC;
        layer1_reg_c28_write : OUT STD_LOGIC );
    end component;


    component fwd_fft_Transpose IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        c_row_op_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_row_op_st_empty_n : IN STD_LOGIC;
        c_row_op_st_read : OUT STD_LOGIC;
        c_row_op_trans_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_row_op_trans_st_full_n : IN STD_LOGIC;
        c_row_op_trans_st_write : OUT STD_LOGIC;
        ctrl1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_reg_empty_n : IN STD_LOGIC;
        ctrl1_reg_read : OUT STD_LOGIC;
        ctrl2_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl2_reg_empty_n : IN STD_LOGIC;
        ctrl2_reg_read : OUT STD_LOGIC;
        layer1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        layer1_reg_empty_n : IN STD_LOGIC;
        layer1_reg_read : OUT STD_LOGIC;
        ctrl1_reg_c17_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_reg_c17_full_n : IN STD_LOGIC;
        ctrl1_reg_c17_write : OUT STD_LOGIC;
        ctrl2_reg_c22_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl2_reg_c22_full_n : IN STD_LOGIC;
        ctrl2_reg_c22_write : OUT STD_LOGIC;
        layer1_reg_c27_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        layer1_reg_c27_full_n : IN STD_LOGIC;
        layer1_reg_c27_write : OUT STD_LOGIC );
    end component;


    component fwd_fft_FFT_C IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        c_row_op_trans_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_row_op_trans_st_empty_n : IN STD_LOGIC;
        c_row_op_trans_st_read : OUT STD_LOGIC;
        c_fft_col_op_st_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_fft_col_op_st_full_n : IN STD_LOGIC;
        c_fft_col_op_st_write : OUT STD_LOGIC;
        ctrl1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_reg_empty_n : IN STD_LOGIC;
        ctrl1_reg_read : OUT STD_LOGIC;
        ctrl2_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl2_reg_empty_n : IN STD_LOGIC;
        ctrl2_reg_read : OUT STD_LOGIC;
        layer1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        layer1_reg_empty_n : IN STD_LOGIC;
        layer1_reg_read : OUT STD_LOGIC;
        ctrl1_reg_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_reg_c_full_n : IN STD_LOGIC;
        ctrl1_reg_c_write : OUT STD_LOGIC;
        ctrl2_reg_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl2_reg_c_full_n : IN STD_LOGIC;
        ctrl2_reg_c_write : OUT STD_LOGIC;
        layer1_reg_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        layer1_reg_c_full_n : IN STD_LOGIC;
        layer1_reg_c_write : OUT STD_LOGIC );
    end component;


    component fwd_fft_Mem_patch_Wr IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        c_fft_col_op_st_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_fft_col_op_st_empty_n : IN STD_LOGIC;
        c_fft_col_op_st_read : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        p_read : IN STD_LOGIC_VECTOR (63 downto 0);
        ctrl1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_reg_empty_n : IN STD_LOGIC;
        ctrl1_reg_read : OUT STD_LOGIC;
        ctrl2_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl2_reg_empty_n : IN STD_LOGIC;
        ctrl2_reg_read : OUT STD_LOGIC;
        layer1_reg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        layer1_reg_empty_n : IN STD_LOGIC;
        layer1_reg_read : OUT STD_LOGIC );
    end component;


    component fwd_fft_fifo_w64_d7_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fwd_fft_fifo_w32_d1001_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fwd_fft_fifo_w32_d2_S_x0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fwd_fft_start_for_Col_Wise_Overlap_Gen_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fwd_fft_start_for_FFT_R_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fwd_fft_start_for_Row_Wise_Synch_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fwd_fft_start_for_Transpose_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fwd_fft_start_for_FFT_C_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fwd_fft_ctrl_bus_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        in1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        ctrl1_reg : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl2_reg : OUT STD_LOGIC_VECTOR (31 downto 0);
        layer1_reg : OUT STD_LOGIC_VECTOR (31 downto 0);
        layer2_reg : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component fwd_fft_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    ctrl_bus_s_axi_U : component fwd_fft_ctrl_bus_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ctrl_bus_AWVALID,
        AWREADY => s_axi_ctrl_bus_AWREADY,
        AWADDR => s_axi_ctrl_bus_AWADDR,
        WVALID => s_axi_ctrl_bus_WVALID,
        WREADY => s_axi_ctrl_bus_WREADY,
        WDATA => s_axi_ctrl_bus_WDATA,
        WSTRB => s_axi_ctrl_bus_WSTRB,
        ARVALID => s_axi_ctrl_bus_ARVALID,
        ARREADY => s_axi_ctrl_bus_ARREADY,
        ARADDR => s_axi_ctrl_bus_ARADDR,
        RVALID => s_axi_ctrl_bus_RVALID,
        RREADY => s_axi_ctrl_bus_RREADY,
        RDATA => s_axi_ctrl_bus_RDATA,
        RRESP => s_axi_ctrl_bus_RRESP,
        BVALID => s_axi_ctrl_bus_BVALID,
        BREADY => s_axi_ctrl_bus_BREADY,
        BRESP => s_axi_ctrl_bus_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        in1 => in1,
        in2 => in2,
        out_r => out_r,
        ctrl1_reg => ctrl1_reg,
        ctrl2_reg => ctrl2_reg,
        layer1_reg => layer1_reg,
        layer2_reg => layer2_reg,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component fwd_fft_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 128,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => Mem_Patch_Gen_U0_m_axi_gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => Mem_Patch_Gen_U0_m_axi_gmem_ARADDR,
        I_ARID => Mem_Patch_Gen_U0_m_axi_gmem_ARID,
        I_ARLEN => Mem_Patch_Gen_U0_m_axi_gmem_ARLEN,
        I_ARSIZE => Mem_Patch_Gen_U0_m_axi_gmem_ARSIZE,
        I_ARLOCK => Mem_Patch_Gen_U0_m_axi_gmem_ARLOCK,
        I_ARCACHE => Mem_Patch_Gen_U0_m_axi_gmem_ARCACHE,
        I_ARQOS => Mem_Patch_Gen_U0_m_axi_gmem_ARQOS,
        I_ARPROT => Mem_Patch_Gen_U0_m_axi_gmem_ARPROT,
        I_ARUSER => Mem_Patch_Gen_U0_m_axi_gmem_ARUSER,
        I_ARBURST => Mem_Patch_Gen_U0_m_axi_gmem_ARBURST,
        I_ARREGION => Mem_Patch_Gen_U0_m_axi_gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => Mem_Patch_Gen_U0_m_axi_gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => Mem_patch_Wr_U0_m_axi_gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => Mem_patch_Wr_U0_m_axi_gmem_AWADDR,
        I_AWID => Mem_patch_Wr_U0_m_axi_gmem_AWID,
        I_AWLEN => Mem_patch_Wr_U0_m_axi_gmem_AWLEN,
        I_AWSIZE => Mem_patch_Wr_U0_m_axi_gmem_AWSIZE,
        I_AWLOCK => Mem_patch_Wr_U0_m_axi_gmem_AWLOCK,
        I_AWCACHE => Mem_patch_Wr_U0_m_axi_gmem_AWCACHE,
        I_AWQOS => Mem_patch_Wr_U0_m_axi_gmem_AWQOS,
        I_AWPROT => Mem_patch_Wr_U0_m_axi_gmem_AWPROT,
        I_AWUSER => Mem_patch_Wr_U0_m_axi_gmem_AWUSER,
        I_AWBURST => Mem_patch_Wr_U0_m_axi_gmem_AWBURST,
        I_AWREGION => Mem_patch_Wr_U0_m_axi_gmem_AWREGION,
        I_WVALID => Mem_patch_Wr_U0_m_axi_gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => Mem_patch_Wr_U0_m_axi_gmem_WDATA,
        I_WID => Mem_patch_Wr_U0_m_axi_gmem_WID,
        I_WUSER => Mem_patch_Wr_U0_m_axi_gmem_WUSER,
        I_WLAST => Mem_patch_Wr_U0_m_axi_gmem_WLAST,
        I_WSTRB => Mem_patch_Wr_U0_m_axi_gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => Mem_patch_Wr_U0_m_axi_gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    entry_proc47_U0 : component fwd_fft_entry_proc47
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => entry_proc47_U0_ap_start,
        ap_done => entry_proc47_U0_ap_done,
        ap_continue => entry_proc47_U0_ap_continue,
        ap_idle => entry_proc47_U0_ap_idle,
        ap_ready => entry_proc47_U0_ap_ready,
        out_r => out_r,
        ap_return => entry_proc47_U0_ap_return);

    Mem_Patch_Gen_U0 : component fwd_fft_Mem_Patch_Gen
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Mem_Patch_Gen_U0_ap_start,
        start_full_n => start_for_Col_Wise_Overlap_Gen_U0_full_n,
        ap_done => Mem_Patch_Gen_U0_ap_done,
        ap_continue => Mem_Patch_Gen_U0_ap_continue,
        ap_idle => Mem_Patch_Gen_U0_ap_idle,
        ap_ready => Mem_Patch_Gen_U0_ap_ready,
        start_out => Mem_Patch_Gen_U0_start_out,
        start_write => Mem_Patch_Gen_U0_start_write,
        m_axi_gmem_AWVALID => Mem_Patch_Gen_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => Mem_Patch_Gen_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => Mem_Patch_Gen_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => Mem_Patch_Gen_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => Mem_Patch_Gen_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => Mem_Patch_Gen_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => Mem_Patch_Gen_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => Mem_Patch_Gen_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => Mem_Patch_Gen_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => Mem_Patch_Gen_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => Mem_Patch_Gen_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => Mem_Patch_Gen_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => Mem_Patch_Gen_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => Mem_Patch_Gen_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => Mem_Patch_Gen_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => Mem_Patch_Gen_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => Mem_Patch_Gen_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => Mem_Patch_Gen_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => Mem_Patch_Gen_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => Mem_Patch_Gen_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => Mem_Patch_Gen_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => Mem_Patch_Gen_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => Mem_Patch_Gen_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => Mem_Patch_Gen_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => Mem_Patch_Gen_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => Mem_Patch_Gen_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => Mem_Patch_Gen_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => Mem_Patch_Gen_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => Mem_Patch_Gen_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => Mem_Patch_Gen_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => Mem_Patch_Gen_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => gmem_RLAST,
        m_axi_gmem_RID => gmem_RID,
        m_axi_gmem_RUSER => gmem_RUSER,
        m_axi_gmem_RRESP => gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => Mem_Patch_Gen_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        in1 => in1,
        in2 => in2,
        c_ifmap_patch_st_din => Mem_Patch_Gen_U0_c_ifmap_patch_st_din,
        c_ifmap_patch_st_full_n => c_ifmap_patch_st_full_n,
        c_ifmap_patch_st_write => Mem_Patch_Gen_U0_c_ifmap_patch_st_write,
        ctrl1_reg => ctrl1_reg,
        ctrl2_reg => ctrl2_reg,
        layer1_reg => layer1_reg,
        layer2_reg => layer2_reg,
        ctrl1_reg_c21_din => Mem_Patch_Gen_U0_ctrl1_reg_c21_din,
        ctrl1_reg_c21_full_n => ctrl1_reg_c21_full_n,
        ctrl1_reg_c21_write => Mem_Patch_Gen_U0_ctrl1_reg_c21_write,
        ctrl2_reg_c26_din => Mem_Patch_Gen_U0_ctrl2_reg_c26_din,
        ctrl2_reg_c26_full_n => ctrl2_reg_c26_full_n,
        ctrl2_reg_c26_write => Mem_Patch_Gen_U0_ctrl2_reg_c26_write,
        layer1_reg_c31_din => Mem_Patch_Gen_U0_layer1_reg_c31_din,
        layer1_reg_c31_full_n => layer1_reg_c31_full_n,
        layer1_reg_c31_write => Mem_Patch_Gen_U0_layer1_reg_c31_write);

    Col_Wise_Overlap_Gen_U0 : component fwd_fft_Col_Wise_Overlap_Gen
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Col_Wise_Overlap_Gen_U0_ap_start,
        start_full_n => start_for_FFT_R_U0_full_n,
        ap_done => Col_Wise_Overlap_Gen_U0_ap_done,
        ap_continue => Col_Wise_Overlap_Gen_U0_ap_continue,
        ap_idle => Col_Wise_Overlap_Gen_U0_ap_idle,
        ap_ready => Col_Wise_Overlap_Gen_U0_ap_ready,
        start_out => Col_Wise_Overlap_Gen_U0_start_out,
        start_write => Col_Wise_Overlap_Gen_U0_start_write,
        c_ifmap_patch_st_dout => c_ifmap_patch_st_dout,
        c_ifmap_patch_st_empty_n => c_ifmap_patch_st_empty_n,
        c_ifmap_patch_st_read => Col_Wise_Overlap_Gen_U0_c_ifmap_patch_st_read,
        c_ifmap_col_op_st_din => Col_Wise_Overlap_Gen_U0_c_ifmap_col_op_st_din,
        c_ifmap_col_op_st_full_n => c_ifmap_col_op_st_full_n,
        c_ifmap_col_op_st_write => Col_Wise_Overlap_Gen_U0_c_ifmap_col_op_st_write,
        ctrl1_reg_dout => ctrl1_reg_c21_dout,
        ctrl1_reg_empty_n => ctrl1_reg_c21_empty_n,
        ctrl1_reg_read => Col_Wise_Overlap_Gen_U0_ctrl1_reg_read,
        ctrl2_reg_dout => ctrl2_reg_c26_dout,
        ctrl2_reg_empty_n => ctrl2_reg_c26_empty_n,
        ctrl2_reg_read => Col_Wise_Overlap_Gen_U0_ctrl2_reg_read,
        layer1_reg_dout => layer1_reg_c31_dout,
        layer1_reg_empty_n => layer1_reg_c31_empty_n,
        layer1_reg_read => Col_Wise_Overlap_Gen_U0_layer1_reg_read,
        ctrl1_reg_c20_din => Col_Wise_Overlap_Gen_U0_ctrl1_reg_c20_din,
        ctrl1_reg_c20_full_n => ctrl1_reg_c20_full_n,
        ctrl1_reg_c20_write => Col_Wise_Overlap_Gen_U0_ctrl1_reg_c20_write,
        ctrl2_reg_c25_din => Col_Wise_Overlap_Gen_U0_ctrl2_reg_c25_din,
        ctrl2_reg_c25_full_n => ctrl2_reg_c25_full_n,
        ctrl2_reg_c25_write => Col_Wise_Overlap_Gen_U0_ctrl2_reg_c25_write,
        layer1_reg_c30_din => Col_Wise_Overlap_Gen_U0_layer1_reg_c30_din,
        layer1_reg_c30_full_n => layer1_reg_c30_full_n,
        layer1_reg_c30_write => Col_Wise_Overlap_Gen_U0_layer1_reg_c30_write);

    FFT_R_U0 : component fwd_fft_FFT_R
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => FFT_R_U0_ap_start,
        start_full_n => start_for_Row_Wise_Synch_U0_full_n,
        ap_done => FFT_R_U0_ap_done,
        ap_continue => FFT_R_U0_ap_continue,
        ap_idle => FFT_R_U0_ap_idle,
        ap_ready => FFT_R_U0_ap_ready,
        start_out => FFT_R_U0_start_out,
        start_write => FFT_R_U0_start_write,
        c_ifmap_col_op_st_dout => c_ifmap_col_op_st_dout,
        c_ifmap_col_op_st_empty_n => c_ifmap_col_op_st_empty_n,
        c_ifmap_col_op_st_read => FFT_R_U0_c_ifmap_col_op_st_read,
        c_fft_row_op_st_din => FFT_R_U0_c_fft_row_op_st_din,
        c_fft_row_op_st_full_n => c_fft_row_op_st_full_n,
        c_fft_row_op_st_write => FFT_R_U0_c_fft_row_op_st_write,
        ctrl1_reg_dout => ctrl1_reg_c20_dout,
        ctrl1_reg_empty_n => ctrl1_reg_c20_empty_n,
        ctrl1_reg_read => FFT_R_U0_ctrl1_reg_read,
        ctrl2_reg_dout => ctrl2_reg_c25_dout,
        ctrl2_reg_empty_n => ctrl2_reg_c25_empty_n,
        ctrl2_reg_read => FFT_R_U0_ctrl2_reg_read,
        layer1_reg_dout => layer1_reg_c30_dout,
        layer1_reg_empty_n => layer1_reg_c30_empty_n,
        layer1_reg_read => FFT_R_U0_layer1_reg_read,
        ctrl1_reg_c19_din => FFT_R_U0_ctrl1_reg_c19_din,
        ctrl1_reg_c19_full_n => ctrl1_reg_c19_full_n,
        ctrl1_reg_c19_write => FFT_R_U0_ctrl1_reg_c19_write,
        ctrl2_reg_c24_din => FFT_R_U0_ctrl2_reg_c24_din,
        ctrl2_reg_c24_full_n => ctrl2_reg_c24_full_n,
        ctrl2_reg_c24_write => FFT_R_U0_ctrl2_reg_c24_write,
        layer1_reg_c29_din => FFT_R_U0_layer1_reg_c29_din,
        layer1_reg_c29_full_n => layer1_reg_c29_full_n,
        layer1_reg_c29_write => FFT_R_U0_layer1_reg_c29_write);

    Row_Wise_Synch_U0 : component fwd_fft_Row_Wise_Synch
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Row_Wise_Synch_U0_ap_start,
        start_full_n => start_for_Transpose_U0_full_n,
        ap_done => Row_Wise_Synch_U0_ap_done,
        ap_continue => Row_Wise_Synch_U0_ap_continue,
        ap_idle => Row_Wise_Synch_U0_ap_idle,
        ap_ready => Row_Wise_Synch_U0_ap_ready,
        start_out => Row_Wise_Synch_U0_start_out,
        start_write => Row_Wise_Synch_U0_start_write,
        c_fft_row_op_st_dout => c_fft_row_op_st_dout,
        c_fft_row_op_st_empty_n => c_fft_row_op_st_empty_n,
        c_fft_row_op_st_read => Row_Wise_Synch_U0_c_fft_row_op_st_read,
        c_row_op_st_din => Row_Wise_Synch_U0_c_row_op_st_din,
        c_row_op_st_full_n => c_row_op_st_full_n,
        c_row_op_st_write => Row_Wise_Synch_U0_c_row_op_st_write,
        ctrl1_reg_dout => ctrl1_reg_c19_dout,
        ctrl1_reg_empty_n => ctrl1_reg_c19_empty_n,
        ctrl1_reg_read => Row_Wise_Synch_U0_ctrl1_reg_read,
        ctrl2_reg_dout => ctrl2_reg_c24_dout,
        ctrl2_reg_empty_n => ctrl2_reg_c24_empty_n,
        ctrl2_reg_read => Row_Wise_Synch_U0_ctrl2_reg_read,
        layer1_reg_dout => layer1_reg_c29_dout,
        layer1_reg_empty_n => layer1_reg_c29_empty_n,
        layer1_reg_read => Row_Wise_Synch_U0_layer1_reg_read,
        ctrl1_reg_c18_din => Row_Wise_Synch_U0_ctrl1_reg_c18_din,
        ctrl1_reg_c18_full_n => ctrl1_reg_c18_full_n,
        ctrl1_reg_c18_write => Row_Wise_Synch_U0_ctrl1_reg_c18_write,
        ctrl2_reg_c23_din => Row_Wise_Synch_U0_ctrl2_reg_c23_din,
        ctrl2_reg_c23_full_n => ctrl2_reg_c23_full_n,
        ctrl2_reg_c23_write => Row_Wise_Synch_U0_ctrl2_reg_c23_write,
        layer1_reg_c28_din => Row_Wise_Synch_U0_layer1_reg_c28_din,
        layer1_reg_c28_full_n => layer1_reg_c28_full_n,
        layer1_reg_c28_write => Row_Wise_Synch_U0_layer1_reg_c28_write);

    Transpose_U0 : component fwd_fft_Transpose
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Transpose_U0_ap_start,
        start_full_n => start_for_FFT_C_U0_full_n,
        ap_done => Transpose_U0_ap_done,
        ap_continue => Transpose_U0_ap_continue,
        ap_idle => Transpose_U0_ap_idle,
        ap_ready => Transpose_U0_ap_ready,
        start_out => Transpose_U0_start_out,
        start_write => Transpose_U0_start_write,
        c_row_op_st_dout => c_row_op_st_dout,
        c_row_op_st_empty_n => c_row_op_st_empty_n,
        c_row_op_st_read => Transpose_U0_c_row_op_st_read,
        c_row_op_trans_st_din => Transpose_U0_c_row_op_trans_st_din,
        c_row_op_trans_st_full_n => c_row_op_trans_st_full_n,
        c_row_op_trans_st_write => Transpose_U0_c_row_op_trans_st_write,
        ctrl1_reg_dout => ctrl1_reg_c18_dout,
        ctrl1_reg_empty_n => ctrl1_reg_c18_empty_n,
        ctrl1_reg_read => Transpose_U0_ctrl1_reg_read,
        ctrl2_reg_dout => ctrl2_reg_c23_dout,
        ctrl2_reg_empty_n => ctrl2_reg_c23_empty_n,
        ctrl2_reg_read => Transpose_U0_ctrl2_reg_read,
        layer1_reg_dout => layer1_reg_c28_dout,
        layer1_reg_empty_n => layer1_reg_c28_empty_n,
        layer1_reg_read => Transpose_U0_layer1_reg_read,
        ctrl1_reg_c17_din => Transpose_U0_ctrl1_reg_c17_din,
        ctrl1_reg_c17_full_n => ctrl1_reg_c17_full_n,
        ctrl1_reg_c17_write => Transpose_U0_ctrl1_reg_c17_write,
        ctrl2_reg_c22_din => Transpose_U0_ctrl2_reg_c22_din,
        ctrl2_reg_c22_full_n => ctrl2_reg_c22_full_n,
        ctrl2_reg_c22_write => Transpose_U0_ctrl2_reg_c22_write,
        layer1_reg_c27_din => Transpose_U0_layer1_reg_c27_din,
        layer1_reg_c27_full_n => layer1_reg_c27_full_n,
        layer1_reg_c27_write => Transpose_U0_layer1_reg_c27_write);

    FFT_C_U0 : component fwd_fft_FFT_C
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => FFT_C_U0_ap_start,
        ap_done => FFT_C_U0_ap_done,
        ap_continue => FFT_C_U0_ap_continue,
        ap_idle => FFT_C_U0_ap_idle,
        ap_ready => FFT_C_U0_ap_ready,
        c_row_op_trans_st_dout => c_row_op_trans_st_dout,
        c_row_op_trans_st_empty_n => c_row_op_trans_st_empty_n,
        c_row_op_trans_st_read => FFT_C_U0_c_row_op_trans_st_read,
        c_fft_col_op_st_din => FFT_C_U0_c_fft_col_op_st_din,
        c_fft_col_op_st_full_n => c_fft_col_op_st_full_n,
        c_fft_col_op_st_write => FFT_C_U0_c_fft_col_op_st_write,
        ctrl1_reg_dout => ctrl1_reg_c17_dout,
        ctrl1_reg_empty_n => ctrl1_reg_c17_empty_n,
        ctrl1_reg_read => FFT_C_U0_ctrl1_reg_read,
        ctrl2_reg_dout => ctrl2_reg_c22_dout,
        ctrl2_reg_empty_n => ctrl2_reg_c22_empty_n,
        ctrl2_reg_read => FFT_C_U0_ctrl2_reg_read,
        layer1_reg_dout => layer1_reg_c27_dout,
        layer1_reg_empty_n => layer1_reg_c27_empty_n,
        layer1_reg_read => FFT_C_U0_layer1_reg_read,
        ctrl1_reg_c_din => FFT_C_U0_ctrl1_reg_c_din,
        ctrl1_reg_c_full_n => ctrl1_reg_c_full_n,
        ctrl1_reg_c_write => FFT_C_U0_ctrl1_reg_c_write,
        ctrl2_reg_c_din => FFT_C_U0_ctrl2_reg_c_din,
        ctrl2_reg_c_full_n => ctrl2_reg_c_full_n,
        ctrl2_reg_c_write => FFT_C_U0_ctrl2_reg_c_write,
        layer1_reg_c_din => FFT_C_U0_layer1_reg_c_din,
        layer1_reg_c_full_n => layer1_reg_c_full_n,
        layer1_reg_c_write => FFT_C_U0_layer1_reg_c_write);

    Mem_patch_Wr_U0 : component fwd_fft_Mem_patch_Wr
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Mem_patch_Wr_U0_ap_start,
        ap_done => Mem_patch_Wr_U0_ap_done,
        ap_continue => Mem_patch_Wr_U0_ap_continue,
        ap_idle => Mem_patch_Wr_U0_ap_idle,
        ap_ready => Mem_patch_Wr_U0_ap_ready,
        c_fft_col_op_st_dout => c_fft_col_op_st_dout,
        c_fft_col_op_st_empty_n => c_fft_col_op_st_empty_n,
        c_fft_col_op_st_read => Mem_patch_Wr_U0_c_fft_col_op_st_read,
        m_axi_gmem_AWVALID => Mem_patch_Wr_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => Mem_patch_Wr_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => Mem_patch_Wr_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => Mem_patch_Wr_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => Mem_patch_Wr_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => Mem_patch_Wr_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => Mem_patch_Wr_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => Mem_patch_Wr_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => Mem_patch_Wr_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => Mem_patch_Wr_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => Mem_patch_Wr_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => Mem_patch_Wr_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => Mem_patch_Wr_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => Mem_patch_Wr_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => Mem_patch_Wr_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => Mem_patch_Wr_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => Mem_patch_Wr_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => Mem_patch_Wr_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => Mem_patch_Wr_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => Mem_patch_Wr_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => Mem_patch_Wr_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => Mem_patch_Wr_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => Mem_patch_Wr_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => Mem_patch_Wr_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => Mem_patch_Wr_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => Mem_patch_Wr_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => Mem_patch_Wr_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => Mem_patch_Wr_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => Mem_patch_Wr_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => Mem_patch_Wr_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => Mem_patch_Wr_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv128_lc_1,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => Mem_patch_Wr_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => gmem_BRESP,
        m_axi_gmem_BID => gmem_BID,
        m_axi_gmem_BUSER => gmem_BUSER,
        p_read => out_c_channel_dout,
        ctrl1_reg_dout => ctrl1_reg_c_dout,
        ctrl1_reg_empty_n => ctrl1_reg_c_empty_n,
        ctrl1_reg_read => Mem_patch_Wr_U0_ctrl1_reg_read,
        ctrl2_reg_dout => ctrl2_reg_c_dout,
        ctrl2_reg_empty_n => ctrl2_reg_c_empty_n,
        ctrl2_reg_read => Mem_patch_Wr_U0_ctrl2_reg_read,
        layer1_reg_dout => layer1_reg_c_dout,
        layer1_reg_empty_n => layer1_reg_c_empty_n,
        layer1_reg_read => Mem_patch_Wr_U0_layer1_reg_read);

    out_c_channel_U : component fwd_fft_fifo_w64_d7_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc47_U0_ap_return,
        if_full_n => out_c_channel_full_n,
        if_write => entry_proc47_U0_ap_done,
        if_dout => out_c_channel_dout,
        if_empty_n => out_c_channel_empty_n,
        if_read => Mem_patch_Wr_U0_ap_ready);

    c_ifmap_patch_st_U : component fwd_fft_fifo_w32_d1001_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Mem_Patch_Gen_U0_c_ifmap_patch_st_din,
        if_full_n => c_ifmap_patch_st_full_n,
        if_write => Mem_Patch_Gen_U0_c_ifmap_patch_st_write,
        if_dout => c_ifmap_patch_st_dout,
        if_empty_n => c_ifmap_patch_st_empty_n,
        if_read => Col_Wise_Overlap_Gen_U0_c_ifmap_patch_st_read);

    ctrl1_reg_c21_U : component fwd_fft_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Mem_Patch_Gen_U0_ctrl1_reg_c21_din,
        if_full_n => ctrl1_reg_c21_full_n,
        if_write => Mem_Patch_Gen_U0_ctrl1_reg_c21_write,
        if_dout => ctrl1_reg_c21_dout,
        if_empty_n => ctrl1_reg_c21_empty_n,
        if_read => Col_Wise_Overlap_Gen_U0_ctrl1_reg_read);

    ctrl2_reg_c26_U : component fwd_fft_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Mem_Patch_Gen_U0_ctrl2_reg_c26_din,
        if_full_n => ctrl2_reg_c26_full_n,
        if_write => Mem_Patch_Gen_U0_ctrl2_reg_c26_write,
        if_dout => ctrl2_reg_c26_dout,
        if_empty_n => ctrl2_reg_c26_empty_n,
        if_read => Col_Wise_Overlap_Gen_U0_ctrl2_reg_read);

    layer1_reg_c31_U : component fwd_fft_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Mem_Patch_Gen_U0_layer1_reg_c31_din,
        if_full_n => layer1_reg_c31_full_n,
        if_write => Mem_Patch_Gen_U0_layer1_reg_c31_write,
        if_dout => layer1_reg_c31_dout,
        if_empty_n => layer1_reg_c31_empty_n,
        if_read => Col_Wise_Overlap_Gen_U0_layer1_reg_read);

    c_ifmap_col_op_st_U : component fwd_fft_fifo_w32_d1001_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Col_Wise_Overlap_Gen_U0_c_ifmap_col_op_st_din,
        if_full_n => c_ifmap_col_op_st_full_n,
        if_write => Col_Wise_Overlap_Gen_U0_c_ifmap_col_op_st_write,
        if_dout => c_ifmap_col_op_st_dout,
        if_empty_n => c_ifmap_col_op_st_empty_n,
        if_read => FFT_R_U0_c_ifmap_col_op_st_read);

    ctrl1_reg_c20_U : component fwd_fft_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Col_Wise_Overlap_Gen_U0_ctrl1_reg_c20_din,
        if_full_n => ctrl1_reg_c20_full_n,
        if_write => Col_Wise_Overlap_Gen_U0_ctrl1_reg_c20_write,
        if_dout => ctrl1_reg_c20_dout,
        if_empty_n => ctrl1_reg_c20_empty_n,
        if_read => FFT_R_U0_ctrl1_reg_read);

    ctrl2_reg_c25_U : component fwd_fft_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Col_Wise_Overlap_Gen_U0_ctrl2_reg_c25_din,
        if_full_n => ctrl2_reg_c25_full_n,
        if_write => Col_Wise_Overlap_Gen_U0_ctrl2_reg_c25_write,
        if_dout => ctrl2_reg_c25_dout,
        if_empty_n => ctrl2_reg_c25_empty_n,
        if_read => FFT_R_U0_ctrl2_reg_read);

    layer1_reg_c30_U : component fwd_fft_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Col_Wise_Overlap_Gen_U0_layer1_reg_c30_din,
        if_full_n => layer1_reg_c30_full_n,
        if_write => Col_Wise_Overlap_Gen_U0_layer1_reg_c30_write,
        if_dout => layer1_reg_c30_dout,
        if_empty_n => layer1_reg_c30_empty_n,
        if_read => FFT_R_U0_layer1_reg_read);

    c_fft_row_op_st_U : component fwd_fft_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => FFT_R_U0_c_fft_row_op_st_din,
        if_full_n => c_fft_row_op_st_full_n,
        if_write => FFT_R_U0_c_fft_row_op_st_write,
        if_dout => c_fft_row_op_st_dout,
        if_empty_n => c_fft_row_op_st_empty_n,
        if_read => Row_Wise_Synch_U0_c_fft_row_op_st_read);

    ctrl1_reg_c19_U : component fwd_fft_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => FFT_R_U0_ctrl1_reg_c19_din,
        if_full_n => ctrl1_reg_c19_full_n,
        if_write => FFT_R_U0_ctrl1_reg_c19_write,
        if_dout => ctrl1_reg_c19_dout,
        if_empty_n => ctrl1_reg_c19_empty_n,
        if_read => Row_Wise_Synch_U0_ctrl1_reg_read);

    ctrl2_reg_c24_U : component fwd_fft_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => FFT_R_U0_ctrl2_reg_c24_din,
        if_full_n => ctrl2_reg_c24_full_n,
        if_write => FFT_R_U0_ctrl2_reg_c24_write,
        if_dout => ctrl2_reg_c24_dout,
        if_empty_n => ctrl2_reg_c24_empty_n,
        if_read => Row_Wise_Synch_U0_ctrl2_reg_read);

    layer1_reg_c29_U : component fwd_fft_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => FFT_R_U0_layer1_reg_c29_din,
        if_full_n => layer1_reg_c29_full_n,
        if_write => FFT_R_U0_layer1_reg_c29_write,
        if_dout => layer1_reg_c29_dout,
        if_empty_n => layer1_reg_c29_empty_n,
        if_read => Row_Wise_Synch_U0_layer1_reg_read);

    c_row_op_st_U : component fwd_fft_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Row_Wise_Synch_U0_c_row_op_st_din,
        if_full_n => c_row_op_st_full_n,
        if_write => Row_Wise_Synch_U0_c_row_op_st_write,
        if_dout => c_row_op_st_dout,
        if_empty_n => c_row_op_st_empty_n,
        if_read => Transpose_U0_c_row_op_st_read);

    ctrl1_reg_c18_U : component fwd_fft_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Row_Wise_Synch_U0_ctrl1_reg_c18_din,
        if_full_n => ctrl1_reg_c18_full_n,
        if_write => Row_Wise_Synch_U0_ctrl1_reg_c18_write,
        if_dout => ctrl1_reg_c18_dout,
        if_empty_n => ctrl1_reg_c18_empty_n,
        if_read => Transpose_U0_ctrl1_reg_read);

    ctrl2_reg_c23_U : component fwd_fft_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Row_Wise_Synch_U0_ctrl2_reg_c23_din,
        if_full_n => ctrl2_reg_c23_full_n,
        if_write => Row_Wise_Synch_U0_ctrl2_reg_c23_write,
        if_dout => ctrl2_reg_c23_dout,
        if_empty_n => ctrl2_reg_c23_empty_n,
        if_read => Transpose_U0_ctrl2_reg_read);

    layer1_reg_c28_U : component fwd_fft_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Row_Wise_Synch_U0_layer1_reg_c28_din,
        if_full_n => layer1_reg_c28_full_n,
        if_write => Row_Wise_Synch_U0_layer1_reg_c28_write,
        if_dout => layer1_reg_c28_dout,
        if_empty_n => layer1_reg_c28_empty_n,
        if_read => Transpose_U0_layer1_reg_read);

    c_row_op_trans_st_U : component fwd_fft_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Transpose_U0_c_row_op_trans_st_din,
        if_full_n => c_row_op_trans_st_full_n,
        if_write => Transpose_U0_c_row_op_trans_st_write,
        if_dout => c_row_op_trans_st_dout,
        if_empty_n => c_row_op_trans_st_empty_n,
        if_read => FFT_C_U0_c_row_op_trans_st_read);

    ctrl1_reg_c17_U : component fwd_fft_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Transpose_U0_ctrl1_reg_c17_din,
        if_full_n => ctrl1_reg_c17_full_n,
        if_write => Transpose_U0_ctrl1_reg_c17_write,
        if_dout => ctrl1_reg_c17_dout,
        if_empty_n => ctrl1_reg_c17_empty_n,
        if_read => FFT_C_U0_ctrl1_reg_read);

    ctrl2_reg_c22_U : component fwd_fft_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Transpose_U0_ctrl2_reg_c22_din,
        if_full_n => ctrl2_reg_c22_full_n,
        if_write => Transpose_U0_ctrl2_reg_c22_write,
        if_dout => ctrl2_reg_c22_dout,
        if_empty_n => ctrl2_reg_c22_empty_n,
        if_read => FFT_C_U0_ctrl2_reg_read);

    layer1_reg_c27_U : component fwd_fft_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Transpose_U0_layer1_reg_c27_din,
        if_full_n => layer1_reg_c27_full_n,
        if_write => Transpose_U0_layer1_reg_c27_write,
        if_dout => layer1_reg_c27_dout,
        if_empty_n => layer1_reg_c27_empty_n,
        if_read => FFT_C_U0_layer1_reg_read);

    c_fft_col_op_st_U : component fwd_fft_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => FFT_C_U0_c_fft_col_op_st_din,
        if_full_n => c_fft_col_op_st_full_n,
        if_write => FFT_C_U0_c_fft_col_op_st_write,
        if_dout => c_fft_col_op_st_dout,
        if_empty_n => c_fft_col_op_st_empty_n,
        if_read => Mem_patch_Wr_U0_c_fft_col_op_st_read);

    ctrl1_reg_c_U : component fwd_fft_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => FFT_C_U0_ctrl1_reg_c_din,
        if_full_n => ctrl1_reg_c_full_n,
        if_write => FFT_C_U0_ctrl1_reg_c_write,
        if_dout => ctrl1_reg_c_dout,
        if_empty_n => ctrl1_reg_c_empty_n,
        if_read => Mem_patch_Wr_U0_ctrl1_reg_read);

    ctrl2_reg_c_U : component fwd_fft_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => FFT_C_U0_ctrl2_reg_c_din,
        if_full_n => ctrl2_reg_c_full_n,
        if_write => FFT_C_U0_ctrl2_reg_c_write,
        if_dout => ctrl2_reg_c_dout,
        if_empty_n => ctrl2_reg_c_empty_n,
        if_read => Mem_patch_Wr_U0_ctrl2_reg_read);

    layer1_reg_c_U : component fwd_fft_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => FFT_C_U0_layer1_reg_c_din,
        if_full_n => layer1_reg_c_full_n,
        if_write => FFT_C_U0_layer1_reg_c_write,
        if_dout => layer1_reg_c_dout,
        if_empty_n => layer1_reg_c_empty_n,
        if_read => Mem_patch_Wr_U0_layer1_reg_read);

    start_for_Col_Wise_Overlap_Gen_U0_U : component fwd_fft_start_for_Col_Wise_Overlap_Gen_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Col_Wise_Overlap_Gen_U0_din,
        if_full_n => start_for_Col_Wise_Overlap_Gen_U0_full_n,
        if_write => Mem_Patch_Gen_U0_start_write,
        if_dout => start_for_Col_Wise_Overlap_Gen_U0_dout,
        if_empty_n => start_for_Col_Wise_Overlap_Gen_U0_empty_n,
        if_read => Col_Wise_Overlap_Gen_U0_ap_ready);

    start_for_FFT_R_U0_U : component fwd_fft_start_for_FFT_R_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_FFT_R_U0_din,
        if_full_n => start_for_FFT_R_U0_full_n,
        if_write => Col_Wise_Overlap_Gen_U0_start_write,
        if_dout => start_for_FFT_R_U0_dout,
        if_empty_n => start_for_FFT_R_U0_empty_n,
        if_read => FFT_R_U0_ap_ready);

    start_for_Row_Wise_Synch_U0_U : component fwd_fft_start_for_Row_Wise_Synch_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Row_Wise_Synch_U0_din,
        if_full_n => start_for_Row_Wise_Synch_U0_full_n,
        if_write => FFT_R_U0_start_write,
        if_dout => start_for_Row_Wise_Synch_U0_dout,
        if_empty_n => start_for_Row_Wise_Synch_U0_empty_n,
        if_read => Row_Wise_Synch_U0_ap_ready);

    start_for_Transpose_U0_U : component fwd_fft_start_for_Transpose_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Transpose_U0_din,
        if_full_n => start_for_Transpose_U0_full_n,
        if_write => Row_Wise_Synch_U0_start_write,
        if_dout => start_for_Transpose_U0_dout,
        if_empty_n => start_for_Transpose_U0_empty_n,
        if_read => Transpose_U0_ap_ready);

    start_for_FFT_C_U0_U : component fwd_fft_start_for_FFT_C_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_FFT_C_U0_din,
        if_full_n => start_for_FFT_C_U0_full_n,
        if_write => Transpose_U0_start_write,
        if_dout => start_for_FFT_C_U0_dout,
        if_empty_n => start_for_FFT_C_U0_empty_n,
        if_read => FFT_C_U0_ap_ready);





    ap_sync_reg_Mem_Patch_Gen_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Mem_Patch_Gen_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Mem_Patch_Gen_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Mem_Patch_Gen_U0_ap_ready <= ap_sync_Mem_Patch_Gen_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc47_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_entry_proc47_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc47_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc47_U0_ap_ready <= ap_sync_entry_proc47_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    Col_Wise_Overlap_Gen_U0_ap_continue <= ap_const_logic_1;
    Col_Wise_Overlap_Gen_U0_ap_start <= start_for_Col_Wise_Overlap_Gen_U0_empty_n;
    FFT_C_U0_ap_continue <= ap_const_logic_1;
    FFT_C_U0_ap_start <= start_for_FFT_C_U0_empty_n;
    FFT_R_U0_ap_continue <= ap_const_logic_1;
    FFT_R_U0_ap_start <= start_for_FFT_R_U0_empty_n;
    Mem_Patch_Gen_U0_ap_continue <= ap_const_logic_1;
    Mem_Patch_Gen_U0_ap_start <= ((ap_sync_reg_Mem_Patch_Gen_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Mem_patch_Wr_U0_ap_continue <= ap_const_logic_1;
    Mem_patch_Wr_U0_ap_start <= out_c_channel_empty_n;
    Row_Wise_Synch_U0_ap_continue <= ap_const_logic_1;
    Row_Wise_Synch_U0_ap_start <= start_for_Row_Wise_Synch_U0_empty_n;
    Transpose_U0_ap_continue <= ap_const_logic_1;
    Transpose_U0_ap_start <= start_for_Transpose_U0_empty_n;
    ap_done <= Mem_patch_Wr_U0_ap_done;
    ap_idle <= ((out_c_channel_empty_n xor ap_const_logic_1) and entry_proc47_U0_ap_idle and Transpose_U0_ap_idle and Row_Wise_Synch_U0_ap_idle and Mem_patch_Wr_U0_ap_idle and Mem_Patch_Gen_U0_ap_idle and FFT_R_U0_ap_idle and FFT_C_U0_ap_idle and Col_Wise_Overlap_Gen_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_Mem_Patch_Gen_U0_ap_ready <= (ap_sync_reg_Mem_Patch_Gen_U0_ap_ready or Mem_Patch_Gen_U0_ap_ready);
    ap_sync_entry_proc47_U0_ap_ready <= (entry_proc47_U0_ap_ready or ap_sync_reg_entry_proc47_U0_ap_ready);
    ap_sync_ready <= (ap_sync_entry_proc47_U0_ap_ready and ap_sync_Mem_Patch_Gen_U0_ap_ready);
    entry_proc47_U0_ap_continue <= out_c_channel_full_n;
    entry_proc47_U0_ap_start <= ((ap_sync_reg_entry_proc47_U0_ap_ready xor ap_const_logic_1) and ap_start);
    start_for_Col_Wise_Overlap_Gen_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_FFT_C_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_FFT_R_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Row_Wise_Synch_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Transpose_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
