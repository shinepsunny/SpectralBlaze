// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fwd_fft_ifmap_cons_y (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        c_row_op_trans_st_din,
        c_row_op_trans_st_full_n,
        c_row_op_trans_st_write,
        ifmap_CF_M_real_address0,
        ifmap_CF_M_real_ce0,
        ifmap_CF_M_real_q0,
        ifmap_CF_M_imag_address0,
        ifmap_CF_M_imag_ce0,
        ifmap_CF_M_imag_q0,
        p_read
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] c_row_op_trans_st_din;
input   c_row_op_trans_st_full_n;
output   c_row_op_trans_st_write;
output  [11:0] ifmap_CF_M_real_address0;
output   ifmap_CF_M_real_ce0;
input  [15:0] ifmap_CF_M_real_q0;
output  [11:0] ifmap_CF_M_imag_address0;
output   ifmap_CF_M_imag_ce0;
input  [15:0] ifmap_CF_M_imag_q0;
input  [7:0] p_read;

reg ap_idle;
reg c_row_op_trans_st_write;
reg ifmap_CF_M_real_ce0;
reg ifmap_CF_M_imag_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1057_fu_135_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    c_row_op_trans_st_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [11:0] add_ln391_fu_197_p2;
reg   [11:0] add_ln391_reg_271;
wire   [63:0] zext_ln391_fu_224_p1;
reg   [7:0] y_fu_56;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_y_load;
wire   [7:0] add_ln388_fu_203_p2;
reg   [7:0] x_fu_60;
reg   [7:0] ap_sig_allocacmp_x_load;
wire   [7:0] select_ln1057_2_fu_173_p3;
reg   [15:0] indvar_flatten_fu_64;
reg   [15:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [15:0] add_ln1057_fu_141_p2;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] bound_fu_111_p0;
wire   [15:0] cast_fu_107_p1;
wire   [7:0] bound_fu_111_p1;
wire   [15:0] bound_fu_111_p2;
wire   [0:0] icmp_ln1057_4_fu_159_p2;
wire   [7:0] add_ln385_fu_153_p2;
wire   [7:0] select_ln1057_fu_165_p3;
wire   [5:0] trunc_ln391_fu_185_p1;
wire   [11:0] tmp_11_cast_fu_189_p3;
wire   [11:0] select_ln1057_2_cast_fu_181_p1;
wire   [15:0] bitcast_ln174_1_fu_233_p1;
wire   [15:0] bitcast_ln174_fu_229_p1;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_106;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fwd_fft_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U262(
    .din0(bound_fu_111_p0),
    .din1(bound_fu_111_p1),
    .dout(bound_fu_111_p2)
);

fwd_fft_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_106)) begin
        if ((icmp_ln1057_fu_135_p2 == 1'd0)) begin
            indvar_flatten_fu_64 <= add_ln1057_fu_141_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_64 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_106)) begin
        if ((icmp_ln1057_fu_135_p2 == 1'd0)) begin
            x_fu_60 <= select_ln1057_2_fu_173_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            x_fu_60 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_106)) begin
        if ((icmp_ln1057_fu_135_p2 == 1'd0)) begin
            y_fu_56 <= add_ln388_fu_203_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            y_fu_56 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_fu_135_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln391_reg_271 <= add_ln391_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_135_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_x_load = 8'd0;
    end else begin
        ap_sig_allocacmp_x_load = x_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_y_load = 8'd0;
    end else begin
        ap_sig_allocacmp_y_load = y_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        c_row_op_trans_st_blk_n = c_row_op_trans_st_full_n;
    end else begin
        c_row_op_trans_st_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        c_row_op_trans_st_write = 1'b1;
    end else begin
        c_row_op_trans_st_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ifmap_CF_M_imag_ce0 = 1'b1;
    end else begin
        ifmap_CF_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ifmap_CF_M_real_ce0 = 1'b1;
    end else begin
        ifmap_CF_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1057_fu_141_p2 = (ap_sig_allocacmp_indvar_flatten_load + 16'd1);

assign add_ln385_fu_153_p2 = (ap_sig_allocacmp_x_load + 8'd1);

assign add_ln388_fu_203_p2 = (select_ln1057_fu_165_p3 + 8'd1);

assign add_ln391_fu_197_p2 = (tmp_11_cast_fu_189_p3 + select_ln1057_2_cast_fu_181_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((c_row_op_trans_st_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((c_row_op_trans_st_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((c_row_op_trans_st_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (c_row_op_trans_st_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_106 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln174_1_fu_233_p1 = ifmap_CF_M_imag_q0;

assign bitcast_ln174_fu_229_p1 = ifmap_CF_M_real_q0;

assign bound_fu_111_p0 = cast_fu_107_p1;

assign bound_fu_111_p1 = cast_fu_107_p1;

assign c_row_op_trans_st_din = {{bitcast_ln174_1_fu_233_p1}, {bitcast_ln174_fu_229_p1}};

assign cast_fu_107_p1 = p_read;

assign icmp_ln1057_4_fu_159_p2 = ((ap_sig_allocacmp_y_load == p_read) ? 1'b1 : 1'b0);

assign icmp_ln1057_fu_135_p2 = ((ap_sig_allocacmp_indvar_flatten_load == bound_fu_111_p2) ? 1'b1 : 1'b0);

assign ifmap_CF_M_imag_address0 = zext_ln391_fu_224_p1;

assign ifmap_CF_M_real_address0 = zext_ln391_fu_224_p1;

assign select_ln1057_2_cast_fu_181_p1 = select_ln1057_2_fu_173_p3;

assign select_ln1057_2_fu_173_p3 = ((icmp_ln1057_4_fu_159_p2[0:0] == 1'b1) ? add_ln385_fu_153_p2 : ap_sig_allocacmp_x_load);

assign select_ln1057_fu_165_p3 = ((icmp_ln1057_4_fu_159_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_y_load);

assign tmp_11_cast_fu_189_p3 = {{trunc_ln391_fu_185_p1}, {6'd0}};

assign trunc_ln391_fu_185_p1 = select_ln1057_fu_165_p3[5:0];

assign zext_ln391_fu_224_p1 = add_ln391_reg_271;

endmodule //fwd_fft_ifmap_cons_y
