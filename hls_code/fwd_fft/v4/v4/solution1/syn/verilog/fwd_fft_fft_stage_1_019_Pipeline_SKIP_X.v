// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fwd_fft_fft_stage_1_019_Pipeline_SKIP_X (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        trunc_ln18,
        IN_r_address0,
        IN_r_ce0,
        IN_r_q0,
        IN_r_address1,
        IN_r_ce1,
        IN_r_q1,
        OUT_r_address0,
        OUT_r_ce0,
        OUT_r_we0,
        OUT_r_d0,
        OUT_r_address1,
        OUT_r_ce1,
        OUT_r_we1,
        OUT_r_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] trunc_ln18;
output  [5:0] IN_r_address0;
output   IN_r_ce0;
input  [31:0] IN_r_q0;
output  [5:0] IN_r_address1;
output   IN_r_ce1;
input  [31:0] IN_r_q1;
output  [5:0] OUT_r_address0;
output   OUT_r_ce0;
output   OUT_r_we0;
output  [31:0] OUT_r_d0;
output  [5:0] OUT_r_address1;
output   OUT_r_ce1;
output   OUT_r_we1;
output  [31:0] OUT_r_d1;

reg ap_idle;
reg IN_r_ce0;
reg IN_r_ce1;
reg OUT_r_ce0;
reg OUT_r_we0;
reg OUT_r_ce1;
reg OUT_r_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1057_fu_212_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [7:0] w_M_real39_address0;
reg    w_M_real39_ce0;
wire   [15:0] w_M_real39_q0;
wire   [7:0] w_M_imag28_address0;
reg    w_M_imag28_ce0;
wire   [15:0] w_M_imag28_q0;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] trunc_ln22_fu_237_p1;
reg   [7:0] trunc_ln22_reg_445;
wire   [5:0] add_ln23_fu_241_p2;
reg   [5:0] add_ln23_reg_450;
reg   [5:0] add_ln23_reg_450_pp0_iter2_reg;
reg   [5:0] add_ln23_reg_450_pp0_iter3_reg;
reg   [5:0] add_ln23_reg_450_pp0_iter4_reg;
reg   [5:0] add_ln23_reg_450_pp0_iter5_reg;
reg   [5:0] add_ln23_reg_450_pp0_iter6_reg;
reg   [5:0] add_ln23_reg_450_pp0_iter7_reg;
reg   [5:0] add_ln23_reg_450_pp0_iter8_reg;
reg   [5:0] add_ln23_reg_450_pp0_iter9_reg;
reg   [5:0] add_ln23_reg_450_pp0_iter10_reg;
wire   [63:0] zext_ln24_fu_330_p1;
reg   [63:0] zext_ln24_reg_466;
reg   [63:0] zext_ln24_reg_466_pp0_iter3_reg;
reg   [63:0] zext_ln24_reg_466_pp0_iter4_reg;
reg   [63:0] zext_ln24_reg_466_pp0_iter5_reg;
reg   [63:0] zext_ln24_reg_466_pp0_iter6_reg;
reg   [63:0] zext_ln24_reg_466_pp0_iter7_reg;
reg   [63:0] zext_ln24_reg_466_pp0_iter8_reg;
reg   [63:0] zext_ln24_reg_466_pp0_iter9_reg;
reg   [63:0] zext_ln24_reg_466_pp0_iter10_reg;
reg   [63:0] zext_ln24_reg_466_pp0_iter11_reg;
reg   [63:0] zext_ln24_reg_466_pp0_iter12_reg;
reg   [63:0] zext_ln24_reg_466_pp0_iter13_reg;
reg   [63:0] zext_ln24_reg_466_pp0_iter14_reg;
reg   [63:0] zext_ln24_reg_466_pp0_iter15_reg;
reg   [63:0] zext_ln24_reg_466_pp0_iter16_reg;
reg   [63:0] zext_ln24_reg_466_pp0_iter17_reg;
reg   [15:0] w1_M_real_reg_476;
reg   [15:0] w1_M_imag_reg_482;
wire   [15:0] p_r_M_real_fu_349_p1;
reg   [15:0] p_r_M_real_reg_488;
wire   [15:0] p_r_M_imag_fu_353_p1;
reg   [15:0] p_r_M_imag_reg_494;
wire   [15:0] grp_fu_178_p2;
reg   [15:0] mul_i_i_reg_500;
wire   [15:0] grp_fu_182_p2;
reg   [15:0] mul3_i_i_reg_505;
wire   [15:0] grp_fu_186_p2;
reg   [15:0] mul6_i_i_reg_510;
wire   [15:0] grp_fu_190_p2;
reg   [15:0] mul9_i_i_reg_515;
wire   [63:0] zext_ln23_fu_357_p1;
reg   [63:0] zext_ln23_reg_520;
reg   [63:0] zext_ln23_reg_520_pp0_iter12_reg;
reg   [63:0] zext_ln23_reg_520_pp0_iter13_reg;
reg   [63:0] zext_ln23_reg_520_pp0_iter14_reg;
reg   [63:0] zext_ln23_reg_520_pp0_iter15_reg;
reg   [63:0] zext_ln23_reg_520_pp0_iter16_reg;
reg   [63:0] zext_ln23_reg_520_pp0_iter17_reg;
wire   [15:0] trunc_ln23_fu_361_p1;
reg   [15:0] trunc_ln23_reg_530;
reg   [15:0] trunc_ln23_1_reg_535;
wire   [15:0] grp_fu_166_p2;
reg   [15:0] p_r_reg_540;
wire   [15:0] grp_fu_154_p2;
reg   [15:0] p_r_M_imag_31_reg_546;
wire   [15:0] t1_M_real_fu_375_p1;
wire   [15:0] t1_M_imag_fu_380_p1;
wire   [15:0] grp_fu_158_p2;
reg   [15:0] p_r_M_real_3_reg_564;
wire   [15:0] grp_fu_162_p2;
reg   [15:0] p_r_M_imag_3_reg_569;
wire   [15:0] grp_fu_170_p2;
reg   [15:0] p_r_M_real_4_reg_574;
wire   [15:0] grp_fu_174_p2;
reg   [15:0] p_r_M_imag_4_reg_579;
wire   [63:0] zext_ln22_fu_319_p1;
wire    ap_block_pp0_stage0;
reg   [6:0] k1_fu_60;
wire   [6:0] k1_20_fu_217_p2;
wire    ap_loop_init;
reg   [31:0] j1_fu_64;
wire   [31:0] j1_26_fu_283_p3;
reg   [31:0] m1_fu_68;
wire   [31:0] m1_20_fu_291_p3;
wire   [5:0] trunc_ln1057_10_fu_233_p1;
wire   [5:0] trunc_ln1057_fu_229_p1;
wire   [0:0] icmp_ln31_fu_253_p2;
wire   [31:0] add_ln34_fu_259_p2;
wire   [0:0] icmp_ln27_fu_247_p2;
wire   [0:0] or_ln27_fu_277_p2;
wire   [31:0] zext_ln27_fu_273_p1;
wire   [31:0] m1_19_fu_265_p3;
wire   [7:0] add_ln22_fu_314_p2;
wire   [5:0] add_ln24_fu_325_p2;
wire   [15:0] trunc_ln388_fu_335_p1;
wire   [15:0] trunc_ln388_1_fu_339_p4;
wire   [15:0] bitcast_ln25_1_fu_388_p1;
wire   [15:0] bitcast_ln25_fu_385_p1;
wire   [15:0] bitcast_ln26_1_fu_403_p1;
wire   [15:0] bitcast_ln26_fu_400_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fwd_fft_fft_stage_0_018_w_M_real40 #(
    .DataWidth( 16 ),
    .AddressRange( 192 ),
    .AddressWidth( 8 ))
w_M_real39_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_M_real39_address0),
    .ce0(w_M_real39_ce0),
    .q0(w_M_real39_q0)
);

fwd_fft_fft_stage_0_018_w_M_imag29 #(
    .DataWidth( 16 ),
    .AddressRange( 192 ),
    .AddressWidth( 8 ))
w_M_imag28_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_M_imag28_address0),
    .ce0(w_M_imag28_ce0),
    .q0(w_M_imag28_q0)
);

fwd_fft_hadd_16ns_16ns_16_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hadd_16ns_16ns_16_5_full_dsp_1_U103(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul6_i_i_reg_510),
    .din1(mul9_i_i_reg_515),
    .ce(1'b1),
    .dout(grp_fu_154_p2)
);

fwd_fft_hadd_16ns_16ns_16_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hadd_16ns_16ns_16_5_full_dsp_1_U104(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(t1_M_real_fu_375_p1),
    .din1(p_r_reg_540),
    .ce(1'b1),
    .dout(grp_fu_158_p2)
);

fwd_fft_hadd_16ns_16ns_16_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hadd_16ns_16ns_16_5_full_dsp_1_U105(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(t1_M_imag_fu_380_p1),
    .din1(p_r_M_imag_31_reg_546),
    .ce(1'b1),
    .dout(grp_fu_162_p2)
);

fwd_fft_hsub_16ns_16ns_16_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hsub_16ns_16ns_16_5_full_dsp_1_U106(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_i_i_reg_500),
    .din1(mul3_i_i_reg_505),
    .ce(1'b1),
    .dout(grp_fu_166_p2)
);

fwd_fft_hsub_16ns_16ns_16_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hsub_16ns_16ns_16_5_full_dsp_1_U107(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(t1_M_real_fu_375_p1),
    .din1(p_r_reg_540),
    .ce(1'b1),
    .dout(grp_fu_170_p2)
);

fwd_fft_hsub_16ns_16ns_16_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hsub_16ns_16ns_16_5_full_dsp_1_U108(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(t1_M_imag_fu_380_p1),
    .din1(p_r_M_imag_31_reg_546),
    .ce(1'b1),
    .dout(grp_fu_174_p2)
);

fwd_fft_hmul_16ns_16ns_16_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hmul_16ns_16ns_16_4_max_dsp_1_U109(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_real_reg_488),
    .din1(w1_M_real_reg_476),
    .ce(1'b1),
    .dout(grp_fu_178_p2)
);

fwd_fft_hmul_16ns_16ns_16_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hmul_16ns_16ns_16_4_max_dsp_1_U110(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_imag_reg_494),
    .din1(w1_M_imag_reg_482),
    .ce(1'b1),
    .dout(grp_fu_182_p2)
);

fwd_fft_hmul_16ns_16ns_16_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hmul_16ns_16ns_16_4_max_dsp_1_U111(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_real_reg_488),
    .din1(w1_M_imag_reg_482),
    .ce(1'b1),
    .dout(grp_fu_186_p2)
);

fwd_fft_hmul_16ns_16ns_16_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hmul_16ns_16ns_16_4_max_dsp_1_U112(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_imag_reg_494),
    .din1(w1_M_real_reg_476),
    .ce(1'b1),
    .dout(grp_fu_190_p2)
);

fwd_fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            j1_fu_64 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1057_fu_212_p2 == 1'd0))) begin
            j1_fu_64 <= j1_26_fu_283_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            k1_fu_60 <= 7'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1057_fu_212_p2 == 1'd0))) begin
            k1_fu_60 <= k1_20_fu_217_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            m1_fu_68 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1057_fu_212_p2 == 1'd0))) begin
            m1_fu_68 <= m1_20_fu_291_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1057_fu_212_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln23_reg_450 <= add_ln23_fu_241_p2;
        trunc_ln22_reg_445 <= trunc_ln22_fu_237_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln23_reg_450_pp0_iter10_reg <= add_ln23_reg_450_pp0_iter9_reg;
        add_ln23_reg_450_pp0_iter2_reg <= add_ln23_reg_450;
        add_ln23_reg_450_pp0_iter3_reg <= add_ln23_reg_450_pp0_iter2_reg;
        add_ln23_reg_450_pp0_iter4_reg <= add_ln23_reg_450_pp0_iter3_reg;
        add_ln23_reg_450_pp0_iter5_reg <= add_ln23_reg_450_pp0_iter4_reg;
        add_ln23_reg_450_pp0_iter6_reg <= add_ln23_reg_450_pp0_iter5_reg;
        add_ln23_reg_450_pp0_iter7_reg <= add_ln23_reg_450_pp0_iter6_reg;
        add_ln23_reg_450_pp0_iter8_reg <= add_ln23_reg_450_pp0_iter7_reg;
        add_ln23_reg_450_pp0_iter9_reg <= add_ln23_reg_450_pp0_iter8_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        mul3_i_i_reg_505 <= grp_fu_182_p2;
        mul6_i_i_reg_510 <= grp_fu_186_p2;
        mul9_i_i_reg_515 <= grp_fu_190_p2;
        mul_i_i_reg_500 <= grp_fu_178_p2;
        p_r_M_imag_31_reg_546 <= grp_fu_154_p2;
        p_r_M_imag_3_reg_569 <= grp_fu_162_p2;
        p_r_M_imag_4_reg_579 <= grp_fu_174_p2;
        p_r_M_imag_reg_494 <= p_r_M_imag_fu_353_p1;
        p_r_M_real_3_reg_564 <= grp_fu_158_p2;
        p_r_M_real_4_reg_574 <= grp_fu_170_p2;
        p_r_M_real_reg_488 <= p_r_M_real_fu_349_p1;
        p_r_reg_540 <= grp_fu_166_p2;
        trunc_ln23_1_reg_535 <= {{IN_r_q0[31:16]}};
        trunc_ln23_reg_530 <= trunc_ln23_fu_361_p1;
        w1_M_imag_reg_482 <= w_M_imag28_q0;
        w1_M_real_reg_476 <= w_M_real39_q0;
        zext_ln23_reg_520[5 : 0] <= zext_ln23_fu_357_p1[5 : 0];
        zext_ln23_reg_520_pp0_iter12_reg[5 : 0] <= zext_ln23_reg_520[5 : 0];
        zext_ln23_reg_520_pp0_iter13_reg[5 : 0] <= zext_ln23_reg_520_pp0_iter12_reg[5 : 0];
        zext_ln23_reg_520_pp0_iter14_reg[5 : 0] <= zext_ln23_reg_520_pp0_iter13_reg[5 : 0];
        zext_ln23_reg_520_pp0_iter15_reg[5 : 0] <= zext_ln23_reg_520_pp0_iter14_reg[5 : 0];
        zext_ln23_reg_520_pp0_iter16_reg[5 : 0] <= zext_ln23_reg_520_pp0_iter15_reg[5 : 0];
        zext_ln23_reg_520_pp0_iter17_reg[5 : 0] <= zext_ln23_reg_520_pp0_iter16_reg[5 : 0];
        zext_ln24_reg_466[5 : 0] <= zext_ln24_fu_330_p1[5 : 0];
        zext_ln24_reg_466_pp0_iter10_reg[5 : 0] <= zext_ln24_reg_466_pp0_iter9_reg[5 : 0];
        zext_ln24_reg_466_pp0_iter11_reg[5 : 0] <= zext_ln24_reg_466_pp0_iter10_reg[5 : 0];
        zext_ln24_reg_466_pp0_iter12_reg[5 : 0] <= zext_ln24_reg_466_pp0_iter11_reg[5 : 0];
        zext_ln24_reg_466_pp0_iter13_reg[5 : 0] <= zext_ln24_reg_466_pp0_iter12_reg[5 : 0];
        zext_ln24_reg_466_pp0_iter14_reg[5 : 0] <= zext_ln24_reg_466_pp0_iter13_reg[5 : 0];
        zext_ln24_reg_466_pp0_iter15_reg[5 : 0] <= zext_ln24_reg_466_pp0_iter14_reg[5 : 0];
        zext_ln24_reg_466_pp0_iter16_reg[5 : 0] <= zext_ln24_reg_466_pp0_iter15_reg[5 : 0];
        zext_ln24_reg_466_pp0_iter17_reg[5 : 0] <= zext_ln24_reg_466_pp0_iter16_reg[5 : 0];
        zext_ln24_reg_466_pp0_iter3_reg[5 : 0] <= zext_ln24_reg_466[5 : 0];
        zext_ln24_reg_466_pp0_iter4_reg[5 : 0] <= zext_ln24_reg_466_pp0_iter3_reg[5 : 0];
        zext_ln24_reg_466_pp0_iter5_reg[5 : 0] <= zext_ln24_reg_466_pp0_iter4_reg[5 : 0];
        zext_ln24_reg_466_pp0_iter6_reg[5 : 0] <= zext_ln24_reg_466_pp0_iter5_reg[5 : 0];
        zext_ln24_reg_466_pp0_iter7_reg[5 : 0] <= zext_ln24_reg_466_pp0_iter6_reg[5 : 0];
        zext_ln24_reg_466_pp0_iter8_reg[5 : 0] <= zext_ln24_reg_466_pp0_iter7_reg[5 : 0];
        zext_ln24_reg_466_pp0_iter9_reg[5 : 0] <= zext_ln24_reg_466_pp0_iter8_reg[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        IN_r_ce0 = 1'b1;
    end else begin
        IN_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        IN_r_ce1 = 1'b1;
    end else begin
        IN_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_r_ce0 = 1'b1;
    end else begin
        OUT_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_r_ce1 = 1'b1;
    end else begin
        OUT_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_r_we0 = 1'b1;
    end else begin
        OUT_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_r_we1 = 1'b1;
    end else begin
        OUT_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1057_fu_212_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w_M_imag28_ce0 = 1'b1;
    end else begin
        w_M_imag28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w_M_real39_ce0 = 1'b1;
    end else begin
        w_M_real39_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IN_r_address0 = zext_ln23_fu_357_p1;

assign IN_r_address1 = zext_ln24_fu_330_p1;

assign OUT_r_address0 = zext_ln24_reg_466_pp0_iter17_reg;

assign OUT_r_address1 = zext_ln23_reg_520_pp0_iter17_reg;

assign OUT_r_d0 = {{bitcast_ln26_1_fu_403_p1}, {bitcast_ln26_fu_400_p1}};

assign OUT_r_d1 = {{bitcast_ln25_1_fu_388_p1}, {bitcast_ln25_fu_385_p1}};

assign add_ln22_fu_314_p2 = (trunc_ln22_reg_445 + 8'd32);

assign add_ln23_fu_241_p2 = (trunc_ln1057_10_fu_233_p1 + trunc_ln1057_fu_229_p1);

assign add_ln24_fu_325_p2 = (add_ln23_reg_450 + 6'd2);

assign add_ln34_fu_259_p2 = (m1_fu_68 + 32'd4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign bitcast_ln25_1_fu_388_p1 = p_r_M_imag_3_reg_569;

assign bitcast_ln25_fu_385_p1 = p_r_M_real_3_reg_564;

assign bitcast_ln26_1_fu_403_p1 = p_r_M_imag_4_reg_579;

assign bitcast_ln26_fu_400_p1 = p_r_M_real_4_reg_574;

assign icmp_ln1057_fu_212_p2 = ((k1_fu_60 == trunc_ln18) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_247_p2 = ((j1_fu_64 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_253_p2 = ((j1_fu_64 == 32'd1) ? 1'b1 : 1'b0);

assign j1_26_fu_283_p3 = ((or_ln27_fu_277_p2[0:0] == 1'b1) ? zext_ln27_fu_273_p1 : j1_fu_64);

assign k1_20_fu_217_p2 = (k1_fu_60 + 7'd1);

assign m1_19_fu_265_p3 = ((icmp_ln31_fu_253_p2[0:0] == 1'b1) ? add_ln34_fu_259_p2 : m1_fu_68);

assign m1_20_fu_291_p3 = ((icmp_ln27_fu_247_p2[0:0] == 1'b1) ? m1_fu_68 : m1_19_fu_265_p3);

assign or_ln27_fu_277_p2 = (icmp_ln31_fu_253_p2 | icmp_ln27_fu_247_p2);

assign p_r_M_imag_fu_353_p1 = trunc_ln388_1_fu_339_p4;

assign p_r_M_real_fu_349_p1 = trunc_ln388_fu_335_p1;

assign t1_M_imag_fu_380_p1 = trunc_ln23_1_reg_535;

assign t1_M_real_fu_375_p1 = trunc_ln23_reg_530;

assign trunc_ln1057_10_fu_233_p1 = j1_fu_64[5:0];

assign trunc_ln1057_fu_229_p1 = m1_fu_68[5:0];

assign trunc_ln22_fu_237_p1 = j1_fu_64[7:0];

assign trunc_ln23_fu_361_p1 = IN_r_q0[15:0];

assign trunc_ln388_1_fu_339_p4 = {{IN_r_q1[31:16]}};

assign trunc_ln388_fu_335_p1 = IN_r_q1[15:0];

assign w_M_imag28_address0 = zext_ln22_fu_319_p1;

assign w_M_real39_address0 = zext_ln22_fu_319_p1;

assign zext_ln22_fu_319_p1 = add_ln22_fu_314_p2;

assign zext_ln23_fu_357_p1 = add_ln23_reg_450_pp0_iter10_reg;

assign zext_ln24_fu_330_p1 = add_ln24_fu_325_p2;

assign zext_ln27_fu_273_p1 = icmp_ln27_fu_247_p2;

always @ (posedge ap_clk) begin
    zext_ln24_reg_466[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_466_pp0_iter3_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_466_pp0_iter4_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_466_pp0_iter5_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_466_pp0_iter6_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_466_pp0_iter7_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_466_pp0_iter8_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_466_pp0_iter9_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_466_pp0_iter10_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_466_pp0_iter11_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_466_pp0_iter12_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_466_pp0_iter13_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_466_pp0_iter14_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_466_pp0_iter15_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_466_pp0_iter16_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_466_pp0_iter17_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln23_reg_520[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln23_reg_520_pp0_iter12_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln23_reg_520_pp0_iter13_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln23_reg_520_pp0_iter14_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln23_reg_520_pp0_iter15_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln23_reg_520_pp0_iter16_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln23_reg_520_pp0_iter17_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //fwd_fft_fft_stage_1_019_Pipeline_SKIP_X
