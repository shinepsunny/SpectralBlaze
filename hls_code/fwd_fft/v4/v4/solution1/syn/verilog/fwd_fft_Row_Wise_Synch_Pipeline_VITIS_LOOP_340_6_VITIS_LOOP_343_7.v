// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fwd_fft_Row_Wise_Synch_Pipeline_VITIS_LOOP_340_6_VITIS_LOOP_343_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        c_fft_row_op_st_dout,
        c_fft_row_op_st_empty_n,
        c_fft_row_op_st_read,
        c_row_op_st_din,
        c_row_op_st_full_n,
        c_row_op_st_write,
        Row_Buffer_din,
        Row_Buffer_full_n,
        Row_Buffer_write,
        i_op_assign_9,
        bound5,
        empty,
        ctrl1_reg_load_cast1,
        select_ln317_4
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] c_fft_row_op_st_dout;
input   c_fft_row_op_st_empty_n;
output   c_fft_row_op_st_read;
output  [31:0] c_row_op_st_din;
input   c_row_op_st_full_n;
output   c_row_op_st_write;
output  [31:0] Row_Buffer_din;
input   Row_Buffer_full_n;
output   Row_Buffer_write;
input  [7:0] i_op_assign_9;
input  [39:0] bound5;
input  [7:0] empty;
input  [7:0] ctrl1_reg_load_cast1;
input  [0:0] select_ln317_4;

reg ap_idle;
reg c_fft_row_op_st_read;
reg c_row_op_st_write;
reg Row_Buffer_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] or_ln317_reg_287;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1057_fu_150_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    c_fft_row_op_st_blk_n;
wire    ap_block_pp0_stage0;
reg    c_row_op_st_blk_n;
reg    Row_Buffer_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] p_cast_fu_124_p1;
reg   [31:0] p_cast_reg_278;
wire   [0:0] or_ln317_fu_196_p2;
reg   [7:0] x_fu_60;
wire   [7:0] x_13_fu_218_p3;
wire    ap_loop_init;
reg   [31:0] y_1_fu_64;
wire   [31:0] select_ln1057_fu_201_p3;
wire   [31:0] i_op_assign_9_cast_fu_128_p1;
reg   [39:0] indvar_flatten8_fu_68;
wire   [39:0] add_ln1057_fu_155_p2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] y_fu_167_p2;
wire   [0:0] icmp_ln1057_5_fu_183_p2;
wire   [0:0] cmp_i_i7_not_mid1_fu_173_p2;
wire   [0:0] cmp_i_i7_not37_fu_178_p2;
wire   [0:0] select_ln317_fu_188_p3;
wire   [7:0] add_ln343_fu_212_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fwd_fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten8_fu_68 <= 40'd0;
        end else if (((icmp_ln1057_fu_150_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten8_fu_68 <= add_ln1057_fu_155_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            x_fu_60 <= 8'd0;
        end else if (((icmp_ln1057_fu_150_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            x_fu_60 <= x_13_fu_218_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            y_1_fu_64 <= i_op_assign_9_cast_fu_128_p1;
        end else if (((icmp_ln1057_fu_150_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            y_1_fu_64 <= select_ln1057_fu_201_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_fu_150_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln317_reg_287 <= or_ln317_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_cast_reg_278[7 : 0] <= p_cast_fu_124_p1[7 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (or_ln317_reg_287 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Row_Buffer_blk_n = Row_Buffer_full_n;
    end else begin
        Row_Buffer_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln317_reg_287 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Row_Buffer_write = 1'b1;
    end else begin
        Row_Buffer_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_150_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        c_fft_row_op_st_blk_n = c_fft_row_op_st_empty_n;
    end else begin
        c_fft_row_op_st_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        c_fft_row_op_st_read = 1'b1;
    end else begin
        c_fft_row_op_st_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        c_row_op_st_blk_n = c_row_op_st_full_n;
    end else begin
        c_row_op_st_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        c_row_op_st_write = 1'b1;
    end else begin
        c_row_op_st_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Row_Buffer_din = c_fft_row_op_st_dout;

assign add_ln1057_fu_155_p2 = (indvar_flatten8_fu_68 + 40'd1);

assign add_ln343_fu_212_p2 = (x_fu_60 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & ((c_row_op_st_full_n == 1'b0) | (c_fft_row_op_st_empty_n == 1'b0) | ((or_ln317_reg_287 == 1'd0) & (1'b0 == Row_Buffer_full_n))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & ((c_row_op_st_full_n == 1'b0) | (c_fft_row_op_st_empty_n == 1'b0) | ((or_ln317_reg_287 == 1'd0) & (1'b0 == Row_Buffer_full_n))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & ((c_row_op_st_full_n == 1'b0) | (c_fft_row_op_st_empty_n == 1'b0) | ((or_ln317_reg_287 == 1'd0) & (1'b0 == Row_Buffer_full_n))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((c_row_op_st_full_n == 1'b0) | (c_fft_row_op_st_empty_n == 1'b0) | ((or_ln317_reg_287 == 1'd0) & (1'b0 == Row_Buffer_full_n)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign c_row_op_st_din = c_fft_row_op_st_dout;

assign cmp_i_i7_not37_fu_178_p2 = (($signed(y_1_fu_64) < $signed(p_cast_reg_278)) ? 1'b1 : 1'b0);

assign cmp_i_i7_not_mid1_fu_173_p2 = (($signed(y_fu_167_p2) < $signed(p_cast_reg_278)) ? 1'b1 : 1'b0);

assign i_op_assign_9_cast_fu_128_p1 = i_op_assign_9;

assign icmp_ln1057_5_fu_183_p2 = ((x_fu_60 == ctrl1_reg_load_cast1) ? 1'b1 : 1'b0);

assign icmp_ln1057_fu_150_p2 = ((indvar_flatten8_fu_68 == bound5) ? 1'b1 : 1'b0);

assign or_ln317_fu_196_p2 = (select_ln317_fu_188_p3 | select_ln317_4);

assign p_cast_fu_124_p1 = empty;

assign select_ln1057_fu_201_p3 = ((icmp_ln1057_5_fu_183_p2[0:0] == 1'b1) ? y_fu_167_p2 : y_1_fu_64);

assign select_ln317_fu_188_p3 = ((icmp_ln1057_5_fu_183_p2[0:0] == 1'b1) ? cmp_i_i7_not_mid1_fu_173_p2 : cmp_i_i7_not37_fu_178_p2);

assign x_13_fu_218_p3 = ((icmp_ln1057_5_fu_183_p2[0:0] == 1'b1) ? 8'd1 : add_ln343_fu_212_p2);

assign y_fu_167_p2 = (y_1_fu_64 + 32'd1);

always @ (posedge ap_clk) begin
    p_cast_reg_278[31:8] <= 24'b000000000000000000000000;
end

endmodule //fwd_fft_Row_Wise_Synch_Pipeline_VITIS_LOOP_340_6_VITIS_LOOP_343_7
