-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity IFFT_AP_pool is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    I_0_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    I_0_0_ce0 : OUT STD_LOGIC;
    I_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    I_0_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    I_0_0_ce1 : OUT STD_LOGIC;
    I_0_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    I_0_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    I_0_1_ce0 : OUT STD_LOGIC;
    I_0_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    I_0_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    I_0_1_ce1 : OUT STD_LOGIC;
    I_0_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    I_1_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    I_1_0_ce0 : OUT STD_LOGIC;
    I_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    I_1_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    I_1_0_ce1 : OUT STD_LOGIC;
    I_1_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    I_1_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    I_1_1_ce0 : OUT STD_LOGIC;
    I_1_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    I_1_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    I_1_1_ce1 : OUT STD_LOGIC;
    I_1_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    O_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    O_ce0 : OUT STD_LOGIC;
    O_we0 : OUT STD_LOGIC;
    O_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    actp_regp_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    actp_regp_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    actp_regp_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    actp_regp_empty_n : IN STD_LOGIC;
    actp_regp_read : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of IFFT_AP_pool is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal actp_regp_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal y_3_fu_143_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_3_reg_374 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_157_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_380 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_133_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_i_reg_393 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_136_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv2_i_reg_398 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal actp_regp_read_reg_404 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_139_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_reg_409 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln175_fu_191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_reg_414 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln112_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln112_reg_419 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln175_1_fu_246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln175_1_reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_load_reg_432 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln1027_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_69_fu_268_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_69_reg_437 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_283_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_reg_442 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_308_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_reg_447 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_71_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_71_reg_452 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_start : STD_LOGIC;
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_done : STD_LOGIC;
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_idle : STD_LOGIC;
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_ready : STD_LOGIC;
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_ce0 : STD_LOGIC;
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_we0 : STD_LOGIC;
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_ce0 : STD_LOGIC;
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_ce1 : STD_LOGIC;
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_ce0 : STD_LOGIC;
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_ce1 : STD_LOGIC;
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_ce0 : STD_LOGIC;
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_ce1 : STD_LOGIC;
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_ce0 : STD_LOGIC;
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_ce1 : STD_LOGIC;
    signal grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal x1_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln175_2_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal y_fu_94 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln175_3_fu_329_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_fu_153_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_133_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal empty_68_fu_181_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1788_fu_178_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln175_fu_194_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln171_fu_175_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln175_fu_200_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln_fu_206_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln175_fu_216_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln5_fu_224_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tobool_i_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln175_1_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_273_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1027_fu_264_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_70_fu_292_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_298_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_139_ce : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component IFFT_AP_pool_Pipeline_VITIS_LOOP_178_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        zext_ln541 : IN STD_LOGIC_VECTOR (7 downto 0);
        sext_ln178 : IN STD_LOGIC_VECTOR (31 downto 0);
        O_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        O_ce0 : OUT STD_LOGIC;
        O_we0 : OUT STD_LOGIC;
        O_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        zext_ln175 : IN STD_LOGIC_VECTOR (7 downto 0);
        zext_ln151_2 : IN STD_LOGIC_VECTOR (9 downto 0);
        I_0_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_0_0_ce0 : OUT STD_LOGIC;
        I_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        I_0_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_0_0_ce1 : OUT STD_LOGIC;
        I_0_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        zext_ln151_3 : IN STD_LOGIC_VECTOR (9 downto 0);
        I_0_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_0_1_ce0 : OUT STD_LOGIC;
        I_0_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        I_0_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_0_1_ce1 : OUT STD_LOGIC;
        I_0_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        I_1_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_1_0_ce0 : OUT STD_LOGIC;
        I_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        I_1_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_1_0_ce1 : OUT STD_LOGIC;
        I_1_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        I_1_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_1_1_ce0 : OUT STD_LOGIC;
        I_1_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        I_1_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_1_1_ce1 : OUT STD_LOGIC;
        I_1_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_cast : IN STD_LOGIC_VECTOR (0 downto 0);
        or_ln112 : IN STD_LOGIC_VECTOR (0 downto 0);
        empty : IN STD_LOGIC_VECTOR (0 downto 0);
        mul : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component IFFT_AP_uitofp_32ns_32_7_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component IFFT_AP_sptohp_32ns_16_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component IFFT_AP_hmul_16ns_16ns_16_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110 : component IFFT_AP_pool_Pipeline_VITIS_LOOP_178_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_start,
        ap_done => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_done,
        ap_idle => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_idle,
        ap_ready => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_ready,
        zext_ln541 => y_3_reg_374,
        sext_ln178 => x1_load_reg_432,
        O_address0 => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_address0,
        O_ce0 => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_ce0,
        O_we0 => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_we0,
        O_d0 => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_d0,
        zext_ln175 => empty_reg_380,
        zext_ln151_2 => tmp_6_reg_442,
        I_0_0_address0 => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_address0,
        I_0_0_ce0 => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_ce0,
        I_0_0_q0 => I_0_0_q0,
        I_0_0_address1 => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_address1,
        I_0_0_ce1 => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_ce1,
        I_0_0_q1 => I_0_0_q1,
        zext_ln151_3 => tmp_8_reg_447,
        I_0_1_address0 => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_address0,
        I_0_1_ce0 => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_ce0,
        I_0_1_q0 => I_0_1_q0,
        I_0_1_address1 => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_address1,
        I_0_1_ce1 => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_ce1,
        I_0_1_q1 => I_0_1_q1,
        I_1_0_address0 => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_address0,
        I_1_0_ce0 => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_ce0,
        I_1_0_q0 => I_1_0_q0,
        I_1_0_address1 => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_address1,
        I_1_0_ce1 => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_ce1,
        I_1_0_q1 => I_1_0_q1,
        I_1_1_address0 => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_address0,
        I_1_1_ce0 => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_ce0,
        I_1_1_q0 => I_1_1_q0,
        I_1_1_address1 => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_address1,
        I_1_1_ce1 => grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_ce1,
        I_1_1_q1 => I_1_1_q1,
        y_cast => empty_69_reg_437,
        or_ln112 => or_ln112_reg_419,
        empty => empty_71_reg_452,
        mul => mul_reg_409);

    uitofp_32ns_32_7_no_dsp_1_U300 : component IFFT_AP_uitofp_32ns_32_7_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_133_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_133_p1);

    sptohp_32ns_16_2_no_dsp_1_U301 : component IFFT_AP_sptohp_32ns_16_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_i_reg_393,
        ce => ap_const_logic_1,
        dout => grp_fu_136_p1);

    hmul_16ns_16ns_16_4_max_dsp_1_U302 : component IFFT_AP_hmul_16ns_16ns_16_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv2_i_reg_398,
        din1 => conv2_i_reg_398,
        ce => grp_fu_139_ce,
        dout => grp_fu_139_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln1027_fu_255_p2 = ap_const_lv1_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln1027_fu_255_p2 = ap_const_lv1_0))) then 
                    ap_return_0_preg <= p_read;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln1027_fu_255_p2 = ap_const_lv1_0))) then 
                    ap_return_1_preg <= actp_regp_read_reg_404;
                end if; 
            end if;
        end if;
    end process;


    grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln1027_fu_255_p2 = ap_const_lv1_1))) then 
                    grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_ready = ap_const_logic_1)) then 
                    grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    x1_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x1_fu_90 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln1027_fu_255_p2 = ap_const_lv1_1))) then 
                x1_fu_90 <= add_ln175_2_fu_324_p2;
            end if; 
        end if;
    end process;

    y_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_fu_94 <= zext_ln541_fu_153_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln1027_fu_255_p2 = ap_const_lv1_1))) then 
                y_fu_94 <= add_ln175_3_fu_329_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                actp_regp_read_reg_404 <= actp_regp_dout;
                add_ln175_1_reg_424 <= add_ln175_1_fu_246_p2;
                mul_reg_409 <= grp_fu_139_p2;
                or_ln112_reg_419 <= or_ln112_fu_240_p2;
                    zext_ln175_reg_414(7 downto 0) <= zext_ln175_fu_191_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                conv2_i_reg_398 <= grp_fu_136_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                conv_i_reg_393 <= grp_fu_133_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln1027_fu_255_p2 = ap_const_lv1_1))) then
                empty_69_reg_437 <= empty_69_fu_268_p1;
                empty_71_reg_452 <= empty_71_fu_317_p2;
                    tmp_6_reg_442(9 downto 5) <= tmp_6_fu_283_p3(9 downto 5);
                    tmp_8_reg_447(9 downto 5) <= tmp_8_fu_308_p3(9 downto 5);
                x1_load_reg_432 <= x1_fu_90;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_reg_380 <= empty_fu_157_p1;
                y_3_reg_374 <= p_read(23 downto 16);
            end if;
        end if;
    end process;
    zext_ln175_reg_414(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    tmp_6_reg_442(4 downto 0) <= "00000";
    tmp_8_reg_447(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, actp_regp_empty_n, ap_CS_fsm_state14, ap_CS_fsm_state15, icmp_ln1027_fu_255_p2, grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_done, ap_CS_fsm_state16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = actp_regp_empty_n))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln1027_fu_255_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    I_0_0_address0 <= grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_address0;
    I_0_0_address1 <= grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_address1;
    I_0_0_ce0 <= grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_ce0;
    I_0_0_ce1 <= grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_ce1;
    I_0_1_address0 <= grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_address0;
    I_0_1_address1 <= grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_address1;
    I_0_1_ce0 <= grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_ce0;
    I_0_1_ce1 <= grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_ce1;
    I_1_0_address0 <= grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_address0;
    I_1_0_address1 <= grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_address1;
    I_1_0_ce0 <= grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_ce0;
    I_1_0_ce1 <= grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_ce1;
    I_1_1_address0 <= grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_address0;
    I_1_1_address1 <= grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_address1;
    I_1_1_ce0 <= grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_ce0;
    I_1_1_ce1 <= grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_ce1;
    O_address0 <= grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_address0;
    O_ce0 <= grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_ce0;
    O_d0 <= grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_d0;
    O_we0 <= grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_we0;

    actp_regp_blk_n_assign_proc : process(actp_regp_empty_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            actp_regp_blk_n <= actp_regp_empty_n;
        else 
            actp_regp_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    actp_regp_read_assign_proc : process(actp_regp_empty_n, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = actp_regp_empty_n))) then 
            actp_regp_read <= ap_const_logic_1;
        else 
            actp_regp_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln175_1_fu_246_p2 <= std_logic_vector(unsigned(zext_ln175_1_fu_220_p1) + unsigned(ap_const_lv32_1));
    add_ln175_2_fu_324_p2 <= std_logic_vector(unsigned(x1_fu_90) + unsigned(add_ln175_1_reg_424));
    add_ln175_3_fu_329_p2 <= std_logic_vector(unsigned(y_fu_94) + unsigned(ap_const_lv64_2));
    add_ln175_fu_194_p2 <= std_logic_vector(unsigned(zext_ln1788_fu_178_p1) + unsigned(ap_const_lv9_1FF));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(actp_regp_empty_n)
    begin
        if ((ap_const_logic_0 = actp_regp_empty_n)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state16_blk_assign_proc : process(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_done)
    begin
        if ((grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state15, icmp_ln1027_fu_255_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln1027_fu_255_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15, icmp_ln1027_fu_255_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln1027_fu_255_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(p_read, ap_CS_fsm_state15, icmp_ln1027_fu_255_p2, ap_return_0_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln1027_fu_255_p2 = ap_const_lv1_0))) then 
            ap_return_0 <= p_read;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(actp_regp_read_reg_404, ap_CS_fsm_state15, icmp_ln1027_fu_255_p2, ap_return_1_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln1027_fu_255_p2 = ap_const_lv1_0))) then 
            ap_return_1 <= actp_regp_read_reg_404;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    empty_68_fu_181_p1 <= actp_regp_dout(8 - 1 downto 0);
    empty_69_fu_268_p1 <= y_fu_94(1 - 1 downto 0);
    empty_70_fu_292_p2 <= std_logic_vector(unsigned(trunc_ln1027_fu_264_p1) + unsigned(ap_const_lv6_1));
    empty_71_fu_317_p2 <= (empty_69_fu_268_p1 xor ap_const_lv1_1);
    empty_fu_157_p1 <= p_read(8 - 1 downto 0);
    grp_fu_133_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_380),32));

    grp_fu_139_ce_assign_proc : process(actp_regp_empty_n, ap_CS_fsm_state14, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = actp_regp_empty_n)))) then 
            grp_fu_139_ce <= ap_const_logic_1;
        else 
            grp_fu_139_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_start <= grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_start_reg;
    icmp_ln1027_fu_255_p2 <= "1" when (unsigned(y_fu_94) < unsigned(zext_ln175_reg_414)) else "0";
    icmp_ln112_fu_234_p2 <= "0" when (trunc_ln5_fu_224_p4 = ap_const_lv8_0) else "1";
    or_ln112_fu_240_p2 <= (tobool_i_fu_185_p2 or icmp_ln112_fu_234_p2);
        sext_ln175_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_206_p4),31));

    sub_ln175_fu_200_p2 <= std_logic_vector(unsigned(add_ln175_fu_194_p2) - unsigned(zext_ln171_fu_175_p1));
    tmp_5_fu_273_p4 <= y_fu_94(5 downto 1);
    tmp_6_fu_283_p3 <= (tmp_5_fu_273_p4 & ap_const_lv5_0);
    tmp_7_fu_298_p4 <= empty_70_fu_292_p2(5 downto 1);
    tmp_8_fu_308_p3 <= (tmp_7_fu_298_p4 & ap_const_lv5_0);
    tobool_i_fu_185_p2 <= "1" when (empty_68_fu_181_p1 = ap_const_lv8_0) else "0";
    trunc_ln1027_fu_264_p1 <= y_fu_94(6 - 1 downto 0);
    trunc_ln5_fu_224_p4 <= actp_regp_dout(15 downto 8);
    trunc_ln_fu_206_p4 <= sub_ln175_fu_200_p2(8 downto 1);
    y_3_fu_143_p4 <= p_read(23 downto 16);
    zext_ln171_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_3_reg_374),9));
    zext_ln175_1_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln175_fu_216_p1),32));
    zext_ln175_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_380),64));
    zext_ln1788_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_380),9));
    zext_ln541_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_3_fu_143_p4),64));
end behav;
