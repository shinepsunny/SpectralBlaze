-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r : IN STD_LOGIC_VECTOR (63 downto 0);
    ctrl1_regp : IN STD_LOGIC_VECTOR (31 downto 0);
    pn_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    actp_regp : IN STD_LOGIC_VECTOR (31 downto 0);
    out_st_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_st_full_n : IN STD_LOGIC;
    out_st_write : OUT STD_LOGIC;
    actp_regp_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    in_r_ap_vld : IN STD_LOGIC;
    ctrl1_regp_ap_vld : IN STD_LOGIC;
    pn_2_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal input_data2_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_data2_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_data2_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_data2_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_13_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_13_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_13_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_13_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_24_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_24_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_24_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_24_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_35_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_35_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_35_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_35_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_46_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_46_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_46_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_46_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_57_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_57_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_57_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_57_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_6_0_08_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_6_0_08_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_6_0_08_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_6_0_08_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_6_0_19_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_6_0_19_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_6_0_19_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_6_0_19_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_6_1_010_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_6_1_010_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_6_1_010_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_6_1_010_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_6_1_111_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_6_1_111_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_6_1_111_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_6_1_111_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_712_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_712_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_712_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_712_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc20_U0_ap_start : STD_LOGIC;
    signal entry_proc20_U0_ap_done : STD_LOGIC;
    signal entry_proc20_U0_ap_continue : STD_LOGIC;
    signal entry_proc20_U0_ap_idle : STD_LOGIC;
    signal entry_proc20_U0_ap_ready : STD_LOGIC;
    signal entry_proc20_U0_actp_regp_c9_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc20_U0_actp_regp_c9_write : STD_LOGIC;
    signal rd_data_U0_ap_start : STD_LOGIC;
    signal rd_data_U0_ap_done : STD_LOGIC;
    signal rd_data_U0_ap_continue : STD_LOGIC;
    signal rd_data_U0_ap_idle : STD_LOGIC;
    signal rd_data_U0_ap_ready : STD_LOGIC;
    signal rd_data_U0_start_out : STD_LOGIC;
    signal rd_data_U0_start_write : STD_LOGIC;
    signal rd_data_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal rd_data_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal rd_data_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal rd_data_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal rd_data_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal rd_data_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal rd_data_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal rd_data_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal rd_data_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal rd_data_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal rd_data_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal rd_data_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal rd_data_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal rd_data_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal rd_data_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal rd_data_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal rd_data_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal rd_data_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal rd_data_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal rd_data_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal rd_data_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal rd_data_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal rd_data_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal rd_data_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal rd_data_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal rd_data_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal rd_data_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal rd_data_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal rd_data_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal rd_data_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal rd_data_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal rd_data_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal rd_data_U0_in_st_din : STD_LOGIC_VECTOR (127 downto 0);
    signal rd_data_U0_in_st_write : STD_LOGIC;
    signal rd_data_U0_ctrl1_regp_c8_din : STD_LOGIC_VECTOR (31 downto 0);
    signal rd_data_U0_ctrl1_regp_c8_write : STD_LOGIC;
    signal collect_input_U0_ap_start : STD_LOGIC;
    signal collect_input_U0_ap_done : STD_LOGIC;
    signal collect_input_U0_ap_continue : STD_LOGIC;
    signal collect_input_U0_ap_idle : STD_LOGIC;
    signal collect_input_U0_ap_ready : STD_LOGIC;
    signal collect_input_U0_in_st_read : STD_LOGIC;
    signal collect_input_U0_I_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal collect_input_U0_I_ce0 : STD_LOGIC;
    signal collect_input_U0_I_we0 : STD_LOGIC;
    signal collect_input_U0_I_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal collect_input_U0_I_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal collect_input_U0_I_ce1 : STD_LOGIC;
    signal collect_input_U0_I_we1 : STD_LOGIC;
    signal collect_input_U0_I_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal collect_input_U0_ctrl1_regp_read : STD_LOGIC;
    signal collect_input_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_ctrl1_regp_c7_channel8 : STD_LOGIC;
    signal ctrl1_regp_c7_channel8_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_regp_c7_channel8 : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_regp_c7_channel8 : STD_LOGIC;
    signal ap_channel_done_input_data2 : STD_LOGIC;
    signal collect_input_U0_I_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_input_data2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_input_data2 : STD_LOGIC;
    signal fft_stage_U0_ap_start : STD_LOGIC;
    signal fft_stage_U0_ap_done : STD_LOGIC;
    signal fft_stage_U0_ap_continue : STD_LOGIC;
    signal fft_stage_U0_ap_idle : STD_LOGIC;
    signal fft_stage_U0_ap_ready : STD_LOGIC;
    signal fft_stage_U0_I_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal fft_stage_U0_I_ce0 : STD_LOGIC;
    signal fft_stage_U0_I_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal fft_stage_U0_I_ce1 : STD_LOGIC;
    signal fft_stage_U0_X_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal fft_stage_U0_X_ce0 : STD_LOGIC;
    signal fft_stage_U0_X_we0 : STD_LOGIC;
    signal fft_stage_U0_X_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_U0_X_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal fft_stage_U0_X_ce1 : STD_LOGIC;
    signal fft_stage_U0_X_we1 : STD_LOGIC;
    signal fft_stage_U0_X_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_ctrl1_regp_c6_channel7 : STD_LOGIC;
    signal ctrl1_regp_c6_channel7_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_regp_c6_channel7 : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_regp_c6_channel7 : STD_LOGIC;
    signal ap_channel_done_out_data_13 : STD_LOGIC;
    signal fft_stage_U0_X_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_13 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_13 : STD_LOGIC;
    signal fft_stage_1_U0_ap_start : STD_LOGIC;
    signal fft_stage_1_U0_ap_done : STD_LOGIC;
    signal fft_stage_1_U0_ap_continue : STD_LOGIC;
    signal fft_stage_1_U0_ap_idle : STD_LOGIC;
    signal fft_stage_1_U0_ap_ready : STD_LOGIC;
    signal fft_stage_1_U0_I_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal fft_stage_1_U0_I_ce0 : STD_LOGIC;
    signal fft_stage_1_U0_I_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal fft_stage_1_U0_I_ce1 : STD_LOGIC;
    signal fft_stage_1_U0_X_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal fft_stage_1_U0_X_ce0 : STD_LOGIC;
    signal fft_stage_1_U0_X_we0 : STD_LOGIC;
    signal fft_stage_1_U0_X_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_1_U0_X_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal fft_stage_1_U0_X_ce1 : STD_LOGIC;
    signal fft_stage_1_U0_X_we1 : STD_LOGIC;
    signal fft_stage_1_U0_X_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_1_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_ctrl1_regp_c5_channel6 : STD_LOGIC;
    signal ctrl1_regp_c5_channel6_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_regp_c5_channel6 : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_regp_c5_channel6 : STD_LOGIC;
    signal ap_channel_done_out_data_24 : STD_LOGIC;
    signal fft_stage_1_U0_X_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_24 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_24 : STD_LOGIC;
    signal fft_stage_2_U0_ap_start : STD_LOGIC;
    signal fft_stage_2_U0_ap_done : STD_LOGIC;
    signal fft_stage_2_U0_ap_continue : STD_LOGIC;
    signal fft_stage_2_U0_ap_idle : STD_LOGIC;
    signal fft_stage_2_U0_ap_ready : STD_LOGIC;
    signal fft_stage_2_U0_I_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal fft_stage_2_U0_I_ce0 : STD_LOGIC;
    signal fft_stage_2_U0_I_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal fft_stage_2_U0_I_ce1 : STD_LOGIC;
    signal fft_stage_2_U0_X_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal fft_stage_2_U0_X_ce0 : STD_LOGIC;
    signal fft_stage_2_U0_X_we0 : STD_LOGIC;
    signal fft_stage_2_U0_X_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_2_U0_X_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal fft_stage_2_U0_X_ce1 : STD_LOGIC;
    signal fft_stage_2_U0_X_we1 : STD_LOGIC;
    signal fft_stage_2_U0_X_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_2_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_ctrl1_regp_c4_channel5 : STD_LOGIC;
    signal ctrl1_regp_c4_channel5_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_regp_c4_channel5 : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_regp_c4_channel5 : STD_LOGIC;
    signal ap_channel_done_out_data_35 : STD_LOGIC;
    signal fft_stage_2_U0_X_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_35 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_35 : STD_LOGIC;
    signal fft_stage_3_U0_ap_start : STD_LOGIC;
    signal fft_stage_3_U0_ap_done : STD_LOGIC;
    signal fft_stage_3_U0_ap_continue : STD_LOGIC;
    signal fft_stage_3_U0_ap_idle : STD_LOGIC;
    signal fft_stage_3_U0_ap_ready : STD_LOGIC;
    signal fft_stage_3_U0_I_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal fft_stage_3_U0_I_ce0 : STD_LOGIC;
    signal fft_stage_3_U0_I_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal fft_stage_3_U0_I_ce1 : STD_LOGIC;
    signal fft_stage_3_U0_X_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal fft_stage_3_U0_X_ce0 : STD_LOGIC;
    signal fft_stage_3_U0_X_we0 : STD_LOGIC;
    signal fft_stage_3_U0_X_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_3_U0_X_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal fft_stage_3_U0_X_ce1 : STD_LOGIC;
    signal fft_stage_3_U0_X_we1 : STD_LOGIC;
    signal fft_stage_3_U0_X_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_3_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_ctrl1_regp_c3_channel4 : STD_LOGIC;
    signal ctrl1_regp_c3_channel4_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_regp_c3_channel4 : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_regp_c3_channel4 : STD_LOGIC;
    signal ap_channel_done_out_data_46 : STD_LOGIC;
    signal fft_stage_3_U0_X_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_46 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_46 : STD_LOGIC;
    signal fft_stage_4_U0_ap_start : STD_LOGIC;
    signal fft_stage_4_U0_ap_done : STD_LOGIC;
    signal fft_stage_4_U0_ap_continue : STD_LOGIC;
    signal fft_stage_4_U0_ap_idle : STD_LOGIC;
    signal fft_stage_4_U0_ap_ready : STD_LOGIC;
    signal fft_stage_4_U0_I_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal fft_stage_4_U0_I_ce0 : STD_LOGIC;
    signal fft_stage_4_U0_I_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal fft_stage_4_U0_I_ce1 : STD_LOGIC;
    signal fft_stage_4_U0_X_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal fft_stage_4_U0_X_ce0 : STD_LOGIC;
    signal fft_stage_4_U0_X_we0 : STD_LOGIC;
    signal fft_stage_4_U0_X_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_4_U0_X_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal fft_stage_4_U0_X_ce1 : STD_LOGIC;
    signal fft_stage_4_U0_X_we1 : STD_LOGIC;
    signal fft_stage_4_U0_X_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_4_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_ctrl1_regp_c2_channel3 : STD_LOGIC;
    signal ctrl1_regp_c2_channel3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_regp_c2_channel3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_regp_c2_channel3 : STD_LOGIC;
    signal ap_channel_done_out_data_57 : STD_LOGIC;
    signal fft_stage_4_U0_X_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_57 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_57 : STD_LOGIC;
    signal fft_stage_5_U0_ap_start : STD_LOGIC;
    signal fft_stage_5_U0_ap_done : STD_LOGIC;
    signal fft_stage_5_U0_ap_continue : STD_LOGIC;
    signal fft_stage_5_U0_ap_idle : STD_LOGIC;
    signal fft_stage_5_U0_ap_ready : STD_LOGIC;
    signal fft_stage_5_U0_I_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal fft_stage_5_U0_I_ce0 : STD_LOGIC;
    signal fft_stage_5_U0_I_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal fft_stage_5_U0_I_ce1 : STD_LOGIC;
    signal fft_stage_5_U0_X_0_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal fft_stage_5_U0_X_0_0_ce0 : STD_LOGIC;
    signal fft_stage_5_U0_X_0_0_we0 : STD_LOGIC;
    signal fft_stage_5_U0_X_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_5_U0_X_0_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal fft_stage_5_U0_X_0_1_ce0 : STD_LOGIC;
    signal fft_stage_5_U0_X_0_1_we0 : STD_LOGIC;
    signal fft_stage_5_U0_X_0_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_5_U0_X_1_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal fft_stage_5_U0_X_1_0_ce0 : STD_LOGIC;
    signal fft_stage_5_U0_X_1_0_we0 : STD_LOGIC;
    signal fft_stage_5_U0_X_1_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_5_U0_X_1_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal fft_stage_5_U0_X_1_1_ce0 : STD_LOGIC;
    signal fft_stage_5_U0_X_1_1_we0 : STD_LOGIC;
    signal fft_stage_5_U0_X_1_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_5_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_ctrl1_regp_c1_channel2 : STD_LOGIC;
    signal ctrl1_regp_c1_channel2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_regp_c1_channel2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_regp_c1_channel2 : STD_LOGIC;
    signal ap_channel_done_out_data_6_1_111 : STD_LOGIC;
    signal fft_stage_5_U0_X_1_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_6_1_111 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_6_1_111 : STD_LOGIC;
    signal ap_channel_done_out_data_6_1_010 : STD_LOGIC;
    signal fft_stage_5_U0_X_1_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_6_1_010 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_6_1_010 : STD_LOGIC;
    signal ap_channel_done_out_data_6_0_19 : STD_LOGIC;
    signal fft_stage_5_U0_X_0_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_6_0_19 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_6_0_19 : STD_LOGIC;
    signal ap_channel_done_out_data_6_0_08 : STD_LOGIC;
    signal fft_stage_5_U0_X_0_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_6_0_08 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_6_0_08 : STD_LOGIC;
    signal pool_U0_ap_start : STD_LOGIC;
    signal pool_U0_ap_done : STD_LOGIC;
    signal pool_U0_ap_continue : STD_LOGIC;
    signal pool_U0_ap_idle : STD_LOGIC;
    signal pool_U0_ap_ready : STD_LOGIC;
    signal pool_U0_I_0_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_U0_I_0_0_ce0 : STD_LOGIC;
    signal pool_U0_I_0_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_U0_I_0_0_ce1 : STD_LOGIC;
    signal pool_U0_I_0_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_U0_I_0_1_ce0 : STD_LOGIC;
    signal pool_U0_I_0_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_U0_I_0_1_ce1 : STD_LOGIC;
    signal pool_U0_I_1_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_U0_I_1_0_ce0 : STD_LOGIC;
    signal pool_U0_I_1_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_U0_I_1_0_ce1 : STD_LOGIC;
    signal pool_U0_I_1_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_U0_I_1_1_ce0 : STD_LOGIC;
    signal pool_U0_I_1_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_U0_I_1_1_ce1 : STD_LOGIC;
    signal pool_U0_O_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal pool_U0_O_ce0 : STD_LOGIC;
    signal pool_U0_O_we0 : STD_LOGIC;
    signal pool_U0_O_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_U0_actp_regp_read : STD_LOGIC;
    signal pool_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_actp_regp_c_channel : STD_LOGIC;
    signal actp_regp_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_actp_regp_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_actp_regp_c_channel : STD_LOGIC;
    signal ap_channel_done_ctrl1_regp_c_channel : STD_LOGIC;
    signal ctrl1_regp_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_regp_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_regp_c_channel : STD_LOGIC;
    signal ap_channel_done_out_data_712 : STD_LOGIC;
    signal pool_U0_O_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_data_712 : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_data_712 : STD_LOGIC;
    signal push_out_U0_ap_start : STD_LOGIC;
    signal push_out_U0_ap_done : STD_LOGIC;
    signal push_out_U0_ap_continue : STD_LOGIC;
    signal push_out_U0_ap_idle : STD_LOGIC;
    signal push_out_U0_ap_ready : STD_LOGIC;
    signal push_out_U0_O_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal push_out_U0_O_ce0 : STD_LOGIC;
    signal push_out_U0_O_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal push_out_U0_O_ce1 : STD_LOGIC;
    signal push_out_U0_out_st_din : STD_LOGIC_VECTOR (63 downto 0);
    signal push_out_U0_out_st_write : STD_LOGIC;
    signal input_data2_i_full_n : STD_LOGIC;
    signal input_data2_t_empty_n : STD_LOGIC;
    signal out_data_13_i_full_n : STD_LOGIC;
    signal out_data_13_t_empty_n : STD_LOGIC;
    signal out_data_24_i_full_n : STD_LOGIC;
    signal out_data_24_t_empty_n : STD_LOGIC;
    signal out_data_35_i_full_n : STD_LOGIC;
    signal out_data_35_t_empty_n : STD_LOGIC;
    signal out_data_46_i_full_n : STD_LOGIC;
    signal out_data_46_t_empty_n : STD_LOGIC;
    signal out_data_57_i_full_n : STD_LOGIC;
    signal out_data_57_t_empty_n : STD_LOGIC;
    signal out_data_6_0_08_i_full_n : STD_LOGIC;
    signal out_data_6_0_08_t_empty_n : STD_LOGIC;
    signal out_data_6_0_19_i_full_n : STD_LOGIC;
    signal out_data_6_0_19_t_empty_n : STD_LOGIC;
    signal out_data_6_1_010_i_full_n : STD_LOGIC;
    signal out_data_6_1_010_t_empty_n : STD_LOGIC;
    signal out_data_6_1_111_i_full_n : STD_LOGIC;
    signal out_data_6_1_111_t_empty_n : STD_LOGIC;
    signal out_data_712_i_full_n : STD_LOGIC;
    signal out_data_712_t_empty_n : STD_LOGIC;
    signal actp_regp_c9_full_n : STD_LOGIC;
    signal actp_regp_c9_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal actp_regp_c9_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal actp_regp_c9_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal actp_regp_c9_empty_n : STD_LOGIC;
    signal in_st1_full_n : STD_LOGIC;
    signal in_st1_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal in_st1_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal in_st1_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal in_st1_empty_n : STD_LOGIC;
    signal ctrl1_regp_c8_full_n : STD_LOGIC;
    signal ctrl1_regp_c8_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_regp_c8_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal ctrl1_regp_c8_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal ctrl1_regp_c8_empty_n : STD_LOGIC;
    signal ctrl1_regp_c7_channel8_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_regp_c7_channel8_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal ctrl1_regp_c7_channel8_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal ctrl1_regp_c7_channel8_empty_n : STD_LOGIC;
    signal ctrl1_regp_c6_channel7_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_regp_c6_channel7_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal ctrl1_regp_c6_channel7_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal ctrl1_regp_c6_channel7_empty_n : STD_LOGIC;
    signal ctrl1_regp_c5_channel6_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_regp_c5_channel6_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal ctrl1_regp_c5_channel6_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal ctrl1_regp_c5_channel6_empty_n : STD_LOGIC;
    signal ctrl1_regp_c4_channel5_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_regp_c4_channel5_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal ctrl1_regp_c4_channel5_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal ctrl1_regp_c4_channel5_empty_n : STD_LOGIC;
    signal ctrl1_regp_c3_channel4_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_regp_c3_channel4_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal ctrl1_regp_c3_channel4_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal ctrl1_regp_c3_channel4_empty_n : STD_LOGIC;
    signal ctrl1_regp_c2_channel3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_regp_c2_channel3_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal ctrl1_regp_c2_channel3_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal ctrl1_regp_c2_channel3_empty_n : STD_LOGIC;
    signal ctrl1_regp_c1_channel2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_regp_c1_channel2_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal ctrl1_regp_c1_channel2_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal ctrl1_regp_c1_channel2_empty_n : STD_LOGIC;
    signal ctrl1_regp_c_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl1_regp_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal ctrl1_regp_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal ctrl1_regp_c_channel_empty_n : STD_LOGIC;
    signal actp_regp_c_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal actp_regp_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal actp_regp_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal actp_regp_c_channel_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc20_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc20_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_rd_data_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_rd_data_U0_ap_ready : STD_LOGIC;
    signal start_for_collect_input_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_collect_input_U0_full_n : STD_LOGIC;
    signal start_for_collect_input_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_collect_input_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component IFFT_AP_entry_proc20 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        actp_regp : IN STD_LOGIC_VECTOR (31 downto 0);
        actp_regp_c9_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        actp_regp_c9_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        actp_regp_c9_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        actp_regp_c9_full_n : IN STD_LOGIC;
        actp_regp_c9_write : OUT STD_LOGIC );
    end component;


    component IFFT_AP_rd_data IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r : IN STD_LOGIC_VECTOR (63 downto 0);
        in_st_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        in_st_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        in_st_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        in_st_full_n : IN STD_LOGIC;
        in_st_write : OUT STD_LOGIC;
        ctrl1_regp : IN STD_LOGIC_VECTOR (31 downto 0);
        pn : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_regp_c8_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_regp_c8_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        ctrl1_regp_c8_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        ctrl1_regp_c8_full_n : IN STD_LOGIC;
        ctrl1_regp_c8_write : OUT STD_LOGIC );
    end component;


    component IFFT_AP_collect_input IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_st_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        in_st_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        in_st_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        in_st_empty_n : IN STD_LOGIC;
        in_st_read : OUT STD_LOGIC;
        I_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        I_ce0 : OUT STD_LOGIC;
        I_we0 : OUT STD_LOGIC;
        I_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        I_ce1 : OUT STD_LOGIC;
        I_we1 : OUT STD_LOGIC;
        I_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_regp_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl1_regp_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        ctrl1_regp_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        ctrl1_regp_empty_n : IN STD_LOGIC;
        ctrl1_regp_read : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component IFFT_AP_fft_stage IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        I_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        I_ce0 : OUT STD_LOGIC;
        I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        I_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        I_ce1 : OUT STD_LOGIC;
        I_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        X_ce0 : OUT STD_LOGIC;
        X_we0 : OUT STD_LOGIC;
        X_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        X_ce1 : OUT STD_LOGIC;
        X_we1 : OUT STD_LOGIC;
        X_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component IFFT_AP_fft_stage_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        I_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        I_ce0 : OUT STD_LOGIC;
        I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        I_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        I_ce1 : OUT STD_LOGIC;
        I_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        X_ce0 : OUT STD_LOGIC;
        X_we0 : OUT STD_LOGIC;
        X_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        X_ce1 : OUT STD_LOGIC;
        X_we1 : OUT STD_LOGIC;
        X_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component IFFT_AP_fft_stage_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        I_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        I_ce0 : OUT STD_LOGIC;
        I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        I_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        I_ce1 : OUT STD_LOGIC;
        I_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        X_ce0 : OUT STD_LOGIC;
        X_we0 : OUT STD_LOGIC;
        X_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        X_ce1 : OUT STD_LOGIC;
        X_we1 : OUT STD_LOGIC;
        X_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component IFFT_AP_fft_stage_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        I_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        I_ce0 : OUT STD_LOGIC;
        I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        I_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        I_ce1 : OUT STD_LOGIC;
        I_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        X_ce0 : OUT STD_LOGIC;
        X_we0 : OUT STD_LOGIC;
        X_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        X_ce1 : OUT STD_LOGIC;
        X_we1 : OUT STD_LOGIC;
        X_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component IFFT_AP_fft_stage_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        I_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        I_ce0 : OUT STD_LOGIC;
        I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        I_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        I_ce1 : OUT STD_LOGIC;
        I_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        X_ce0 : OUT STD_LOGIC;
        X_we0 : OUT STD_LOGIC;
        X_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        X_ce1 : OUT STD_LOGIC;
        X_we1 : OUT STD_LOGIC;
        X_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component IFFT_AP_fft_stage_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        I_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        I_ce0 : OUT STD_LOGIC;
        I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        I_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        I_ce1 : OUT STD_LOGIC;
        I_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_0_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_0_0_ce0 : OUT STD_LOGIC;
        X_0_0_we0 : OUT STD_LOGIC;
        X_0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_0_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_0_1_ce0 : OUT STD_LOGIC;
        X_0_1_we0 : OUT STD_LOGIC;
        X_0_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_1_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_1_0_ce0 : OUT STD_LOGIC;
        X_1_0_we0 : OUT STD_LOGIC;
        X_1_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_1_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_1_1_ce0 : OUT STD_LOGIC;
        X_1_1_we0 : OUT STD_LOGIC;
        X_1_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component IFFT_AP_pool IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        I_0_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_0_0_ce0 : OUT STD_LOGIC;
        I_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        I_0_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_0_0_ce1 : OUT STD_LOGIC;
        I_0_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        I_0_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_0_1_ce0 : OUT STD_LOGIC;
        I_0_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        I_0_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_0_1_ce1 : OUT STD_LOGIC;
        I_0_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        I_1_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_1_0_ce0 : OUT STD_LOGIC;
        I_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        I_1_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_1_0_ce1 : OUT STD_LOGIC;
        I_1_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        I_1_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_1_1_ce0 : OUT STD_LOGIC;
        I_1_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        I_1_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_1_1_ce1 : OUT STD_LOGIC;
        I_1_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        O_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        O_ce0 : OUT STD_LOGIC;
        O_we0 : OUT STD_LOGIC;
        O_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        actp_regp_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        actp_regp_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        actp_regp_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        actp_regp_empty_n : IN STD_LOGIC;
        actp_regp_read : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component IFFT_AP_push_out IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        O_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        O_ce0 : OUT STD_LOGIC;
        O_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        O_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        O_ce1 : OUT STD_LOGIC;
        O_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_st_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_st_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        out_st_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        out_st_full_n : IN STD_LOGIC;
        out_st_write : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_input_data2_RAM_T2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_we1 : IN STD_LOGIC;
        i_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_we1 : IN STD_LOGIC;
        t_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_out_data_6_0_08_RAM_T2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_out_data_712_RAM_T2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component IFFT_AP_fifo_w32_d10_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component IFFT_AP_fifo_w128_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component IFFT_AP_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component IFFT_AP_start_for_collect_input_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    input_data2_U : component IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_input_data2_RAM_T2P_BRAM_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => collect_input_U0_I_address0,
        i_ce0 => collect_input_U0_I_ce0,
        i_we0 => collect_input_U0_I_we0,
        i_d0 => collect_input_U0_I_d0,
        i_q0 => input_data2_i_q0,
        i_address1 => collect_input_U0_I_address1,
        i_ce1 => collect_input_U0_I_ce1,
        i_we1 => collect_input_U0_I_we1,
        i_d1 => collect_input_U0_I_d1,
        i_q1 => input_data2_i_q1,
        t_address0 => fft_stage_U0_I_address0,
        t_ce0 => fft_stage_U0_I_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => input_data2_t_q0,
        t_address1 => fft_stage_U0_I_address1,
        t_ce1 => fft_stage_U0_I_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => input_data2_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => input_data2_i_full_n,
        i_write => ap_channel_done_input_data2,
        t_empty_n => input_data2_t_empty_n,
        t_read => fft_stage_U0_ap_ready);

    out_data_13_U : component IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_input_data2_RAM_T2P_BRAM_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage_U0_X_address0,
        i_ce0 => fft_stage_U0_X_ce0,
        i_we0 => fft_stage_U0_X_we0,
        i_d0 => fft_stage_U0_X_d0,
        i_q0 => out_data_13_i_q0,
        i_address1 => fft_stage_U0_X_address1,
        i_ce1 => fft_stage_U0_X_ce1,
        i_we1 => fft_stage_U0_X_we1,
        i_d1 => fft_stage_U0_X_d1,
        i_q1 => out_data_13_i_q1,
        t_address0 => fft_stage_1_U0_I_address0,
        t_ce0 => fft_stage_1_U0_I_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_13_t_q0,
        t_address1 => fft_stage_1_U0_I_address1,
        t_ce1 => fft_stage_1_U0_I_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => out_data_13_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_13_i_full_n,
        i_write => ap_channel_done_out_data_13,
        t_empty_n => out_data_13_t_empty_n,
        t_read => fft_stage_1_U0_ap_ready);

    out_data_24_U : component IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_input_data2_RAM_T2P_BRAM_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage_1_U0_X_address0,
        i_ce0 => fft_stage_1_U0_X_ce0,
        i_we0 => fft_stage_1_U0_X_we0,
        i_d0 => fft_stage_1_U0_X_d0,
        i_q0 => out_data_24_i_q0,
        i_address1 => fft_stage_1_U0_X_address1,
        i_ce1 => fft_stage_1_U0_X_ce1,
        i_we1 => fft_stage_1_U0_X_we1,
        i_d1 => fft_stage_1_U0_X_d1,
        i_q1 => out_data_24_i_q1,
        t_address0 => fft_stage_2_U0_I_address0,
        t_ce0 => fft_stage_2_U0_I_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_24_t_q0,
        t_address1 => fft_stage_2_U0_I_address1,
        t_ce1 => fft_stage_2_U0_I_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => out_data_24_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_24_i_full_n,
        i_write => ap_channel_done_out_data_24,
        t_empty_n => out_data_24_t_empty_n,
        t_read => fft_stage_2_U0_ap_ready);

    out_data_35_U : component IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_input_data2_RAM_T2P_BRAM_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage_2_U0_X_address0,
        i_ce0 => fft_stage_2_U0_X_ce0,
        i_we0 => fft_stage_2_U0_X_we0,
        i_d0 => fft_stage_2_U0_X_d0,
        i_q0 => out_data_35_i_q0,
        i_address1 => fft_stage_2_U0_X_address1,
        i_ce1 => fft_stage_2_U0_X_ce1,
        i_we1 => fft_stage_2_U0_X_we1,
        i_d1 => fft_stage_2_U0_X_d1,
        i_q1 => out_data_35_i_q1,
        t_address0 => fft_stage_3_U0_I_address0,
        t_ce0 => fft_stage_3_U0_I_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_35_t_q0,
        t_address1 => fft_stage_3_U0_I_address1,
        t_ce1 => fft_stage_3_U0_I_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => out_data_35_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_35_i_full_n,
        i_write => ap_channel_done_out_data_35,
        t_empty_n => out_data_35_t_empty_n,
        t_read => fft_stage_3_U0_ap_ready);

    out_data_46_U : component IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_input_data2_RAM_T2P_BRAM_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage_3_U0_X_address0,
        i_ce0 => fft_stage_3_U0_X_ce0,
        i_we0 => fft_stage_3_U0_X_we0,
        i_d0 => fft_stage_3_U0_X_d0,
        i_q0 => out_data_46_i_q0,
        i_address1 => fft_stage_3_U0_X_address1,
        i_ce1 => fft_stage_3_U0_X_ce1,
        i_we1 => fft_stage_3_U0_X_we1,
        i_d1 => fft_stage_3_U0_X_d1,
        i_q1 => out_data_46_i_q1,
        t_address0 => fft_stage_4_U0_I_address0,
        t_ce0 => fft_stage_4_U0_I_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_46_t_q0,
        t_address1 => fft_stage_4_U0_I_address1,
        t_ce1 => fft_stage_4_U0_I_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => out_data_46_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_46_i_full_n,
        i_write => ap_channel_done_out_data_46,
        t_empty_n => out_data_46_t_empty_n,
        t_read => fft_stage_4_U0_ap_ready);

    out_data_57_U : component IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_input_data2_RAM_T2P_BRAM_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage_4_U0_X_address0,
        i_ce0 => fft_stage_4_U0_X_ce0,
        i_we0 => fft_stage_4_U0_X_we0,
        i_d0 => fft_stage_4_U0_X_d0,
        i_q0 => out_data_57_i_q0,
        i_address1 => fft_stage_4_U0_X_address1,
        i_ce1 => fft_stage_4_U0_X_ce1,
        i_we1 => fft_stage_4_U0_X_we1,
        i_d1 => fft_stage_4_U0_X_d1,
        i_q1 => out_data_57_i_q1,
        t_address0 => fft_stage_5_U0_I_address0,
        t_ce0 => fft_stage_5_U0_I_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_57_t_q0,
        t_address1 => fft_stage_5_U0_I_address1,
        t_ce1 => fft_stage_5_U0_I_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => out_data_57_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_57_i_full_n,
        i_write => ap_channel_done_out_data_57,
        t_empty_n => out_data_57_t_empty_n,
        t_read => fft_stage_5_U0_ap_ready);

    out_data_6_0_08_U : component IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_out_data_6_0_08_RAM_T2P_BRAM_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage_5_U0_X_0_0_address0,
        i_ce0 => fft_stage_5_U0_X_0_0_ce0,
        i_we0 => fft_stage_5_U0_X_0_0_we0,
        i_d0 => fft_stage_5_U0_X_0_0_d0,
        i_q0 => out_data_6_0_08_i_q0,
        i_address1 => ap_const_lv10_0,
        i_ce1 => ap_const_logic_0,
        i_q1 => out_data_6_0_08_i_q1,
        t_address0 => pool_U0_I_0_0_address0,
        t_ce0 => pool_U0_I_0_0_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_6_0_08_t_q0,
        t_address1 => pool_U0_I_0_0_address1,
        t_ce1 => pool_U0_I_0_0_ce1,
        t_q1 => out_data_6_0_08_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_6_0_08_i_full_n,
        i_write => ap_channel_done_out_data_6_0_08,
        t_empty_n => out_data_6_0_08_t_empty_n,
        t_read => pool_U0_ap_ready);

    out_data_6_0_19_U : component IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_out_data_6_0_08_RAM_T2P_BRAM_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage_5_U0_X_0_1_address0,
        i_ce0 => fft_stage_5_U0_X_0_1_ce0,
        i_we0 => fft_stage_5_U0_X_0_1_we0,
        i_d0 => fft_stage_5_U0_X_0_1_d0,
        i_q0 => out_data_6_0_19_i_q0,
        i_address1 => ap_const_lv10_0,
        i_ce1 => ap_const_logic_0,
        i_q1 => out_data_6_0_19_i_q1,
        t_address0 => pool_U0_I_0_1_address0,
        t_ce0 => pool_U0_I_0_1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_6_0_19_t_q0,
        t_address1 => pool_U0_I_0_1_address1,
        t_ce1 => pool_U0_I_0_1_ce1,
        t_q1 => out_data_6_0_19_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_6_0_19_i_full_n,
        i_write => ap_channel_done_out_data_6_0_19,
        t_empty_n => out_data_6_0_19_t_empty_n,
        t_read => pool_U0_ap_ready);

    out_data_6_1_010_U : component IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_out_data_6_0_08_RAM_T2P_BRAM_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage_5_U0_X_1_0_address0,
        i_ce0 => fft_stage_5_U0_X_1_0_ce0,
        i_we0 => fft_stage_5_U0_X_1_0_we0,
        i_d0 => fft_stage_5_U0_X_1_0_d0,
        i_q0 => out_data_6_1_010_i_q0,
        i_address1 => ap_const_lv10_0,
        i_ce1 => ap_const_logic_0,
        i_q1 => out_data_6_1_010_i_q1,
        t_address0 => pool_U0_I_1_0_address0,
        t_ce0 => pool_U0_I_1_0_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_6_1_010_t_q0,
        t_address1 => pool_U0_I_1_0_address1,
        t_ce1 => pool_U0_I_1_0_ce1,
        t_q1 => out_data_6_1_010_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_6_1_010_i_full_n,
        i_write => ap_channel_done_out_data_6_1_010,
        t_empty_n => out_data_6_1_010_t_empty_n,
        t_read => pool_U0_ap_ready);

    out_data_6_1_111_U : component IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_out_data_6_0_08_RAM_T2P_BRAM_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fft_stage_5_U0_X_1_1_address0,
        i_ce0 => fft_stage_5_U0_X_1_1_ce0,
        i_we0 => fft_stage_5_U0_X_1_1_we0,
        i_d0 => fft_stage_5_U0_X_1_1_d0,
        i_q0 => out_data_6_1_111_i_q0,
        i_address1 => ap_const_lv10_0,
        i_ce1 => ap_const_logic_0,
        i_q1 => out_data_6_1_111_i_q1,
        t_address0 => pool_U0_I_1_1_address0,
        t_ce0 => pool_U0_I_1_1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_6_1_111_t_q0,
        t_address1 => pool_U0_I_1_1_address1,
        t_ce1 => pool_U0_I_1_1_ce1,
        t_q1 => out_data_6_1_111_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_6_1_111_i_full_n,
        i_write => ap_channel_done_out_data_6_1_111,
        t_empty_n => out_data_6_1_111_t_empty_n,
        t_read => pool_U0_ap_ready);

    out_data_712_U : component IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_out_data_712_RAM_T2P_BRAM_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => pool_U0_O_address0,
        i_ce0 => pool_U0_O_ce0,
        i_we0 => pool_U0_O_we0,
        i_d0 => pool_U0_O_d0,
        i_q0 => out_data_712_i_q0,
        i_address1 => ap_const_lv12_0,
        i_ce1 => ap_const_logic_0,
        i_q1 => out_data_712_i_q1,
        t_address0 => push_out_U0_O_address0,
        t_ce0 => push_out_U0_O_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => out_data_712_t_q0,
        t_address1 => push_out_U0_O_address1,
        t_ce1 => push_out_U0_O_ce1,
        t_q1 => out_data_712_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_data_712_i_full_n,
        i_write => ap_channel_done_out_data_712,
        t_empty_n => out_data_712_t_empty_n,
        t_read => push_out_U0_ap_ready);

    entry_proc20_U0 : component IFFT_AP_entry_proc20
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => entry_proc20_U0_ap_start,
        ap_done => entry_proc20_U0_ap_done,
        ap_continue => entry_proc20_U0_ap_continue,
        ap_idle => entry_proc20_U0_ap_idle,
        ap_ready => entry_proc20_U0_ap_ready,
        actp_regp => actp_regp,
        actp_regp_c9_din => entry_proc20_U0_actp_regp_c9_din,
        actp_regp_c9_num_data_valid => actp_regp_c9_num_data_valid,
        actp_regp_c9_fifo_cap => actp_regp_c9_fifo_cap,
        actp_regp_c9_full_n => actp_regp_c9_full_n,
        actp_regp_c9_write => entry_proc20_U0_actp_regp_c9_write);

    rd_data_U0 : component IFFT_AP_rd_data
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => rd_data_U0_ap_start,
        start_full_n => start_for_collect_input_U0_full_n,
        ap_done => rd_data_U0_ap_done,
        ap_continue => rd_data_U0_ap_continue,
        ap_idle => rd_data_U0_ap_idle,
        ap_ready => rd_data_U0_ap_ready,
        start_out => rd_data_U0_start_out,
        start_write => rd_data_U0_start_write,
        m_axi_gmem_AWVALID => rd_data_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => rd_data_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => rd_data_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => rd_data_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => rd_data_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => rd_data_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => rd_data_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => rd_data_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => rd_data_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => rd_data_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => rd_data_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => rd_data_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => rd_data_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => rd_data_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => rd_data_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => rd_data_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => rd_data_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => rd_data_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => rd_data_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR => rd_data_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => rd_data_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => rd_data_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => rd_data_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => rd_data_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => rd_data_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => rd_data_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => rd_data_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => rd_data_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => rd_data_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => rd_data_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => m_axi_gmem_RVALID,
        m_axi_gmem_RREADY => rd_data_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => m_axi_gmem_RDATA,
        m_axi_gmem_RLAST => m_axi_gmem_RLAST,
        m_axi_gmem_RID => m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM => m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER => m_axi_gmem_RUSER,
        m_axi_gmem_RRESP => m_axi_gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => rd_data_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        in_r => in_r,
        in_st_din => rd_data_U0_in_st_din,
        in_st_num_data_valid => in_st1_num_data_valid,
        in_st_fifo_cap => in_st1_fifo_cap,
        in_st_full_n => in_st1_full_n,
        in_st_write => rd_data_U0_in_st_write,
        ctrl1_regp => ctrl1_regp,
        pn => pn_2,
        ctrl1_regp_c8_din => rd_data_U0_ctrl1_regp_c8_din,
        ctrl1_regp_c8_num_data_valid => ctrl1_regp_c8_num_data_valid,
        ctrl1_regp_c8_fifo_cap => ctrl1_regp_c8_fifo_cap,
        ctrl1_regp_c8_full_n => ctrl1_regp_c8_full_n,
        ctrl1_regp_c8_write => rd_data_U0_ctrl1_regp_c8_write);

    collect_input_U0 : component IFFT_AP_collect_input
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => collect_input_U0_ap_start,
        ap_done => collect_input_U0_ap_done,
        ap_continue => collect_input_U0_ap_continue,
        ap_idle => collect_input_U0_ap_idle,
        ap_ready => collect_input_U0_ap_ready,
        in_st_dout => in_st1_dout,
        in_st_num_data_valid => in_st1_num_data_valid,
        in_st_fifo_cap => in_st1_fifo_cap,
        in_st_empty_n => in_st1_empty_n,
        in_st_read => collect_input_U0_in_st_read,
        I_address0 => collect_input_U0_I_address0,
        I_ce0 => collect_input_U0_I_ce0,
        I_we0 => collect_input_U0_I_we0,
        I_d0 => collect_input_U0_I_d0,
        I_address1 => collect_input_U0_I_address1,
        I_ce1 => collect_input_U0_I_ce1,
        I_we1 => collect_input_U0_I_we1,
        I_d1 => collect_input_U0_I_d1,
        ctrl1_regp_dout => ctrl1_regp_c8_dout,
        ctrl1_regp_num_data_valid => ctrl1_regp_c8_num_data_valid,
        ctrl1_regp_fifo_cap => ctrl1_regp_c8_fifo_cap,
        ctrl1_regp_empty_n => ctrl1_regp_c8_empty_n,
        ctrl1_regp_read => collect_input_U0_ctrl1_regp_read,
        ap_return => collect_input_U0_ap_return);

    fft_stage_U0 : component IFFT_AP_fft_stage
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_U0_ap_start,
        ap_done => fft_stage_U0_ap_done,
        ap_continue => fft_stage_U0_ap_continue,
        ap_idle => fft_stage_U0_ap_idle,
        ap_ready => fft_stage_U0_ap_ready,
        I_address0 => fft_stage_U0_I_address0,
        I_ce0 => fft_stage_U0_I_ce0,
        I_q0 => input_data2_t_q0,
        I_address1 => fft_stage_U0_I_address1,
        I_ce1 => fft_stage_U0_I_ce1,
        I_q1 => input_data2_t_q1,
        X_address0 => fft_stage_U0_X_address0,
        X_ce0 => fft_stage_U0_X_ce0,
        X_we0 => fft_stage_U0_X_we0,
        X_d0 => fft_stage_U0_X_d0,
        X_address1 => fft_stage_U0_X_address1,
        X_ce1 => fft_stage_U0_X_ce1,
        X_we1 => fft_stage_U0_X_we1,
        X_d1 => fft_stage_U0_X_d1,
        p_read => ctrl1_regp_c7_channel8_dout,
        ap_return => fft_stage_U0_ap_return);

    fft_stage_1_U0 : component IFFT_AP_fft_stage_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_1_U0_ap_start,
        ap_done => fft_stage_1_U0_ap_done,
        ap_continue => fft_stage_1_U0_ap_continue,
        ap_idle => fft_stage_1_U0_ap_idle,
        ap_ready => fft_stage_1_U0_ap_ready,
        I_address0 => fft_stage_1_U0_I_address0,
        I_ce0 => fft_stage_1_U0_I_ce0,
        I_q0 => out_data_13_t_q0,
        I_address1 => fft_stage_1_U0_I_address1,
        I_ce1 => fft_stage_1_U0_I_ce1,
        I_q1 => out_data_13_t_q1,
        X_address0 => fft_stage_1_U0_X_address0,
        X_ce0 => fft_stage_1_U0_X_ce0,
        X_we0 => fft_stage_1_U0_X_we0,
        X_d0 => fft_stage_1_U0_X_d0,
        X_address1 => fft_stage_1_U0_X_address1,
        X_ce1 => fft_stage_1_U0_X_ce1,
        X_we1 => fft_stage_1_U0_X_we1,
        X_d1 => fft_stage_1_U0_X_d1,
        p_read => ctrl1_regp_c6_channel7_dout,
        ap_return => fft_stage_1_U0_ap_return);

    fft_stage_2_U0 : component IFFT_AP_fft_stage_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_2_U0_ap_start,
        ap_done => fft_stage_2_U0_ap_done,
        ap_continue => fft_stage_2_U0_ap_continue,
        ap_idle => fft_stage_2_U0_ap_idle,
        ap_ready => fft_stage_2_U0_ap_ready,
        I_address0 => fft_stage_2_U0_I_address0,
        I_ce0 => fft_stage_2_U0_I_ce0,
        I_q0 => out_data_24_t_q0,
        I_address1 => fft_stage_2_U0_I_address1,
        I_ce1 => fft_stage_2_U0_I_ce1,
        I_q1 => out_data_24_t_q1,
        X_address0 => fft_stage_2_U0_X_address0,
        X_ce0 => fft_stage_2_U0_X_ce0,
        X_we0 => fft_stage_2_U0_X_we0,
        X_d0 => fft_stage_2_U0_X_d0,
        X_address1 => fft_stage_2_U0_X_address1,
        X_ce1 => fft_stage_2_U0_X_ce1,
        X_we1 => fft_stage_2_U0_X_we1,
        X_d1 => fft_stage_2_U0_X_d1,
        p_read => ctrl1_regp_c5_channel6_dout,
        ap_return => fft_stage_2_U0_ap_return);

    fft_stage_3_U0 : component IFFT_AP_fft_stage_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_3_U0_ap_start,
        ap_done => fft_stage_3_U0_ap_done,
        ap_continue => fft_stage_3_U0_ap_continue,
        ap_idle => fft_stage_3_U0_ap_idle,
        ap_ready => fft_stage_3_U0_ap_ready,
        I_address0 => fft_stage_3_U0_I_address0,
        I_ce0 => fft_stage_3_U0_I_ce0,
        I_q0 => out_data_35_t_q0,
        I_address1 => fft_stage_3_U0_I_address1,
        I_ce1 => fft_stage_3_U0_I_ce1,
        I_q1 => out_data_35_t_q1,
        X_address0 => fft_stage_3_U0_X_address0,
        X_ce0 => fft_stage_3_U0_X_ce0,
        X_we0 => fft_stage_3_U0_X_we0,
        X_d0 => fft_stage_3_U0_X_d0,
        X_address1 => fft_stage_3_U0_X_address1,
        X_ce1 => fft_stage_3_U0_X_ce1,
        X_we1 => fft_stage_3_U0_X_we1,
        X_d1 => fft_stage_3_U0_X_d1,
        p_read => ctrl1_regp_c4_channel5_dout,
        ap_return => fft_stage_3_U0_ap_return);

    fft_stage_4_U0 : component IFFT_AP_fft_stage_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_4_U0_ap_start,
        ap_done => fft_stage_4_U0_ap_done,
        ap_continue => fft_stage_4_U0_ap_continue,
        ap_idle => fft_stage_4_U0_ap_idle,
        ap_ready => fft_stage_4_U0_ap_ready,
        I_address0 => fft_stage_4_U0_I_address0,
        I_ce0 => fft_stage_4_U0_I_ce0,
        I_q0 => out_data_46_t_q0,
        I_address1 => fft_stage_4_U0_I_address1,
        I_ce1 => fft_stage_4_U0_I_ce1,
        I_q1 => out_data_46_t_q1,
        X_address0 => fft_stage_4_U0_X_address0,
        X_ce0 => fft_stage_4_U0_X_ce0,
        X_we0 => fft_stage_4_U0_X_we0,
        X_d0 => fft_stage_4_U0_X_d0,
        X_address1 => fft_stage_4_U0_X_address1,
        X_ce1 => fft_stage_4_U0_X_ce1,
        X_we1 => fft_stage_4_U0_X_we1,
        X_d1 => fft_stage_4_U0_X_d1,
        p_read => ctrl1_regp_c3_channel4_dout,
        ap_return => fft_stage_4_U0_ap_return);

    fft_stage_5_U0 : component IFFT_AP_fft_stage_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_5_U0_ap_start,
        ap_done => fft_stage_5_U0_ap_done,
        ap_continue => fft_stage_5_U0_ap_continue,
        ap_idle => fft_stage_5_U0_ap_idle,
        ap_ready => fft_stage_5_U0_ap_ready,
        I_address0 => fft_stage_5_U0_I_address0,
        I_ce0 => fft_stage_5_U0_I_ce0,
        I_q0 => out_data_57_t_q0,
        I_address1 => fft_stage_5_U0_I_address1,
        I_ce1 => fft_stage_5_U0_I_ce1,
        I_q1 => out_data_57_t_q1,
        X_0_0_address0 => fft_stage_5_U0_X_0_0_address0,
        X_0_0_ce0 => fft_stage_5_U0_X_0_0_ce0,
        X_0_0_we0 => fft_stage_5_U0_X_0_0_we0,
        X_0_0_d0 => fft_stage_5_U0_X_0_0_d0,
        X_0_1_address0 => fft_stage_5_U0_X_0_1_address0,
        X_0_1_ce0 => fft_stage_5_U0_X_0_1_ce0,
        X_0_1_we0 => fft_stage_5_U0_X_0_1_we0,
        X_0_1_d0 => fft_stage_5_U0_X_0_1_d0,
        X_1_0_address0 => fft_stage_5_U0_X_1_0_address0,
        X_1_0_ce0 => fft_stage_5_U0_X_1_0_ce0,
        X_1_0_we0 => fft_stage_5_U0_X_1_0_we0,
        X_1_0_d0 => fft_stage_5_U0_X_1_0_d0,
        X_1_1_address0 => fft_stage_5_U0_X_1_1_address0,
        X_1_1_ce0 => fft_stage_5_U0_X_1_1_ce0,
        X_1_1_we0 => fft_stage_5_U0_X_1_1_we0,
        X_1_1_d0 => fft_stage_5_U0_X_1_1_d0,
        p_read => ctrl1_regp_c2_channel3_dout,
        ap_return => fft_stage_5_U0_ap_return);

    pool_U0 : component IFFT_AP_pool
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => pool_U0_ap_start,
        ap_done => pool_U0_ap_done,
        ap_continue => pool_U0_ap_continue,
        ap_idle => pool_U0_ap_idle,
        ap_ready => pool_U0_ap_ready,
        I_0_0_address0 => pool_U0_I_0_0_address0,
        I_0_0_ce0 => pool_U0_I_0_0_ce0,
        I_0_0_q0 => out_data_6_0_08_t_q0,
        I_0_0_address1 => pool_U0_I_0_0_address1,
        I_0_0_ce1 => pool_U0_I_0_0_ce1,
        I_0_0_q1 => out_data_6_0_08_t_q1,
        I_0_1_address0 => pool_U0_I_0_1_address0,
        I_0_1_ce0 => pool_U0_I_0_1_ce0,
        I_0_1_q0 => out_data_6_0_19_t_q0,
        I_0_1_address1 => pool_U0_I_0_1_address1,
        I_0_1_ce1 => pool_U0_I_0_1_ce1,
        I_0_1_q1 => out_data_6_0_19_t_q1,
        I_1_0_address0 => pool_U0_I_1_0_address0,
        I_1_0_ce0 => pool_U0_I_1_0_ce0,
        I_1_0_q0 => out_data_6_1_010_t_q0,
        I_1_0_address1 => pool_U0_I_1_0_address1,
        I_1_0_ce1 => pool_U0_I_1_0_ce1,
        I_1_0_q1 => out_data_6_1_010_t_q1,
        I_1_1_address0 => pool_U0_I_1_1_address0,
        I_1_1_ce0 => pool_U0_I_1_1_ce0,
        I_1_1_q0 => out_data_6_1_111_t_q0,
        I_1_1_address1 => pool_U0_I_1_1_address1,
        I_1_1_ce1 => pool_U0_I_1_1_ce1,
        I_1_1_q1 => out_data_6_1_111_t_q1,
        O_address0 => pool_U0_O_address0,
        O_ce0 => pool_U0_O_ce0,
        O_we0 => pool_U0_O_we0,
        O_d0 => pool_U0_O_d0,
        p_read => ctrl1_regp_c1_channel2_dout,
        actp_regp_dout => actp_regp_c9_dout,
        actp_regp_num_data_valid => actp_regp_c9_num_data_valid,
        actp_regp_fifo_cap => actp_regp_c9_fifo_cap,
        actp_regp_empty_n => actp_regp_c9_empty_n,
        actp_regp_read => pool_U0_actp_regp_read,
        ap_return_0 => pool_U0_ap_return_0,
        ap_return_1 => pool_U0_ap_return_1);

    push_out_U0 : component IFFT_AP_push_out
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => push_out_U0_ap_start,
        ap_done => push_out_U0_ap_done,
        ap_continue => push_out_U0_ap_continue,
        ap_idle => push_out_U0_ap_idle,
        ap_ready => push_out_U0_ap_ready,
        O_address0 => push_out_U0_O_address0,
        O_ce0 => push_out_U0_O_ce0,
        O_q0 => out_data_712_t_q0,
        O_address1 => push_out_U0_O_address1,
        O_ce1 => push_out_U0_O_ce1,
        O_q1 => out_data_712_t_q1,
        out_st_din => push_out_U0_out_st_din,
        out_st_num_data_valid => ap_const_lv2_0,
        out_st_fifo_cap => ap_const_lv2_0,
        out_st_full_n => out_st_full_n,
        out_st_write => push_out_U0_out_st_write,
        p_read => ctrl1_regp_c_channel_dout,
        p_read1 => actp_regp_c_channel_dout);

    actp_regp_c9_U : component IFFT_AP_fifo_w32_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc20_U0_actp_regp_c9_din,
        if_full_n => actp_regp_c9_full_n,
        if_write => entry_proc20_U0_actp_regp_c9_write,
        if_dout => actp_regp_c9_dout,
        if_num_data_valid => actp_regp_c9_num_data_valid,
        if_fifo_cap => actp_regp_c9_fifo_cap,
        if_empty_n => actp_regp_c9_empty_n,
        if_read => pool_U0_actp_regp_read);

    in_st1_U : component IFFT_AP_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rd_data_U0_in_st_din,
        if_full_n => in_st1_full_n,
        if_write => rd_data_U0_in_st_write,
        if_dout => in_st1_dout,
        if_num_data_valid => in_st1_num_data_valid,
        if_fifo_cap => in_st1_fifo_cap,
        if_empty_n => in_st1_empty_n,
        if_read => collect_input_U0_in_st_read);

    ctrl1_regp_c8_U : component IFFT_AP_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rd_data_U0_ctrl1_regp_c8_din,
        if_full_n => ctrl1_regp_c8_full_n,
        if_write => rd_data_U0_ctrl1_regp_c8_write,
        if_dout => ctrl1_regp_c8_dout,
        if_num_data_valid => ctrl1_regp_c8_num_data_valid,
        if_fifo_cap => ctrl1_regp_c8_fifo_cap,
        if_empty_n => ctrl1_regp_c8_empty_n,
        if_read => collect_input_U0_ctrl1_regp_read);

    ctrl1_regp_c7_channel8_U : component IFFT_AP_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => collect_input_U0_ap_return,
        if_full_n => ctrl1_regp_c7_channel8_full_n,
        if_write => ap_channel_done_ctrl1_regp_c7_channel8,
        if_dout => ctrl1_regp_c7_channel8_dout,
        if_num_data_valid => ctrl1_regp_c7_channel8_num_data_valid,
        if_fifo_cap => ctrl1_regp_c7_channel8_fifo_cap,
        if_empty_n => ctrl1_regp_c7_channel8_empty_n,
        if_read => fft_stage_U0_ap_ready);

    ctrl1_regp_c6_channel7_U : component IFFT_AP_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_U0_ap_return,
        if_full_n => ctrl1_regp_c6_channel7_full_n,
        if_write => ap_channel_done_ctrl1_regp_c6_channel7,
        if_dout => ctrl1_regp_c6_channel7_dout,
        if_num_data_valid => ctrl1_regp_c6_channel7_num_data_valid,
        if_fifo_cap => ctrl1_regp_c6_channel7_fifo_cap,
        if_empty_n => ctrl1_regp_c6_channel7_empty_n,
        if_read => fft_stage_1_U0_ap_ready);

    ctrl1_regp_c5_channel6_U : component IFFT_AP_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_1_U0_ap_return,
        if_full_n => ctrl1_regp_c5_channel6_full_n,
        if_write => ap_channel_done_ctrl1_regp_c5_channel6,
        if_dout => ctrl1_regp_c5_channel6_dout,
        if_num_data_valid => ctrl1_regp_c5_channel6_num_data_valid,
        if_fifo_cap => ctrl1_regp_c5_channel6_fifo_cap,
        if_empty_n => ctrl1_regp_c5_channel6_empty_n,
        if_read => fft_stage_2_U0_ap_ready);

    ctrl1_regp_c4_channel5_U : component IFFT_AP_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_2_U0_ap_return,
        if_full_n => ctrl1_regp_c4_channel5_full_n,
        if_write => ap_channel_done_ctrl1_regp_c4_channel5,
        if_dout => ctrl1_regp_c4_channel5_dout,
        if_num_data_valid => ctrl1_regp_c4_channel5_num_data_valid,
        if_fifo_cap => ctrl1_regp_c4_channel5_fifo_cap,
        if_empty_n => ctrl1_regp_c4_channel5_empty_n,
        if_read => fft_stage_3_U0_ap_ready);

    ctrl1_regp_c3_channel4_U : component IFFT_AP_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_3_U0_ap_return,
        if_full_n => ctrl1_regp_c3_channel4_full_n,
        if_write => ap_channel_done_ctrl1_regp_c3_channel4,
        if_dout => ctrl1_regp_c3_channel4_dout,
        if_num_data_valid => ctrl1_regp_c3_channel4_num_data_valid,
        if_fifo_cap => ctrl1_regp_c3_channel4_fifo_cap,
        if_empty_n => ctrl1_regp_c3_channel4_empty_n,
        if_read => fft_stage_4_U0_ap_ready);

    ctrl1_regp_c2_channel3_U : component IFFT_AP_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_4_U0_ap_return,
        if_full_n => ctrl1_regp_c2_channel3_full_n,
        if_write => ap_channel_done_ctrl1_regp_c2_channel3,
        if_dout => ctrl1_regp_c2_channel3_dout,
        if_num_data_valid => ctrl1_regp_c2_channel3_num_data_valid,
        if_fifo_cap => ctrl1_regp_c2_channel3_fifo_cap,
        if_empty_n => ctrl1_regp_c2_channel3_empty_n,
        if_read => fft_stage_5_U0_ap_ready);

    ctrl1_regp_c1_channel2_U : component IFFT_AP_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_5_U0_ap_return,
        if_full_n => ctrl1_regp_c1_channel2_full_n,
        if_write => ap_channel_done_ctrl1_regp_c1_channel2,
        if_dout => ctrl1_regp_c1_channel2_dout,
        if_num_data_valid => ctrl1_regp_c1_channel2_num_data_valid,
        if_fifo_cap => ctrl1_regp_c1_channel2_fifo_cap,
        if_empty_n => ctrl1_regp_c1_channel2_empty_n,
        if_read => pool_U0_ap_ready);

    ctrl1_regp_c_channel_U : component IFFT_AP_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool_U0_ap_return_0,
        if_full_n => ctrl1_regp_c_channel_full_n,
        if_write => ap_channel_done_ctrl1_regp_c_channel,
        if_dout => ctrl1_regp_c_channel_dout,
        if_num_data_valid => ctrl1_regp_c_channel_num_data_valid,
        if_fifo_cap => ctrl1_regp_c_channel_fifo_cap,
        if_empty_n => ctrl1_regp_c_channel_empty_n,
        if_read => push_out_U0_ap_ready);

    actp_regp_c_channel_U : component IFFT_AP_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool_U0_ap_return_1,
        if_full_n => actp_regp_c_channel_full_n,
        if_write => ap_channel_done_actp_regp_c_channel,
        if_dout => actp_regp_c_channel_dout,
        if_num_data_valid => actp_regp_c_channel_num_data_valid,
        if_fifo_cap => actp_regp_c_channel_fifo_cap,
        if_empty_n => actp_regp_c_channel_empty_n,
        if_read => push_out_U0_ap_ready);

    start_for_collect_input_U0_U : component IFFT_AP_start_for_collect_input_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_collect_input_U0_din,
        if_full_n => start_for_collect_input_U0_full_n,
        if_write => rd_data_U0_start_write,
        if_dout => start_for_collect_input_U0_dout,
        if_empty_n => start_for_collect_input_U0_empty_n,
        if_read => collect_input_U0_ap_ready);





    ap_sync_reg_channel_write_actp_regp_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_actp_regp_c_channel <= ap_const_logic_0;
            else
                if (((pool_U0_ap_done and pool_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_actp_regp_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_actp_regp_c_channel <= ap_sync_channel_write_actp_regp_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_regp_c1_channel2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_regp_c1_channel2 <= ap_const_logic_0;
            else
                if (((fft_stage_5_U0_ap_done and fft_stage_5_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_regp_c1_channel2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_regp_c1_channel2 <= ap_sync_channel_write_ctrl1_regp_c1_channel2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_regp_c2_channel3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_regp_c2_channel3 <= ap_const_logic_0;
            else
                if (((fft_stage_4_U0_ap_done and fft_stage_4_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_regp_c2_channel3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_regp_c2_channel3 <= ap_sync_channel_write_ctrl1_regp_c2_channel3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_regp_c3_channel4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_regp_c3_channel4 <= ap_const_logic_0;
            else
                if (((fft_stage_3_U0_ap_done and fft_stage_3_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_regp_c3_channel4 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_regp_c3_channel4 <= ap_sync_channel_write_ctrl1_regp_c3_channel4;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_regp_c4_channel5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_regp_c4_channel5 <= ap_const_logic_0;
            else
                if (((fft_stage_2_U0_ap_done and fft_stage_2_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_regp_c4_channel5 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_regp_c4_channel5 <= ap_sync_channel_write_ctrl1_regp_c4_channel5;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_regp_c5_channel6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_regp_c5_channel6 <= ap_const_logic_0;
            else
                if (((fft_stage_1_U0_ap_done and fft_stage_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_regp_c5_channel6 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_regp_c5_channel6 <= ap_sync_channel_write_ctrl1_regp_c5_channel6;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_regp_c6_channel7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_regp_c6_channel7 <= ap_const_logic_0;
            else
                if (((fft_stage_U0_ap_done and fft_stage_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_regp_c6_channel7 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_regp_c6_channel7 <= ap_sync_channel_write_ctrl1_regp_c6_channel7;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_regp_c7_channel8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_regp_c7_channel8 <= ap_const_logic_0;
            else
                if (((collect_input_U0_ap_done and collect_input_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_regp_c7_channel8 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_regp_c7_channel8 <= ap_sync_channel_write_ctrl1_regp_c7_channel8;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_regp_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_regp_c_channel <= ap_const_logic_0;
            else
                if (((pool_U0_ap_done and pool_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_regp_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_regp_c_channel <= ap_sync_channel_write_ctrl1_regp_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_input_data2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_input_data2 <= ap_const_logic_0;
            else
                if (((collect_input_U0_ap_done and collect_input_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_input_data2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_input_data2 <= ap_sync_channel_write_input_data2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_13 <= ap_const_logic_0;
            else
                if (((fft_stage_U0_ap_done and fft_stage_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_13 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_13 <= ap_sync_channel_write_out_data_13;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_24 <= ap_const_logic_0;
            else
                if (((fft_stage_1_U0_ap_done and fft_stage_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_24 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_24 <= ap_sync_channel_write_out_data_24;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_35 <= ap_const_logic_0;
            else
                if (((fft_stage_2_U0_ap_done and fft_stage_2_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_35 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_35 <= ap_sync_channel_write_out_data_35;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_46 <= ap_const_logic_0;
            else
                if (((fft_stage_3_U0_ap_done and fft_stage_3_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_46 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_46 <= ap_sync_channel_write_out_data_46;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_57_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_57 <= ap_const_logic_0;
            else
                if (((fft_stage_4_U0_ap_done and fft_stage_4_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_57 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_57 <= ap_sync_channel_write_out_data_57;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_6_0_08_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_6_0_08 <= ap_const_logic_0;
            else
                if (((fft_stage_5_U0_ap_done and fft_stage_5_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_6_0_08 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_6_0_08 <= ap_sync_channel_write_out_data_6_0_08;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_6_0_19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_6_0_19 <= ap_const_logic_0;
            else
                if (((fft_stage_5_U0_ap_done and fft_stage_5_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_6_0_19 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_6_0_19 <= ap_sync_channel_write_out_data_6_0_19;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_6_1_010_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_6_1_010 <= ap_const_logic_0;
            else
                if (((fft_stage_5_U0_ap_done and fft_stage_5_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_6_1_010 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_6_1_010 <= ap_sync_channel_write_out_data_6_1_010;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_6_1_111_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_6_1_111 <= ap_const_logic_0;
            else
                if (((fft_stage_5_U0_ap_done and fft_stage_5_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_6_1_111 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_6_1_111 <= ap_sync_channel_write_out_data_6_1_111;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_data_712_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_data_712 <= ap_const_logic_0;
            else
                if (((pool_U0_ap_done and pool_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_data_712 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_data_712 <= ap_sync_channel_write_out_data_712;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc20_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_entry_proc20_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc20_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc20_U0_ap_ready <= ap_sync_entry_proc20_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_rd_data_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_rd_data_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_rd_data_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_rd_data_U0_ap_ready <= ap_sync_rd_data_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_actp_regp_c_channel <= (pool_U0_ap_done and (ap_sync_reg_channel_write_actp_regp_c_channel xor ap_const_logic_1));
    ap_channel_done_ctrl1_regp_c1_channel2 <= (fft_stage_5_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_regp_c1_channel2 xor ap_const_logic_1));
    ap_channel_done_ctrl1_regp_c2_channel3 <= (fft_stage_4_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_regp_c2_channel3 xor ap_const_logic_1));
    ap_channel_done_ctrl1_regp_c3_channel4 <= (fft_stage_3_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_regp_c3_channel4 xor ap_const_logic_1));
    ap_channel_done_ctrl1_regp_c4_channel5 <= (fft_stage_2_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_regp_c4_channel5 xor ap_const_logic_1));
    ap_channel_done_ctrl1_regp_c5_channel6 <= (fft_stage_1_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_regp_c5_channel6 xor ap_const_logic_1));
    ap_channel_done_ctrl1_regp_c6_channel7 <= (fft_stage_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_regp_c6_channel7 xor ap_const_logic_1));
    ap_channel_done_ctrl1_regp_c7_channel8 <= ((ap_sync_reg_channel_write_ctrl1_regp_c7_channel8 xor ap_const_logic_1) and collect_input_U0_ap_done);
    ap_channel_done_ctrl1_regp_c_channel <= (pool_U0_ap_done and (ap_sync_reg_channel_write_ctrl1_regp_c_channel xor ap_const_logic_1));
    ap_channel_done_input_data2 <= ((ap_sync_reg_channel_write_input_data2 xor ap_const_logic_1) and collect_input_U0_ap_done);
    ap_channel_done_out_data_13 <= (fft_stage_U0_ap_done and (ap_sync_reg_channel_write_out_data_13 xor ap_const_logic_1));
    ap_channel_done_out_data_24 <= (fft_stage_1_U0_ap_done and (ap_sync_reg_channel_write_out_data_24 xor ap_const_logic_1));
    ap_channel_done_out_data_35 <= (fft_stage_2_U0_ap_done and (ap_sync_reg_channel_write_out_data_35 xor ap_const_logic_1));
    ap_channel_done_out_data_46 <= (fft_stage_3_U0_ap_done and (ap_sync_reg_channel_write_out_data_46 xor ap_const_logic_1));
    ap_channel_done_out_data_57 <= (fft_stage_4_U0_ap_done and (ap_sync_reg_channel_write_out_data_57 xor ap_const_logic_1));
    ap_channel_done_out_data_6_0_08 <= (fft_stage_5_U0_ap_done and (ap_sync_reg_channel_write_out_data_6_0_08 xor ap_const_logic_1));
    ap_channel_done_out_data_6_0_19 <= (fft_stage_5_U0_ap_done and (ap_sync_reg_channel_write_out_data_6_0_19 xor ap_const_logic_1));
    ap_channel_done_out_data_6_1_010 <= (fft_stage_5_U0_ap_done and (ap_sync_reg_channel_write_out_data_6_1_010 xor ap_const_logic_1));
    ap_channel_done_out_data_6_1_111 <= (fft_stage_5_U0_ap_done and (ap_sync_reg_channel_write_out_data_6_1_111 xor ap_const_logic_1));
    ap_channel_done_out_data_712 <= (pool_U0_ap_done and (ap_sync_reg_channel_write_out_data_712 xor ap_const_logic_1));
    ap_done <= push_out_U0_ap_done;
    ap_idle <= (rd_data_U0_ap_idle and push_out_U0_ap_idle and pool_U0_ap_idle and fft_stage_U0_ap_idle and fft_stage_5_U0_ap_idle and fft_stage_4_U0_ap_idle and fft_stage_3_U0_ap_idle and fft_stage_2_U0_ap_idle and fft_stage_1_U0_ap_idle and (ctrl1_regp_c7_channel8_empty_n xor ap_const_logic_1) and (out_data_712_t_empty_n xor ap_const_logic_1) and (out_data_6_1_111_t_empty_n xor ap_const_logic_1) and (out_data_6_1_010_t_empty_n xor ap_const_logic_1) and (out_data_6_0_19_t_empty_n xor ap_const_logic_1) and (out_data_6_0_08_t_empty_n xor ap_const_logic_1) and (out_data_57_t_empty_n xor ap_const_logic_1) and (out_data_46_t_empty_n xor ap_const_logic_1) and (out_data_35_t_empty_n xor ap_const_logic_1) and (out_data_24_t_empty_n xor ap_const_logic_1) and (out_data_13_t_empty_n xor ap_const_logic_1) and (input_data2_t_empty_n xor ap_const_logic_1) and (ap_const_logic_1 xor actp_regp_c_channel_empty_n) and (ctrl1_regp_c_channel_empty_n xor ap_const_logic_1) and (ctrl1_regp_c1_channel2_empty_n xor ap_const_logic_1) and (ctrl1_regp_c2_channel3_empty_n xor ap_const_logic_1) and (ctrl1_regp_c3_channel4_empty_n xor ap_const_logic_1) and (ctrl1_regp_c4_channel5_empty_n xor ap_const_logic_1) and (ctrl1_regp_c5_channel6_empty_n xor ap_const_logic_1) and (ctrl1_regp_c6_channel7_empty_n xor ap_const_logic_1) and entry_proc20_U0_ap_idle and collect_input_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_channel_write_actp_regp_c_channel <= ((ap_channel_done_actp_regp_c_channel and actp_regp_c_channel_full_n) or ap_sync_reg_channel_write_actp_regp_c_channel);
    ap_sync_channel_write_ctrl1_regp_c1_channel2 <= ((ctrl1_regp_c1_channel2_full_n and ap_channel_done_ctrl1_regp_c1_channel2) or ap_sync_reg_channel_write_ctrl1_regp_c1_channel2);
    ap_sync_channel_write_ctrl1_regp_c2_channel3 <= ((ctrl1_regp_c2_channel3_full_n and ap_channel_done_ctrl1_regp_c2_channel3) or ap_sync_reg_channel_write_ctrl1_regp_c2_channel3);
    ap_sync_channel_write_ctrl1_regp_c3_channel4 <= ((ctrl1_regp_c3_channel4_full_n and ap_channel_done_ctrl1_regp_c3_channel4) or ap_sync_reg_channel_write_ctrl1_regp_c3_channel4);
    ap_sync_channel_write_ctrl1_regp_c4_channel5 <= ((ctrl1_regp_c4_channel5_full_n and ap_channel_done_ctrl1_regp_c4_channel5) or ap_sync_reg_channel_write_ctrl1_regp_c4_channel5);
    ap_sync_channel_write_ctrl1_regp_c5_channel6 <= ((ctrl1_regp_c5_channel6_full_n and ap_channel_done_ctrl1_regp_c5_channel6) or ap_sync_reg_channel_write_ctrl1_regp_c5_channel6);
    ap_sync_channel_write_ctrl1_regp_c6_channel7 <= ((ctrl1_regp_c6_channel7_full_n and ap_channel_done_ctrl1_regp_c6_channel7) or ap_sync_reg_channel_write_ctrl1_regp_c6_channel7);
    ap_sync_channel_write_ctrl1_regp_c7_channel8 <= ((ctrl1_regp_c7_channel8_full_n and ap_channel_done_ctrl1_regp_c7_channel8) or ap_sync_reg_channel_write_ctrl1_regp_c7_channel8);
    ap_sync_channel_write_ctrl1_regp_c_channel <= ((ctrl1_regp_c_channel_full_n and ap_channel_done_ctrl1_regp_c_channel) or ap_sync_reg_channel_write_ctrl1_regp_c_channel);
    ap_sync_channel_write_input_data2 <= ((collect_input_U0_I_full_n and ap_channel_done_input_data2) or ap_sync_reg_channel_write_input_data2);
    ap_sync_channel_write_out_data_13 <= ((fft_stage_U0_X_full_n and ap_channel_done_out_data_13) or ap_sync_reg_channel_write_out_data_13);
    ap_sync_channel_write_out_data_24 <= ((fft_stage_1_U0_X_full_n and ap_channel_done_out_data_24) or ap_sync_reg_channel_write_out_data_24);
    ap_sync_channel_write_out_data_35 <= ((fft_stage_2_U0_X_full_n and ap_channel_done_out_data_35) or ap_sync_reg_channel_write_out_data_35);
    ap_sync_channel_write_out_data_46 <= ((fft_stage_3_U0_X_full_n and ap_channel_done_out_data_46) or ap_sync_reg_channel_write_out_data_46);
    ap_sync_channel_write_out_data_57 <= ((fft_stage_4_U0_X_full_n and ap_channel_done_out_data_57) or ap_sync_reg_channel_write_out_data_57);
    ap_sync_channel_write_out_data_6_0_08 <= ((fft_stage_5_U0_X_0_0_full_n and ap_channel_done_out_data_6_0_08) or ap_sync_reg_channel_write_out_data_6_0_08);
    ap_sync_channel_write_out_data_6_0_19 <= ((fft_stage_5_U0_X_0_1_full_n and ap_channel_done_out_data_6_0_19) or ap_sync_reg_channel_write_out_data_6_0_19);
    ap_sync_channel_write_out_data_6_1_010 <= ((fft_stage_5_U0_X_1_0_full_n and ap_channel_done_out_data_6_1_010) or ap_sync_reg_channel_write_out_data_6_1_010);
    ap_sync_channel_write_out_data_6_1_111 <= ((fft_stage_5_U0_X_1_1_full_n and ap_channel_done_out_data_6_1_111) or ap_sync_reg_channel_write_out_data_6_1_111);
    ap_sync_channel_write_out_data_712 <= ((pool_U0_O_full_n and ap_channel_done_out_data_712) or ap_sync_reg_channel_write_out_data_712);
    ap_sync_entry_proc20_U0_ap_ready <= (entry_proc20_U0_ap_ready or ap_sync_reg_entry_proc20_U0_ap_ready);
    ap_sync_rd_data_U0_ap_ready <= (rd_data_U0_ap_ready or ap_sync_reg_rd_data_U0_ap_ready);
    ap_sync_ready <= (ap_sync_rd_data_U0_ap_ready and ap_sync_entry_proc20_U0_ap_ready);
    collect_input_U0_I_full_n <= input_data2_i_full_n;
    collect_input_U0_ap_continue <= (ap_sync_channel_write_input_data2 and ap_sync_channel_write_ctrl1_regp_c7_channel8);
    collect_input_U0_ap_start <= start_for_collect_input_U0_empty_n;
    entry_proc20_U0_ap_continue <= ap_const_logic_1;
    entry_proc20_U0_ap_start <= ((ap_sync_reg_entry_proc20_U0_ap_ready xor ap_const_logic_1) and ap_start);
    fft_stage_1_U0_X_full_n <= out_data_24_i_full_n;
    fft_stage_1_U0_ap_continue <= (ap_sync_channel_write_out_data_24 and ap_sync_channel_write_ctrl1_regp_c5_channel6);
    fft_stage_1_U0_ap_start <= (out_data_13_t_empty_n and ctrl1_regp_c6_channel7_empty_n);
    fft_stage_2_U0_X_full_n <= out_data_35_i_full_n;
    fft_stage_2_U0_ap_continue <= (ap_sync_channel_write_out_data_35 and ap_sync_channel_write_ctrl1_regp_c4_channel5);
    fft_stage_2_U0_ap_start <= (out_data_24_t_empty_n and ctrl1_regp_c5_channel6_empty_n);
    fft_stage_3_U0_X_full_n <= out_data_46_i_full_n;
    fft_stage_3_U0_ap_continue <= (ap_sync_channel_write_out_data_46 and ap_sync_channel_write_ctrl1_regp_c3_channel4);
    fft_stage_3_U0_ap_start <= (out_data_35_t_empty_n and ctrl1_regp_c4_channel5_empty_n);
    fft_stage_4_U0_X_full_n <= out_data_57_i_full_n;
    fft_stage_4_U0_ap_continue <= (ap_sync_channel_write_out_data_57 and ap_sync_channel_write_ctrl1_regp_c2_channel3);
    fft_stage_4_U0_ap_start <= (out_data_46_t_empty_n and ctrl1_regp_c3_channel4_empty_n);
    fft_stage_5_U0_X_0_0_full_n <= out_data_6_0_08_i_full_n;
    fft_stage_5_U0_X_0_1_full_n <= out_data_6_0_19_i_full_n;
    fft_stage_5_U0_X_1_0_full_n <= out_data_6_1_010_i_full_n;
    fft_stage_5_U0_X_1_1_full_n <= out_data_6_1_111_i_full_n;
    fft_stage_5_U0_ap_continue <= (ap_sync_channel_write_out_data_6_1_111 and ap_sync_channel_write_out_data_6_1_010 and ap_sync_channel_write_out_data_6_0_19 and ap_sync_channel_write_out_data_6_0_08 and ap_sync_channel_write_ctrl1_regp_c1_channel2);
    fft_stage_5_U0_ap_start <= (out_data_57_t_empty_n and ctrl1_regp_c2_channel3_empty_n);
    fft_stage_U0_X_full_n <= out_data_13_i_full_n;
    fft_stage_U0_ap_continue <= (ap_sync_channel_write_out_data_13 and ap_sync_channel_write_ctrl1_regp_c6_channel7);
    fft_stage_U0_ap_start <= (input_data2_t_empty_n and ctrl1_regp_c7_channel8_empty_n);
    m_axi_gmem_ARADDR <= rd_data_U0_m_axi_gmem_ARADDR;
    m_axi_gmem_ARBURST <= rd_data_U0_m_axi_gmem_ARBURST;
    m_axi_gmem_ARCACHE <= rd_data_U0_m_axi_gmem_ARCACHE;
    m_axi_gmem_ARID <= rd_data_U0_m_axi_gmem_ARID;
    m_axi_gmem_ARLEN <= rd_data_U0_m_axi_gmem_ARLEN;
    m_axi_gmem_ARLOCK <= rd_data_U0_m_axi_gmem_ARLOCK;
    m_axi_gmem_ARPROT <= rd_data_U0_m_axi_gmem_ARPROT;
    m_axi_gmem_ARQOS <= rd_data_U0_m_axi_gmem_ARQOS;
    m_axi_gmem_ARREGION <= rd_data_U0_m_axi_gmem_ARREGION;
    m_axi_gmem_ARSIZE <= rd_data_U0_m_axi_gmem_ARSIZE;
    m_axi_gmem_ARUSER <= rd_data_U0_m_axi_gmem_ARUSER;
    m_axi_gmem_ARVALID <= rd_data_U0_m_axi_gmem_ARVALID;
    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;
    m_axi_gmem_RREADY <= rd_data_U0_m_axi_gmem_RREADY;
    m_axi_gmem_WDATA <= ap_const_lv128_lc_1;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv16_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    out_st_din <= push_out_U0_out_st_din;
    out_st_write <= push_out_U0_out_st_write;
    pool_U0_O_full_n <= out_data_712_i_full_n;
    pool_U0_ap_continue <= (ap_sync_channel_write_out_data_712 and ap_sync_channel_write_ctrl1_regp_c_channel and ap_sync_channel_write_actp_regp_c_channel);
    pool_U0_ap_start <= (out_data_6_1_111_t_empty_n and out_data_6_1_010_t_empty_n and out_data_6_0_19_t_empty_n and out_data_6_0_08_t_empty_n and ctrl1_regp_c1_channel2_empty_n);
    push_out_U0_ap_continue <= ap_continue;
    push_out_U0_ap_start <= (out_data_712_t_empty_n and ctrl1_regp_c_channel_empty_n and actp_regp_c_channel_empty_n);
    rd_data_U0_ap_continue <= ap_const_logic_1;
    rd_data_U0_ap_start <= ((ap_sync_reg_rd_data_U0_ap_ready xor ap_const_logic_1) and ap_start);
    start_for_collect_input_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
