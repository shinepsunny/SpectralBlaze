-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity IFFT_AP_fft_stage_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    I_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    I_ce0 : OUT STD_LOGIC;
    I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    I_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    I_ce1 : OUT STD_LOGIC;
    I_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    X_ce0 : OUT STD_LOGIC;
    X_we0 : OUT STD_LOGIC;
    X_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    X_ce1 : OUT STD_LOGIC;
    X_we1 : OUT STD_LOGIC;
    X_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of IFFT_AP_fft_stage_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln1039_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1039_reg_204 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_114_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_208 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1027_3_fu_138_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1027_3_reg_220 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1027_fu_150_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1027_reg_225 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_s_fu_170_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_reg_233 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln3_fu_178_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln3_reg_238 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal bound_fu_192_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal bound_reg_243 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_ap_start : STD_LOGIC;
    signal grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_ap_done : STD_LOGIC;
    signal grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_ap_idle : STD_LOGIC;
    signal grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_ap_ready : STD_LOGIC;
    signal grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_I_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_I_ce0 : STD_LOGIC;
    signal grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_I_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_I_ce1 : STD_LOGIC;
    signal grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_ce0 : STD_LOGIC;
    signal grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_we0 : STD_LOGIC;
    signal grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_ce1 : STD_LOGIC;
    signal grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_we1 : STD_LOGIC;
    signal grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_ap_start : STD_LOGIC;
    signal grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_ap_done : STD_LOGIC;
    signal grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_ap_idle : STD_LOGIC;
    signal grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_ap_ready : STD_LOGIC;
    signal grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_I_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_I_ce0 : STD_LOGIC;
    signal grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_I_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_I_ce1 : STD_LOGIC;
    signal grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_ce0 : STD_LOGIC;
    signal grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_we0 : STD_LOGIC;
    signal grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_ce1 : STD_LOGIC;
    signal grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_we1 : STD_LOGIC;
    signal grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal x1_fu_64 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln63_fu_159_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1027_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln_fu_98_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1027_fu_118_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1027_fu_122_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_128_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal bound_fu_192_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cast_fu_188_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal bound_fu_192_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_state6_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component IFFT_AP_fft_stage_2_Pipeline_VITIS_LOOP_66_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        empty : IN STD_LOGIC_VECTOR (10 downto 0);
        zext_ln70 : IN STD_LOGIC_VECTOR (11 downto 0);
        I_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        I_ce0 : OUT STD_LOGIC;
        I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        I_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        I_ce1 : OUT STD_LOGIC;
        I_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        X_ce0 : OUT STD_LOGIC;
        X_we0 : OUT STD_LOGIC;
        X_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        X_ce1 : OUT STD_LOGIC;
        X_we1 : OUT STD_LOGIC;
        X_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component IFFT_AP_fft_stage_2_Pipeline_SKIP_X_SKIP_Y IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        bound : IN STD_LOGIC_VECTOR (13 downto 0);
        trunc_ln17 : IN STD_LOGIC_VECTOR (6 downto 0);
        I_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        I_ce0 : OUT STD_LOGIC;
        I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        I_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        I_ce1 : OUT STD_LOGIC;
        I_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        X_ce0 : OUT STD_LOGIC;
        X_we0 : OUT STD_LOGIC;
        X_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        X_ce1 : OUT STD_LOGIC;
        X_we1 : OUT STD_LOGIC;
        X_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component IFFT_AP_mul_7ns_7ns_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74 : component IFFT_AP_fft_stage_2_Pipeline_VITIS_LOOP_66_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_ap_start,
        ap_done => grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_ap_done,
        ap_idle => grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_ap_idle,
        ap_ready => grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_ap_ready,
        empty => zext_ln1027_3_reg_220,
        zext_ln70 => tmp_s_reg_233,
        I_address0 => grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_I_address0,
        I_ce0 => grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_I_ce0,
        I_q0 => I_q0,
        I_address1 => grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_I_address1,
        I_ce1 => grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_I_ce1,
        I_q1 => I_q1,
        X_address0 => grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_address0,
        X_ce0 => grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_ce0,
        X_we0 => grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_we0,
        X_d0 => grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_d0,
        X_address1 => grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_address1,
        X_ce1 => grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_ce1,
        X_we1 => grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_we1,
        X_d1 => grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_d1);

    grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84 : component IFFT_AP_fft_stage_2_Pipeline_SKIP_X_SKIP_Y
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_ap_start,
        ap_done => grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_ap_done,
        ap_idle => grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_ap_idle,
        ap_ready => grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_ap_ready,
        bound => bound_reg_243,
        trunc_ln17 => trunc_ln3_reg_238,
        I_address0 => grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_I_address0,
        I_ce0 => grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_I_ce0,
        I_q0 => I_q0,
        I_address1 => grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_I_address1,
        I_ce1 => grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_I_ce1,
        I_q1 => I_q1,
        X_address0 => grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_address0,
        X_ce0 => grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_ce0,
        X_we0 => grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_we0,
        X_d0 => grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_d0,
        X_address1 => grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_address1,
        X_ce1 => grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_ce1,
        X_we1 => grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_we1,
        X_d1 => grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_d1);

    mul_7ns_7ns_14_1_1_U132 : component IFFT_AP_mul_7ns_7ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 7,
        dout_WIDTH => 14)
    port map (
        din0 => bound_fu_192_p0,
        din1 => bound_fu_192_p1,
        dout => bound_fu_192_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_return_preg <= p_read;
                end if; 
            end if;
        end if;
    end process;


    grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_ap_ready = ap_const_logic_1)) then 
                    grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_ap_ready = ap_const_logic_1)) then 
                    grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    x1_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (icmp_ln1039_fu_108_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x1_fu_64 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1027_fu_154_p2 = ap_const_lv1_0))) then 
                x1_fu_64 <= add_ln63_fu_159_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                bound_reg_243 <= bound_fu_192_p2;
                trunc_ln3_reg_238 <= p_read(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_reg_208 <= empty_fu_114_p1;
                icmp_ln1039_reg_204 <= icmp_ln1039_fu_108_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_s_reg_233(11 downto 6) <= tmp_s_fu_170_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                trunc_ln1027_reg_225 <= trunc_ln1027_fu_150_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1039_fu_108_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    zext_ln1027_3_reg_220(6 downto 0) <= zext_ln1027_3_fu_138_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln1027_3_reg_220(10 downto 7) <= "0000";
    tmp_s_reg_233(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln1039_fu_108_p2, ap_CS_fsm_state2, grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state6, icmp_ln1027_fu_154_p2, ap_block_state6_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (icmp_ln1039_fu_108_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (icmp_ln1039_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1027_fu_154_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    I_address0_assign_proc : process(icmp_ln1039_reg_204, grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_I_address0, grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_I_address0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((icmp_ln1039_reg_204 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            I_address0 <= grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_I_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            I_address0 <= grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_I_address0;
        else 
            I_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    I_address1_assign_proc : process(icmp_ln1039_reg_204, grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_I_address1, grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_I_address1, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((icmp_ln1039_reg_204 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            I_address1 <= grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_I_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            I_address1 <= grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_I_address1;
        else 
            I_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    I_ce0_assign_proc : process(icmp_ln1039_reg_204, grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_I_ce0, grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_I_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((icmp_ln1039_reg_204 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            I_ce0 <= grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_I_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            I_ce0 <= grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_I_ce0;
        else 
            I_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    I_ce1_assign_proc : process(icmp_ln1039_reg_204, grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_I_ce1, grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_I_ce1, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((icmp_ln1039_reg_204 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            I_ce1 <= grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_I_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            I_ce1 <= grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_I_ce1;
        else 
            I_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    X_address0_assign_proc : process(icmp_ln1039_reg_204, grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_address0, grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_address0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((icmp_ln1039_reg_204 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            X_address0 <= grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_address0 <= grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_address0;
        else 
            X_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    X_address1_assign_proc : process(icmp_ln1039_reg_204, grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_address1, grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_address1, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((icmp_ln1039_reg_204 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            X_address1 <= grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_address1 <= grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_address1;
        else 
            X_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    X_ce0_assign_proc : process(icmp_ln1039_reg_204, grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_ce0, grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((icmp_ln1039_reg_204 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            X_ce0 <= grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_ce0 <= grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_ce0;
        else 
            X_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_ce1_assign_proc : process(icmp_ln1039_reg_204, grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_ce1, grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_ce1, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((icmp_ln1039_reg_204 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            X_ce1 <= grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_ce1 <= grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_ce1;
        else 
            X_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    X_d0_assign_proc : process(icmp_ln1039_reg_204, grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_d0, grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_d0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((icmp_ln1039_reg_204 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            X_d0 <= grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_d0 <= grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_d0;
        else 
            X_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    X_d1_assign_proc : process(icmp_ln1039_reg_204, grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_d1, grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_d1, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((icmp_ln1039_reg_204 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            X_d1 <= grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_d1 <= grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_d1;
        else 
            X_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    X_we0_assign_proc : process(icmp_ln1039_reg_204, grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_we0, grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_we0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((icmp_ln1039_reg_204 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            X_we0 <= grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_we0 <= grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_we0;
        else 
            X_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_we1_assign_proc : process(icmp_ln1039_reg_204, grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_we1, grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_we1, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((icmp_ln1039_reg_204 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            X_we1 <= grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_X_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_we1 <= grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_X_we1;
        else 
            X_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1027_fu_122_p2 <= std_logic_vector(unsigned(zext_ln1027_fu_118_p1) + unsigned(ap_const_lv9_3));
    add_ln63_fu_159_p2 <= std_logic_vector(unsigned(x1_fu_64) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_ap_done)
    begin
        if ((grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(ap_block_state6_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state6_on_subcall_done)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state6_on_subcall_done_assign_proc : process(icmp_ln1039_reg_204, grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_ap_done)
    begin
                ap_block_state6_on_subcall_done <= ((icmp_ln1039_reg_204 = ap_const_lv1_1) and (grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(p_read, ap_CS_fsm_state6, ap_return_preg, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_return <= p_read;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bound_fu_192_p0 <= cast_fu_188_p1(7 - 1 downto 0);
    bound_fu_192_p1 <= cast_fu_188_p1(7 - 1 downto 0);
    cast_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln3_fu_178_p4),14));
    empty_fu_114_p1 <= p_read(8 - 1 downto 0);
    grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_ap_start <= grp_fft_stage_2_Pipeline_SKIP_X_SKIP_Y_fu_84_ap_start_reg;
    grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_ap_start <= grp_fft_stage_2_Pipeline_VITIS_LOOP_66_2_fu_74_ap_start_reg;
    icmp_ln1027_fu_154_p2 <= "1" when (x1_fu_64 = empty_reg_208) else "0";
    icmp_ln1039_fu_108_p2 <= "1" when (unsigned(trunc_ln_fu_98_p4) > unsigned(ap_const_lv8_2)) else "0";
    tmp_fu_128_p4 <= add_ln1027_fu_122_p2(8 downto 2);
    tmp_s_fu_170_p3 <= (trunc_ln1027_reg_225 & ap_const_lv6_0);
    trunc_ln1027_fu_150_p1 <= x1_fu_64(6 - 1 downto 0);
    trunc_ln3_fu_178_p4 <= p_read(7 downto 1);
    trunc_ln_fu_98_p4 <= p_read(15 downto 8);
    zext_ln1027_3_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_128_p4),11));
    zext_ln1027_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_114_p1),9));
end behav;
