-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity IFFT_AP_dataflow_in_loop_VITIS_LOOP_332_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    out_st_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    out_st_empty_n : IN STD_LOGIC;
    out_st_read : OUT STD_LOGIC;
    ctrl1_reg_ls : IN STD_LOGIC_VECTOR (7 downto 0);
    ctrl2_reg_pn : IN STD_LOGIC_VECTOR (7 downto 0);
    actp_reg_pool_size : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    out1 : IN STD_LOGIC_VECTOR (63 downto 0);
    out2 : IN STD_LOGIC_VECTOR (63 downto 0);
    layer2_reg_ifs : IN STD_LOGIC_VECTOR (15 downto 0);
    out1_ap_vld : IN STD_LOGIC;
    out2_ap_vld : IN STD_LOGIC;
    layer2_reg_ifs_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ctrl1_reg_ls_ap_vld : IN STD_LOGIC;
    ctrl2_reg_pn_ap_vld : IN STD_LOGIC;
    actp_reg_pool_size_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of IFFT_AP_dataflow_in_loop_VITIS_LOOP_332_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal buffer1_i_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer1_i_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer1_t_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer1_t_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer1_1_i_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer1_1_i_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer1_1_t_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer1_1_t_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_out1_c_din : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc_U0_out1_c_write : STD_LOGIC;
    signal entry_proc_U0_out2_c_din : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc_U0_out2_c_write : STD_LOGIC;
    signal entry_proc_U0_layer2_reg_ifs_c_din : STD_LOGIC_VECTOR (15 downto 0);
    signal entry_proc_U0_layer2_reg_ifs_c_write : STD_LOGIC;
    signal buffer_U0_ap_start : STD_LOGIC;
    signal buffer_U0_ap_done : STD_LOGIC;
    signal buffer_U0_ap_continue : STD_LOGIC;
    signal buffer_U0_ap_idle : STD_LOGIC;
    signal buffer_U0_ap_ready : STD_LOGIC;
    signal buffer_U0_out_st_read : STD_LOGIC;
    signal buffer_U0_buffer1_0_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal buffer_U0_buffer1_0_ce0 : STD_LOGIC;
    signal buffer_U0_buffer1_0_we0 : STD_LOGIC;
    signal buffer_U0_buffer1_0_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer_U0_buffer1_1_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal buffer_U0_buffer1_1_ce0 : STD_LOGIC;
    signal buffer_U0_buffer1_1_we0 : STD_LOGIC;
    signal buffer_U0_buffer1_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer_U0_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_U0_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_channel_done_actp_reg_pool_size_c_channel : STD_LOGIC;
    signal actp_reg_pool_size_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_actp_reg_pool_size_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_actp_reg_pool_size_c_channel : STD_LOGIC;
    signal ap_channel_done_ctrl1_reg_ls_c_channel : STD_LOGIC;
    signal ctrl1_reg_ls_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ctrl1_reg_ls_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_ctrl1_reg_ls_c_channel : STD_LOGIC;
    signal ap_channel_done_buffer1_1 : STD_LOGIC;
    signal buffer_U0_buffer1_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_buffer1_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_buffer1_1 : STD_LOGIC;
    signal ap_channel_done_buffer1 : STD_LOGIC;
    signal buffer_U0_buffer1_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_buffer1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_buffer1 : STD_LOGIC;
    signal write_U0_ap_start : STD_LOGIC;
    signal write_U0_ap_done : STD_LOGIC;
    signal write_U0_ap_continue : STD_LOGIC;
    signal write_U0_ap_idle : STD_LOGIC;
    signal write_U0_ap_ready : STD_LOGIC;
    signal write_U0_buffer1_0_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal write_U0_buffer1_0_ce0 : STD_LOGIC;
    signal write_U0_buffer1_0_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal write_U0_buffer1_0_ce1 : STD_LOGIC;
    signal write_U0_buffer1_1_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal write_U0_buffer1_1_ce0 : STD_LOGIC;
    signal write_U0_buffer1_1_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal write_U0_buffer1_1_ce1 : STD_LOGIC;
    signal write_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal write_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal write_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal write_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal write_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal write_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal write_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal write_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal write_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal write_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal write_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal write_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal write_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal write_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal write_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal write_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal write_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal write_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal write_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal write_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal write_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal write_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal write_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal write_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal write_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal write_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal write_U0_out1_read : STD_LOGIC;
    signal write_U0_out2_read : STD_LOGIC;
    signal write_U0_layer2_reg_2_read : STD_LOGIC;
    signal buffer1_i_full_n : STD_LOGIC;
    signal buffer1_t_empty_n : STD_LOGIC;
    signal buffer1_1_i_full_n : STD_LOGIC;
    signal buffer1_1_t_empty_n : STD_LOGIC;
    signal out1_c_full_n : STD_LOGIC;
    signal out1_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal out1_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal out1_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal out1_c_empty_n : STD_LOGIC;
    signal out2_c_full_n : STD_LOGIC;
    signal out2_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal out2_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal out2_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal out2_c_empty_n : STD_LOGIC;
    signal layer2_reg_ifs_c_full_n : STD_LOGIC;
    signal layer2_reg_ifs_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_reg_ifs_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_reg_ifs_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_reg_ifs_c_empty_n : STD_LOGIC;
    signal ctrl1_reg_ls_c_channel_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal ctrl1_reg_ls_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal ctrl1_reg_ls_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal ctrl1_reg_ls_c_channel_empty_n : STD_LOGIC;
    signal actp_reg_pool_size_c_channel_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal actp_reg_pool_size_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal actp_reg_pool_size_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal actp_reg_pool_size_c_channel_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_buffer_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_buffer_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component IFFT_AP_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out1 : IN STD_LOGIC_VECTOR (63 downto 0);
        out1_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        out1_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        out1_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        out1_c_full_n : IN STD_LOGIC;
        out1_c_write : OUT STD_LOGIC;
        out2 : IN STD_LOGIC_VECTOR (63 downto 0);
        out2_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        out2_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        out2_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        out2_c_full_n : IN STD_LOGIC;
        out2_c_write : OUT STD_LOGIC;
        layer2_reg_ifs : IN STD_LOGIC_VECTOR (15 downto 0);
        layer2_reg_ifs_c_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        layer2_reg_ifs_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        layer2_reg_ifs_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        layer2_reg_ifs_c_full_n : IN STD_LOGIC;
        layer2_reg_ifs_c_write : OUT STD_LOGIC );
    end component;


    component IFFT_AP_buffer_r IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_st_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        out_st_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        out_st_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        out_st_empty_n : IN STD_LOGIC;
        out_st_read : OUT STD_LOGIC;
        buffer1_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        buffer1_0_ce0 : OUT STD_LOGIC;
        buffer1_0_we0 : OUT STD_LOGIC;
        buffer1_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        buffer1_1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        buffer1_1_ce0 : OUT STD_LOGIC;
        buffer1_1_we0 : OUT STD_LOGIC;
        buffer1_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ctrl1_reg_3 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctrl2_reg_0 : IN STD_LOGIC_VECTOR (7 downto 0);
        actp_reg_3 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component IFFT_AP_write_r IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buffer1_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        buffer1_0_ce0 : OUT STD_LOGIC;
        buffer1_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        buffer1_0_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        buffer1_0_ce1 : OUT STD_LOGIC;
        buffer1_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        buffer1_1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        buffer1_1_ce0 : OUT STD_LOGIC;
        buffer1_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        buffer1_1_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        buffer1_1_ce1 : OUT STD_LOGIC;
        buffer1_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        out1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        out1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        out1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        out1_empty_n : IN STD_LOGIC;
        out1_read : OUT STD_LOGIC;
        out2_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        out2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        out2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        out2_empty_n : IN STD_LOGIC;
        out2_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        layer2_reg_2_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        layer2_reg_2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        layer2_reg_2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        layer2_reg_2_empty_n : IN STD_LOGIC;
        layer2_reg_2_read : OUT STD_LOGIC;
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component IFFT_AP_dataflow_in_loop_VITIS_LOOP_332_1_buffer1_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_q1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_q1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component IFFT_AP_fifo_w64_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component IFFT_AP_fifo_w16_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component IFFT_AP_fifo_w8_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    buffer1_U : component IFFT_AP_dataflow_in_loop_VITIS_LOOP_332_1_buffer1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 8192,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => buffer_U0_buffer1_0_address0,
        i_ce0 => buffer_U0_buffer1_0_ce0,
        i_we0 => buffer_U0_buffer1_0_we0,
        i_d0 => buffer_U0_buffer1_0_d0,
        i_q0 => buffer1_i_q0,
        i_address1 => ap_const_lv13_0,
        i_ce1 => ap_const_logic_0,
        i_q1 => buffer1_i_q1,
        t_address0 => write_U0_buffer1_0_address0,
        t_ce0 => write_U0_buffer1_0_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv16_0,
        t_q0 => buffer1_t_q0,
        t_address1 => write_U0_buffer1_0_address1,
        t_ce1 => write_U0_buffer1_0_ce1,
        t_q1 => buffer1_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => buffer1_i_full_n,
        i_write => ap_channel_done_buffer1,
        t_empty_n => buffer1_t_empty_n,
        t_read => write_U0_ap_ready);

    buffer1_1_U : component IFFT_AP_dataflow_in_loop_VITIS_LOOP_332_1_buffer1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 8192,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => buffer_U0_buffer1_1_address0,
        i_ce0 => buffer_U0_buffer1_1_ce0,
        i_we0 => buffer_U0_buffer1_1_we0,
        i_d0 => buffer_U0_buffer1_1_d0,
        i_q0 => buffer1_1_i_q0,
        i_address1 => ap_const_lv13_0,
        i_ce1 => ap_const_logic_0,
        i_q1 => buffer1_1_i_q1,
        t_address0 => write_U0_buffer1_1_address0,
        t_ce0 => write_U0_buffer1_1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv16_0,
        t_q0 => buffer1_1_t_q0,
        t_address1 => write_U0_buffer1_1_address1,
        t_ce1 => write_U0_buffer1_1_ce1,
        t_q1 => buffer1_1_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => buffer1_1_i_full_n,
        i_write => ap_channel_done_buffer1_1,
        t_empty_n => buffer1_1_t_empty_n,
        t_read => write_U0_ap_ready);

    entry_proc_U0 : component IFFT_AP_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => entry_proc_U0_ap_start,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        out1 => out1,
        out1_c_din => entry_proc_U0_out1_c_din,
        out1_c_num_data_valid => out1_c_num_data_valid,
        out1_c_fifo_cap => out1_c_fifo_cap,
        out1_c_full_n => out1_c_full_n,
        out1_c_write => entry_proc_U0_out1_c_write,
        out2 => out2,
        out2_c_din => entry_proc_U0_out2_c_din,
        out2_c_num_data_valid => out2_c_num_data_valid,
        out2_c_fifo_cap => out2_c_fifo_cap,
        out2_c_full_n => out2_c_full_n,
        out2_c_write => entry_proc_U0_out2_c_write,
        layer2_reg_ifs => layer2_reg_ifs,
        layer2_reg_ifs_c_din => entry_proc_U0_layer2_reg_ifs_c_din,
        layer2_reg_ifs_c_num_data_valid => layer2_reg_ifs_c_num_data_valid,
        layer2_reg_ifs_c_fifo_cap => layer2_reg_ifs_c_fifo_cap,
        layer2_reg_ifs_c_full_n => layer2_reg_ifs_c_full_n,
        layer2_reg_ifs_c_write => entry_proc_U0_layer2_reg_ifs_c_write);

    buffer_U0 : component IFFT_AP_buffer_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => buffer_U0_ap_start,
        ap_done => buffer_U0_ap_done,
        ap_continue => buffer_U0_ap_continue,
        ap_idle => buffer_U0_ap_idle,
        ap_ready => buffer_U0_ap_ready,
        out_st_dout => out_st_dout,
        out_st_num_data_valid => ap_const_lv2_0,
        out_st_fifo_cap => ap_const_lv2_0,
        out_st_empty_n => out_st_empty_n,
        out_st_read => buffer_U0_out_st_read,
        buffer1_0_address0 => buffer_U0_buffer1_0_address0,
        buffer1_0_ce0 => buffer_U0_buffer1_0_ce0,
        buffer1_0_we0 => buffer_U0_buffer1_0_we0,
        buffer1_0_d0 => buffer_U0_buffer1_0_d0,
        buffer1_1_address0 => buffer_U0_buffer1_1_address0,
        buffer1_1_ce0 => buffer_U0_buffer1_1_ce0,
        buffer1_1_we0 => buffer_U0_buffer1_1_we0,
        buffer1_1_d0 => buffer_U0_buffer1_1_d0,
        ctrl1_reg_3 => ctrl1_reg_ls,
        ctrl2_reg_0 => ctrl2_reg_pn,
        actp_reg_3 => actp_reg_pool_size,
        ap_return_0 => buffer_U0_ap_return_0,
        ap_return_1 => buffer_U0_ap_return_1);

    write_U0 : component IFFT_AP_write_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => write_U0_ap_start,
        ap_done => write_U0_ap_done,
        ap_continue => write_U0_ap_continue,
        ap_idle => write_U0_ap_idle,
        ap_ready => write_U0_ap_ready,
        buffer1_0_address0 => write_U0_buffer1_0_address0,
        buffer1_0_ce0 => write_U0_buffer1_0_ce0,
        buffer1_0_q0 => buffer1_t_q0,
        buffer1_0_address1 => write_U0_buffer1_0_address1,
        buffer1_0_ce1 => write_U0_buffer1_0_ce1,
        buffer1_0_q1 => buffer1_t_q1,
        buffer1_1_address0 => write_U0_buffer1_1_address0,
        buffer1_1_ce0 => write_U0_buffer1_1_ce0,
        buffer1_1_q0 => buffer1_1_t_q0,
        buffer1_1_address1 => write_U0_buffer1_1_address1,
        buffer1_1_ce1 => write_U0_buffer1_1_ce1,
        buffer1_1_q1 => buffer1_1_t_q1,
        m_axi_gmem_AWVALID => write_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR => write_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => write_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => write_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => write_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => write_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => write_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => write_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => write_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => write_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => write_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => write_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => write_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => m_axi_gmem_WREADY,
        m_axi_gmem_WDATA => write_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => write_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => write_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => write_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => write_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => write_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => write_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => write_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => write_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => write_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => write_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => write_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => write_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => write_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => write_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => write_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => write_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => write_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv128_lc_1,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => m_axi_gmem_BVALID,
        m_axi_gmem_BREADY => write_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => m_axi_gmem_BRESP,
        m_axi_gmem_BID => m_axi_gmem_BID,
        m_axi_gmem_BUSER => m_axi_gmem_BUSER,
        out1_dout => out1_c_dout,
        out1_num_data_valid => out1_c_num_data_valid,
        out1_fifo_cap => out1_c_fifo_cap,
        out1_empty_n => out1_c_empty_n,
        out1_read => write_U0_out1_read,
        out2_dout => out2_c_dout,
        out2_num_data_valid => out2_c_num_data_valid,
        out2_fifo_cap => out2_c_fifo_cap,
        out2_empty_n => out2_c_empty_n,
        out2_read => write_U0_out2_read,
        p_read => ctrl1_reg_ls_c_channel_dout,
        layer2_reg_2_dout => layer2_reg_ifs_c_dout,
        layer2_reg_2_num_data_valid => layer2_reg_ifs_c_num_data_valid,
        layer2_reg_2_fifo_cap => layer2_reg_ifs_c_fifo_cap,
        layer2_reg_2_empty_n => layer2_reg_ifs_c_empty_n,
        layer2_reg_2_read => write_U0_layer2_reg_2_read,
        p_read1 => actp_reg_pool_size_c_channel_dout);

    out1_c_U : component IFFT_AP_fifo_w64_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_out1_c_din,
        if_full_n => out1_c_full_n,
        if_write => entry_proc_U0_out1_c_write,
        if_dout => out1_c_dout,
        if_num_data_valid => out1_c_num_data_valid,
        if_fifo_cap => out1_c_fifo_cap,
        if_empty_n => out1_c_empty_n,
        if_read => write_U0_out1_read);

    out2_c_U : component IFFT_AP_fifo_w64_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_out2_c_din,
        if_full_n => out2_c_full_n,
        if_write => entry_proc_U0_out2_c_write,
        if_dout => out2_c_dout,
        if_num_data_valid => out2_c_num_data_valid,
        if_fifo_cap => out2_c_fifo_cap,
        if_empty_n => out2_c_empty_n,
        if_read => write_U0_out2_read);

    layer2_reg_ifs_c_U : component IFFT_AP_fifo_w16_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_layer2_reg_ifs_c_din,
        if_full_n => layer2_reg_ifs_c_full_n,
        if_write => entry_proc_U0_layer2_reg_ifs_c_write,
        if_dout => layer2_reg_ifs_c_dout,
        if_num_data_valid => layer2_reg_ifs_c_num_data_valid,
        if_fifo_cap => layer2_reg_ifs_c_fifo_cap,
        if_empty_n => layer2_reg_ifs_c_empty_n,
        if_read => write_U0_layer2_reg_2_read);

    ctrl1_reg_ls_c_channel_U : component IFFT_AP_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => buffer_U0_ap_return_0,
        if_full_n => ctrl1_reg_ls_c_channel_full_n,
        if_write => ap_channel_done_ctrl1_reg_ls_c_channel,
        if_dout => ctrl1_reg_ls_c_channel_dout,
        if_num_data_valid => ctrl1_reg_ls_c_channel_num_data_valid,
        if_fifo_cap => ctrl1_reg_ls_c_channel_fifo_cap,
        if_empty_n => ctrl1_reg_ls_c_channel_empty_n,
        if_read => write_U0_ap_ready);

    actp_reg_pool_size_c_channel_U : component IFFT_AP_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => buffer_U0_ap_return_1,
        if_full_n => actp_reg_pool_size_c_channel_full_n,
        if_write => ap_channel_done_actp_reg_pool_size_c_channel,
        if_dout => actp_reg_pool_size_c_channel_dout,
        if_num_data_valid => actp_reg_pool_size_c_channel_num_data_valid,
        if_fifo_cap => actp_reg_pool_size_c_channel_fifo_cap,
        if_empty_n => actp_reg_pool_size_c_channel_empty_n,
        if_read => write_U0_ap_ready);





    ap_sync_reg_buffer_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_buffer_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_buffer_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_buffer_U0_ap_ready <= ap_sync_buffer_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_actp_reg_pool_size_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_actp_reg_pool_size_c_channel <= ap_const_logic_0;
            else
                if (((buffer_U0_ap_done and buffer_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_actp_reg_pool_size_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_actp_reg_pool_size_c_channel <= ap_sync_channel_write_actp_reg_pool_size_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_buffer1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_buffer1 <= ap_const_logic_0;
            else
                if (((buffer_U0_ap_done and buffer_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_buffer1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_buffer1 <= ap_sync_channel_write_buffer1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_buffer1_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_buffer1_1 <= ap_const_logic_0;
            else
                if (((buffer_U0_ap_done and buffer_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_buffer1_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_buffer1_1 <= ap_sync_channel_write_buffer1_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_ctrl1_reg_ls_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ctrl1_reg_ls_c_channel <= ap_const_logic_0;
            else
                if (((buffer_U0_ap_done and buffer_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ctrl1_reg_ls_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ctrl1_reg_ls_c_channel <= ap_sync_channel_write_ctrl1_reg_ls_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_actp_reg_pool_size_c_channel <= ((ap_sync_reg_channel_write_actp_reg_pool_size_c_channel xor ap_const_logic_1) and buffer_U0_ap_done);
    ap_channel_done_buffer1 <= ((ap_sync_reg_channel_write_buffer1 xor ap_const_logic_1) and buffer_U0_ap_done);
    ap_channel_done_buffer1_1 <= ((ap_sync_reg_channel_write_buffer1_1 xor ap_const_logic_1) and buffer_U0_ap_done);
    ap_channel_done_ctrl1_reg_ls_c_channel <= ((ap_sync_reg_channel_write_ctrl1_reg_ls_c_channel xor ap_const_logic_1) and buffer_U0_ap_done);
    ap_done <= write_U0_ap_done;
    ap_idle <= (write_U0_ap_idle and (ctrl1_reg_ls_c_channel_empty_n xor ap_const_logic_1) and (buffer1_1_t_empty_n xor ap_const_logic_1) and (buffer1_t_empty_n xor ap_const_logic_1) and (ap_const_logic_1 xor actp_reg_pool_size_c_channel_empty_n) and entry_proc_U0_ap_idle and buffer_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_buffer_U0_ap_ready <= (buffer_U0_ap_ready or ap_sync_reg_buffer_U0_ap_ready);
    ap_sync_channel_write_actp_reg_pool_size_c_channel <= ((ap_channel_done_actp_reg_pool_size_c_channel and actp_reg_pool_size_c_channel_full_n) or ap_sync_reg_channel_write_actp_reg_pool_size_c_channel);
    ap_sync_channel_write_buffer1 <= ((buffer_U0_buffer1_0_full_n and ap_channel_done_buffer1) or ap_sync_reg_channel_write_buffer1);
    ap_sync_channel_write_buffer1_1 <= ((buffer_U0_buffer1_1_full_n and ap_channel_done_buffer1_1) or ap_sync_reg_channel_write_buffer1_1);
    ap_sync_channel_write_ctrl1_reg_ls_c_channel <= ((ctrl1_reg_ls_c_channel_full_n and ap_channel_done_ctrl1_reg_ls_c_channel) or ap_sync_reg_channel_write_ctrl1_reg_ls_c_channel);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_ready <= (ap_sync_entry_proc_U0_ap_ready and ap_sync_buffer_U0_ap_ready);
    buffer_U0_ap_continue <= (ap_sync_channel_write_ctrl1_reg_ls_c_channel and ap_sync_channel_write_buffer1_1 and ap_sync_channel_write_buffer1 and ap_sync_channel_write_actp_reg_pool_size_c_channel);
    buffer_U0_ap_start <= ((ap_sync_reg_buffer_U0_ap_ready xor ap_const_logic_1) and ap_start);
    buffer_U0_buffer1_0_full_n <= buffer1_i_full_n;
    buffer_U0_buffer1_1_full_n <= buffer1_1_i_full_n;
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;
    m_axi_gmem_AWADDR <= write_U0_m_axi_gmem_AWADDR;
    m_axi_gmem_AWBURST <= write_U0_m_axi_gmem_AWBURST;
    m_axi_gmem_AWCACHE <= write_U0_m_axi_gmem_AWCACHE;
    m_axi_gmem_AWID <= write_U0_m_axi_gmem_AWID;
    m_axi_gmem_AWLEN <= write_U0_m_axi_gmem_AWLEN;
    m_axi_gmem_AWLOCK <= write_U0_m_axi_gmem_AWLOCK;
    m_axi_gmem_AWPROT <= write_U0_m_axi_gmem_AWPROT;
    m_axi_gmem_AWQOS <= write_U0_m_axi_gmem_AWQOS;
    m_axi_gmem_AWREGION <= write_U0_m_axi_gmem_AWREGION;
    m_axi_gmem_AWSIZE <= write_U0_m_axi_gmem_AWSIZE;
    m_axi_gmem_AWUSER <= write_U0_m_axi_gmem_AWUSER;
    m_axi_gmem_AWVALID <= write_U0_m_axi_gmem_AWVALID;
    m_axi_gmem_BREADY <= write_U0_m_axi_gmem_BREADY;
    m_axi_gmem_RREADY <= ap_const_logic_0;
    m_axi_gmem_WDATA <= write_U0_m_axi_gmem_WDATA;
    m_axi_gmem_WID <= write_U0_m_axi_gmem_WID;
    m_axi_gmem_WLAST <= write_U0_m_axi_gmem_WLAST;
    m_axi_gmem_WSTRB <= write_U0_m_axi_gmem_WSTRB;
    m_axi_gmem_WUSER <= write_U0_m_axi_gmem_WUSER;
    m_axi_gmem_WVALID <= write_U0_m_axi_gmem_WVALID;
    out_st_read <= buffer_U0_out_st_read;
    write_U0_ap_continue <= ap_continue;
    write_U0_ap_start <= (ctrl1_reg_ls_c_channel_empty_n and buffer1_t_empty_n and buffer1_1_t_empty_n and actp_reg_pool_size_c_channel_empty_n);
end behav;
