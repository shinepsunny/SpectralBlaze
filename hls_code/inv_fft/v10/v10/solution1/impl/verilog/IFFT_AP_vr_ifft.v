// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module IFFT_AP_vr_ifft (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        in_r,
        out_st_din,
        out_st_num_data_valid,
        out_st_fifo_cap,
        out_st_full_n,
        out_st_write,
        ctrl1_regp,
        ctrl2_regp,
        layer1_regp,
        actp_regp
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [127:0] m_axi_gmem_WDATA;
output  [15:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [127:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] in_r;
output  [63:0] out_st_din;
input  [1:0] out_st_num_data_valid;
input  [1:0] out_st_fifo_cap;
input   out_st_full_n;
output   out_st_write;
input  [31:0] ctrl1_regp;
input  [31:0] ctrl2_regp;
input  [31:0] layer1_regp;
input  [31:0] actp_regp;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg out_st_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state4;
wire  signed [31:0] grp_fu_155_p2;
reg   [31:0] mul_ln208_reg_177;
wire    grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWVALID;
wire   [63:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWADDR;
wire   [0:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWID;
wire   [31:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWLEN;
wire   [2:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWSIZE;
wire   [1:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWBURST;
wire   [1:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWLOCK;
wire   [3:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWCACHE;
wire   [2:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWPROT;
wire   [3:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWQOS;
wire   [3:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWREGION;
wire   [0:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWUSER;
wire    grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WVALID;
wire   [127:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WDATA;
wire   [15:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WSTRB;
wire    grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WLAST;
wire   [0:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WID;
wire   [0:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WUSER;
wire    grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARVALID;
wire   [63:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARADDR;
wire   [0:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARID;
wire   [31:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARLEN;
wire   [2:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARSIZE;
wire   [1:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARBURST;
wire   [1:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARLOCK;
wire   [3:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARCACHE;
wire   [2:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARPROT;
wire   [3:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARQOS;
wire   [3:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARREGION;
wire   [0:0] grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARUSER;
wire    grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_RREADY;
wire    grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_BREADY;
wire   [63:0] grp_dataflow_parent_loop_proc_fu_86_out_st_din;
wire    grp_dataflow_parent_loop_proc_fu_86_out_st_write;
wire    grp_dataflow_parent_loop_proc_fu_86_ap_start;
wire    grp_dataflow_parent_loop_proc_fu_86_ap_done;
wire    grp_dataflow_parent_loop_proc_fu_86_ap_ready;
wire    grp_dataflow_parent_loop_proc_fu_86_ap_idle;
reg    grp_dataflow_parent_loop_proc_fu_86_ap_continue;
reg    grp_dataflow_parent_loop_proc_fu_86_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_sync_grp_dataflow_parent_loop_proc_fu_86_ap_ready;
wire    ap_sync_grp_dataflow_parent_loop_proc_fu_86_ap_done;
reg    ap_block_state5_on_subcall_done;
reg    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_ready;
reg    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_done;
reg    ap_block_state1;
wire   [7:0] empty_fu_123_p1;
wire   [7:0] conv3_i_fu_131_p0;
wire   [15:0] ctrl2_regp_load_cast_cast_fu_127_p1;
wire   [7:0] conv3_i_fu_131_p1;
wire   [15:0] conv3_i_fu_131_p2;
wire   [15:0] tmp_fu_141_p4;
wire   [15:0] grp_fu_155_p0;
wire   [15:0] grp_fu_155_p1;
reg    grp_fu_155_ce;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire   [31:0] grp_fu_155_p00;
wire   [31:0] grp_fu_155_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 grp_dataflow_parent_loop_proc_fu_86_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_ready = 1'b0;
#0 ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_done = 1'b0;
end

IFFT_AP_dataflow_parent_loop_proc grp_dataflow_parent_loop_proc_fu_86(
    .mul_ln208(mul_ln208_reg_177),
    .m_axi_gmem_AWVALID(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(1'b0),
    .m_axi_gmem_AWADDR(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(1'b0),
    .m_axi_gmem_WDATA(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(m_axi_gmem_ARREADY),
    .m_axi_gmem_ARADDR(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(m_axi_gmem_RVALID),
    .m_axi_gmem_RREADY(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(m_axi_gmem_RDATA),
    .m_axi_gmem_RLAST(m_axi_gmem_RLAST),
    .m_axi_gmem_RID(m_axi_gmem_RID),
    .m_axi_gmem_RFIFONUM(m_axi_gmem_RFIFONUM),
    .m_axi_gmem_RUSER(m_axi_gmem_RUSER),
    .m_axi_gmem_RRESP(m_axi_gmem_RRESP),
    .m_axi_gmem_BVALID(1'b0),
    .m_axi_gmem_BREADY(grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(2'd0),
    .m_axi_gmem_BID(1'd0),
    .m_axi_gmem_BUSER(1'd0),
    .in_r(in_r),
    .ctrl1_regp(ctrl1_regp),
    .actp_regp(actp_regp),
    .out_st_din(grp_dataflow_parent_loop_proc_fu_86_out_st_din),
    .out_st_full_n(out_st_full_n),
    .out_st_write(grp_dataflow_parent_loop_proc_fu_86_out_st_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .in_r_ap_vld(1'b1),
    .ctrl1_regp_ap_vld(1'b1),
    .actp_regp_ap_vld(1'b1),
    .ap_start(grp_dataflow_parent_loop_proc_fu_86_ap_start),
    .ap_done(grp_dataflow_parent_loop_proc_fu_86_ap_done),
    .ap_ready(grp_dataflow_parent_loop_proc_fu_86_ap_ready),
    .ap_idle(grp_dataflow_parent_loop_proc_fu_86_ap_idle),
    .ap_continue(grp_dataflow_parent_loop_proc_fu_86_ap_continue)
);

IFFT_AP_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U352(
    .din0(conv3_i_fu_131_p0),
    .din1(conv3_i_fu_131_p1),
    .dout(conv3_i_fu_131_p2)
);

IFFT_AP_mul_mul_16ns_16ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16ns_16ns_32_4_1_U353(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_155_p0),
    .din1(grp_fu_155_p1),
    .ce(grp_fu_155_ce),
    .dout(grp_fu_155_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_done <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_done <= 1'b0;
        end else if ((grp_dataflow_parent_loop_proc_fu_86_ap_done == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_ready <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_ready <= 1'b0;
        end else if ((grp_dataflow_parent_loop_proc_fu_86_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dataflow_parent_loop_proc_fu_86_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state5) & (ap_sync_grp_dataflow_parent_loop_proc_fu_86_ap_ready == 1'b0)))) begin
            grp_dataflow_parent_loop_proc_fu_86_ap_start_reg <= 1'b1;
        end else if ((grp_dataflow_parent_loop_proc_fu_86_ap_ready == 1'b1)) begin
            grp_dataflow_parent_loop_proc_fu_86_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_ln208_reg_177 <= grp_fu_155_p2;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state5_on_subcall_done)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
        grp_dataflow_parent_loop_proc_fu_86_ap_continue = 1'b1;
    end else begin
        grp_dataflow_parent_loop_proc_fu_86_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & ((ap_done_reg == 1'b1) | (ap_start == 1'b0))))) begin
        grp_fu_155_ce = 1'b0;
    end else begin
        grp_fu_155_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_ARVALID = grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARVALID;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_RREADY = grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_RREADY;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_st_write = grp_dataflow_parent_loop_proc_fu_86_out_st_write;
    end else begin
        out_st_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state5_on_subcall_done = ((ap_sync_grp_dataflow_parent_loop_proc_fu_86_ap_ready & ap_sync_grp_dataflow_parent_loop_proc_fu_86_ap_done) == 1'b0);
end

assign ap_sync_grp_dataflow_parent_loop_proc_fu_86_ap_done = (grp_dataflow_parent_loop_proc_fu_86_ap_done | ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_done);

assign ap_sync_grp_dataflow_parent_loop_proc_fu_86_ap_ready = (grp_dataflow_parent_loop_proc_fu_86_ap_ready | ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_ready);

assign conv3_i_fu_131_p0 = ctrl2_regp_load_cast_cast_fu_127_p1;

assign conv3_i_fu_131_p1 = ctrl2_regp_load_cast_cast_fu_127_p1;

assign ctrl2_regp_load_cast_cast_fu_127_p1 = empty_fu_123_p1;

assign empty_fu_123_p1 = ctrl2_regp[7:0];

assign grp_dataflow_parent_loop_proc_fu_86_ap_start = grp_dataflow_parent_loop_proc_fu_86_ap_start_reg;

assign grp_fu_155_p0 = grp_fu_155_p00;

assign grp_fu_155_p00 = tmp_fu_141_p4;

assign grp_fu_155_p1 = grp_fu_155_p10;

assign grp_fu_155_p10 = conv3_i_fu_131_p2;

assign m_axi_gmem_ARADDR = grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARADDR;

assign m_axi_gmem_ARBURST = grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARBURST;

assign m_axi_gmem_ARCACHE = grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARCACHE;

assign m_axi_gmem_ARID = grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARID;

assign m_axi_gmem_ARLEN = grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARLEN;

assign m_axi_gmem_ARLOCK = grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARLOCK;

assign m_axi_gmem_ARPROT = grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARPROT;

assign m_axi_gmem_ARQOS = grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARQOS;

assign m_axi_gmem_ARREGION = grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARREGION;

assign m_axi_gmem_ARSIZE = grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARSIZE;

assign m_axi_gmem_ARUSER = grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARUSER;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 128'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 16'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign out_st_din = grp_dataflow_parent_loop_proc_fu_86_out_st_din;

assign tmp_fu_141_p4 = {{layer1_regp[31:16]}};

endmodule //IFFT_AP_vr_ifft
