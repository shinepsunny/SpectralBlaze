// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module IFFT_AP_pool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        I_0_0_address0,
        I_0_0_ce0,
        I_0_0_q0,
        I_0_0_address1,
        I_0_0_ce1,
        I_0_0_q1,
        I_0_1_address0,
        I_0_1_ce0,
        I_0_1_q0,
        I_0_1_address1,
        I_0_1_ce1,
        I_0_1_q1,
        I_1_0_address0,
        I_1_0_ce0,
        I_1_0_q0,
        I_1_0_address1,
        I_1_0_ce1,
        I_1_0_q1,
        I_1_1_address0,
        I_1_1_ce0,
        I_1_1_q0,
        I_1_1_address1,
        I_1_1_ce1,
        I_1_1_q1,
        O_address0,
        O_ce0,
        O_we0,
        O_d0,
        p_read,
        actp_regp_dout,
        actp_regp_num_data_valid,
        actp_regp_fifo_cap,
        actp_regp_empty_n,
        actp_regp_read,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [9:0] I_0_0_address0;
output   I_0_0_ce0;
input  [31:0] I_0_0_q0;
output  [9:0] I_0_0_address1;
output   I_0_0_ce1;
input  [31:0] I_0_0_q1;
output  [9:0] I_0_1_address0;
output   I_0_1_ce0;
input  [31:0] I_0_1_q0;
output  [9:0] I_0_1_address1;
output   I_0_1_ce1;
input  [31:0] I_0_1_q1;
output  [9:0] I_1_0_address0;
output   I_1_0_ce0;
input  [31:0] I_1_0_q0;
output  [9:0] I_1_0_address1;
output   I_1_0_ce1;
input  [31:0] I_1_0_q1;
output  [9:0] I_1_1_address0;
output   I_1_1_ce0;
input  [31:0] I_1_1_q0;
output  [9:0] I_1_1_address1;
output   I_1_1_ce1;
input  [31:0] I_1_1_q1;
output  [11:0] O_address0;
output   O_ce0;
output   O_we0;
output  [31:0] O_d0;
input  [31:0] p_read;
input  [31:0] actp_regp_dout;
input  [4:0] actp_regp_num_data_valid;
input  [4:0] actp_regp_fifo_cap;
input   actp_regp_empty_n;
output   actp_regp_read;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg actp_regp_read;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    actp_regp_blk_n;
wire    ap_CS_fsm_state14;
wire   [7:0] y_3_fu_143_p4;
reg   [7:0] y_3_reg_374;
wire   [7:0] empty_fu_157_p1;
reg   [7:0] empty_reg_380;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_fu_133_p1;
reg   [31:0] conv_i_reg_393;
wire    ap_CS_fsm_state8;
wire   [15:0] grp_fu_136_p1;
reg   [15:0] conv2_i_reg_398;
wire    ap_CS_fsm_state10;
reg   [31:0] actp_regp_read_reg_404;
wire   [15:0] grp_fu_139_p2;
reg   [15:0] mul_reg_409;
wire   [63:0] zext_ln175_fu_191_p1;
reg   [63:0] zext_ln175_reg_414;
wire   [0:0] or_ln112_fu_240_p2;
reg   [0:0] or_ln112_reg_419;
wire   [31:0] add_ln175_1_fu_246_p2;
reg   [31:0] add_ln175_1_reg_424;
reg   [31:0] x1_load_reg_432;
wire    ap_CS_fsm_state15;
wire   [0:0] icmp_ln1027_fu_255_p2;
wire   [0:0] empty_69_fu_268_p1;
reg   [0:0] empty_69_reg_437;
wire   [9:0] tmp_6_fu_283_p3;
reg   [9:0] tmp_6_reg_442;
wire   [9:0] tmp_8_fu_308_p3;
reg   [9:0] tmp_8_reg_447;
wire   [0:0] empty_71_fu_317_p2;
reg   [0:0] empty_71_reg_452;
wire    grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_start;
wire    grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_done;
wire    grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_idle;
wire    grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_ready;
wire   [11:0] grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_address0;
wire    grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_ce0;
wire    grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_we0;
wire   [31:0] grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_d0;
wire   [9:0] grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_address0;
wire    grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_ce0;
wire   [9:0] grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_address1;
wire    grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_ce1;
wire   [9:0] grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_address0;
wire    grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_ce0;
wire   [9:0] grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_address1;
wire    grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_ce1;
wire   [9:0] grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_address0;
wire    grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_ce0;
wire   [9:0] grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_address1;
wire    grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_ce1;
wire   [9:0] grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_address0;
wire    grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_ce0;
wire   [9:0] grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_address1;
wire    grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_ce1;
reg    grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_start_reg;
wire    ap_CS_fsm_state16;
reg   [31:0] x1_fu_90;
wire   [31:0] add_ln175_2_fu_324_p2;
reg    ap_block_state1;
reg   [63:0] y_fu_94;
wire   [63:0] add_ln175_3_fu_329_p2;
wire   [63:0] zext_ln541_fu_153_p1;
wire   [31:0] grp_fu_133_p0;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
wire   [7:0] empty_68_fu_181_p1;
wire   [8:0] zext_ln1788_fu_178_p1;
wire   [8:0] add_ln175_fu_194_p2;
wire   [8:0] zext_ln171_fu_175_p1;
wire   [8:0] sub_ln175_fu_200_p2;
wire   [7:0] trunc_ln_fu_206_p4;
wire  signed [30:0] sext_ln175_fu_216_p1;
wire   [7:0] trunc_ln5_fu_224_p4;
wire   [0:0] tobool_i_fu_185_p2;
wire   [0:0] icmp_ln112_fu_234_p2;
wire   [31:0] zext_ln175_1_fu_220_p1;
wire   [4:0] tmp_5_fu_273_p4;
wire   [5:0] trunc_ln1027_fu_264_p1;
wire   [5:0] empty_70_fu_292_p2;
wire   [4:0] tmp_7_fu_298_p4;
reg    grp_fu_139_ce;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [15:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 16'd1;
#0 grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_start_reg = 1'b0;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
end

IFFT_AP_pool_Pipeline_VITIS_LOOP_178_2 grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_start),
    .ap_done(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_done),
    .ap_idle(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_idle),
    .ap_ready(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_ready),
    .zext_ln541(y_3_reg_374),
    .sext_ln178(x1_load_reg_432),
    .O_address0(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_address0),
    .O_ce0(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_ce0),
    .O_we0(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_we0),
    .O_d0(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_d0),
    .zext_ln175(empty_reg_380),
    .zext_ln151_2(tmp_6_reg_442),
    .I_0_0_address0(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_address0),
    .I_0_0_ce0(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_ce0),
    .I_0_0_q0(I_0_0_q0),
    .I_0_0_address1(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_address1),
    .I_0_0_ce1(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_ce1),
    .I_0_0_q1(I_0_0_q1),
    .zext_ln151_3(tmp_8_reg_447),
    .I_0_1_address0(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_address0),
    .I_0_1_ce0(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_ce0),
    .I_0_1_q0(I_0_1_q0),
    .I_0_1_address1(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_address1),
    .I_0_1_ce1(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_ce1),
    .I_0_1_q1(I_0_1_q1),
    .I_1_0_address0(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_address0),
    .I_1_0_ce0(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_ce0),
    .I_1_0_q0(I_1_0_q0),
    .I_1_0_address1(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_address1),
    .I_1_0_ce1(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_ce1),
    .I_1_0_q1(I_1_0_q1),
    .I_1_1_address0(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_address0),
    .I_1_1_ce0(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_ce0),
    .I_1_1_q0(I_1_1_q0),
    .I_1_1_address1(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_address1),
    .I_1_1_ce1(grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_ce1),
    .I_1_1_q1(I_1_1_q1),
    .y_cast(empty_69_reg_437),
    .or_ln112(or_ln112_reg_419),
    .empty(empty_71_reg_452),
    .mul(mul_reg_409)
);

IFFT_AP_uitofp_32ns_32_7_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
uitofp_32ns_32_7_no_dsp_1_U300(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_133_p0),
    .ce(1'b1),
    .dout(grp_fu_133_p1)
);

IFFT_AP_sptohp_32ns_16_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 16 ))
sptohp_32ns_16_2_no_dsp_1_U301(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_i_reg_393),
    .ce(1'b1),
    .dout(grp_fu_136_p1)
);

IFFT_AP_hmul_16ns_16ns_16_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
hmul_16ns_16ns_16_4_max_dsp_1_U302(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv2_i_reg_398),
    .din1(conv2_i_reg_398),
    .ce(grp_fu_139_ce),
    .dout(grp_fu_139_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln1027_fu_255_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln1027_fu_255_p2 == 1'd0))) begin
            ap_return_0_preg <= p_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln1027_fu_255_p2 == 1'd0))) begin
            ap_return_1_preg <= actp_regp_read_reg_404;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln1027_fu_255_p2 == 1'd1))) begin
            grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_start_reg <= 1'b1;
        end else if ((grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_ready == 1'b1)) begin
            grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        x1_fu_90 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln1027_fu_255_p2 == 1'd1))) begin
        x1_fu_90 <= add_ln175_2_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_fu_94 <= zext_ln541_fu_153_p1;
    end else if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln1027_fu_255_p2 == 1'd1))) begin
        y_fu_94 <= add_ln175_3_fu_329_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        actp_regp_read_reg_404 <= actp_regp_dout;
        add_ln175_1_reg_424 <= add_ln175_1_fu_246_p2;
        mul_reg_409 <= grp_fu_139_p2;
        or_ln112_reg_419 <= or_ln112_fu_240_p2;
        zext_ln175_reg_414[7 : 0] <= zext_ln175_fu_191_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        conv2_i_reg_398 <= grp_fu_136_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_i_reg_393 <= grp_fu_133_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln1027_fu_255_p2 == 1'd1))) begin
        empty_69_reg_437 <= empty_69_fu_268_p1;
        empty_71_reg_452 <= empty_71_fu_317_p2;
        tmp_6_reg_442[9 : 5] <= tmp_6_fu_283_p3[9 : 5];
        tmp_8_reg_447[9 : 5] <= tmp_8_fu_308_p3[9 : 5];
        x1_load_reg_432 <= x1_fu_90;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_reg_380 <= empty_fu_157_p1;
        y_3_reg_374 <= {{p_read[23:16]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        actp_regp_blk_n = actp_regp_empty_n;
    end else begin
        actp_regp_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'b1 == actp_regp_empty_n))) begin
        actp_regp_read = 1'b1;
    end else begin
        actp_regp_read = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((1'b0 == actp_regp_empty_n)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_done == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln1027_fu_255_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln1027_fu_255_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln1027_fu_255_p2 == 1'd0))) begin
        ap_return_0 = p_read;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln1027_fu_255_p2 == 1'd0))) begin
        ap_return_1 = actp_regp_read_reg_404;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == actp_regp_empty_n)))) begin
        grp_fu_139_ce = 1'b1;
    end else begin
        grp_fu_139_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (1'b1 == actp_regp_empty_n))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln1027_fu_255_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign I_0_0_address0 = grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_address0;

assign I_0_0_address1 = grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_address1;

assign I_0_0_ce0 = grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_ce0;

assign I_0_0_ce1 = grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_0_ce1;

assign I_0_1_address0 = grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_address0;

assign I_0_1_address1 = grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_address1;

assign I_0_1_ce0 = grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_ce0;

assign I_0_1_ce1 = grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_0_1_ce1;

assign I_1_0_address0 = grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_address0;

assign I_1_0_address1 = grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_address1;

assign I_1_0_ce0 = grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_ce0;

assign I_1_0_ce1 = grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_0_ce1;

assign I_1_1_address0 = grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_address0;

assign I_1_1_address1 = grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_address1;

assign I_1_1_ce0 = grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_ce0;

assign I_1_1_ce1 = grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_I_1_1_ce1;

assign O_address0 = grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_address0;

assign O_ce0 = grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_ce0;

assign O_d0 = grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_d0;

assign O_we0 = grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_O_we0;

assign add_ln175_1_fu_246_p2 = (zext_ln175_1_fu_220_p1 + 32'd1);

assign add_ln175_2_fu_324_p2 = (x1_fu_90 + add_ln175_1_reg_424);

assign add_ln175_3_fu_329_p2 = (y_fu_94 + 64'd2);

assign add_ln175_fu_194_p2 = ($signed(zext_ln1788_fu_178_p1) + $signed(9'd511));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign empty_68_fu_181_p1 = actp_regp_dout[7:0];

assign empty_69_fu_268_p1 = y_fu_94[0:0];

assign empty_70_fu_292_p2 = (trunc_ln1027_fu_264_p1 + 6'd1);

assign empty_71_fu_317_p2 = (empty_69_fu_268_p1 ^ 1'd1);

assign empty_fu_157_p1 = p_read[7:0];

assign grp_fu_133_p0 = empty_reg_380;

assign grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_start = grp_pool_Pipeline_VITIS_LOOP_178_2_fu_110_ap_start_reg;

assign icmp_ln1027_fu_255_p2 = ((y_fu_94 < zext_ln175_reg_414) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_234_p2 = ((trunc_ln5_fu_224_p4 != 8'd0) ? 1'b1 : 1'b0);

assign or_ln112_fu_240_p2 = (tobool_i_fu_185_p2 | icmp_ln112_fu_234_p2);

assign sext_ln175_fu_216_p1 = $signed(trunc_ln_fu_206_p4);

assign sub_ln175_fu_200_p2 = (add_ln175_fu_194_p2 - zext_ln171_fu_175_p1);

assign tmp_5_fu_273_p4 = {{y_fu_94[5:1]}};

assign tmp_6_fu_283_p3 = {{tmp_5_fu_273_p4}, {5'd0}};

assign tmp_7_fu_298_p4 = {{empty_70_fu_292_p2[5:1]}};

assign tmp_8_fu_308_p3 = {{tmp_7_fu_298_p4}, {5'd0}};

assign tobool_i_fu_185_p2 = ((empty_68_fu_181_p1 == 8'd0) ? 1'b1 : 1'b0);

assign trunc_ln1027_fu_264_p1 = y_fu_94[5:0];

assign trunc_ln5_fu_224_p4 = {{actp_regp_dout[15:8]}};

assign trunc_ln_fu_206_p4 = {{sub_ln175_fu_200_p2[8:1]}};

assign y_3_fu_143_p4 = {{p_read[23:16]}};

assign zext_ln171_fu_175_p1 = y_3_reg_374;

assign zext_ln175_1_fu_220_p1 = $unsigned(sext_ln175_fu_216_p1);

assign zext_ln175_fu_191_p1 = empty_reg_380;

assign zext_ln1788_fu_178_p1 = empty_reg_380;

assign zext_ln541_fu_153_p1 = y_3_fu_143_p4;

always @ (posedge ap_clk) begin
    zext_ln175_reg_414[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    tmp_6_reg_442[4:0] <= 5'b00000;
    tmp_8_reg_447[4:0] <= 5'b00000;
end

endmodule //IFFT_AP_pool
