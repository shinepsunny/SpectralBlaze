// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module IFFT_AP_collect_input_Pipeline_VITIS_LOOP_91_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_st_dout,
        in_st_num_data_valid,
        in_st_fifo_cap,
        in_st_empty_n,
        in_st_read,
        empty,
        zext_ln173_3,
        I_address0,
        I_ce0,
        I_we0,
        I_d0,
        I_address1,
        I_ce1,
        I_we1,
        I_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] in_st_dout;
input  [1:0] in_st_num_data_valid;
input  [1:0] in_st_fifo_cap;
input   in_st_empty_n;
output   in_st_read;
input  [10:0] empty;
input  [11:0] zext_ln173_3;
output  [11:0] I_address0;
output   I_ce0;
output   I_we0;
output  [31:0] I_d0;
output  [11:0] I_address1;
output   I_ce1;
output   I_we1;
output  [31:0] I_d1;

reg ap_idle;
reg in_st_read;
reg[11:0] I_address0;
reg I_ce0;
reg I_we0;
reg[31:0] I_d0;
reg[11:0] I_address1;
reg I_ce1;
reg I_we1;
reg[31:0] I_d1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln91_fu_176_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] icmp_ln91_reg_395;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_subdone;
reg    in_st_blk_n;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage0_11001;
wire   [11:0] trunc_ln173_fu_196_p1;
reg   [11:0] trunc_ln173_reg_399;
reg    ap_block_pp0_stage1_11001;
reg   [15:0] trunc_ln95_5_reg_405;
reg   [15:0] trunc_ln95_6_reg_410;
reg   [15:0] trunc_ln95_7_reg_415;
reg   [15:0] trunc_ln95_8_reg_420;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln173_fu_205_p1;
wire   [63:0] zext_ln173_1_fu_304_p1;
wire   [63:0] zext_ln173_2_fu_339_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln173_4_fu_361_p1;
reg   [12:0] y_fu_96;
wire   [12:0] add_ln91_fu_318_p2;
wire    ap_loop_init;
reg   [10:0] empty_86_fu_100;
wire   [10:0] add_ln1027_fu_182_p2;
reg   [10:0] ap_sig_allocacmp_p_load;
wire   [31:0] p_0_0_0_033_partset_fu_284_p3;
wire   [31:0] p_0_0_1_037_partset_fu_309_p3;
wire   [31:0] p_0_0_2_041_partset_fu_344_p3;
wire   [31:0] p_0_0_3_045_partset_fu_366_p3;
wire   [11:0] add_ln173_fu_200_p2;
wire   [15:0] trunc_ln95_fu_210_p1;
wire   [15:0] trunc_ln95_2_fu_214_p4;
wire   [11:0] or_ln98_fu_293_p2;
wire   [11:0] add_ln173_1_fu_299_p2;
wire   [15:0] trunc_ln95_3_fu_224_p4;
wire   [15:0] trunc_ln95_4_fu_234_p4;
wire   [11:0] or_ln100_fu_329_p2;
wire   [11:0] add_ln173_2_fu_334_p2;
wire   [11:0] or_ln102_fu_351_p2;
wire   [11:0] add_ln173_3_fu_356_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

IFFT_AP_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln91_fu_176_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            empty_86_fu_100 <= add_ln1027_fu_182_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            empty_86_fu_100 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        y_fu_96 <= 13'd0;
    end else if (((icmp_ln91_reg_395 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        y_fu_96 <= add_ln91_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln91_reg_395 <= icmp_ln91_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_reg_395 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        trunc_ln173_reg_399 <= trunc_ln173_fu_196_p1;
        trunc_ln95_5_reg_405 <= {{in_st_dout[79:64]}};
        trunc_ln95_6_reg_410 <= {{in_st_dout[95:80]}};
        trunc_ln95_7_reg_415 <= {{in_st_dout[111:96]}};
        trunc_ln95_8_reg_420 <= {{in_st_dout[127:112]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        I_address0 = zext_ln173_4_fu_361_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        I_address0 = zext_ln173_1_fu_304_p1;
    end else begin
        I_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        I_address1 = zext_ln173_2_fu_339_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        I_address1 = zext_ln173_fu_205_p1;
    end else begin
        I_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        I_ce0 = 1'b1;
    end else begin
        I_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        I_ce1 = 1'b1;
    end else begin
        I_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        I_d0 = p_0_0_3_045_partset_fu_366_p3;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        I_d0 = p_0_0_1_037_partset_fu_309_p3;
    end else begin
        I_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        I_d1 = p_0_0_2_041_partset_fu_344_p3;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        I_d1 = p_0_0_0_033_partset_fu_284_p3;
    end else begin
        I_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln91_reg_395 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        I_we0 = 1'b1;
    end else begin
        I_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln91_reg_395 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        I_we1 = 1'b1;
    end else begin
        I_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln91_fu_176_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_p_load = 11'd0;
    end else begin
        ap_sig_allocacmp_p_load = empty_86_fu_100;
    end
end

always @ (*) begin
    if (((icmp_ln91_reg_395 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        in_st_blk_n = in_st_empty_n;
    end else begin
        in_st_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln91_reg_395 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        in_st_read = 1'b1;
    end else begin
        in_st_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1027_fu_182_p2 = (ap_sig_allocacmp_p_load + 11'd1);

assign add_ln173_1_fu_299_p2 = (zext_ln173_3 + or_ln98_fu_293_p2);

assign add_ln173_2_fu_334_p2 = (zext_ln173_3 + or_ln100_fu_329_p2);

assign add_ln173_3_fu_356_p2 = (zext_ln173_3 + or_ln102_fu_351_p2);

assign add_ln173_fu_200_p2 = (zext_ln173_3 + trunc_ln173_fu_196_p1);

assign add_ln91_fu_318_p2 = (y_fu_96 + 13'd4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln91_reg_395 == 1'd0) & (in_st_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln91_reg_395 == 1'd0) & (in_st_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((icmp_ln91_reg_395 == 1'd0) & (in_st_empty_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln91_fu_176_p2 = ((ap_sig_allocacmp_p_load == empty) ? 1'b1 : 1'b0);

assign or_ln100_fu_329_p2 = (trunc_ln173_reg_399 | 12'd2);

assign or_ln102_fu_351_p2 = (trunc_ln173_reg_399 | 12'd3);

assign or_ln98_fu_293_p2 = (trunc_ln173_fu_196_p1 | 12'd1);

assign p_0_0_0_033_partset_fu_284_p3 = {{trunc_ln95_fu_210_p1}, {trunc_ln95_2_fu_214_p4}};

assign p_0_0_1_037_partset_fu_309_p3 = {{trunc_ln95_3_fu_224_p4}, {trunc_ln95_4_fu_234_p4}};

assign p_0_0_2_041_partset_fu_344_p3 = {{trunc_ln95_5_reg_405}, {trunc_ln95_6_reg_410}};

assign p_0_0_3_045_partset_fu_366_p3 = {{trunc_ln95_7_reg_415}, {trunc_ln95_8_reg_420}};

assign trunc_ln173_fu_196_p1 = y_fu_96[11:0];

assign trunc_ln95_2_fu_214_p4 = {{in_st_dout[31:16]}};

assign trunc_ln95_3_fu_224_p4 = {{in_st_dout[47:32]}};

assign trunc_ln95_4_fu_234_p4 = {{in_st_dout[63:48]}};

assign trunc_ln95_fu_210_p1 = in_st_dout[15:0];

assign zext_ln173_1_fu_304_p1 = add_ln173_1_fu_299_p2;

assign zext_ln173_2_fu_339_p1 = add_ln173_2_fu_334_p2;

assign zext_ln173_4_fu_361_p1 = add_ln173_3_fu_356_p2;

assign zext_ln173_fu_205_p1 = add_ln173_fu_200_p2;

endmodule //IFFT_AP_collect_input_Pipeline_VITIS_LOOP_91_2
