// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1 (
        ap_clk,
        ap_rst,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        in_r,
        ctrl1_regp,
        pn_2,
        actp_regp,
        out_st_din,
        out_st_full_n,
        out_st_write,
        actp_regp_ap_vld,
        ap_start,
        in_r_ap_vld,
        ctrl1_regp_ap_vld,
        pn_2_ap_vld,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_clk;
input   ap_rst;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [127:0] m_axi_gmem_WDATA;
output  [15:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [127:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] in_r;
input  [31:0] ctrl1_regp;
input  [31:0] pn_2;
input  [31:0] actp_regp;
output  [63:0] out_st_din;
input   out_st_full_n;
output   out_st_write;
input   actp_regp_ap_vld;
input   ap_start;
input   in_r_ap_vld;
input   ctrl1_regp_ap_vld;
input   pn_2_ap_vld;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire   [31:0] input_data2_i_q0;
wire   [31:0] input_data2_i_q1;
wire   [31:0] input_data2_t_q0;
wire   [31:0] input_data2_t_q1;
wire   [31:0] out_data_13_i_q0;
wire   [31:0] out_data_13_i_q1;
wire   [31:0] out_data_13_t_q0;
wire   [31:0] out_data_13_t_q1;
wire   [31:0] out_data_24_i_q0;
wire   [31:0] out_data_24_i_q1;
wire   [31:0] out_data_24_t_q0;
wire   [31:0] out_data_24_t_q1;
wire   [31:0] out_data_35_i_q0;
wire   [31:0] out_data_35_i_q1;
wire   [31:0] out_data_35_t_q0;
wire   [31:0] out_data_35_t_q1;
wire   [31:0] out_data_46_i_q0;
wire   [31:0] out_data_46_i_q1;
wire   [31:0] out_data_46_t_q0;
wire   [31:0] out_data_46_t_q1;
wire   [31:0] out_data_57_i_q0;
wire   [31:0] out_data_57_i_q1;
wire   [31:0] out_data_57_t_q0;
wire   [31:0] out_data_57_t_q1;
wire   [31:0] out_data_6_0_08_i_q0;
wire   [31:0] out_data_6_0_08_i_q1;
wire   [31:0] out_data_6_0_08_t_q0;
wire   [31:0] out_data_6_0_08_t_q1;
wire   [31:0] out_data_6_0_19_i_q0;
wire   [31:0] out_data_6_0_19_i_q1;
wire   [31:0] out_data_6_0_19_t_q0;
wire   [31:0] out_data_6_0_19_t_q1;
wire   [31:0] out_data_6_1_010_i_q0;
wire   [31:0] out_data_6_1_010_i_q1;
wire   [31:0] out_data_6_1_010_t_q0;
wire   [31:0] out_data_6_1_010_t_q1;
wire   [31:0] out_data_6_1_111_i_q0;
wire   [31:0] out_data_6_1_111_i_q1;
wire   [31:0] out_data_6_1_111_t_q0;
wire   [31:0] out_data_6_1_111_t_q1;
wire   [31:0] out_data_712_i_q0;
wire   [31:0] out_data_712_i_q1;
wire   [31:0] out_data_712_t_q0;
wire   [31:0] out_data_712_t_q1;
wire    entry_proc20_U0_ap_start;
wire    entry_proc20_U0_ap_done;
wire    entry_proc20_U0_ap_continue;
wire    entry_proc20_U0_ap_idle;
wire    entry_proc20_U0_ap_ready;
wire   [31:0] entry_proc20_U0_actp_regp_c9_din;
wire    entry_proc20_U0_actp_regp_c9_write;
wire    rd_data_U0_ap_start;
wire    rd_data_U0_ap_done;
wire    rd_data_U0_ap_continue;
wire    rd_data_U0_ap_idle;
wire    rd_data_U0_ap_ready;
wire    rd_data_U0_start_out;
wire    rd_data_U0_start_write;
wire    rd_data_U0_m_axi_gmem_AWVALID;
wire   [63:0] rd_data_U0_m_axi_gmem_AWADDR;
wire   [0:0] rd_data_U0_m_axi_gmem_AWID;
wire   [31:0] rd_data_U0_m_axi_gmem_AWLEN;
wire   [2:0] rd_data_U0_m_axi_gmem_AWSIZE;
wire   [1:0] rd_data_U0_m_axi_gmem_AWBURST;
wire   [1:0] rd_data_U0_m_axi_gmem_AWLOCK;
wire   [3:0] rd_data_U0_m_axi_gmem_AWCACHE;
wire   [2:0] rd_data_U0_m_axi_gmem_AWPROT;
wire   [3:0] rd_data_U0_m_axi_gmem_AWQOS;
wire   [3:0] rd_data_U0_m_axi_gmem_AWREGION;
wire   [0:0] rd_data_U0_m_axi_gmem_AWUSER;
wire    rd_data_U0_m_axi_gmem_WVALID;
wire   [127:0] rd_data_U0_m_axi_gmem_WDATA;
wire   [15:0] rd_data_U0_m_axi_gmem_WSTRB;
wire    rd_data_U0_m_axi_gmem_WLAST;
wire   [0:0] rd_data_U0_m_axi_gmem_WID;
wire   [0:0] rd_data_U0_m_axi_gmem_WUSER;
wire    rd_data_U0_m_axi_gmem_ARVALID;
wire   [63:0] rd_data_U0_m_axi_gmem_ARADDR;
wire   [0:0] rd_data_U0_m_axi_gmem_ARID;
wire   [31:0] rd_data_U0_m_axi_gmem_ARLEN;
wire   [2:0] rd_data_U0_m_axi_gmem_ARSIZE;
wire   [1:0] rd_data_U0_m_axi_gmem_ARBURST;
wire   [1:0] rd_data_U0_m_axi_gmem_ARLOCK;
wire   [3:0] rd_data_U0_m_axi_gmem_ARCACHE;
wire   [2:0] rd_data_U0_m_axi_gmem_ARPROT;
wire   [3:0] rd_data_U0_m_axi_gmem_ARQOS;
wire   [3:0] rd_data_U0_m_axi_gmem_ARREGION;
wire   [0:0] rd_data_U0_m_axi_gmem_ARUSER;
wire    rd_data_U0_m_axi_gmem_RREADY;
wire    rd_data_U0_m_axi_gmem_BREADY;
wire   [127:0] rd_data_U0_in_st_din;
wire    rd_data_U0_in_st_write;
wire   [31:0] rd_data_U0_ctrl1_regp_c8_din;
wire    rd_data_U0_ctrl1_regp_c8_write;
wire    collect_input_U0_ap_start;
wire    collect_input_U0_ap_done;
wire    collect_input_U0_ap_continue;
wire    collect_input_U0_ap_idle;
wire    collect_input_U0_ap_ready;
wire    collect_input_U0_in_st_read;
wire   [11:0] collect_input_U0_I_address0;
wire    collect_input_U0_I_ce0;
wire    collect_input_U0_I_we0;
wire   [31:0] collect_input_U0_I_d0;
wire   [11:0] collect_input_U0_I_address1;
wire    collect_input_U0_I_ce1;
wire    collect_input_U0_I_we1;
wire   [31:0] collect_input_U0_I_d1;
wire    collect_input_U0_ctrl1_regp_read;
wire   [31:0] collect_input_U0_ap_return;
wire    ap_channel_done_ctrl1_regp_c7_channel8;
wire    ctrl1_regp_c7_channel8_full_n;
reg    ap_sync_reg_channel_write_ctrl1_regp_c7_channel8;
wire    ap_sync_channel_write_ctrl1_regp_c7_channel8;
wire    ap_channel_done_input_data2;
wire    collect_input_U0_I_full_n;
reg    ap_sync_reg_channel_write_input_data2;
wire    ap_sync_channel_write_input_data2;
wire    fft_stage_U0_ap_start;
wire    fft_stage_U0_ap_done;
wire    fft_stage_U0_ap_continue;
wire    fft_stage_U0_ap_idle;
wire    fft_stage_U0_ap_ready;
wire   [11:0] fft_stage_U0_I_address0;
wire    fft_stage_U0_I_ce0;
wire   [11:0] fft_stage_U0_I_address1;
wire    fft_stage_U0_I_ce1;
wire   [11:0] fft_stage_U0_X_address0;
wire    fft_stage_U0_X_ce0;
wire    fft_stage_U0_X_we0;
wire   [31:0] fft_stage_U0_X_d0;
wire   [11:0] fft_stage_U0_X_address1;
wire    fft_stage_U0_X_ce1;
wire    fft_stage_U0_X_we1;
wire   [31:0] fft_stage_U0_X_d1;
wire   [31:0] fft_stage_U0_ap_return;
wire    ap_channel_done_ctrl1_regp_c6_channel7;
wire    ctrl1_regp_c6_channel7_full_n;
reg    ap_sync_reg_channel_write_ctrl1_regp_c6_channel7;
wire    ap_sync_channel_write_ctrl1_regp_c6_channel7;
wire    ap_channel_done_out_data_13;
wire    fft_stage_U0_X_full_n;
reg    ap_sync_reg_channel_write_out_data_13;
wire    ap_sync_channel_write_out_data_13;
wire    fft_stage_1_U0_ap_start;
wire    fft_stage_1_U0_ap_done;
wire    fft_stage_1_U0_ap_continue;
wire    fft_stage_1_U0_ap_idle;
wire    fft_stage_1_U0_ap_ready;
wire   [11:0] fft_stage_1_U0_I_address0;
wire    fft_stage_1_U0_I_ce0;
wire   [11:0] fft_stage_1_U0_I_address1;
wire    fft_stage_1_U0_I_ce1;
wire   [11:0] fft_stage_1_U0_X_address0;
wire    fft_stage_1_U0_X_ce0;
wire    fft_stage_1_U0_X_we0;
wire   [31:0] fft_stage_1_U0_X_d0;
wire   [11:0] fft_stage_1_U0_X_address1;
wire    fft_stage_1_U0_X_ce1;
wire    fft_stage_1_U0_X_we1;
wire   [31:0] fft_stage_1_U0_X_d1;
wire   [31:0] fft_stage_1_U0_ap_return;
wire    ap_channel_done_ctrl1_regp_c5_channel6;
wire    ctrl1_regp_c5_channel6_full_n;
reg    ap_sync_reg_channel_write_ctrl1_regp_c5_channel6;
wire    ap_sync_channel_write_ctrl1_regp_c5_channel6;
wire    ap_channel_done_out_data_24;
wire    fft_stage_1_U0_X_full_n;
reg    ap_sync_reg_channel_write_out_data_24;
wire    ap_sync_channel_write_out_data_24;
wire    fft_stage_2_U0_ap_start;
wire    fft_stage_2_U0_ap_done;
wire    fft_stage_2_U0_ap_continue;
wire    fft_stage_2_U0_ap_idle;
wire    fft_stage_2_U0_ap_ready;
wire   [11:0] fft_stage_2_U0_I_address0;
wire    fft_stage_2_U0_I_ce0;
wire   [11:0] fft_stage_2_U0_I_address1;
wire    fft_stage_2_U0_I_ce1;
wire   [11:0] fft_stage_2_U0_X_address0;
wire    fft_stage_2_U0_X_ce0;
wire    fft_stage_2_U0_X_we0;
wire   [31:0] fft_stage_2_U0_X_d0;
wire   [11:0] fft_stage_2_U0_X_address1;
wire    fft_stage_2_U0_X_ce1;
wire    fft_stage_2_U0_X_we1;
wire   [31:0] fft_stage_2_U0_X_d1;
wire   [31:0] fft_stage_2_U0_ap_return;
wire    ap_channel_done_ctrl1_regp_c4_channel5;
wire    ctrl1_regp_c4_channel5_full_n;
reg    ap_sync_reg_channel_write_ctrl1_regp_c4_channel5;
wire    ap_sync_channel_write_ctrl1_regp_c4_channel5;
wire    ap_channel_done_out_data_35;
wire    fft_stage_2_U0_X_full_n;
reg    ap_sync_reg_channel_write_out_data_35;
wire    ap_sync_channel_write_out_data_35;
wire    fft_stage_3_U0_ap_start;
wire    fft_stage_3_U0_ap_done;
wire    fft_stage_3_U0_ap_continue;
wire    fft_stage_3_U0_ap_idle;
wire    fft_stage_3_U0_ap_ready;
wire   [11:0] fft_stage_3_U0_I_address0;
wire    fft_stage_3_U0_I_ce0;
wire   [11:0] fft_stage_3_U0_I_address1;
wire    fft_stage_3_U0_I_ce1;
wire   [11:0] fft_stage_3_U0_X_address0;
wire    fft_stage_3_U0_X_ce0;
wire    fft_stage_3_U0_X_we0;
wire   [31:0] fft_stage_3_U0_X_d0;
wire   [11:0] fft_stage_3_U0_X_address1;
wire    fft_stage_3_U0_X_ce1;
wire    fft_stage_3_U0_X_we1;
wire   [31:0] fft_stage_3_U0_X_d1;
wire   [31:0] fft_stage_3_U0_ap_return;
wire    ap_channel_done_ctrl1_regp_c3_channel4;
wire    ctrl1_regp_c3_channel4_full_n;
reg    ap_sync_reg_channel_write_ctrl1_regp_c3_channel4;
wire    ap_sync_channel_write_ctrl1_regp_c3_channel4;
wire    ap_channel_done_out_data_46;
wire    fft_stage_3_U0_X_full_n;
reg    ap_sync_reg_channel_write_out_data_46;
wire    ap_sync_channel_write_out_data_46;
wire    fft_stage_4_U0_ap_start;
wire    fft_stage_4_U0_ap_done;
wire    fft_stage_4_U0_ap_continue;
wire    fft_stage_4_U0_ap_idle;
wire    fft_stage_4_U0_ap_ready;
wire   [11:0] fft_stage_4_U0_I_address0;
wire    fft_stage_4_U0_I_ce0;
wire   [11:0] fft_stage_4_U0_I_address1;
wire    fft_stage_4_U0_I_ce1;
wire   [11:0] fft_stage_4_U0_X_address0;
wire    fft_stage_4_U0_X_ce0;
wire    fft_stage_4_U0_X_we0;
wire   [31:0] fft_stage_4_U0_X_d0;
wire   [11:0] fft_stage_4_U0_X_address1;
wire    fft_stage_4_U0_X_ce1;
wire    fft_stage_4_U0_X_we1;
wire   [31:0] fft_stage_4_U0_X_d1;
wire   [31:0] fft_stage_4_U0_ap_return;
wire    ap_channel_done_ctrl1_regp_c2_channel3;
wire    ctrl1_regp_c2_channel3_full_n;
reg    ap_sync_reg_channel_write_ctrl1_regp_c2_channel3;
wire    ap_sync_channel_write_ctrl1_regp_c2_channel3;
wire    ap_channel_done_out_data_57;
wire    fft_stage_4_U0_X_full_n;
reg    ap_sync_reg_channel_write_out_data_57;
wire    ap_sync_channel_write_out_data_57;
wire    fft_stage_5_U0_ap_start;
wire    fft_stage_5_U0_ap_done;
wire    fft_stage_5_U0_ap_continue;
wire    fft_stage_5_U0_ap_idle;
wire    fft_stage_5_U0_ap_ready;
wire   [11:0] fft_stage_5_U0_I_address0;
wire    fft_stage_5_U0_I_ce0;
wire   [11:0] fft_stage_5_U0_I_address1;
wire    fft_stage_5_U0_I_ce1;
wire   [9:0] fft_stage_5_U0_X_0_0_address0;
wire    fft_stage_5_U0_X_0_0_ce0;
wire    fft_stage_5_U0_X_0_0_we0;
wire   [31:0] fft_stage_5_U0_X_0_0_d0;
wire   [9:0] fft_stage_5_U0_X_0_1_address0;
wire    fft_stage_5_U0_X_0_1_ce0;
wire    fft_stage_5_U0_X_0_1_we0;
wire   [31:0] fft_stage_5_U0_X_0_1_d0;
wire   [9:0] fft_stage_5_U0_X_1_0_address0;
wire    fft_stage_5_U0_X_1_0_ce0;
wire    fft_stage_5_U0_X_1_0_we0;
wire   [31:0] fft_stage_5_U0_X_1_0_d0;
wire   [9:0] fft_stage_5_U0_X_1_1_address0;
wire    fft_stage_5_U0_X_1_1_ce0;
wire    fft_stage_5_U0_X_1_1_we0;
wire   [31:0] fft_stage_5_U0_X_1_1_d0;
wire   [31:0] fft_stage_5_U0_ap_return;
wire    ap_channel_done_ctrl1_regp_c1_channel2;
wire    ctrl1_regp_c1_channel2_full_n;
reg    ap_sync_reg_channel_write_ctrl1_regp_c1_channel2;
wire    ap_sync_channel_write_ctrl1_regp_c1_channel2;
wire    ap_channel_done_out_data_6_1_111;
wire    fft_stage_5_U0_X_1_1_full_n;
reg    ap_sync_reg_channel_write_out_data_6_1_111;
wire    ap_sync_channel_write_out_data_6_1_111;
wire    ap_channel_done_out_data_6_1_010;
wire    fft_stage_5_U0_X_1_0_full_n;
reg    ap_sync_reg_channel_write_out_data_6_1_010;
wire    ap_sync_channel_write_out_data_6_1_010;
wire    ap_channel_done_out_data_6_0_19;
wire    fft_stage_5_U0_X_0_1_full_n;
reg    ap_sync_reg_channel_write_out_data_6_0_19;
wire    ap_sync_channel_write_out_data_6_0_19;
wire    ap_channel_done_out_data_6_0_08;
wire    fft_stage_5_U0_X_0_0_full_n;
reg    ap_sync_reg_channel_write_out_data_6_0_08;
wire    ap_sync_channel_write_out_data_6_0_08;
wire    pool_U0_ap_start;
wire    pool_U0_ap_done;
wire    pool_U0_ap_continue;
wire    pool_U0_ap_idle;
wire    pool_U0_ap_ready;
wire   [9:0] pool_U0_I_0_0_address0;
wire    pool_U0_I_0_0_ce0;
wire   [9:0] pool_U0_I_0_0_address1;
wire    pool_U0_I_0_0_ce1;
wire   [9:0] pool_U0_I_0_1_address0;
wire    pool_U0_I_0_1_ce0;
wire   [9:0] pool_U0_I_0_1_address1;
wire    pool_U0_I_0_1_ce1;
wire   [9:0] pool_U0_I_1_0_address0;
wire    pool_U0_I_1_0_ce0;
wire   [9:0] pool_U0_I_1_0_address1;
wire    pool_U0_I_1_0_ce1;
wire   [9:0] pool_U0_I_1_1_address0;
wire    pool_U0_I_1_1_ce0;
wire   [9:0] pool_U0_I_1_1_address1;
wire    pool_U0_I_1_1_ce1;
wire   [11:0] pool_U0_O_address0;
wire    pool_U0_O_ce0;
wire    pool_U0_O_we0;
wire   [31:0] pool_U0_O_d0;
wire    pool_U0_actp_regp_read;
wire   [31:0] pool_U0_ap_return_0;
wire   [31:0] pool_U0_ap_return_1;
wire    ap_channel_done_actp_regp_c_channel;
wire    actp_regp_c_channel_full_n;
reg    ap_sync_reg_channel_write_actp_regp_c_channel;
wire    ap_sync_channel_write_actp_regp_c_channel;
wire    ap_channel_done_ctrl1_regp_c_channel;
wire    ctrl1_regp_c_channel_full_n;
reg    ap_sync_reg_channel_write_ctrl1_regp_c_channel;
wire    ap_sync_channel_write_ctrl1_regp_c_channel;
wire    ap_channel_done_out_data_712;
wire    pool_U0_O_full_n;
reg    ap_sync_reg_channel_write_out_data_712;
wire    ap_sync_channel_write_out_data_712;
wire    push_out_U0_ap_start;
wire    push_out_U0_ap_done;
wire    push_out_U0_ap_continue;
wire    push_out_U0_ap_idle;
wire    push_out_U0_ap_ready;
wire   [11:0] push_out_U0_O_address0;
wire    push_out_U0_O_ce0;
wire   [11:0] push_out_U0_O_address1;
wire    push_out_U0_O_ce1;
wire   [63:0] push_out_U0_out_st_din;
wire    push_out_U0_out_st_write;
wire    input_data2_i_full_n;
wire    input_data2_t_empty_n;
wire    out_data_13_i_full_n;
wire    out_data_13_t_empty_n;
wire    out_data_24_i_full_n;
wire    out_data_24_t_empty_n;
wire    out_data_35_i_full_n;
wire    out_data_35_t_empty_n;
wire    out_data_46_i_full_n;
wire    out_data_46_t_empty_n;
wire    out_data_57_i_full_n;
wire    out_data_57_t_empty_n;
wire    out_data_6_0_08_i_full_n;
wire    out_data_6_0_08_t_empty_n;
wire    out_data_6_0_19_i_full_n;
wire    out_data_6_0_19_t_empty_n;
wire    out_data_6_1_010_i_full_n;
wire    out_data_6_1_010_t_empty_n;
wire    out_data_6_1_111_i_full_n;
wire    out_data_6_1_111_t_empty_n;
wire    out_data_712_i_full_n;
wire    out_data_712_t_empty_n;
wire    actp_regp_c9_full_n;
wire   [31:0] actp_regp_c9_dout;
wire   [4:0] actp_regp_c9_num_data_valid;
wire   [4:0] actp_regp_c9_fifo_cap;
wire    actp_regp_c9_empty_n;
wire    in_st1_full_n;
wire   [127:0] in_st1_dout;
wire   [1:0] in_st1_num_data_valid;
wire   [1:0] in_st1_fifo_cap;
wire    in_st1_empty_n;
wire    ctrl1_regp_c8_full_n;
wire   [31:0] ctrl1_regp_c8_dout;
wire   [1:0] ctrl1_regp_c8_num_data_valid;
wire   [1:0] ctrl1_regp_c8_fifo_cap;
wire    ctrl1_regp_c8_empty_n;
wire   [31:0] ctrl1_regp_c7_channel8_dout;
wire   [1:0] ctrl1_regp_c7_channel8_num_data_valid;
wire   [1:0] ctrl1_regp_c7_channel8_fifo_cap;
wire    ctrl1_regp_c7_channel8_empty_n;
wire   [31:0] ctrl1_regp_c6_channel7_dout;
wire   [1:0] ctrl1_regp_c6_channel7_num_data_valid;
wire   [1:0] ctrl1_regp_c6_channel7_fifo_cap;
wire    ctrl1_regp_c6_channel7_empty_n;
wire   [31:0] ctrl1_regp_c5_channel6_dout;
wire   [1:0] ctrl1_regp_c5_channel6_num_data_valid;
wire   [1:0] ctrl1_regp_c5_channel6_fifo_cap;
wire    ctrl1_regp_c5_channel6_empty_n;
wire   [31:0] ctrl1_regp_c4_channel5_dout;
wire   [1:0] ctrl1_regp_c4_channel5_num_data_valid;
wire   [1:0] ctrl1_regp_c4_channel5_fifo_cap;
wire    ctrl1_regp_c4_channel5_empty_n;
wire   [31:0] ctrl1_regp_c3_channel4_dout;
wire   [1:0] ctrl1_regp_c3_channel4_num_data_valid;
wire   [1:0] ctrl1_regp_c3_channel4_fifo_cap;
wire    ctrl1_regp_c3_channel4_empty_n;
wire   [31:0] ctrl1_regp_c2_channel3_dout;
wire   [1:0] ctrl1_regp_c2_channel3_num_data_valid;
wire   [1:0] ctrl1_regp_c2_channel3_fifo_cap;
wire    ctrl1_regp_c2_channel3_empty_n;
wire   [31:0] ctrl1_regp_c1_channel2_dout;
wire   [1:0] ctrl1_regp_c1_channel2_num_data_valid;
wire   [1:0] ctrl1_regp_c1_channel2_fifo_cap;
wire    ctrl1_regp_c1_channel2_empty_n;
wire   [31:0] ctrl1_regp_c_channel_dout;
wire   [1:0] ctrl1_regp_c_channel_num_data_valid;
wire   [1:0] ctrl1_regp_c_channel_fifo_cap;
wire    ctrl1_regp_c_channel_empty_n;
wire   [31:0] actp_regp_c_channel_dout;
wire   [1:0] actp_regp_c_channel_num_data_valid;
wire   [1:0] actp_regp_c_channel_fifo_cap;
wire    actp_regp_c_channel_empty_n;
wire    ap_sync_ready;
reg    ap_sync_reg_entry_proc20_U0_ap_ready;
wire    ap_sync_entry_proc20_U0_ap_ready;
reg    ap_sync_reg_rd_data_U0_ap_ready;
wire    ap_sync_rd_data_U0_ap_ready;
wire   [0:0] start_for_collect_input_U0_din;
wire    start_for_collect_input_U0_full_n;
wire   [0:0] start_for_collect_input_U0_dout;
wire    start_for_collect_input_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_sync_reg_channel_write_ctrl1_regp_c7_channel8 = 1'b0;
#0 ap_sync_reg_channel_write_input_data2 = 1'b0;
#0 ap_sync_reg_channel_write_ctrl1_regp_c6_channel7 = 1'b0;
#0 ap_sync_reg_channel_write_out_data_13 = 1'b0;
#0 ap_sync_reg_channel_write_ctrl1_regp_c5_channel6 = 1'b0;
#0 ap_sync_reg_channel_write_out_data_24 = 1'b0;
#0 ap_sync_reg_channel_write_ctrl1_regp_c4_channel5 = 1'b0;
#0 ap_sync_reg_channel_write_out_data_35 = 1'b0;
#0 ap_sync_reg_channel_write_ctrl1_regp_c3_channel4 = 1'b0;
#0 ap_sync_reg_channel_write_out_data_46 = 1'b0;
#0 ap_sync_reg_channel_write_ctrl1_regp_c2_channel3 = 1'b0;
#0 ap_sync_reg_channel_write_out_data_57 = 1'b0;
#0 ap_sync_reg_channel_write_ctrl1_regp_c1_channel2 = 1'b0;
#0 ap_sync_reg_channel_write_out_data_6_1_111 = 1'b0;
#0 ap_sync_reg_channel_write_out_data_6_1_010 = 1'b0;
#0 ap_sync_reg_channel_write_out_data_6_0_19 = 1'b0;
#0 ap_sync_reg_channel_write_out_data_6_0_08 = 1'b0;
#0 ap_sync_reg_channel_write_actp_regp_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_ctrl1_regp_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_out_data_712 = 1'b0;
#0 ap_sync_reg_entry_proc20_U0_ap_ready = 1'b0;
#0 ap_sync_reg_rd_data_U0_ap_ready = 1'b0;
end

IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_input_data2_RAM_T2P_BRAM_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
input_data2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(collect_input_U0_I_address0),
    .i_ce0(collect_input_U0_I_ce0),
    .i_we0(collect_input_U0_I_we0),
    .i_d0(collect_input_U0_I_d0),
    .i_q0(input_data2_i_q0),
    .i_address1(collect_input_U0_I_address1),
    .i_ce1(collect_input_U0_I_ce1),
    .i_we1(collect_input_U0_I_we1),
    .i_d1(collect_input_U0_I_d1),
    .i_q1(input_data2_i_q1),
    .t_address0(fft_stage_U0_I_address0),
    .t_ce0(fft_stage_U0_I_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(input_data2_t_q0),
    .t_address1(fft_stage_U0_I_address1),
    .t_ce1(fft_stage_U0_I_ce1),
    .t_we1(1'b0),
    .t_d1(32'd0),
    .t_q1(input_data2_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(input_data2_i_full_n),
    .i_write(ap_channel_done_input_data2),
    .t_empty_n(input_data2_t_empty_n),
    .t_read(fft_stage_U0_ap_ready)
);

IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_input_data2_RAM_T2P_BRAM_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
out_data_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(fft_stage_U0_X_address0),
    .i_ce0(fft_stage_U0_X_ce0),
    .i_we0(fft_stage_U0_X_we0),
    .i_d0(fft_stage_U0_X_d0),
    .i_q0(out_data_13_i_q0),
    .i_address1(fft_stage_U0_X_address1),
    .i_ce1(fft_stage_U0_X_ce1),
    .i_we1(fft_stage_U0_X_we1),
    .i_d1(fft_stage_U0_X_d1),
    .i_q1(out_data_13_i_q1),
    .t_address0(fft_stage_1_U0_I_address0),
    .t_ce0(fft_stage_1_U0_I_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(out_data_13_t_q0),
    .t_address1(fft_stage_1_U0_I_address1),
    .t_ce1(fft_stage_1_U0_I_ce1),
    .t_we1(1'b0),
    .t_d1(32'd0),
    .t_q1(out_data_13_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(out_data_13_i_full_n),
    .i_write(ap_channel_done_out_data_13),
    .t_empty_n(out_data_13_t_empty_n),
    .t_read(fft_stage_1_U0_ap_ready)
);

IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_input_data2_RAM_T2P_BRAM_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
out_data_24_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(fft_stage_1_U0_X_address0),
    .i_ce0(fft_stage_1_U0_X_ce0),
    .i_we0(fft_stage_1_U0_X_we0),
    .i_d0(fft_stage_1_U0_X_d0),
    .i_q0(out_data_24_i_q0),
    .i_address1(fft_stage_1_U0_X_address1),
    .i_ce1(fft_stage_1_U0_X_ce1),
    .i_we1(fft_stage_1_U0_X_we1),
    .i_d1(fft_stage_1_U0_X_d1),
    .i_q1(out_data_24_i_q1),
    .t_address0(fft_stage_2_U0_I_address0),
    .t_ce0(fft_stage_2_U0_I_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(out_data_24_t_q0),
    .t_address1(fft_stage_2_U0_I_address1),
    .t_ce1(fft_stage_2_U0_I_ce1),
    .t_we1(1'b0),
    .t_d1(32'd0),
    .t_q1(out_data_24_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(out_data_24_i_full_n),
    .i_write(ap_channel_done_out_data_24),
    .t_empty_n(out_data_24_t_empty_n),
    .t_read(fft_stage_2_U0_ap_ready)
);

IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_input_data2_RAM_T2P_BRAM_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
out_data_35_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(fft_stage_2_U0_X_address0),
    .i_ce0(fft_stage_2_U0_X_ce0),
    .i_we0(fft_stage_2_U0_X_we0),
    .i_d0(fft_stage_2_U0_X_d0),
    .i_q0(out_data_35_i_q0),
    .i_address1(fft_stage_2_U0_X_address1),
    .i_ce1(fft_stage_2_U0_X_ce1),
    .i_we1(fft_stage_2_U0_X_we1),
    .i_d1(fft_stage_2_U0_X_d1),
    .i_q1(out_data_35_i_q1),
    .t_address0(fft_stage_3_U0_I_address0),
    .t_ce0(fft_stage_3_U0_I_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(out_data_35_t_q0),
    .t_address1(fft_stage_3_U0_I_address1),
    .t_ce1(fft_stage_3_U0_I_ce1),
    .t_we1(1'b0),
    .t_d1(32'd0),
    .t_q1(out_data_35_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(out_data_35_i_full_n),
    .i_write(ap_channel_done_out_data_35),
    .t_empty_n(out_data_35_t_empty_n),
    .t_read(fft_stage_3_U0_ap_ready)
);

IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_input_data2_RAM_T2P_BRAM_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
out_data_46_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(fft_stage_3_U0_X_address0),
    .i_ce0(fft_stage_3_U0_X_ce0),
    .i_we0(fft_stage_3_U0_X_we0),
    .i_d0(fft_stage_3_U0_X_d0),
    .i_q0(out_data_46_i_q0),
    .i_address1(fft_stage_3_U0_X_address1),
    .i_ce1(fft_stage_3_U0_X_ce1),
    .i_we1(fft_stage_3_U0_X_we1),
    .i_d1(fft_stage_3_U0_X_d1),
    .i_q1(out_data_46_i_q1),
    .t_address0(fft_stage_4_U0_I_address0),
    .t_ce0(fft_stage_4_U0_I_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(out_data_46_t_q0),
    .t_address1(fft_stage_4_U0_I_address1),
    .t_ce1(fft_stage_4_U0_I_ce1),
    .t_we1(1'b0),
    .t_d1(32'd0),
    .t_q1(out_data_46_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(out_data_46_i_full_n),
    .i_write(ap_channel_done_out_data_46),
    .t_empty_n(out_data_46_t_empty_n),
    .t_read(fft_stage_4_U0_ap_ready)
);

IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_input_data2_RAM_T2P_BRAM_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
out_data_57_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(fft_stage_4_U0_X_address0),
    .i_ce0(fft_stage_4_U0_X_ce0),
    .i_we0(fft_stage_4_U0_X_we0),
    .i_d0(fft_stage_4_U0_X_d0),
    .i_q0(out_data_57_i_q0),
    .i_address1(fft_stage_4_U0_X_address1),
    .i_ce1(fft_stage_4_U0_X_ce1),
    .i_we1(fft_stage_4_U0_X_we1),
    .i_d1(fft_stage_4_U0_X_d1),
    .i_q1(out_data_57_i_q1),
    .t_address0(fft_stage_5_U0_I_address0),
    .t_ce0(fft_stage_5_U0_I_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(out_data_57_t_q0),
    .t_address1(fft_stage_5_U0_I_address1),
    .t_ce1(fft_stage_5_U0_I_ce1),
    .t_we1(1'b0),
    .t_d1(32'd0),
    .t_q1(out_data_57_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(out_data_57_i_full_n),
    .i_write(ap_channel_done_out_data_57),
    .t_empty_n(out_data_57_t_empty_n),
    .t_read(fft_stage_5_U0_ap_ready)
);

IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_out_data_6_0_08_RAM_T2P_BRAM_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
out_data_6_0_08_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(fft_stage_5_U0_X_0_0_address0),
    .i_ce0(fft_stage_5_U0_X_0_0_ce0),
    .i_we0(fft_stage_5_U0_X_0_0_we0),
    .i_d0(fft_stage_5_U0_X_0_0_d0),
    .i_q0(out_data_6_0_08_i_q0),
    .i_address1(10'd0),
    .i_ce1(1'b0),
    .i_q1(out_data_6_0_08_i_q1),
    .t_address0(pool_U0_I_0_0_address0),
    .t_ce0(pool_U0_I_0_0_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(out_data_6_0_08_t_q0),
    .t_address1(pool_U0_I_0_0_address1),
    .t_ce1(pool_U0_I_0_0_ce1),
    .t_q1(out_data_6_0_08_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(out_data_6_0_08_i_full_n),
    .i_write(ap_channel_done_out_data_6_0_08),
    .t_empty_n(out_data_6_0_08_t_empty_n),
    .t_read(pool_U0_ap_ready)
);

IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_out_data_6_0_08_RAM_T2P_BRAM_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
out_data_6_0_19_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(fft_stage_5_U0_X_0_1_address0),
    .i_ce0(fft_stage_5_U0_X_0_1_ce0),
    .i_we0(fft_stage_5_U0_X_0_1_we0),
    .i_d0(fft_stage_5_U0_X_0_1_d0),
    .i_q0(out_data_6_0_19_i_q0),
    .i_address1(10'd0),
    .i_ce1(1'b0),
    .i_q1(out_data_6_0_19_i_q1),
    .t_address0(pool_U0_I_0_1_address0),
    .t_ce0(pool_U0_I_0_1_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(out_data_6_0_19_t_q0),
    .t_address1(pool_U0_I_0_1_address1),
    .t_ce1(pool_U0_I_0_1_ce1),
    .t_q1(out_data_6_0_19_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(out_data_6_0_19_i_full_n),
    .i_write(ap_channel_done_out_data_6_0_19),
    .t_empty_n(out_data_6_0_19_t_empty_n),
    .t_read(pool_U0_ap_ready)
);

IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_out_data_6_0_08_RAM_T2P_BRAM_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
out_data_6_1_010_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(fft_stage_5_U0_X_1_0_address0),
    .i_ce0(fft_stage_5_U0_X_1_0_ce0),
    .i_we0(fft_stage_5_U0_X_1_0_we0),
    .i_d0(fft_stage_5_U0_X_1_0_d0),
    .i_q0(out_data_6_1_010_i_q0),
    .i_address1(10'd0),
    .i_ce1(1'b0),
    .i_q1(out_data_6_1_010_i_q1),
    .t_address0(pool_U0_I_1_0_address0),
    .t_ce0(pool_U0_I_1_0_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(out_data_6_1_010_t_q0),
    .t_address1(pool_U0_I_1_0_address1),
    .t_ce1(pool_U0_I_1_0_ce1),
    .t_q1(out_data_6_1_010_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(out_data_6_1_010_i_full_n),
    .i_write(ap_channel_done_out_data_6_1_010),
    .t_empty_n(out_data_6_1_010_t_empty_n),
    .t_read(pool_U0_ap_ready)
);

IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_out_data_6_0_08_RAM_T2P_BRAM_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
out_data_6_1_111_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(fft_stage_5_U0_X_1_1_address0),
    .i_ce0(fft_stage_5_U0_X_1_1_ce0),
    .i_we0(fft_stage_5_U0_X_1_1_we0),
    .i_d0(fft_stage_5_U0_X_1_1_d0),
    .i_q0(out_data_6_1_111_i_q0),
    .i_address1(10'd0),
    .i_ce1(1'b0),
    .i_q1(out_data_6_1_111_i_q1),
    .t_address0(pool_U0_I_1_1_address0),
    .t_ce0(pool_U0_I_1_1_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(out_data_6_1_111_t_q0),
    .t_address1(pool_U0_I_1_1_address1),
    .t_ce1(pool_U0_I_1_1_ce1),
    .t_q1(out_data_6_1_111_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(out_data_6_1_111_i_full_n),
    .i_write(ap_channel_done_out_data_6_1_111),
    .t_empty_n(out_data_6_1_111_t_empty_n),
    .t_read(pool_U0_ap_ready)
);

IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1_out_data_712_RAM_T2P_BRAM_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
out_data_712_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(pool_U0_O_address0),
    .i_ce0(pool_U0_O_ce0),
    .i_we0(pool_U0_O_we0),
    .i_d0(pool_U0_O_d0),
    .i_q0(out_data_712_i_q0),
    .i_address1(12'd0),
    .i_ce1(1'b0),
    .i_q1(out_data_712_i_q1),
    .t_address0(push_out_U0_O_address0),
    .t_ce0(push_out_U0_O_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(out_data_712_t_q0),
    .t_address1(push_out_U0_O_address1),
    .t_ce1(push_out_U0_O_ce1),
    .t_q1(out_data_712_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(out_data_712_i_full_n),
    .i_write(ap_channel_done_out_data_712),
    .t_empty_n(out_data_712_t_empty_n),
    .t_read(push_out_U0_ap_ready)
);

IFFT_AP_entry_proc20 entry_proc20_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(entry_proc20_U0_ap_start),
    .ap_done(entry_proc20_U0_ap_done),
    .ap_continue(entry_proc20_U0_ap_continue),
    .ap_idle(entry_proc20_U0_ap_idle),
    .ap_ready(entry_proc20_U0_ap_ready),
    .actp_regp(actp_regp),
    .actp_regp_c9_din(entry_proc20_U0_actp_regp_c9_din),
    .actp_regp_c9_num_data_valid(actp_regp_c9_num_data_valid),
    .actp_regp_c9_fifo_cap(actp_regp_c9_fifo_cap),
    .actp_regp_c9_full_n(actp_regp_c9_full_n),
    .actp_regp_c9_write(entry_proc20_U0_actp_regp_c9_write)
);

IFFT_AP_rd_data rd_data_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(rd_data_U0_ap_start),
    .start_full_n(start_for_collect_input_U0_full_n),
    .ap_done(rd_data_U0_ap_done),
    .ap_continue(rd_data_U0_ap_continue),
    .ap_idle(rd_data_U0_ap_idle),
    .ap_ready(rd_data_U0_ap_ready),
    .start_out(rd_data_U0_start_out),
    .start_write(rd_data_U0_start_write),
    .m_axi_gmem_AWVALID(rd_data_U0_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(1'b0),
    .m_axi_gmem_AWADDR(rd_data_U0_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(rd_data_U0_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(rd_data_U0_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(rd_data_U0_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(rd_data_U0_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(rd_data_U0_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(rd_data_U0_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(rd_data_U0_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(rd_data_U0_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(rd_data_U0_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(rd_data_U0_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(rd_data_U0_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(1'b0),
    .m_axi_gmem_WDATA(rd_data_U0_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(rd_data_U0_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(rd_data_U0_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(rd_data_U0_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(rd_data_U0_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(rd_data_U0_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(m_axi_gmem_ARREADY),
    .m_axi_gmem_ARADDR(rd_data_U0_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(rd_data_U0_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(rd_data_U0_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(rd_data_U0_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(rd_data_U0_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(rd_data_U0_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(rd_data_U0_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(rd_data_U0_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(rd_data_U0_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(rd_data_U0_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(rd_data_U0_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(m_axi_gmem_RVALID),
    .m_axi_gmem_RREADY(rd_data_U0_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(m_axi_gmem_RDATA),
    .m_axi_gmem_RLAST(m_axi_gmem_RLAST),
    .m_axi_gmem_RID(m_axi_gmem_RID),
    .m_axi_gmem_RFIFONUM(m_axi_gmem_RFIFONUM),
    .m_axi_gmem_RUSER(m_axi_gmem_RUSER),
    .m_axi_gmem_RRESP(m_axi_gmem_RRESP),
    .m_axi_gmem_BVALID(1'b0),
    .m_axi_gmem_BREADY(rd_data_U0_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(2'd0),
    .m_axi_gmem_BID(1'd0),
    .m_axi_gmem_BUSER(1'd0),
    .in_r(in_r),
    .in_st_din(rd_data_U0_in_st_din),
    .in_st_num_data_valid(in_st1_num_data_valid),
    .in_st_fifo_cap(in_st1_fifo_cap),
    .in_st_full_n(in_st1_full_n),
    .in_st_write(rd_data_U0_in_st_write),
    .ctrl1_regp(ctrl1_regp),
    .pn(pn_2),
    .ctrl1_regp_c8_din(rd_data_U0_ctrl1_regp_c8_din),
    .ctrl1_regp_c8_num_data_valid(ctrl1_regp_c8_num_data_valid),
    .ctrl1_regp_c8_fifo_cap(ctrl1_regp_c8_fifo_cap),
    .ctrl1_regp_c8_full_n(ctrl1_regp_c8_full_n),
    .ctrl1_regp_c8_write(rd_data_U0_ctrl1_regp_c8_write)
);

IFFT_AP_collect_input collect_input_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(collect_input_U0_ap_start),
    .ap_done(collect_input_U0_ap_done),
    .ap_continue(collect_input_U0_ap_continue),
    .ap_idle(collect_input_U0_ap_idle),
    .ap_ready(collect_input_U0_ap_ready),
    .in_st_dout(in_st1_dout),
    .in_st_num_data_valid(in_st1_num_data_valid),
    .in_st_fifo_cap(in_st1_fifo_cap),
    .in_st_empty_n(in_st1_empty_n),
    .in_st_read(collect_input_U0_in_st_read),
    .I_address0(collect_input_U0_I_address0),
    .I_ce0(collect_input_U0_I_ce0),
    .I_we0(collect_input_U0_I_we0),
    .I_d0(collect_input_U0_I_d0),
    .I_address1(collect_input_U0_I_address1),
    .I_ce1(collect_input_U0_I_ce1),
    .I_we1(collect_input_U0_I_we1),
    .I_d1(collect_input_U0_I_d1),
    .ctrl1_regp_dout(ctrl1_regp_c8_dout),
    .ctrl1_regp_num_data_valid(ctrl1_regp_c8_num_data_valid),
    .ctrl1_regp_fifo_cap(ctrl1_regp_c8_fifo_cap),
    .ctrl1_regp_empty_n(ctrl1_regp_c8_empty_n),
    .ctrl1_regp_read(collect_input_U0_ctrl1_regp_read),
    .ap_return(collect_input_U0_ap_return)
);

IFFT_AP_fft_stage fft_stage_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(fft_stage_U0_ap_start),
    .ap_done(fft_stage_U0_ap_done),
    .ap_continue(fft_stage_U0_ap_continue),
    .ap_idle(fft_stage_U0_ap_idle),
    .ap_ready(fft_stage_U0_ap_ready),
    .I_address0(fft_stage_U0_I_address0),
    .I_ce0(fft_stage_U0_I_ce0),
    .I_q0(input_data2_t_q0),
    .I_address1(fft_stage_U0_I_address1),
    .I_ce1(fft_stage_U0_I_ce1),
    .I_q1(input_data2_t_q1),
    .X_address0(fft_stage_U0_X_address0),
    .X_ce0(fft_stage_U0_X_ce0),
    .X_we0(fft_stage_U0_X_we0),
    .X_d0(fft_stage_U0_X_d0),
    .X_address1(fft_stage_U0_X_address1),
    .X_ce1(fft_stage_U0_X_ce1),
    .X_we1(fft_stage_U0_X_we1),
    .X_d1(fft_stage_U0_X_d1),
    .p_read(ctrl1_regp_c7_channel8_dout),
    .ap_return(fft_stage_U0_ap_return)
);

IFFT_AP_fft_stage_1 fft_stage_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(fft_stage_1_U0_ap_start),
    .ap_done(fft_stage_1_U0_ap_done),
    .ap_continue(fft_stage_1_U0_ap_continue),
    .ap_idle(fft_stage_1_U0_ap_idle),
    .ap_ready(fft_stage_1_U0_ap_ready),
    .I_address0(fft_stage_1_U0_I_address0),
    .I_ce0(fft_stage_1_U0_I_ce0),
    .I_q0(out_data_13_t_q0),
    .I_address1(fft_stage_1_U0_I_address1),
    .I_ce1(fft_stage_1_U0_I_ce1),
    .I_q1(out_data_13_t_q1),
    .X_address0(fft_stage_1_U0_X_address0),
    .X_ce0(fft_stage_1_U0_X_ce0),
    .X_we0(fft_stage_1_U0_X_we0),
    .X_d0(fft_stage_1_U0_X_d0),
    .X_address1(fft_stage_1_U0_X_address1),
    .X_ce1(fft_stage_1_U0_X_ce1),
    .X_we1(fft_stage_1_U0_X_we1),
    .X_d1(fft_stage_1_U0_X_d1),
    .p_read(ctrl1_regp_c6_channel7_dout),
    .ap_return(fft_stage_1_U0_ap_return)
);

IFFT_AP_fft_stage_2 fft_stage_2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(fft_stage_2_U0_ap_start),
    .ap_done(fft_stage_2_U0_ap_done),
    .ap_continue(fft_stage_2_U0_ap_continue),
    .ap_idle(fft_stage_2_U0_ap_idle),
    .ap_ready(fft_stage_2_U0_ap_ready),
    .I_address0(fft_stage_2_U0_I_address0),
    .I_ce0(fft_stage_2_U0_I_ce0),
    .I_q0(out_data_24_t_q0),
    .I_address1(fft_stage_2_U0_I_address1),
    .I_ce1(fft_stage_2_U0_I_ce1),
    .I_q1(out_data_24_t_q1),
    .X_address0(fft_stage_2_U0_X_address0),
    .X_ce0(fft_stage_2_U0_X_ce0),
    .X_we0(fft_stage_2_U0_X_we0),
    .X_d0(fft_stage_2_U0_X_d0),
    .X_address1(fft_stage_2_U0_X_address1),
    .X_ce1(fft_stage_2_U0_X_ce1),
    .X_we1(fft_stage_2_U0_X_we1),
    .X_d1(fft_stage_2_U0_X_d1),
    .p_read(ctrl1_regp_c5_channel6_dout),
    .ap_return(fft_stage_2_U0_ap_return)
);

IFFT_AP_fft_stage_3 fft_stage_3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(fft_stage_3_U0_ap_start),
    .ap_done(fft_stage_3_U0_ap_done),
    .ap_continue(fft_stage_3_U0_ap_continue),
    .ap_idle(fft_stage_3_U0_ap_idle),
    .ap_ready(fft_stage_3_U0_ap_ready),
    .I_address0(fft_stage_3_U0_I_address0),
    .I_ce0(fft_stage_3_U0_I_ce0),
    .I_q0(out_data_35_t_q0),
    .I_address1(fft_stage_3_U0_I_address1),
    .I_ce1(fft_stage_3_U0_I_ce1),
    .I_q1(out_data_35_t_q1),
    .X_address0(fft_stage_3_U0_X_address0),
    .X_ce0(fft_stage_3_U0_X_ce0),
    .X_we0(fft_stage_3_U0_X_we0),
    .X_d0(fft_stage_3_U0_X_d0),
    .X_address1(fft_stage_3_U0_X_address1),
    .X_ce1(fft_stage_3_U0_X_ce1),
    .X_we1(fft_stage_3_U0_X_we1),
    .X_d1(fft_stage_3_U0_X_d1),
    .p_read(ctrl1_regp_c4_channel5_dout),
    .ap_return(fft_stage_3_U0_ap_return)
);

IFFT_AP_fft_stage_4 fft_stage_4_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(fft_stage_4_U0_ap_start),
    .ap_done(fft_stage_4_U0_ap_done),
    .ap_continue(fft_stage_4_U0_ap_continue),
    .ap_idle(fft_stage_4_U0_ap_idle),
    .ap_ready(fft_stage_4_U0_ap_ready),
    .I_address0(fft_stage_4_U0_I_address0),
    .I_ce0(fft_stage_4_U0_I_ce0),
    .I_q0(out_data_46_t_q0),
    .I_address1(fft_stage_4_U0_I_address1),
    .I_ce1(fft_stage_4_U0_I_ce1),
    .I_q1(out_data_46_t_q1),
    .X_address0(fft_stage_4_U0_X_address0),
    .X_ce0(fft_stage_4_U0_X_ce0),
    .X_we0(fft_stage_4_U0_X_we0),
    .X_d0(fft_stage_4_U0_X_d0),
    .X_address1(fft_stage_4_U0_X_address1),
    .X_ce1(fft_stage_4_U0_X_ce1),
    .X_we1(fft_stage_4_U0_X_we1),
    .X_d1(fft_stage_4_U0_X_d1),
    .p_read(ctrl1_regp_c3_channel4_dout),
    .ap_return(fft_stage_4_U0_ap_return)
);

IFFT_AP_fft_stage_5 fft_stage_5_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(fft_stage_5_U0_ap_start),
    .ap_done(fft_stage_5_U0_ap_done),
    .ap_continue(fft_stage_5_U0_ap_continue),
    .ap_idle(fft_stage_5_U0_ap_idle),
    .ap_ready(fft_stage_5_U0_ap_ready),
    .I_address0(fft_stage_5_U0_I_address0),
    .I_ce0(fft_stage_5_U0_I_ce0),
    .I_q0(out_data_57_t_q0),
    .I_address1(fft_stage_5_U0_I_address1),
    .I_ce1(fft_stage_5_U0_I_ce1),
    .I_q1(out_data_57_t_q1),
    .X_0_0_address0(fft_stage_5_U0_X_0_0_address0),
    .X_0_0_ce0(fft_stage_5_U0_X_0_0_ce0),
    .X_0_0_we0(fft_stage_5_U0_X_0_0_we0),
    .X_0_0_d0(fft_stage_5_U0_X_0_0_d0),
    .X_0_1_address0(fft_stage_5_U0_X_0_1_address0),
    .X_0_1_ce0(fft_stage_5_U0_X_0_1_ce0),
    .X_0_1_we0(fft_stage_5_U0_X_0_1_we0),
    .X_0_1_d0(fft_stage_5_U0_X_0_1_d0),
    .X_1_0_address0(fft_stage_5_U0_X_1_0_address0),
    .X_1_0_ce0(fft_stage_5_U0_X_1_0_ce0),
    .X_1_0_we0(fft_stage_5_U0_X_1_0_we0),
    .X_1_0_d0(fft_stage_5_U0_X_1_0_d0),
    .X_1_1_address0(fft_stage_5_U0_X_1_1_address0),
    .X_1_1_ce0(fft_stage_5_U0_X_1_1_ce0),
    .X_1_1_we0(fft_stage_5_U0_X_1_1_we0),
    .X_1_1_d0(fft_stage_5_U0_X_1_1_d0),
    .p_read(ctrl1_regp_c2_channel3_dout),
    .ap_return(fft_stage_5_U0_ap_return)
);

IFFT_AP_pool pool_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(pool_U0_ap_start),
    .ap_done(pool_U0_ap_done),
    .ap_continue(pool_U0_ap_continue),
    .ap_idle(pool_U0_ap_idle),
    .ap_ready(pool_U0_ap_ready),
    .I_0_0_address0(pool_U0_I_0_0_address0),
    .I_0_0_ce0(pool_U0_I_0_0_ce0),
    .I_0_0_q0(out_data_6_0_08_t_q0),
    .I_0_0_address1(pool_U0_I_0_0_address1),
    .I_0_0_ce1(pool_U0_I_0_0_ce1),
    .I_0_0_q1(out_data_6_0_08_t_q1),
    .I_0_1_address0(pool_U0_I_0_1_address0),
    .I_0_1_ce0(pool_U0_I_0_1_ce0),
    .I_0_1_q0(out_data_6_0_19_t_q0),
    .I_0_1_address1(pool_U0_I_0_1_address1),
    .I_0_1_ce1(pool_U0_I_0_1_ce1),
    .I_0_1_q1(out_data_6_0_19_t_q1),
    .I_1_0_address0(pool_U0_I_1_0_address0),
    .I_1_0_ce0(pool_U0_I_1_0_ce0),
    .I_1_0_q0(out_data_6_1_010_t_q0),
    .I_1_0_address1(pool_U0_I_1_0_address1),
    .I_1_0_ce1(pool_U0_I_1_0_ce1),
    .I_1_0_q1(out_data_6_1_010_t_q1),
    .I_1_1_address0(pool_U0_I_1_1_address0),
    .I_1_1_ce0(pool_U0_I_1_1_ce0),
    .I_1_1_q0(out_data_6_1_111_t_q0),
    .I_1_1_address1(pool_U0_I_1_1_address1),
    .I_1_1_ce1(pool_U0_I_1_1_ce1),
    .I_1_1_q1(out_data_6_1_111_t_q1),
    .O_address0(pool_U0_O_address0),
    .O_ce0(pool_U0_O_ce0),
    .O_we0(pool_U0_O_we0),
    .O_d0(pool_U0_O_d0),
    .p_read(ctrl1_regp_c1_channel2_dout),
    .actp_regp_dout(actp_regp_c9_dout),
    .actp_regp_num_data_valid(actp_regp_c9_num_data_valid),
    .actp_regp_fifo_cap(actp_regp_c9_fifo_cap),
    .actp_regp_empty_n(actp_regp_c9_empty_n),
    .actp_regp_read(pool_U0_actp_regp_read),
    .ap_return_0(pool_U0_ap_return_0),
    .ap_return_1(pool_U0_ap_return_1)
);

IFFT_AP_push_out push_out_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(push_out_U0_ap_start),
    .ap_done(push_out_U0_ap_done),
    .ap_continue(push_out_U0_ap_continue),
    .ap_idle(push_out_U0_ap_idle),
    .ap_ready(push_out_U0_ap_ready),
    .O_address0(push_out_U0_O_address0),
    .O_ce0(push_out_U0_O_ce0),
    .O_q0(out_data_712_t_q0),
    .O_address1(push_out_U0_O_address1),
    .O_ce1(push_out_U0_O_ce1),
    .O_q1(out_data_712_t_q1),
    .out_st_din(push_out_U0_out_st_din),
    .out_st_num_data_valid(2'd0),
    .out_st_fifo_cap(2'd0),
    .out_st_full_n(out_st_full_n),
    .out_st_write(push_out_U0_out_st_write),
    .p_read(ctrl1_regp_c_channel_dout),
    .p_read1(actp_regp_c_channel_dout)
);

IFFT_AP_fifo_w32_d10_S actp_regp_c9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc20_U0_actp_regp_c9_din),
    .if_full_n(actp_regp_c9_full_n),
    .if_write(entry_proc20_U0_actp_regp_c9_write),
    .if_dout(actp_regp_c9_dout),
    .if_num_data_valid(actp_regp_c9_num_data_valid),
    .if_fifo_cap(actp_regp_c9_fifo_cap),
    .if_empty_n(actp_regp_c9_empty_n),
    .if_read(pool_U0_actp_regp_read)
);

IFFT_AP_fifo_w128_d2_S in_st1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(rd_data_U0_in_st_din),
    .if_full_n(in_st1_full_n),
    .if_write(rd_data_U0_in_st_write),
    .if_dout(in_st1_dout),
    .if_num_data_valid(in_st1_num_data_valid),
    .if_fifo_cap(in_st1_fifo_cap),
    .if_empty_n(in_st1_empty_n),
    .if_read(collect_input_U0_in_st_read)
);

IFFT_AP_fifo_w32_d2_S ctrl1_regp_c8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(rd_data_U0_ctrl1_regp_c8_din),
    .if_full_n(ctrl1_regp_c8_full_n),
    .if_write(rd_data_U0_ctrl1_regp_c8_write),
    .if_dout(ctrl1_regp_c8_dout),
    .if_num_data_valid(ctrl1_regp_c8_num_data_valid),
    .if_fifo_cap(ctrl1_regp_c8_fifo_cap),
    .if_empty_n(ctrl1_regp_c8_empty_n),
    .if_read(collect_input_U0_ctrl1_regp_read)
);

IFFT_AP_fifo_w32_d2_S ctrl1_regp_c7_channel8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(collect_input_U0_ap_return),
    .if_full_n(ctrl1_regp_c7_channel8_full_n),
    .if_write(ap_channel_done_ctrl1_regp_c7_channel8),
    .if_dout(ctrl1_regp_c7_channel8_dout),
    .if_num_data_valid(ctrl1_regp_c7_channel8_num_data_valid),
    .if_fifo_cap(ctrl1_regp_c7_channel8_fifo_cap),
    .if_empty_n(ctrl1_regp_c7_channel8_empty_n),
    .if_read(fft_stage_U0_ap_ready)
);

IFFT_AP_fifo_w32_d2_S ctrl1_regp_c6_channel7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fft_stage_U0_ap_return),
    .if_full_n(ctrl1_regp_c6_channel7_full_n),
    .if_write(ap_channel_done_ctrl1_regp_c6_channel7),
    .if_dout(ctrl1_regp_c6_channel7_dout),
    .if_num_data_valid(ctrl1_regp_c6_channel7_num_data_valid),
    .if_fifo_cap(ctrl1_regp_c6_channel7_fifo_cap),
    .if_empty_n(ctrl1_regp_c6_channel7_empty_n),
    .if_read(fft_stage_1_U0_ap_ready)
);

IFFT_AP_fifo_w32_d2_S ctrl1_regp_c5_channel6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fft_stage_1_U0_ap_return),
    .if_full_n(ctrl1_regp_c5_channel6_full_n),
    .if_write(ap_channel_done_ctrl1_regp_c5_channel6),
    .if_dout(ctrl1_regp_c5_channel6_dout),
    .if_num_data_valid(ctrl1_regp_c5_channel6_num_data_valid),
    .if_fifo_cap(ctrl1_regp_c5_channel6_fifo_cap),
    .if_empty_n(ctrl1_regp_c5_channel6_empty_n),
    .if_read(fft_stage_2_U0_ap_ready)
);

IFFT_AP_fifo_w32_d2_S ctrl1_regp_c4_channel5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fft_stage_2_U0_ap_return),
    .if_full_n(ctrl1_regp_c4_channel5_full_n),
    .if_write(ap_channel_done_ctrl1_regp_c4_channel5),
    .if_dout(ctrl1_regp_c4_channel5_dout),
    .if_num_data_valid(ctrl1_regp_c4_channel5_num_data_valid),
    .if_fifo_cap(ctrl1_regp_c4_channel5_fifo_cap),
    .if_empty_n(ctrl1_regp_c4_channel5_empty_n),
    .if_read(fft_stage_3_U0_ap_ready)
);

IFFT_AP_fifo_w32_d2_S ctrl1_regp_c3_channel4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fft_stage_3_U0_ap_return),
    .if_full_n(ctrl1_regp_c3_channel4_full_n),
    .if_write(ap_channel_done_ctrl1_regp_c3_channel4),
    .if_dout(ctrl1_regp_c3_channel4_dout),
    .if_num_data_valid(ctrl1_regp_c3_channel4_num_data_valid),
    .if_fifo_cap(ctrl1_regp_c3_channel4_fifo_cap),
    .if_empty_n(ctrl1_regp_c3_channel4_empty_n),
    .if_read(fft_stage_4_U0_ap_ready)
);

IFFT_AP_fifo_w32_d2_S ctrl1_regp_c2_channel3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fft_stage_4_U0_ap_return),
    .if_full_n(ctrl1_regp_c2_channel3_full_n),
    .if_write(ap_channel_done_ctrl1_regp_c2_channel3),
    .if_dout(ctrl1_regp_c2_channel3_dout),
    .if_num_data_valid(ctrl1_regp_c2_channel3_num_data_valid),
    .if_fifo_cap(ctrl1_regp_c2_channel3_fifo_cap),
    .if_empty_n(ctrl1_regp_c2_channel3_empty_n),
    .if_read(fft_stage_5_U0_ap_ready)
);

IFFT_AP_fifo_w32_d2_S ctrl1_regp_c1_channel2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fft_stage_5_U0_ap_return),
    .if_full_n(ctrl1_regp_c1_channel2_full_n),
    .if_write(ap_channel_done_ctrl1_regp_c1_channel2),
    .if_dout(ctrl1_regp_c1_channel2_dout),
    .if_num_data_valid(ctrl1_regp_c1_channel2_num_data_valid),
    .if_fifo_cap(ctrl1_regp_c1_channel2_fifo_cap),
    .if_empty_n(ctrl1_regp_c1_channel2_empty_n),
    .if_read(pool_U0_ap_ready)
);

IFFT_AP_fifo_w32_d2_S ctrl1_regp_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(pool_U0_ap_return_0),
    .if_full_n(ctrl1_regp_c_channel_full_n),
    .if_write(ap_channel_done_ctrl1_regp_c_channel),
    .if_dout(ctrl1_regp_c_channel_dout),
    .if_num_data_valid(ctrl1_regp_c_channel_num_data_valid),
    .if_fifo_cap(ctrl1_regp_c_channel_fifo_cap),
    .if_empty_n(ctrl1_regp_c_channel_empty_n),
    .if_read(push_out_U0_ap_ready)
);

IFFT_AP_fifo_w32_d2_S actp_regp_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(pool_U0_ap_return_1),
    .if_full_n(actp_regp_c_channel_full_n),
    .if_write(ap_channel_done_actp_regp_c_channel),
    .if_dout(actp_regp_c_channel_dout),
    .if_num_data_valid(actp_regp_c_channel_num_data_valid),
    .if_fifo_cap(actp_regp_c_channel_fifo_cap),
    .if_empty_n(actp_regp_c_channel_empty_n),
    .if_read(push_out_U0_ap_ready)
);

IFFT_AP_start_for_collect_input_U0 start_for_collect_input_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_collect_input_U0_din),
    .if_full_n(start_for_collect_input_U0_full_n),
    .if_write(rd_data_U0_start_write),
    .if_dout(start_for_collect_input_U0_dout),
    .if_empty_n(start_for_collect_input_U0_empty_n),
    .if_read(collect_input_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_actp_regp_c_channel <= 1'b0;
    end else begin
        if (((pool_U0_ap_done & pool_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_actp_regp_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_actp_regp_c_channel <= ap_sync_channel_write_actp_regp_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_ctrl1_regp_c1_channel2 <= 1'b0;
    end else begin
        if (((fft_stage_5_U0_ap_done & fft_stage_5_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_ctrl1_regp_c1_channel2 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_ctrl1_regp_c1_channel2 <= ap_sync_channel_write_ctrl1_regp_c1_channel2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_ctrl1_regp_c2_channel3 <= 1'b0;
    end else begin
        if (((fft_stage_4_U0_ap_done & fft_stage_4_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_ctrl1_regp_c2_channel3 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_ctrl1_regp_c2_channel3 <= ap_sync_channel_write_ctrl1_regp_c2_channel3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_ctrl1_regp_c3_channel4 <= 1'b0;
    end else begin
        if (((fft_stage_3_U0_ap_done & fft_stage_3_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_ctrl1_regp_c3_channel4 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_ctrl1_regp_c3_channel4 <= ap_sync_channel_write_ctrl1_regp_c3_channel4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_ctrl1_regp_c4_channel5 <= 1'b0;
    end else begin
        if (((fft_stage_2_U0_ap_done & fft_stage_2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_ctrl1_regp_c4_channel5 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_ctrl1_regp_c4_channel5 <= ap_sync_channel_write_ctrl1_regp_c4_channel5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_ctrl1_regp_c5_channel6 <= 1'b0;
    end else begin
        if (((fft_stage_1_U0_ap_done & fft_stage_1_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_ctrl1_regp_c5_channel6 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_ctrl1_regp_c5_channel6 <= ap_sync_channel_write_ctrl1_regp_c5_channel6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_ctrl1_regp_c6_channel7 <= 1'b0;
    end else begin
        if (((fft_stage_U0_ap_done & fft_stage_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_ctrl1_regp_c6_channel7 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_ctrl1_regp_c6_channel7 <= ap_sync_channel_write_ctrl1_regp_c6_channel7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_ctrl1_regp_c7_channel8 <= 1'b0;
    end else begin
        if (((collect_input_U0_ap_done & collect_input_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_ctrl1_regp_c7_channel8 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_ctrl1_regp_c7_channel8 <= ap_sync_channel_write_ctrl1_regp_c7_channel8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_ctrl1_regp_c_channel <= 1'b0;
    end else begin
        if (((pool_U0_ap_done & pool_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_ctrl1_regp_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_ctrl1_regp_c_channel <= ap_sync_channel_write_ctrl1_regp_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_input_data2 <= 1'b0;
    end else begin
        if (((collect_input_U0_ap_done & collect_input_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_input_data2 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_input_data2 <= ap_sync_channel_write_input_data2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_out_data_13 <= 1'b0;
    end else begin
        if (((fft_stage_U0_ap_done & fft_stage_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_out_data_13 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_out_data_13 <= ap_sync_channel_write_out_data_13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_out_data_24 <= 1'b0;
    end else begin
        if (((fft_stage_1_U0_ap_done & fft_stage_1_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_out_data_24 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_out_data_24 <= ap_sync_channel_write_out_data_24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_out_data_35 <= 1'b0;
    end else begin
        if (((fft_stage_2_U0_ap_done & fft_stage_2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_out_data_35 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_out_data_35 <= ap_sync_channel_write_out_data_35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_out_data_46 <= 1'b0;
    end else begin
        if (((fft_stage_3_U0_ap_done & fft_stage_3_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_out_data_46 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_out_data_46 <= ap_sync_channel_write_out_data_46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_out_data_57 <= 1'b0;
    end else begin
        if (((fft_stage_4_U0_ap_done & fft_stage_4_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_out_data_57 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_out_data_57 <= ap_sync_channel_write_out_data_57;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_out_data_6_0_08 <= 1'b0;
    end else begin
        if (((fft_stage_5_U0_ap_done & fft_stage_5_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_out_data_6_0_08 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_out_data_6_0_08 <= ap_sync_channel_write_out_data_6_0_08;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_out_data_6_0_19 <= 1'b0;
    end else begin
        if (((fft_stage_5_U0_ap_done & fft_stage_5_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_out_data_6_0_19 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_out_data_6_0_19 <= ap_sync_channel_write_out_data_6_0_19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_out_data_6_1_010 <= 1'b0;
    end else begin
        if (((fft_stage_5_U0_ap_done & fft_stage_5_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_out_data_6_1_010 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_out_data_6_1_010 <= ap_sync_channel_write_out_data_6_1_010;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_out_data_6_1_111 <= 1'b0;
    end else begin
        if (((fft_stage_5_U0_ap_done & fft_stage_5_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_out_data_6_1_111 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_out_data_6_1_111 <= ap_sync_channel_write_out_data_6_1_111;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_out_data_712 <= 1'b0;
    end else begin
        if (((pool_U0_ap_done & pool_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_out_data_712 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_out_data_712 <= ap_sync_channel_write_out_data_712;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_entry_proc20_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_entry_proc20_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_entry_proc20_U0_ap_ready <= ap_sync_entry_proc20_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_rd_data_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_rd_data_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_rd_data_U0_ap_ready <= ap_sync_rd_data_U0_ap_ready;
        end
    end
end

assign ap_channel_done_actp_regp_c_channel = (pool_U0_ap_done & (ap_sync_reg_channel_write_actp_regp_c_channel ^ 1'b1));

assign ap_channel_done_ctrl1_regp_c1_channel2 = (fft_stage_5_U0_ap_done & (ap_sync_reg_channel_write_ctrl1_regp_c1_channel2 ^ 1'b1));

assign ap_channel_done_ctrl1_regp_c2_channel3 = (fft_stage_4_U0_ap_done & (ap_sync_reg_channel_write_ctrl1_regp_c2_channel3 ^ 1'b1));

assign ap_channel_done_ctrl1_regp_c3_channel4 = (fft_stage_3_U0_ap_done & (ap_sync_reg_channel_write_ctrl1_regp_c3_channel4 ^ 1'b1));

assign ap_channel_done_ctrl1_regp_c4_channel5 = (fft_stage_2_U0_ap_done & (ap_sync_reg_channel_write_ctrl1_regp_c4_channel5 ^ 1'b1));

assign ap_channel_done_ctrl1_regp_c5_channel6 = (fft_stage_1_U0_ap_done & (ap_sync_reg_channel_write_ctrl1_regp_c5_channel6 ^ 1'b1));

assign ap_channel_done_ctrl1_regp_c6_channel7 = (fft_stage_U0_ap_done & (ap_sync_reg_channel_write_ctrl1_regp_c6_channel7 ^ 1'b1));

assign ap_channel_done_ctrl1_regp_c7_channel8 = ((ap_sync_reg_channel_write_ctrl1_regp_c7_channel8 ^ 1'b1) & collect_input_U0_ap_done);

assign ap_channel_done_ctrl1_regp_c_channel = (pool_U0_ap_done & (ap_sync_reg_channel_write_ctrl1_regp_c_channel ^ 1'b1));

assign ap_channel_done_input_data2 = ((ap_sync_reg_channel_write_input_data2 ^ 1'b1) & collect_input_U0_ap_done);

assign ap_channel_done_out_data_13 = (fft_stage_U0_ap_done & (ap_sync_reg_channel_write_out_data_13 ^ 1'b1));

assign ap_channel_done_out_data_24 = (fft_stage_1_U0_ap_done & (ap_sync_reg_channel_write_out_data_24 ^ 1'b1));

assign ap_channel_done_out_data_35 = (fft_stage_2_U0_ap_done & (ap_sync_reg_channel_write_out_data_35 ^ 1'b1));

assign ap_channel_done_out_data_46 = (fft_stage_3_U0_ap_done & (ap_sync_reg_channel_write_out_data_46 ^ 1'b1));

assign ap_channel_done_out_data_57 = (fft_stage_4_U0_ap_done & (ap_sync_reg_channel_write_out_data_57 ^ 1'b1));

assign ap_channel_done_out_data_6_0_08 = (fft_stage_5_U0_ap_done & (ap_sync_reg_channel_write_out_data_6_0_08 ^ 1'b1));

assign ap_channel_done_out_data_6_0_19 = (fft_stage_5_U0_ap_done & (ap_sync_reg_channel_write_out_data_6_0_19 ^ 1'b1));

assign ap_channel_done_out_data_6_1_010 = (fft_stage_5_U0_ap_done & (ap_sync_reg_channel_write_out_data_6_1_010 ^ 1'b1));

assign ap_channel_done_out_data_6_1_111 = (fft_stage_5_U0_ap_done & (ap_sync_reg_channel_write_out_data_6_1_111 ^ 1'b1));

assign ap_channel_done_out_data_712 = (pool_U0_ap_done & (ap_sync_reg_channel_write_out_data_712 ^ 1'b1));

assign ap_done = push_out_U0_ap_done;

assign ap_idle = (rd_data_U0_ap_idle & push_out_U0_ap_idle & pool_U0_ap_idle & fft_stage_U0_ap_idle & fft_stage_5_U0_ap_idle & fft_stage_4_U0_ap_idle & fft_stage_3_U0_ap_idle & fft_stage_2_U0_ap_idle & fft_stage_1_U0_ap_idle & (ctrl1_regp_c7_channel8_empty_n ^ 1'b1) & (out_data_712_t_empty_n ^ 1'b1) & (out_data_6_1_111_t_empty_n ^ 1'b1) & (out_data_6_1_010_t_empty_n ^ 1'b1) & (out_data_6_0_19_t_empty_n ^ 1'b1) & (out_data_6_0_08_t_empty_n ^ 1'b1) & (out_data_57_t_empty_n ^ 1'b1) & (out_data_46_t_empty_n ^ 1'b1) & (out_data_35_t_empty_n ^ 1'b1) & (out_data_24_t_empty_n ^ 1'b1) & (out_data_13_t_empty_n ^ 1'b1) & (input_data2_t_empty_n ^ 1'b1) & (1'b1 ^ actp_regp_c_channel_empty_n) & (ctrl1_regp_c_channel_empty_n ^ 1'b1) & (ctrl1_regp_c1_channel2_empty_n ^ 1'b1) & (ctrl1_regp_c2_channel3_empty_n ^ 1'b1) & (ctrl1_regp_c3_channel4_empty_n ^ 1'b1) & (ctrl1_regp_c4_channel5_empty_n ^ 1'b1) & (ctrl1_regp_c5_channel6_empty_n ^ 1'b1) & (ctrl1_regp_c6_channel7_empty_n ^ 1'b1) & entry_proc20_U0_ap_idle & collect_input_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_channel_write_actp_regp_c_channel = ((ap_channel_done_actp_regp_c_channel & actp_regp_c_channel_full_n) | ap_sync_reg_channel_write_actp_regp_c_channel);

assign ap_sync_channel_write_ctrl1_regp_c1_channel2 = ((ctrl1_regp_c1_channel2_full_n & ap_channel_done_ctrl1_regp_c1_channel2) | ap_sync_reg_channel_write_ctrl1_regp_c1_channel2);

assign ap_sync_channel_write_ctrl1_regp_c2_channel3 = ((ctrl1_regp_c2_channel3_full_n & ap_channel_done_ctrl1_regp_c2_channel3) | ap_sync_reg_channel_write_ctrl1_regp_c2_channel3);

assign ap_sync_channel_write_ctrl1_regp_c3_channel4 = ((ctrl1_regp_c3_channel4_full_n & ap_channel_done_ctrl1_regp_c3_channel4) | ap_sync_reg_channel_write_ctrl1_regp_c3_channel4);

assign ap_sync_channel_write_ctrl1_regp_c4_channel5 = ((ctrl1_regp_c4_channel5_full_n & ap_channel_done_ctrl1_regp_c4_channel5) | ap_sync_reg_channel_write_ctrl1_regp_c4_channel5);

assign ap_sync_channel_write_ctrl1_regp_c5_channel6 = ((ctrl1_regp_c5_channel6_full_n & ap_channel_done_ctrl1_regp_c5_channel6) | ap_sync_reg_channel_write_ctrl1_regp_c5_channel6);

assign ap_sync_channel_write_ctrl1_regp_c6_channel7 = ((ctrl1_regp_c6_channel7_full_n & ap_channel_done_ctrl1_regp_c6_channel7) | ap_sync_reg_channel_write_ctrl1_regp_c6_channel7);

assign ap_sync_channel_write_ctrl1_regp_c7_channel8 = ((ctrl1_regp_c7_channel8_full_n & ap_channel_done_ctrl1_regp_c7_channel8) | ap_sync_reg_channel_write_ctrl1_regp_c7_channel8);

assign ap_sync_channel_write_ctrl1_regp_c_channel = ((ctrl1_regp_c_channel_full_n & ap_channel_done_ctrl1_regp_c_channel) | ap_sync_reg_channel_write_ctrl1_regp_c_channel);

assign ap_sync_channel_write_input_data2 = ((collect_input_U0_I_full_n & ap_channel_done_input_data2) | ap_sync_reg_channel_write_input_data2);

assign ap_sync_channel_write_out_data_13 = ((fft_stage_U0_X_full_n & ap_channel_done_out_data_13) | ap_sync_reg_channel_write_out_data_13);

assign ap_sync_channel_write_out_data_24 = ((fft_stage_1_U0_X_full_n & ap_channel_done_out_data_24) | ap_sync_reg_channel_write_out_data_24);

assign ap_sync_channel_write_out_data_35 = ((fft_stage_2_U0_X_full_n & ap_channel_done_out_data_35) | ap_sync_reg_channel_write_out_data_35);

assign ap_sync_channel_write_out_data_46 = ((fft_stage_3_U0_X_full_n & ap_channel_done_out_data_46) | ap_sync_reg_channel_write_out_data_46);

assign ap_sync_channel_write_out_data_57 = ((fft_stage_4_U0_X_full_n & ap_channel_done_out_data_57) | ap_sync_reg_channel_write_out_data_57);

assign ap_sync_channel_write_out_data_6_0_08 = ((fft_stage_5_U0_X_0_0_full_n & ap_channel_done_out_data_6_0_08) | ap_sync_reg_channel_write_out_data_6_0_08);

assign ap_sync_channel_write_out_data_6_0_19 = ((fft_stage_5_U0_X_0_1_full_n & ap_channel_done_out_data_6_0_19) | ap_sync_reg_channel_write_out_data_6_0_19);

assign ap_sync_channel_write_out_data_6_1_010 = ((fft_stage_5_U0_X_1_0_full_n & ap_channel_done_out_data_6_1_010) | ap_sync_reg_channel_write_out_data_6_1_010);

assign ap_sync_channel_write_out_data_6_1_111 = ((fft_stage_5_U0_X_1_1_full_n & ap_channel_done_out_data_6_1_111) | ap_sync_reg_channel_write_out_data_6_1_111);

assign ap_sync_channel_write_out_data_712 = ((pool_U0_O_full_n & ap_channel_done_out_data_712) | ap_sync_reg_channel_write_out_data_712);

assign ap_sync_entry_proc20_U0_ap_ready = (entry_proc20_U0_ap_ready | ap_sync_reg_entry_proc20_U0_ap_ready);

assign ap_sync_rd_data_U0_ap_ready = (rd_data_U0_ap_ready | ap_sync_reg_rd_data_U0_ap_ready);

assign ap_sync_ready = (ap_sync_rd_data_U0_ap_ready & ap_sync_entry_proc20_U0_ap_ready);

assign collect_input_U0_I_full_n = input_data2_i_full_n;

assign collect_input_U0_ap_continue = (ap_sync_channel_write_input_data2 & ap_sync_channel_write_ctrl1_regp_c7_channel8);

assign collect_input_U0_ap_start = start_for_collect_input_U0_empty_n;

assign entry_proc20_U0_ap_continue = 1'b1;

assign entry_proc20_U0_ap_start = ((ap_sync_reg_entry_proc20_U0_ap_ready ^ 1'b1) & ap_start);

assign fft_stage_1_U0_X_full_n = out_data_24_i_full_n;

assign fft_stage_1_U0_ap_continue = (ap_sync_channel_write_out_data_24 & ap_sync_channel_write_ctrl1_regp_c5_channel6);

assign fft_stage_1_U0_ap_start = (out_data_13_t_empty_n & ctrl1_regp_c6_channel7_empty_n);

assign fft_stage_2_U0_X_full_n = out_data_35_i_full_n;

assign fft_stage_2_U0_ap_continue = (ap_sync_channel_write_out_data_35 & ap_sync_channel_write_ctrl1_regp_c4_channel5);

assign fft_stage_2_U0_ap_start = (out_data_24_t_empty_n & ctrl1_regp_c5_channel6_empty_n);

assign fft_stage_3_U0_X_full_n = out_data_46_i_full_n;

assign fft_stage_3_U0_ap_continue = (ap_sync_channel_write_out_data_46 & ap_sync_channel_write_ctrl1_regp_c3_channel4);

assign fft_stage_3_U0_ap_start = (out_data_35_t_empty_n & ctrl1_regp_c4_channel5_empty_n);

assign fft_stage_4_U0_X_full_n = out_data_57_i_full_n;

assign fft_stage_4_U0_ap_continue = (ap_sync_channel_write_out_data_57 & ap_sync_channel_write_ctrl1_regp_c2_channel3);

assign fft_stage_4_U0_ap_start = (out_data_46_t_empty_n & ctrl1_regp_c3_channel4_empty_n);

assign fft_stage_5_U0_X_0_0_full_n = out_data_6_0_08_i_full_n;

assign fft_stage_5_U0_X_0_1_full_n = out_data_6_0_19_i_full_n;

assign fft_stage_5_U0_X_1_0_full_n = out_data_6_1_010_i_full_n;

assign fft_stage_5_U0_X_1_1_full_n = out_data_6_1_111_i_full_n;

assign fft_stage_5_U0_ap_continue = (ap_sync_channel_write_out_data_6_1_111 & ap_sync_channel_write_out_data_6_1_010 & ap_sync_channel_write_out_data_6_0_19 & ap_sync_channel_write_out_data_6_0_08 & ap_sync_channel_write_ctrl1_regp_c1_channel2);

assign fft_stage_5_U0_ap_start = (out_data_57_t_empty_n & ctrl1_regp_c2_channel3_empty_n);

assign fft_stage_U0_X_full_n = out_data_13_i_full_n;

assign fft_stage_U0_ap_continue = (ap_sync_channel_write_out_data_13 & ap_sync_channel_write_ctrl1_regp_c6_channel7);

assign fft_stage_U0_ap_start = (input_data2_t_empty_n & ctrl1_regp_c7_channel8_empty_n);

assign m_axi_gmem_ARADDR = rd_data_U0_m_axi_gmem_ARADDR;

assign m_axi_gmem_ARBURST = rd_data_U0_m_axi_gmem_ARBURST;

assign m_axi_gmem_ARCACHE = rd_data_U0_m_axi_gmem_ARCACHE;

assign m_axi_gmem_ARID = rd_data_U0_m_axi_gmem_ARID;

assign m_axi_gmem_ARLEN = rd_data_U0_m_axi_gmem_ARLEN;

assign m_axi_gmem_ARLOCK = rd_data_U0_m_axi_gmem_ARLOCK;

assign m_axi_gmem_ARPROT = rd_data_U0_m_axi_gmem_ARPROT;

assign m_axi_gmem_ARQOS = rd_data_U0_m_axi_gmem_ARQOS;

assign m_axi_gmem_ARREGION = rd_data_U0_m_axi_gmem_ARREGION;

assign m_axi_gmem_ARSIZE = rd_data_U0_m_axi_gmem_ARSIZE;

assign m_axi_gmem_ARUSER = rd_data_U0_m_axi_gmem_ARUSER;

assign m_axi_gmem_ARVALID = rd_data_U0_m_axi_gmem_ARVALID;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_RREADY = rd_data_U0_m_axi_gmem_RREADY;

assign m_axi_gmem_WDATA = 128'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 16'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign out_st_din = push_out_U0_out_st_din;

assign out_st_write = push_out_U0_out_st_write;

assign pool_U0_O_full_n = out_data_712_i_full_n;

assign pool_U0_ap_continue = (ap_sync_channel_write_out_data_712 & ap_sync_channel_write_ctrl1_regp_c_channel & ap_sync_channel_write_actp_regp_c_channel);

assign pool_U0_ap_start = (out_data_6_1_111_t_empty_n & out_data_6_1_010_t_empty_n & out_data_6_0_19_t_empty_n & out_data_6_0_08_t_empty_n & ctrl1_regp_c1_channel2_empty_n);

assign push_out_U0_ap_continue = ap_continue;

assign push_out_U0_ap_start = (out_data_712_t_empty_n & ctrl1_regp_c_channel_empty_n & actp_regp_c_channel_empty_n);

assign rd_data_U0_ap_continue = 1'b1;

assign rd_data_U0_ap_start = ((ap_sync_reg_rd_data_U0_ap_ready ^ 1'b1) & ap_start);

assign start_for_collect_input_U0_din = 1'b1;

endmodule //IFFT_AP_dataflow_in_loop_VITIS_LOOP_208_1
