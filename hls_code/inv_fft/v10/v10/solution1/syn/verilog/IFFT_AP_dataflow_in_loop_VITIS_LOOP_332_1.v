// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module IFFT_AP_dataflow_in_loop_VITIS_LOOP_332_1 (
        ap_clk,
        ap_rst,
        out_st_dout,
        out_st_empty_n,
        out_st_read,
        ctrl1_reg_ls,
        ctrl2_reg_pn,
        actp_reg_pool_size,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        out1,
        out2,
        layer2_reg_ifs,
        out1_ap_vld,
        out2_ap_vld,
        layer2_reg_ifs_ap_vld,
        ap_start,
        ctrl1_reg_ls_ap_vld,
        ctrl2_reg_pn_ap_vld,
        actp_reg_pool_size_ap_vld,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_clk;
input   ap_rst;
input  [63:0] out_st_dout;
input   out_st_empty_n;
output   out_st_read;
input  [7:0] ctrl1_reg_ls;
input  [7:0] ctrl2_reg_pn;
input  [7:0] actp_reg_pool_size;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [127:0] m_axi_gmem_WDATA;
output  [15:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [127:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] out1;
input  [63:0] out2;
input  [15:0] layer2_reg_ifs;
input   out1_ap_vld;
input   out2_ap_vld;
input   layer2_reg_ifs_ap_vld;
input   ap_start;
input   ctrl1_reg_ls_ap_vld;
input   ctrl2_reg_pn_ap_vld;
input   actp_reg_pool_size_ap_vld;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire   [15:0] buffer1_i_q0;
wire   [15:0] buffer1_i_q1;
wire   [15:0] buffer1_t_q0;
wire   [15:0] buffer1_t_q1;
wire   [15:0] buffer1_1_i_q0;
wire   [15:0] buffer1_1_i_q1;
wire   [15:0] buffer1_1_t_q0;
wire   [15:0] buffer1_1_t_q1;
wire    entry_proc_U0_ap_start;
wire    entry_proc_U0_ap_done;
wire    entry_proc_U0_ap_continue;
wire    entry_proc_U0_ap_idle;
wire    entry_proc_U0_ap_ready;
wire   [63:0] entry_proc_U0_out1_c_din;
wire    entry_proc_U0_out1_c_write;
wire   [63:0] entry_proc_U0_out2_c_din;
wire    entry_proc_U0_out2_c_write;
wire   [15:0] entry_proc_U0_layer2_reg_ifs_c_din;
wire    entry_proc_U0_layer2_reg_ifs_c_write;
wire    buffer_U0_ap_start;
wire    buffer_U0_ap_done;
wire    buffer_U0_ap_continue;
wire    buffer_U0_ap_idle;
wire    buffer_U0_ap_ready;
wire    buffer_U0_out_st_read;
wire   [12:0] buffer_U0_buffer1_0_address0;
wire    buffer_U0_buffer1_0_ce0;
wire    buffer_U0_buffer1_0_we0;
wire   [15:0] buffer_U0_buffer1_0_d0;
wire   [12:0] buffer_U0_buffer1_1_address0;
wire    buffer_U0_buffer1_1_ce0;
wire    buffer_U0_buffer1_1_we0;
wire   [15:0] buffer_U0_buffer1_1_d0;
wire   [7:0] buffer_U0_ap_return_0;
wire   [7:0] buffer_U0_ap_return_1;
wire    ap_channel_done_actp_reg_pool_size_c_channel;
wire    actp_reg_pool_size_c_channel_full_n;
reg    ap_sync_reg_channel_write_actp_reg_pool_size_c_channel;
wire    ap_sync_channel_write_actp_reg_pool_size_c_channel;
wire    ap_channel_done_ctrl1_reg_ls_c_channel;
wire    ctrl1_reg_ls_c_channel_full_n;
reg    ap_sync_reg_channel_write_ctrl1_reg_ls_c_channel;
wire    ap_sync_channel_write_ctrl1_reg_ls_c_channel;
wire    ap_channel_done_buffer1_1;
wire    buffer_U0_buffer1_1_full_n;
reg    ap_sync_reg_channel_write_buffer1_1;
wire    ap_sync_channel_write_buffer1_1;
wire    ap_channel_done_buffer1;
wire    buffer_U0_buffer1_0_full_n;
reg    ap_sync_reg_channel_write_buffer1;
wire    ap_sync_channel_write_buffer1;
wire    write_U0_ap_start;
wire    write_U0_ap_done;
wire    write_U0_ap_continue;
wire    write_U0_ap_idle;
wire    write_U0_ap_ready;
wire   [12:0] write_U0_buffer1_0_address0;
wire    write_U0_buffer1_0_ce0;
wire   [12:0] write_U0_buffer1_0_address1;
wire    write_U0_buffer1_0_ce1;
wire   [12:0] write_U0_buffer1_1_address0;
wire    write_U0_buffer1_1_ce0;
wire   [12:0] write_U0_buffer1_1_address1;
wire    write_U0_buffer1_1_ce1;
wire    write_U0_m_axi_gmem_AWVALID;
wire   [63:0] write_U0_m_axi_gmem_AWADDR;
wire   [0:0] write_U0_m_axi_gmem_AWID;
wire   [31:0] write_U0_m_axi_gmem_AWLEN;
wire   [2:0] write_U0_m_axi_gmem_AWSIZE;
wire   [1:0] write_U0_m_axi_gmem_AWBURST;
wire   [1:0] write_U0_m_axi_gmem_AWLOCK;
wire   [3:0] write_U0_m_axi_gmem_AWCACHE;
wire   [2:0] write_U0_m_axi_gmem_AWPROT;
wire   [3:0] write_U0_m_axi_gmem_AWQOS;
wire   [3:0] write_U0_m_axi_gmem_AWREGION;
wire   [0:0] write_U0_m_axi_gmem_AWUSER;
wire    write_U0_m_axi_gmem_WVALID;
wire   [127:0] write_U0_m_axi_gmem_WDATA;
wire   [15:0] write_U0_m_axi_gmem_WSTRB;
wire    write_U0_m_axi_gmem_WLAST;
wire   [0:0] write_U0_m_axi_gmem_WID;
wire   [0:0] write_U0_m_axi_gmem_WUSER;
wire    write_U0_m_axi_gmem_ARVALID;
wire   [63:0] write_U0_m_axi_gmem_ARADDR;
wire   [0:0] write_U0_m_axi_gmem_ARID;
wire   [31:0] write_U0_m_axi_gmem_ARLEN;
wire   [2:0] write_U0_m_axi_gmem_ARSIZE;
wire   [1:0] write_U0_m_axi_gmem_ARBURST;
wire   [1:0] write_U0_m_axi_gmem_ARLOCK;
wire   [3:0] write_U0_m_axi_gmem_ARCACHE;
wire   [2:0] write_U0_m_axi_gmem_ARPROT;
wire   [3:0] write_U0_m_axi_gmem_ARQOS;
wire   [3:0] write_U0_m_axi_gmem_ARREGION;
wire   [0:0] write_U0_m_axi_gmem_ARUSER;
wire    write_U0_m_axi_gmem_RREADY;
wire    write_U0_m_axi_gmem_BREADY;
wire    write_U0_out1_read;
wire    write_U0_out2_read;
wire    write_U0_layer2_reg_2_read;
wire    buffer1_i_full_n;
wire    buffer1_t_empty_n;
wire    buffer1_1_i_full_n;
wire    buffer1_1_t_empty_n;
wire    out1_c_full_n;
wire   [63:0] out1_c_dout;
wire   [2:0] out1_c_num_data_valid;
wire   [2:0] out1_c_fifo_cap;
wire    out1_c_empty_n;
wire    out2_c_full_n;
wire   [63:0] out2_c_dout;
wire   [2:0] out2_c_num_data_valid;
wire   [2:0] out2_c_fifo_cap;
wire    out2_c_empty_n;
wire    layer2_reg_ifs_c_full_n;
wire   [15:0] layer2_reg_ifs_c_dout;
wire   [2:0] layer2_reg_ifs_c_num_data_valid;
wire   [2:0] layer2_reg_ifs_c_fifo_cap;
wire    layer2_reg_ifs_c_empty_n;
wire   [7:0] ctrl1_reg_ls_c_channel_dout;
wire   [1:0] ctrl1_reg_ls_c_channel_num_data_valid;
wire   [1:0] ctrl1_reg_ls_c_channel_fifo_cap;
wire    ctrl1_reg_ls_c_channel_empty_n;
wire   [7:0] actp_reg_pool_size_c_channel_dout;
wire   [1:0] actp_reg_pool_size_c_channel_num_data_valid;
wire   [1:0] actp_reg_pool_size_c_channel_fifo_cap;
wire    actp_reg_pool_size_c_channel_empty_n;
wire    ap_sync_ready;
reg    ap_sync_reg_entry_proc_U0_ap_ready;
wire    ap_sync_entry_proc_U0_ap_ready;
reg    ap_sync_reg_buffer_U0_ap_ready;
wire    ap_sync_buffer_U0_ap_ready;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_sync_reg_channel_write_actp_reg_pool_size_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_ctrl1_reg_ls_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_buffer1_1 = 1'b0;
#0 ap_sync_reg_channel_write_buffer1 = 1'b0;
#0 ap_sync_reg_entry_proc_U0_ap_ready = 1'b0;
#0 ap_sync_reg_buffer_U0_ap_ready = 1'b0;
end

IFFT_AP_dataflow_in_loop_VITIS_LOOP_332_1_buffer1_RAM_AUTO_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 8192 ),
    .AddressWidth( 13 ))
buffer1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(buffer_U0_buffer1_0_address0),
    .i_ce0(buffer_U0_buffer1_0_ce0),
    .i_we0(buffer_U0_buffer1_0_we0),
    .i_d0(buffer_U0_buffer1_0_d0),
    .i_q0(buffer1_i_q0),
    .i_address1(13'd0),
    .i_ce1(1'b0),
    .i_q1(buffer1_i_q1),
    .t_address0(write_U0_buffer1_0_address0),
    .t_ce0(write_U0_buffer1_0_ce0),
    .t_we0(1'b0),
    .t_d0(16'd0),
    .t_q0(buffer1_t_q0),
    .t_address1(write_U0_buffer1_0_address1),
    .t_ce1(write_U0_buffer1_0_ce1),
    .t_q1(buffer1_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(buffer1_i_full_n),
    .i_write(ap_channel_done_buffer1),
    .t_empty_n(buffer1_t_empty_n),
    .t_read(write_U0_ap_ready)
);

IFFT_AP_dataflow_in_loop_VITIS_LOOP_332_1_buffer1_RAM_AUTO_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 8192 ),
    .AddressWidth( 13 ))
buffer1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(buffer_U0_buffer1_1_address0),
    .i_ce0(buffer_U0_buffer1_1_ce0),
    .i_we0(buffer_U0_buffer1_1_we0),
    .i_d0(buffer_U0_buffer1_1_d0),
    .i_q0(buffer1_1_i_q0),
    .i_address1(13'd0),
    .i_ce1(1'b0),
    .i_q1(buffer1_1_i_q1),
    .t_address0(write_U0_buffer1_1_address0),
    .t_ce0(write_U0_buffer1_1_ce0),
    .t_we0(1'b0),
    .t_d0(16'd0),
    .t_q0(buffer1_1_t_q0),
    .t_address1(write_U0_buffer1_1_address1),
    .t_ce1(write_U0_buffer1_1_ce1),
    .t_q1(buffer1_1_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(buffer1_1_i_full_n),
    .i_write(ap_channel_done_buffer1_1),
    .t_empty_n(buffer1_1_t_empty_n),
    .t_read(write_U0_ap_ready)
);

IFFT_AP_entry_proc entry_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(entry_proc_U0_ap_start),
    .ap_done(entry_proc_U0_ap_done),
    .ap_continue(entry_proc_U0_ap_continue),
    .ap_idle(entry_proc_U0_ap_idle),
    .ap_ready(entry_proc_U0_ap_ready),
    .out1(out1),
    .out1_c_din(entry_proc_U0_out1_c_din),
    .out1_c_num_data_valid(out1_c_num_data_valid),
    .out1_c_fifo_cap(out1_c_fifo_cap),
    .out1_c_full_n(out1_c_full_n),
    .out1_c_write(entry_proc_U0_out1_c_write),
    .out2(out2),
    .out2_c_din(entry_proc_U0_out2_c_din),
    .out2_c_num_data_valid(out2_c_num_data_valid),
    .out2_c_fifo_cap(out2_c_fifo_cap),
    .out2_c_full_n(out2_c_full_n),
    .out2_c_write(entry_proc_U0_out2_c_write),
    .layer2_reg_ifs(layer2_reg_ifs),
    .layer2_reg_ifs_c_din(entry_proc_U0_layer2_reg_ifs_c_din),
    .layer2_reg_ifs_c_num_data_valid(layer2_reg_ifs_c_num_data_valid),
    .layer2_reg_ifs_c_fifo_cap(layer2_reg_ifs_c_fifo_cap),
    .layer2_reg_ifs_c_full_n(layer2_reg_ifs_c_full_n),
    .layer2_reg_ifs_c_write(entry_proc_U0_layer2_reg_ifs_c_write)
);

IFFT_AP_buffer_r buffer_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(buffer_U0_ap_start),
    .ap_done(buffer_U0_ap_done),
    .ap_continue(buffer_U0_ap_continue),
    .ap_idle(buffer_U0_ap_idle),
    .ap_ready(buffer_U0_ap_ready),
    .out_st_dout(out_st_dout),
    .out_st_num_data_valid(2'd0),
    .out_st_fifo_cap(2'd0),
    .out_st_empty_n(out_st_empty_n),
    .out_st_read(buffer_U0_out_st_read),
    .buffer1_0_address0(buffer_U0_buffer1_0_address0),
    .buffer1_0_ce0(buffer_U0_buffer1_0_ce0),
    .buffer1_0_we0(buffer_U0_buffer1_0_we0),
    .buffer1_0_d0(buffer_U0_buffer1_0_d0),
    .buffer1_1_address0(buffer_U0_buffer1_1_address0),
    .buffer1_1_ce0(buffer_U0_buffer1_1_ce0),
    .buffer1_1_we0(buffer_U0_buffer1_1_we0),
    .buffer1_1_d0(buffer_U0_buffer1_1_d0),
    .ctrl1_reg_3(ctrl1_reg_ls),
    .ctrl2_reg_0(ctrl2_reg_pn),
    .actp_reg_3(actp_reg_pool_size),
    .ap_return_0(buffer_U0_ap_return_0),
    .ap_return_1(buffer_U0_ap_return_1)
);

IFFT_AP_write_r write_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(write_U0_ap_start),
    .ap_done(write_U0_ap_done),
    .ap_continue(write_U0_ap_continue),
    .ap_idle(write_U0_ap_idle),
    .ap_ready(write_U0_ap_ready),
    .buffer1_0_address0(write_U0_buffer1_0_address0),
    .buffer1_0_ce0(write_U0_buffer1_0_ce0),
    .buffer1_0_q0(buffer1_t_q0),
    .buffer1_0_address1(write_U0_buffer1_0_address1),
    .buffer1_0_ce1(write_U0_buffer1_0_ce1),
    .buffer1_0_q1(buffer1_t_q1),
    .buffer1_1_address0(write_U0_buffer1_1_address0),
    .buffer1_1_ce0(write_U0_buffer1_1_ce0),
    .buffer1_1_q0(buffer1_1_t_q0),
    .buffer1_1_address1(write_U0_buffer1_1_address1),
    .buffer1_1_ce1(write_U0_buffer1_1_ce1),
    .buffer1_1_q1(buffer1_1_t_q1),
    .m_axi_gmem_AWVALID(write_U0_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(m_axi_gmem_AWREADY),
    .m_axi_gmem_AWADDR(write_U0_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(write_U0_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(write_U0_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(write_U0_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(write_U0_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(write_U0_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(write_U0_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(write_U0_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(write_U0_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(write_U0_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(write_U0_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(write_U0_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(m_axi_gmem_WREADY),
    .m_axi_gmem_WDATA(write_U0_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(write_U0_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(write_U0_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(write_U0_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(write_U0_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(write_U0_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(1'b0),
    .m_axi_gmem_ARADDR(write_U0_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(write_U0_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(write_U0_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(write_U0_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(write_U0_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(write_U0_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(write_U0_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(write_U0_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(write_U0_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(write_U0_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(write_U0_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(1'b0),
    .m_axi_gmem_RREADY(write_U0_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(128'd0),
    .m_axi_gmem_RLAST(1'b0),
    .m_axi_gmem_RID(1'd0),
    .m_axi_gmem_RFIFONUM(9'd0),
    .m_axi_gmem_RUSER(1'd0),
    .m_axi_gmem_RRESP(2'd0),
    .m_axi_gmem_BVALID(m_axi_gmem_BVALID),
    .m_axi_gmem_BREADY(write_U0_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(m_axi_gmem_BRESP),
    .m_axi_gmem_BID(m_axi_gmem_BID),
    .m_axi_gmem_BUSER(m_axi_gmem_BUSER),
    .out1_dout(out1_c_dout),
    .out1_num_data_valid(out1_c_num_data_valid),
    .out1_fifo_cap(out1_c_fifo_cap),
    .out1_empty_n(out1_c_empty_n),
    .out1_read(write_U0_out1_read),
    .out2_dout(out2_c_dout),
    .out2_num_data_valid(out2_c_num_data_valid),
    .out2_fifo_cap(out2_c_fifo_cap),
    .out2_empty_n(out2_c_empty_n),
    .out2_read(write_U0_out2_read),
    .p_read(ctrl1_reg_ls_c_channel_dout),
    .layer2_reg_2_dout(layer2_reg_ifs_c_dout),
    .layer2_reg_2_num_data_valid(layer2_reg_ifs_c_num_data_valid),
    .layer2_reg_2_fifo_cap(layer2_reg_ifs_c_fifo_cap),
    .layer2_reg_2_empty_n(layer2_reg_ifs_c_empty_n),
    .layer2_reg_2_read(write_U0_layer2_reg_2_read),
    .p_read1(actp_reg_pool_size_c_channel_dout)
);

IFFT_AP_fifo_w64_d3_S out1_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_out1_c_din),
    .if_full_n(out1_c_full_n),
    .if_write(entry_proc_U0_out1_c_write),
    .if_dout(out1_c_dout),
    .if_num_data_valid(out1_c_num_data_valid),
    .if_fifo_cap(out1_c_fifo_cap),
    .if_empty_n(out1_c_empty_n),
    .if_read(write_U0_out1_read)
);

IFFT_AP_fifo_w64_d3_S out2_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_out2_c_din),
    .if_full_n(out2_c_full_n),
    .if_write(entry_proc_U0_out2_c_write),
    .if_dout(out2_c_dout),
    .if_num_data_valid(out2_c_num_data_valid),
    .if_fifo_cap(out2_c_fifo_cap),
    .if_empty_n(out2_c_empty_n),
    .if_read(write_U0_out2_read)
);

IFFT_AP_fifo_w16_d3_S layer2_reg_ifs_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_layer2_reg_ifs_c_din),
    .if_full_n(layer2_reg_ifs_c_full_n),
    .if_write(entry_proc_U0_layer2_reg_ifs_c_write),
    .if_dout(layer2_reg_ifs_c_dout),
    .if_num_data_valid(layer2_reg_ifs_c_num_data_valid),
    .if_fifo_cap(layer2_reg_ifs_c_fifo_cap),
    .if_empty_n(layer2_reg_ifs_c_empty_n),
    .if_read(write_U0_layer2_reg_2_read)
);

IFFT_AP_fifo_w8_d2_S ctrl1_reg_ls_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(buffer_U0_ap_return_0),
    .if_full_n(ctrl1_reg_ls_c_channel_full_n),
    .if_write(ap_channel_done_ctrl1_reg_ls_c_channel),
    .if_dout(ctrl1_reg_ls_c_channel_dout),
    .if_num_data_valid(ctrl1_reg_ls_c_channel_num_data_valid),
    .if_fifo_cap(ctrl1_reg_ls_c_channel_fifo_cap),
    .if_empty_n(ctrl1_reg_ls_c_channel_empty_n),
    .if_read(write_U0_ap_ready)
);

IFFT_AP_fifo_w8_d2_S actp_reg_pool_size_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(buffer_U0_ap_return_1),
    .if_full_n(actp_reg_pool_size_c_channel_full_n),
    .if_write(ap_channel_done_actp_reg_pool_size_c_channel),
    .if_dout(actp_reg_pool_size_c_channel_dout),
    .if_num_data_valid(actp_reg_pool_size_c_channel_num_data_valid),
    .if_fifo_cap(actp_reg_pool_size_c_channel_fifo_cap),
    .if_empty_n(actp_reg_pool_size_c_channel_empty_n),
    .if_read(write_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_buffer_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_buffer_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_buffer_U0_ap_ready <= ap_sync_buffer_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_actp_reg_pool_size_c_channel <= 1'b0;
    end else begin
        if (((buffer_U0_ap_done & buffer_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_actp_reg_pool_size_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_actp_reg_pool_size_c_channel <= ap_sync_channel_write_actp_reg_pool_size_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_buffer1 <= 1'b0;
    end else begin
        if (((buffer_U0_ap_done & buffer_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_buffer1 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_buffer1 <= ap_sync_channel_write_buffer1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_buffer1_1 <= 1'b0;
    end else begin
        if (((buffer_U0_ap_done & buffer_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_buffer1_1 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_buffer1_1 <= ap_sync_channel_write_buffer1_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_ctrl1_reg_ls_c_channel <= 1'b0;
    end else begin
        if (((buffer_U0_ap_done & buffer_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_ctrl1_reg_ls_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_ctrl1_reg_ls_c_channel <= ap_sync_channel_write_ctrl1_reg_ls_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
        end
    end
end

assign ap_channel_done_actp_reg_pool_size_c_channel = ((ap_sync_reg_channel_write_actp_reg_pool_size_c_channel ^ 1'b1) & buffer_U0_ap_done);

assign ap_channel_done_buffer1 = ((ap_sync_reg_channel_write_buffer1 ^ 1'b1) & buffer_U0_ap_done);

assign ap_channel_done_buffer1_1 = ((ap_sync_reg_channel_write_buffer1_1 ^ 1'b1) & buffer_U0_ap_done);

assign ap_channel_done_ctrl1_reg_ls_c_channel = ((ap_sync_reg_channel_write_ctrl1_reg_ls_c_channel ^ 1'b1) & buffer_U0_ap_done);

assign ap_done = write_U0_ap_done;

assign ap_idle = (write_U0_ap_idle & (ctrl1_reg_ls_c_channel_empty_n ^ 1'b1) & (buffer1_1_t_empty_n ^ 1'b1) & (buffer1_t_empty_n ^ 1'b1) & (1'b1 ^ actp_reg_pool_size_c_channel_empty_n) & entry_proc_U0_ap_idle & buffer_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_buffer_U0_ap_ready = (buffer_U0_ap_ready | ap_sync_reg_buffer_U0_ap_ready);

assign ap_sync_channel_write_actp_reg_pool_size_c_channel = ((ap_channel_done_actp_reg_pool_size_c_channel & actp_reg_pool_size_c_channel_full_n) | ap_sync_reg_channel_write_actp_reg_pool_size_c_channel);

assign ap_sync_channel_write_buffer1 = ((buffer_U0_buffer1_0_full_n & ap_channel_done_buffer1) | ap_sync_reg_channel_write_buffer1);

assign ap_sync_channel_write_buffer1_1 = ((buffer_U0_buffer1_1_full_n & ap_channel_done_buffer1_1) | ap_sync_reg_channel_write_buffer1_1);

assign ap_sync_channel_write_ctrl1_reg_ls_c_channel = ((ctrl1_reg_ls_c_channel_full_n & ap_channel_done_ctrl1_reg_ls_c_channel) | ap_sync_reg_channel_write_ctrl1_reg_ls_c_channel);

assign ap_sync_entry_proc_U0_ap_ready = (entry_proc_U0_ap_ready | ap_sync_reg_entry_proc_U0_ap_ready);

assign ap_sync_ready = (ap_sync_entry_proc_U0_ap_ready & ap_sync_buffer_U0_ap_ready);

assign buffer_U0_ap_continue = (ap_sync_channel_write_ctrl1_reg_ls_c_channel & ap_sync_channel_write_buffer1_1 & ap_sync_channel_write_buffer1 & ap_sync_channel_write_actp_reg_pool_size_c_channel);

assign buffer_U0_ap_start = ((ap_sync_reg_buffer_U0_ap_ready ^ 1'b1) & ap_start);

assign buffer_U0_buffer1_0_full_n = buffer1_i_full_n;

assign buffer_U0_buffer1_1_full_n = buffer1_1_i_full_n;

assign entry_proc_U0_ap_continue = 1'b1;

assign entry_proc_U0_ap_start = ((ap_sync_reg_entry_proc_U0_ap_ready ^ 1'b1) & ap_start);

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWADDR = write_U0_m_axi_gmem_AWADDR;

assign m_axi_gmem_AWBURST = write_U0_m_axi_gmem_AWBURST;

assign m_axi_gmem_AWCACHE = write_U0_m_axi_gmem_AWCACHE;

assign m_axi_gmem_AWID = write_U0_m_axi_gmem_AWID;

assign m_axi_gmem_AWLEN = write_U0_m_axi_gmem_AWLEN;

assign m_axi_gmem_AWLOCK = write_U0_m_axi_gmem_AWLOCK;

assign m_axi_gmem_AWPROT = write_U0_m_axi_gmem_AWPROT;

assign m_axi_gmem_AWQOS = write_U0_m_axi_gmem_AWQOS;

assign m_axi_gmem_AWREGION = write_U0_m_axi_gmem_AWREGION;

assign m_axi_gmem_AWSIZE = write_U0_m_axi_gmem_AWSIZE;

assign m_axi_gmem_AWUSER = write_U0_m_axi_gmem_AWUSER;

assign m_axi_gmem_AWVALID = write_U0_m_axi_gmem_AWVALID;

assign m_axi_gmem_BREADY = write_U0_m_axi_gmem_BREADY;

assign m_axi_gmem_RREADY = 1'b0;

assign m_axi_gmem_WDATA = write_U0_m_axi_gmem_WDATA;

assign m_axi_gmem_WID = write_U0_m_axi_gmem_WID;

assign m_axi_gmem_WLAST = write_U0_m_axi_gmem_WLAST;

assign m_axi_gmem_WSTRB = write_U0_m_axi_gmem_WSTRB;

assign m_axi_gmem_WUSER = write_U0_m_axi_gmem_WUSER;

assign m_axi_gmem_WVALID = write_U0_m_axi_gmem_WVALID;

assign out_st_read = buffer_U0_out_st_read;

assign write_U0_ap_continue = ap_continue;

assign write_U0_ap_start = (ctrl1_reg_ls_c_channel_empty_n & buffer1_t_empty_n & buffer1_1_t_empty_n & actp_reg_pool_size_c_channel_empty_n);

endmodule //IFFT_AP_dataflow_in_loop_VITIS_LOOP_332_1
