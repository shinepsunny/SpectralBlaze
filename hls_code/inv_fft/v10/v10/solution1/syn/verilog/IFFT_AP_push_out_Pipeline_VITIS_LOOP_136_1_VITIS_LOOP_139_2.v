// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module IFFT_AP_push_out_Pipeline_VITIS_LOOP_136_1_VITIS_LOOP_139_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_st_din,
        out_st_num_data_valid,
        out_st_fifo_cap,
        out_st_full_n,
        out_st_write,
        bound,
        zext_ln136,
        O_address0,
        O_ce0,
        O_q0,
        O_address1,
        O_ce1,
        O_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [63:0] out_st_din;
input  [1:0] out_st_num_data_valid;
input  [1:0] out_st_fifo_cap;
input   out_st_full_n;
output   out_st_write;
input  [70:0] bound;
input  [7:0] zext_ln136;
output  [11:0] O_address0;
output   O_ce0;
input  [31:0] O_q0;
output  [11:0] O_address1;
output   O_ce1;
input  [31:0] O_q1;

reg ap_idle;
reg out_st_write;
reg O_ce0;
reg O_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_state4_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln1027_fu_148_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    out_st_blk_n;
wire    ap_block_pp0_stage1;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln136_cast_fu_126_p1;
reg   [63:0] zext_ln136_cast_reg_289;
reg   [0:0] icmp_ln1027_reg_294;
reg    ap_block_pp0_stage1_11001;
reg   [63:0] y_load_reg_298;
wire   [0:0] icmp_ln1027_3_fu_171_p2;
reg   [0:0] icmp_ln1027_3_reg_303;
wire   [5:0] trunc_ln143_fu_184_p1;
reg   [5:0] trunc_ln143_reg_308;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln143_fu_221_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln144_fu_238_p1;
reg   [63:0] y_fu_70;
wire   [63:0] add_ln139_fu_243_p2;
wire    ap_loop_init;
reg   [7:0] x_fu_74;
wire   [7:0] select_ln1027_1_fu_176_p3;
reg   [70:0] indvar_flatten_fu_78;
wire   [70:0] add_ln1027_fu_153_p2;
reg    ap_block_pp0_stage1_01001;
wire   [7:0] add_ln136_fu_165_p2;
wire   [63:0] select_ln1027_fu_198_p3;
wire   [11:0] tmp_2_fu_208_p3;
wire   [11:0] trunc_ln1027_fu_204_p1;
wire   [11:0] add_ln143_fu_215_p2;
wire   [11:0] or_ln144_fu_226_p2;
wire   [11:0] add_ln144_fu_232_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

IFFT_AP_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        indvar_flatten_fu_78 <= 71'd0;
    end else if (((icmp_ln1027_fu_148_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indvar_flatten_fu_78 <= add_ln1027_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        x_fu_74 <= 8'd0;
    end else if (((icmp_ln1027_fu_148_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        x_fu_74 <= select_ln1027_1_fu_176_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            y_fu_70 <= 64'd0;
        end else if (((icmp_ln1027_reg_294 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            y_fu_70 <= add_ln139_fu_243_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_fu_148_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln1027_3_reg_303 <= icmp_ln1027_3_fu_171_p2;
        trunc_ln143_reg_308 <= trunc_ln143_fu_184_p1;
        y_load_reg_298 <= y_fu_70;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln1027_reg_294 <= icmp_ln1027_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln136_cast_reg_289[7 : 0] <= zext_ln136_cast_fu_126_p1[7 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        O_ce0 = 1'b1;
    end else begin
        O_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        O_ce1 = 1'b1;
    end else begin
        O_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_148_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_st_blk_n = out_st_full_n;
    end else begin
        out_st_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_st_write = 1'b1;
    end else begin
        out_st_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign O_address0 = zext_ln144_fu_238_p1;

assign O_address1 = zext_ln143_fu_221_p1;

assign add_ln1027_fu_153_p2 = (indvar_flatten_fu_78 + 71'd1);

assign add_ln136_fu_165_p2 = (x_fu_74 + 8'd1);

assign add_ln139_fu_243_p2 = (select_ln1027_fu_198_p3 + 64'd2);

assign add_ln143_fu_215_p2 = (tmp_2_fu_208_p3 + trunc_ln1027_fu_204_p1);

assign add_ln144_fu_232_p2 = (tmp_2_fu_208_p3 + or_ln144_fu_226_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((out_st_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((out_st_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((out_st_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage1_iter1 = (out_st_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign icmp_ln1027_3_fu_171_p2 = ((y_fu_70 < zext_ln136_cast_reg_289) ? 1'b1 : 1'b0);

assign icmp_ln1027_fu_148_p2 = ((indvar_flatten_fu_78 == bound) ? 1'b1 : 1'b0);

assign or_ln144_fu_226_p2 = (trunc_ln1027_fu_204_p1 | 12'd1);

assign out_st_din = {{O_q0}, {O_q1}};

assign select_ln1027_1_fu_176_p3 = ((icmp_ln1027_3_fu_171_p2[0:0] == 1'b1) ? x_fu_74 : add_ln136_fu_165_p2);

assign select_ln1027_fu_198_p3 = ((icmp_ln1027_3_reg_303[0:0] == 1'b1) ? y_load_reg_298 : 64'd0);

assign tmp_2_fu_208_p3 = {{trunc_ln143_reg_308}, {6'd0}};

assign trunc_ln1027_fu_204_p1 = select_ln1027_fu_198_p3[11:0];

assign trunc_ln143_fu_184_p1 = select_ln1027_1_fu_176_p3[5:0];

assign zext_ln136_cast_fu_126_p1 = zext_ln136;

assign zext_ln143_fu_221_p1 = add_ln143_fu_215_p2;

assign zext_ln144_fu_238_p1 = add_ln144_fu_232_p2;

always @ (posedge ap_clk) begin
    zext_ln136_cast_reg_289[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //IFFT_AP_push_out_Pipeline_VITIS_LOOP_136_1_VITIS_LOOP_139_2
