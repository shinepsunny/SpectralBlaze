-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity IFFT_AP_collect_input is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_st_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    in_st_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    in_st_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    in_st_empty_n : IN STD_LOGIC;
    in_st_read : OUT STD_LOGIC;
    I_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    I_ce0 : OUT STD_LOGIC;
    I_we0 : OUT STD_LOGIC;
    I_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    I_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    I_ce1 : OUT STD_LOGIC;
    I_we1 : OUT STD_LOGIC;
    I_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctrl1_regp_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ctrl1_regp_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    ctrl1_regp_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    ctrl1_regp_empty_n : IN STD_LOGIC;
    ctrl1_regp_read : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of IFFT_AP_collect_input is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ctrl1_regp_blk_n : STD_LOGIC;
    signal ctrl1_regp_read_reg_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_88_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_164 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1027_6_fu_112_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1027_6_reg_169 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_139_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_reg_177 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln1027_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_ap_start : STD_LOGIC;
    signal grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_ap_done : STD_LOGIC;
    signal grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_ap_idle : STD_LOGIC;
    signal grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_ap_ready : STD_LOGIC;
    signal grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_in_st_read : STD_LOGIC;
    signal grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_ce0 : STD_LOGIC;
    signal grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_we0 : STD_LOGIC;
    signal grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_ce1 : STD_LOGIC;
    signal grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_we1 : STD_LOGIC;
    signal grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal x_fu_68 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln88_fu_133_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal zext_ln1027_fu_92_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1027_fu_96_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_102_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln1027_fu_124_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component IFFT_AP_collect_input_Pipeline_VITIS_LOOP_91_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_st_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        in_st_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        in_st_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        in_st_empty_n : IN STD_LOGIC;
        in_st_read : OUT STD_LOGIC;
        empty : IN STD_LOGIC_VECTOR (10 downto 0);
        zext_ln173_3 : IN STD_LOGIC_VECTOR (11 downto 0);
        I_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        I_ce0 : OUT STD_LOGIC;
        I_we0 : OUT STD_LOGIC;
        I_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        I_ce1 : OUT STD_LOGIC;
        I_we1 : OUT STD_LOGIC;
        I_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78 : component IFFT_AP_collect_input_Pipeline_VITIS_LOOP_91_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_ap_start,
        ap_done => grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_ap_done,
        ap_idle => grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_ap_idle,
        ap_ready => grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_ap_ready,
        in_st_dout => in_st_dout,
        in_st_num_data_valid => ap_const_lv2_0,
        in_st_fifo_cap => ap_const_lv2_0,
        in_st_empty_n => in_st_empty_n,
        in_st_read => grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_in_st_read,
        empty => zext_ln1027_6_reg_169,
        zext_ln173_3 => tmp_reg_177,
        I_address0 => grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_address0,
        I_ce0 => grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_ce0,
        I_we0 => grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_we0,
        I_d0 => grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_d0,
        I_address1 => grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_address1,
        I_ce1 => grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_ce1,
        I_we1 => grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_we1,
        I_d1 => grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln1027_fu_128_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln1027_fu_128_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_ap_ready = ap_const_logic_1)) then 
                    grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    x_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ctrl1_regp_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_fu_68 <= ap_const_lv8_0;
            elsif (((icmp_ln1027_fu_128_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_fu_68 <= add_ln88_fu_133_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                ctrl1_regp_read_reg_160 <= ctrl1_regp_dout;
                empty_reg_164 <= empty_fu_88_p1;
                    zext_ln1027_6_reg_169(6 downto 0) <= zext_ln1027_6_fu_112_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_fu_128_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_reg_177(11 downto 6) <= tmp_fu_139_p3(11 downto 6);
            end if;
        end if;
    end process;
    zext_ln1027_6_reg_169(10 downto 7) <= "0000";
    tmp_reg_177(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ctrl1_regp_empty_n, ap_CS_fsm_state2, icmp_ln1027_fu_128_p2, grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ctrl1_regp_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln1027_fu_128_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    I_address0 <= grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_address0;
    I_address1 <= grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_address1;
    I_ce0 <= grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_ce0;
    I_ce1 <= grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_ce1;
    I_d0 <= grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_d0;
    I_d1 <= grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_d1;
    I_we0 <= grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_we0;
    I_we1 <= grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_I_we1;
    add_ln1027_fu_96_p2 <= std_logic_vector(unsigned(zext_ln1027_fu_92_p1) + unsigned(ap_const_lv9_3));
    add_ln88_fu_133_p2 <= std_logic_vector(unsigned(x_fu_68) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, ctrl1_regp_empty_n)
    begin
        if (((ap_start = ap_const_logic_0) or (ctrl1_regp_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_ap_done)
    begin
        if ((grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, ctrl1_regp_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ctrl1_regp_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln1027_fu_128_p2)
    begin
        if (((icmp_ln1027_fu_128_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln1027_fu_128_p2)
    begin
        if (((icmp_ln1027_fu_128_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ctrl1_regp_read_reg_160;

    ctrl1_regp_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_regp_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl1_regp_blk_n <= ctrl1_regp_empty_n;
        else 
            ctrl1_regp_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ctrl1_regp_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl1_regp_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ctrl1_regp_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl1_regp_read <= ap_const_logic_1;
        else 
            ctrl1_regp_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_88_p1 <= ctrl1_regp_dout(8 - 1 downto 0);
    grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_ap_start <= grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_ap_start_reg;
    icmp_ln1027_fu_128_p2 <= "1" when (x_fu_68 = empty_reg_164) else "0";

    in_st_read_assign_proc : process(grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_in_st_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_st_read <= grp_collect_input_Pipeline_VITIS_LOOP_91_2_fu_78_in_st_read;
        else 
            in_st_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_8_fu_102_p4 <= add_ln1027_fu_96_p2(8 downto 2);
    tmp_fu_139_p3 <= (trunc_ln1027_fu_124_p1 & ap_const_lv6_0);
    trunc_ln1027_fu_124_p1 <= x_fu_68(6 - 1 downto 0);
    zext_ln1027_6_fu_112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_102_p4),11));
    zext_ln1027_fu_92_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_88_p1),9));
end behav;
