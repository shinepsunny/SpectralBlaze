-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity IFFT_AP_fft_stage_Pipeline_SKIP_X_SKIP_Y is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bound : IN STD_LOGIC_VECTOR (13 downto 0);
    trunc_ln17 : IN STD_LOGIC_VECTOR (6 downto 0);
    I_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    I_ce0 : OUT STD_LOGIC;
    I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    I_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    I_ce1 : OUT STD_LOGIC;
    I_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    X_ce0 : OUT STD_LOGIC;
    X_we0 : OUT STD_LOGIC;
    X_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    X_ce1 : OUT STD_LOGIC;
    X_we1 : OUT STD_LOGIC;
    X_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of IFFT_AP_fft_stage_Pipeline_SKIP_X_SKIP_Y is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln1027_reg_610 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_275 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln1027_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_610_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_610_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_610_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_610_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_610_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_610_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_610_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_610_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_610_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_610_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_4_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_4_reg_614 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln388_fu_340_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln388_reg_619 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln388_1_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_1_reg_625 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_1_reg_625_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_1_reg_625_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_1_reg_625_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_1_reg_625_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_1_reg_625_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_1_reg_625_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_1_reg_625_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_1_reg_625_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_1_reg_625_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_1_reg_625_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_1_reg_625_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln328_fu_418_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln328_reg_635 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln328_reg_635_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln328_reg_635_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln328_reg_635_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln328_reg_635_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln388_3_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_3_reg_640 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_3_reg_640_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_3_reg_640_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_3_reg_640_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_3_reg_640_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_3_reg_640_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_3_reg_640_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_3_reg_640_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_3_reg_640_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_3_reg_640_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_3_reg_640_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln388_2_fu_445_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln388_2_reg_650 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln388_1_fu_462_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln388_1_reg_655 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln388_4_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_4_reg_660 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_4_reg_660_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_4_reg_660_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_4_reg_660_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_4_reg_660_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_4_reg_660_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_4_reg_660_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_4_reg_660_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_4_reg_660_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_4_reg_660_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_4_reg_660_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln388_2_fu_470_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln388_2_reg_670 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln388_3_reg_675 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_fu_474_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_reg_680 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_reg_680_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_fu_478_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_reg_686 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_reg_686_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_2_fu_483_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_2_reg_692 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_2_reg_692_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_2_reg_692_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln388_4_fu_487_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln388_4_reg_698 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_2_fu_491_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_2_reg_703 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_2_reg_703_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_4_fu_495_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_4_reg_709 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_4_reg_709_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_4_fu_499_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_4_reg_715 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_4_reg_715_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_240_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul3_i_i_reg_721 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_245_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul6_i_i_reg_726 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_250_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul3_i_i2_reg_731 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul6_i_i2_reg_736 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul3_i_i3_reg_741 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul6_i_i3_reg_746 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln328_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln328_reg_751 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln328_reg_751_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln328_reg_751_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln328_reg_751_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln328_reg_751_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln328_reg_751_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln328_reg_751_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_212_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_reg_761 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_184_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_8_reg_767 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_216_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_1_reg_773 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln328_fu_508_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln328_reg_779 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln328_6_reg_784 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_18_reg_789 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_2_reg_795 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_188_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_19_reg_801 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_6_fu_512_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_6_fu_517_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_192_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_15_reg_819 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_13_reg_825 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_13_reg_825_pp0_iter9_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_15_reg_831 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_18_reg_837 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_196_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_20_reg_843 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_13_reg_849 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_224_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_19_reg_855 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_228_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_21_reg_861 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_12_reg_867 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_200_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_12_reg_872 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_204_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_14_reg_877 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_208_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_14_reg_882 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_16_reg_887 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_16_reg_892 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_232_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_17_reg_897 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_236_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_17_reg_902 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal k2_fu_74 : STD_LOGIC_VECTOR (6 downto 0);
    signal k2_1_fu_350_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_k2_load : STD_LOGIC_VECTOR (6 downto 0);
    signal m2_fu_78 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln47_fu_451_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m1_fu_82 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1027_2_fu_332_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_m1_load : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_fu_86 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1027_fu_308_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (13 downto 0);
    signal add3_i_i290_partset_fu_528_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_i_i294_partset_fu_543_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub3_i_i298_partset_fu_558_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub3_i_i302_partset_fu_573_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_184_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_184_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_188_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_188_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_192_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_192_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_196_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_196_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_212_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_212_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_216_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_216_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_220_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_220_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_224_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_224_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_240_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_245_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_250_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln57_fu_320_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln22_fu_344_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln1027_fu_390_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1027_fu_376_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_395_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln388_fu_403_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln388_fu_407_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_383_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln30_fu_424_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln388_2_fu_430_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln388_1_fu_434_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln36_1_fu_525_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln36_fu_522_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln37_1_fu_540_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln37_fu_537_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln38_1_fu_555_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln38_fu_552_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln39_1_fu_570_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln39_fu_567_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter11_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to10 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to12 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component IFFT_AP_hadd_16ns_16ns_16_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component IFFT_AP_hsub_16ns_16ns_16_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component IFFT_AP_hmul_16ns_16ns_16_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component IFFT_AP_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    hadd_16ns_16ns_16_5_full_dsp_1_U35 : component IFFT_AP_hadd_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_184_p0,
        din1 => grp_fu_184_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_184_p2);

    hadd_16ns_16ns_16_5_full_dsp_1_U36 : component IFFT_AP_hadd_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_188_p0,
        din1 => grp_fu_188_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_188_p2);

    hadd_16ns_16ns_16_5_full_dsp_1_U37 : component IFFT_AP_hadd_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_192_p0,
        din1 => grp_fu_192_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_192_p2);

    hadd_16ns_16ns_16_5_full_dsp_1_U38 : component IFFT_AP_hadd_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_196_p0,
        din1 => grp_fu_196_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_196_p2);

    hadd_16ns_16ns_16_5_full_dsp_1_U39 : component IFFT_AP_hadd_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_15_reg_831,
        din1 => p_r_M_imag_20_reg_843,
        ce => ap_const_logic_1,
        dout => grp_fu_200_p2);

    hadd_16ns_16ns_16_5_full_dsp_1_U40 : component IFFT_AP_hadd_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_13_reg_825,
        din1 => p_r_M_real_19_reg_855,
        ce => ap_const_logic_1,
        dout => grp_fu_204_p2);

    hadd_16ns_16ns_16_5_full_dsp_1_U41 : component IFFT_AP_hadd_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_13_reg_849,
        din1 => p_r_M_imag_21_reg_861,
        ce => ap_const_logic_1,
        dout => grp_fu_208_p2);

    hsub_16ns_16ns_16_5_full_dsp_1_U42 : component IFFT_AP_hsub_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_212_p0,
        din1 => grp_fu_212_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_212_p2);

    hsub_16ns_16ns_16_5_full_dsp_1_U43 : component IFFT_AP_hsub_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_216_p0,
        din1 => grp_fu_216_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_216_p2);

    hsub_16ns_16ns_16_5_full_dsp_1_U44 : component IFFT_AP_hsub_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_220_p0,
        din1 => grp_fu_220_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_220_p2);

    hsub_16ns_16ns_16_5_full_dsp_1_U45 : component IFFT_AP_hsub_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_224_p0,
        din1 => grp_fu_224_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_224_p2);

    hsub_16ns_16ns_16_5_full_dsp_1_U46 : component IFFT_AP_hsub_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_8_reg_767,
        din1 => p_r_M_imag_19_reg_801,
        ce => ap_const_logic_1,
        dout => grp_fu_228_p2);

    hsub_16ns_16ns_16_5_full_dsp_1_U47 : component IFFT_AP_hsub_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_13_reg_825_pp0_iter9_reg,
        din1 => p_r_M_real_19_reg_855,
        ce => ap_const_logic_1,
        dout => grp_fu_232_p2);

    hsub_16ns_16ns_16_5_full_dsp_1_U48 : component IFFT_AP_hsub_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_13_reg_849,
        din1 => p_r_M_imag_21_reg_861,
        ce => ap_const_logic_1,
        dout => grp_fu_236_p2);

    hmul_16ns_16ns_16_4_max_dsp_1_U49 : component IFFT_AP_hmul_16ns_16ns_16_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_240_p0,
        din1 => ap_const_lv16_0,
        ce => ap_const_logic_1,
        dout => grp_fu_240_p2);

    hmul_16ns_16ns_16_4_max_dsp_1_U50 : component IFFT_AP_hmul_16ns_16ns_16_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_245_p0,
        din1 => ap_const_lv16_0,
        ce => ap_const_logic_1,
        dout => grp_fu_245_p2);

    hmul_16ns_16ns_16_4_max_dsp_1_U51 : component IFFT_AP_hmul_16ns_16ns_16_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_250_p0,
        din1 => ap_const_lv16_0,
        ce => ap_const_logic_1,
        dout => grp_fu_250_p2);

    flow_control_loop_pipe_sequential_init_U : component IFFT_AP_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter10_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage0))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter11_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage0))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage0))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage0))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage0))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage0))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter9_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage0))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1027_fu_302_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_86 <= add_ln1027_fu_308_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_86 <= ap_const_lv14_0;
                end if;
            end if; 
        end if;
    end process;

    k2_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1027_fu_302_p2 = ap_const_lv1_0))) then 
                    k2_fu_74 <= k2_1_fu_350_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k2_fu_74 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    m1_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1027_fu_302_p2 = ap_const_lv1_0))) then 
                    m1_fu_82 <= select_ln1027_2_fu_332_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    m1_fu_82 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    m2_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                m2_fu_78 <= ap_const_lv8_0;
            elsif (((icmp_ln1027_reg_610 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                m2_fu_78 <= add_ln47_fu_451_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_reg_610 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln328_reg_635 <= add_ln328_fu_418_p2;
                    add_ln388_2_reg_650(11 downto 1) <= add_ln388_2_fu_445_p2(11 downto 1);
                    zext_ln388_1_reg_625(11 downto 0) <= zext_ln388_1_fu_413_p1(11 downto 0);
                    zext_ln388_3_reg_640(11 downto 1) <= zext_ln388_3_fu_440_p1(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln328_reg_635_pp0_iter1_reg <= add_ln328_reg_635;
                add_ln328_reg_635_pp0_iter2_reg <= add_ln328_reg_635_pp0_iter1_reg;
                add_ln328_reg_635_pp0_iter3_reg <= add_ln328_reg_635_pp0_iter2_reg;
                add_ln328_reg_635_pp0_iter4_reg <= add_ln328_reg_635_pp0_iter3_reg;
                p_r_M_imag_17_reg_902 <= grp_fu_236_p2;
                p_r_M_imag_21_reg_861 <= grp_fu_228_p2;
                p_r_M_imag_2_reg_692 <= p_r_M_imag_2_fu_483_p1;
                p_r_M_imag_2_reg_692_pp0_iter2_reg <= p_r_M_imag_2_reg_692;
                p_r_M_imag_2_reg_692_pp0_iter3_reg <= p_r_M_imag_2_reg_692_pp0_iter2_reg;
                p_r_M_imag_reg_686 <= p_r_M_imag_fu_478_p1;
                p_r_M_imag_reg_686_pp0_iter2_reg <= p_r_M_imag_reg_686;
                p_r_M_real_17_reg_897 <= grp_fu_232_p2;
                p_r_M_real_reg_680 <= p_r_M_real_fu_474_p1;
                p_r_M_real_reg_680_pp0_iter2_reg <= p_r_M_real_reg_680;
                trunc_ln328_reg_779 <= trunc_ln328_fu_508_p1;
                trunc_ln388_4_reg_698 <= trunc_ln388_4_fu_487_p1;
                    zext_ln388_1_reg_625_pp0_iter10_reg(11 downto 0) <= zext_ln388_1_reg_625_pp0_iter9_reg(11 downto 0);
                    zext_ln388_1_reg_625_pp0_iter11_reg(11 downto 0) <= zext_ln388_1_reg_625_pp0_iter10_reg(11 downto 0);
                    zext_ln388_1_reg_625_pp0_iter1_reg(11 downto 0) <= zext_ln388_1_reg_625(11 downto 0);
                    zext_ln388_1_reg_625_pp0_iter2_reg(11 downto 0) <= zext_ln388_1_reg_625_pp0_iter1_reg(11 downto 0);
                    zext_ln388_1_reg_625_pp0_iter3_reg(11 downto 0) <= zext_ln388_1_reg_625_pp0_iter2_reg(11 downto 0);
                    zext_ln388_1_reg_625_pp0_iter4_reg(11 downto 0) <= zext_ln388_1_reg_625_pp0_iter3_reg(11 downto 0);
                    zext_ln388_1_reg_625_pp0_iter5_reg(11 downto 0) <= zext_ln388_1_reg_625_pp0_iter4_reg(11 downto 0);
                    zext_ln388_1_reg_625_pp0_iter6_reg(11 downto 0) <= zext_ln388_1_reg_625_pp0_iter5_reg(11 downto 0);
                    zext_ln388_1_reg_625_pp0_iter7_reg(11 downto 0) <= zext_ln388_1_reg_625_pp0_iter6_reg(11 downto 0);
                    zext_ln388_1_reg_625_pp0_iter8_reg(11 downto 0) <= zext_ln388_1_reg_625_pp0_iter7_reg(11 downto 0);
                    zext_ln388_1_reg_625_pp0_iter9_reg(11 downto 0) <= zext_ln388_1_reg_625_pp0_iter8_reg(11 downto 0);
                    zext_ln388_3_reg_640_pp0_iter10_reg(11 downto 1) <= zext_ln388_3_reg_640_pp0_iter9_reg(11 downto 1);
                    zext_ln388_3_reg_640_pp0_iter1_reg(11 downto 1) <= zext_ln388_3_reg_640(11 downto 1);
                    zext_ln388_3_reg_640_pp0_iter2_reg(11 downto 1) <= zext_ln388_3_reg_640_pp0_iter1_reg(11 downto 1);
                    zext_ln388_3_reg_640_pp0_iter3_reg(11 downto 1) <= zext_ln388_3_reg_640_pp0_iter2_reg(11 downto 1);
                    zext_ln388_3_reg_640_pp0_iter4_reg(11 downto 1) <= zext_ln388_3_reg_640_pp0_iter3_reg(11 downto 1);
                    zext_ln388_3_reg_640_pp0_iter5_reg(11 downto 1) <= zext_ln388_3_reg_640_pp0_iter4_reg(11 downto 1);
                    zext_ln388_3_reg_640_pp0_iter6_reg(11 downto 1) <= zext_ln388_3_reg_640_pp0_iter5_reg(11 downto 1);
                    zext_ln388_3_reg_640_pp0_iter7_reg(11 downto 1) <= zext_ln388_3_reg_640_pp0_iter6_reg(11 downto 1);
                    zext_ln388_3_reg_640_pp0_iter8_reg(11 downto 1) <= zext_ln388_3_reg_640_pp0_iter7_reg(11 downto 1);
                    zext_ln388_3_reg_640_pp0_iter9_reg(11 downto 1) <= zext_ln388_3_reg_640_pp0_iter8_reg(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_fu_302_p2 = ap_const_lv1_0))) then
                icmp_ln1027_4_reg_614 <= icmp_ln1027_4_fu_326_p2;
                trunc_ln388_reg_619 <= trunc_ln388_fu_340_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1027_reg_610 <= icmp_ln1027_fu_302_p2;
                icmp_ln1027_reg_610_pp0_iter10_reg <= icmp_ln1027_reg_610_pp0_iter9_reg;
                icmp_ln1027_reg_610_pp0_iter1_reg <= icmp_ln1027_reg_610;
                icmp_ln1027_reg_610_pp0_iter2_reg <= icmp_ln1027_reg_610_pp0_iter1_reg;
                icmp_ln1027_reg_610_pp0_iter3_reg <= icmp_ln1027_reg_610_pp0_iter2_reg;
                icmp_ln1027_reg_610_pp0_iter4_reg <= icmp_ln1027_reg_610_pp0_iter3_reg;
                icmp_ln1027_reg_610_pp0_iter5_reg <= icmp_ln1027_reg_610_pp0_iter4_reg;
                icmp_ln1027_reg_610_pp0_iter6_reg <= icmp_ln1027_reg_610_pp0_iter5_reg;
                icmp_ln1027_reg_610_pp0_iter7_reg <= icmp_ln1027_reg_610_pp0_iter6_reg;
                icmp_ln1027_reg_610_pp0_iter8_reg <= icmp_ln1027_reg_610_pp0_iter7_reg;
                icmp_ln1027_reg_610_pp0_iter9_reg <= icmp_ln1027_reg_610_pp0_iter8_reg;
                p_r_M_imag_12_reg_872 <= grp_fu_200_p2;
                p_r_M_imag_14_reg_882 <= grp_fu_208_p2;
                p_r_M_imag_4_reg_715 <= p_r_M_imag_4_fu_499_p1;
                p_r_M_imag_4_reg_715_pp0_iter3_reg <= p_r_M_imag_4_reg_715;
                p_r_M_real_13_reg_825_pp0_iter9_reg <= p_r_M_real_13_reg_825;
                p_r_M_real_14_reg_877 <= grp_fu_204_p2;
                p_r_M_real_2_reg_703 <= p_r_M_real_2_fu_491_p1;
                p_r_M_real_2_reg_703_pp0_iter3_reg <= p_r_M_real_2_reg_703;
                p_r_M_real_4_reg_709 <= p_r_M_real_4_fu_495_p1;
                p_r_M_real_4_reg_709_pp0_iter3_reg <= p_r_M_real_4_reg_709;
                trunc_ln388_1_reg_655 <= trunc_ln388_1_fu_462_p1;
                trunc_ln388_2_reg_670 <= trunc_ln388_2_fu_470_p1;
                    zext_ln328_reg_751(11 downto 0) <= zext_ln328_fu_504_p1(11 downto 0);
                    zext_ln328_reg_751_pp0_iter10_reg(11 downto 0) <= zext_ln328_reg_751_pp0_iter9_reg(11 downto 0);
                    zext_ln328_reg_751_pp0_iter11_reg(11 downto 0) <= zext_ln328_reg_751_pp0_iter10_reg(11 downto 0);
                    zext_ln328_reg_751_pp0_iter6_reg(11 downto 0) <= zext_ln328_reg_751(11 downto 0);
                    zext_ln328_reg_751_pp0_iter7_reg(11 downto 0) <= zext_ln328_reg_751_pp0_iter6_reg(11 downto 0);
                    zext_ln328_reg_751_pp0_iter8_reg(11 downto 0) <= zext_ln328_reg_751_pp0_iter7_reg(11 downto 0);
                    zext_ln328_reg_751_pp0_iter9_reg(11 downto 0) <= zext_ln328_reg_751_pp0_iter8_reg(11 downto 0);
                    zext_ln388_4_reg_660(11 downto 1) <= zext_ln388_4_fu_466_p1(11 downto 1);
                    zext_ln388_4_reg_660_pp0_iter10_reg(11 downto 1) <= zext_ln388_4_reg_660_pp0_iter9_reg(11 downto 1);
                    zext_ln388_4_reg_660_pp0_iter11_reg(11 downto 1) <= zext_ln388_4_reg_660_pp0_iter10_reg(11 downto 1);
                    zext_ln388_4_reg_660_pp0_iter2_reg(11 downto 1) <= zext_ln388_4_reg_660(11 downto 1);
                    zext_ln388_4_reg_660_pp0_iter3_reg(11 downto 1) <= zext_ln388_4_reg_660_pp0_iter2_reg(11 downto 1);
                    zext_ln388_4_reg_660_pp0_iter4_reg(11 downto 1) <= zext_ln388_4_reg_660_pp0_iter3_reg(11 downto 1);
                    zext_ln388_4_reg_660_pp0_iter5_reg(11 downto 1) <= zext_ln388_4_reg_660_pp0_iter4_reg(11 downto 1);
                    zext_ln388_4_reg_660_pp0_iter6_reg(11 downto 1) <= zext_ln388_4_reg_660_pp0_iter5_reg(11 downto 1);
                    zext_ln388_4_reg_660_pp0_iter7_reg(11 downto 1) <= zext_ln388_4_reg_660_pp0_iter6_reg(11 downto 1);
                    zext_ln388_4_reg_660_pp0_iter8_reg(11 downto 1) <= zext_ln388_4_reg_660_pp0_iter7_reg(11 downto 1);
                    zext_ln388_4_reg_660_pp0_iter9_reg(11 downto 1) <= zext_ln388_4_reg_660_pp0_iter8_reg(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul3_i_i2_reg_731 <= grp_fu_250_p2;
                mul3_i_i_reg_721 <= grp_fu_240_p2;
                mul6_i_i_reg_726 <= grp_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul3_i_i3_reg_741 <= grp_fu_245_p2;
                mul6_i_i2_reg_736 <= grp_fu_240_p2;
                mul6_i_i3_reg_746 <= grp_fu_250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_r_1_reg_773 <= grp_fu_216_p2;
                p_r_M_imag_8_reg_767 <= grp_fu_184_p2;
                p_r_reg_761 <= grp_fu_212_p2;
                trunc_ln328_6_reg_784 <= I_q0(31 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_r_2_reg_795 <= grp_fu_212_p2;
                p_r_M_imag_18_reg_789 <= grp_fu_184_p2;
                p_r_M_imag_19_reg_801 <= grp_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_r_M_imag_13_reg_849 <= grp_fu_220_p2;
                p_r_M_imag_15_reg_831 <= grp_fu_188_p2;
                p_r_M_imag_20_reg_843 <= grp_fu_196_p2;
                p_r_M_real_18_reg_837 <= grp_fu_192_p2;
                p_r_M_real_19_reg_855 <= grp_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_r_M_imag_16_reg_892 <= grp_fu_224_p2;
                p_r_M_real_12_reg_867 <= grp_fu_196_p2;
                p_r_M_real_16_reg_887 <= grp_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_r_M_real_13_reg_825 <= grp_fu_216_p2;
                p_r_M_real_15_reg_819 <= grp_fu_192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                reg_275 <= I_q1(31 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln388_3_reg_675 <= I_q0(31 downto 16);
            end if;
        end if;
    end process;
    zext_ln388_1_reg_625(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_1_reg_625_pp0_iter1_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_1_reg_625_pp0_iter2_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_1_reg_625_pp0_iter3_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_1_reg_625_pp0_iter4_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_1_reg_625_pp0_iter5_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_1_reg_625_pp0_iter6_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_1_reg_625_pp0_iter7_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_1_reg_625_pp0_iter8_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_1_reg_625_pp0_iter9_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_1_reg_625_pp0_iter10_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_1_reg_625_pp0_iter11_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_3_reg_640(0) <= '1';
    zext_ln388_3_reg_640(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_3_reg_640_pp0_iter1_reg(0) <= '1';
    zext_ln388_3_reg_640_pp0_iter1_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_3_reg_640_pp0_iter2_reg(0) <= '1';
    zext_ln388_3_reg_640_pp0_iter2_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_3_reg_640_pp0_iter3_reg(0) <= '1';
    zext_ln388_3_reg_640_pp0_iter3_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_3_reg_640_pp0_iter4_reg(0) <= '1';
    zext_ln388_3_reg_640_pp0_iter4_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_3_reg_640_pp0_iter5_reg(0) <= '1';
    zext_ln388_3_reg_640_pp0_iter5_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_3_reg_640_pp0_iter6_reg(0) <= '1';
    zext_ln388_3_reg_640_pp0_iter6_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_3_reg_640_pp0_iter7_reg(0) <= '1';
    zext_ln388_3_reg_640_pp0_iter7_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_3_reg_640_pp0_iter8_reg(0) <= '1';
    zext_ln388_3_reg_640_pp0_iter8_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_3_reg_640_pp0_iter9_reg(0) <= '1';
    zext_ln388_3_reg_640_pp0_iter9_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_3_reg_640_pp0_iter10_reg(0) <= '1';
    zext_ln388_3_reg_640_pp0_iter10_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    add_ln388_2_reg_650(0) <= '1';
    zext_ln388_4_reg_660(0) <= '1';
    zext_ln388_4_reg_660(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_4_reg_660_pp0_iter2_reg(0) <= '1';
    zext_ln388_4_reg_660_pp0_iter2_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_4_reg_660_pp0_iter3_reg(0) <= '1';
    zext_ln388_4_reg_660_pp0_iter3_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_4_reg_660_pp0_iter4_reg(0) <= '1';
    zext_ln388_4_reg_660_pp0_iter4_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_4_reg_660_pp0_iter5_reg(0) <= '1';
    zext_ln388_4_reg_660_pp0_iter5_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_4_reg_660_pp0_iter6_reg(0) <= '1';
    zext_ln388_4_reg_660_pp0_iter6_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_4_reg_660_pp0_iter7_reg(0) <= '1';
    zext_ln388_4_reg_660_pp0_iter7_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_4_reg_660_pp0_iter8_reg(0) <= '1';
    zext_ln388_4_reg_660_pp0_iter8_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_4_reg_660_pp0_iter9_reg(0) <= '1';
    zext_ln388_4_reg_660_pp0_iter9_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_4_reg_660_pp0_iter10_reg(0) <= '1';
    zext_ln388_4_reg_660_pp0_iter10_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln388_4_reg_660_pp0_iter11_reg(0) <= '1';
    zext_ln388_4_reg_660_pp0_iter11_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln328_reg_751(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln328_reg_751_pp0_iter6_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln328_reg_751_pp0_iter7_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln328_reg_751_pp0_iter8_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln328_reg_751_pp0_iter9_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln328_reg_751_pp0_iter10_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln328_reg_751_pp0_iter11_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter11_stage0, ap_idle_pp0_0to10, ap_idle_pp0_1to12, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to12 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    I_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, zext_ln388_3_fu_440_p1, zext_ln328_fu_504_p1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            I_address0 <= zext_ln328_fu_504_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            I_address0 <= zext_ln388_3_fu_440_p1(12 - 1 downto 0);
        else 
            I_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    I_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, zext_ln388_1_fu_413_p1, zext_ln388_4_fu_466_p1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            I_address1 <= zext_ln388_4_fu_466_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            I_address1 <= zext_ln388_1_fu_413_p1(12 - 1 downto 0);
        else 
            I_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    I_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            I_ce0 <= ap_const_logic_1;
        else 
            I_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    I_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            I_ce1 <= ap_const_logic_1;
        else 
            I_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    X_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_CS_fsm_pp0_stage1, zext_ln388_3_reg_640_pp0_iter10_reg, zext_ln388_4_reg_660_pp0_iter11_reg, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_address0 <= zext_ln388_4_reg_660_pp0_iter11_reg(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            X_address0 <= zext_ln388_3_reg_640_pp0_iter10_reg(12 - 1 downto 0);
        else 
            X_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    X_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_CS_fsm_pp0_stage1, zext_ln388_1_reg_625_pp0_iter11_reg, zext_ln328_reg_751_pp0_iter11_reg, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_address1 <= zext_ln388_1_reg_625_pp0_iter11_reg(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            X_address1 <= zext_ln328_reg_751_pp0_iter11_reg(12 - 1 downto 0);
        else 
            X_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    X_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            X_ce0 <= ap_const_logic_1;
        else 
            X_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            X_ce1 <= ap_const_logic_1;
        else 
            X_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    X_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, add3_i_i294_partset_fu_543_p3, sub3_i_i302_partset_fu_573_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_d0 <= sub3_i_i302_partset_fu_573_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            X_d0 <= add3_i_i294_partset_fu_543_p3;
        else 
            X_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    X_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, add3_i_i290_partset_fu_528_p3, sub3_i_i298_partset_fu_558_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_d1 <= sub3_i_i298_partset_fu_558_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            X_d1 <= add3_i_i290_partset_fu_528_p3;
        else 
            X_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    X_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            X_we0 <= ap_const_logic_1;
        else 
            X_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            X_we1 <= ap_const_logic_1;
        else 
            X_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add3_i_i290_partset_fu_528_p3 <= (bitcast_ln36_1_fu_525_p1 & bitcast_ln36_fu_522_p1);
    add3_i_i294_partset_fu_543_p3 <= (bitcast_ln37_1_fu_540_p1 & bitcast_ln37_fu_537_p1);
    add_ln1027_fu_308_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv14_1));
    add_ln22_fu_344_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k2_load) + unsigned(ap_const_lv7_1));
    add_ln328_fu_418_p2 <= std_logic_vector(unsigned(tmp_s_fu_383_p3) + unsigned(zext_ln388_fu_403_p1));
    add_ln388_1_fu_434_p2 <= std_logic_vector(unsigned(tmp_s_fu_383_p3) + unsigned(zext_ln388_2_fu_430_p1));
    add_ln388_2_fu_445_p2 <= std_logic_vector(unsigned(tmp_6_fu_395_p3) + unsigned(zext_ln388_2_fu_430_p1));
    add_ln388_fu_407_p2 <= std_logic_vector(unsigned(tmp_6_fu_395_p3) + unsigned(zext_ln388_fu_403_p1));
    add_ln47_fu_451_p2 <= std_logic_vector(unsigned(select_ln1027_fu_376_p3) + unsigned(ap_const_lv8_2));
    add_ln57_fu_320_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_m1_load) + unsigned(ap_const_lv8_2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln1027_reg_610)
    begin
        if (((icmp_ln1027_reg_610 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter11_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter11, icmp_ln1027_reg_610_pp0_iter10_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_reg_610_pp0_iter10_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter11_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter11_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter11_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg, ap_loop_exit_ready_pp0_iter5_reg, ap_loop_exit_ready_pp0_iter6_reg, ap_loop_exit_ready_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg, ap_loop_exit_ready_pp0_iter9_reg, ap_loop_exit_ready_pp0_iter10_reg, ap_loop_exit_ready_pp0_iter11_reg)
    begin
        if (not(((ap_loop_exit_ready = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to10_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to10 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to12_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to12 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to12 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_86)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_86;
        end if; 
    end process;


    ap_sig_allocacmp_k2_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, k2_fu_74, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_k2_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_k2_load <= k2_fu_74;
        end if; 
    end process;


    ap_sig_allocacmp_m1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, m1_fu_82)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_m1_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_m1_load <= m1_fu_82;
        end if; 
    end process;

    bitcast_ln36_1_fu_525_p1 <= p_r_M_imag_12_reg_872;
    bitcast_ln36_fu_522_p1 <= p_r_M_real_12_reg_867;
    bitcast_ln37_1_fu_540_p1 <= p_r_M_imag_14_reg_882;
    bitcast_ln37_fu_537_p1 <= p_r_M_real_14_reg_877;
    bitcast_ln38_1_fu_555_p1 <= p_r_M_imag_16_reg_892;
    bitcast_ln38_fu_552_p1 <= p_r_M_real_16_reg_887;
    bitcast_ln39_1_fu_570_p1 <= p_r_M_imag_17_reg_902;
    bitcast_ln39_fu_567_p1 <= p_r_M_real_17_reg_897;

    grp_fu_184_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, mul6_i_i_reg_726, mul6_i_i2_reg_736, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_184_p0 <= mul6_i_i2_reg_736;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_184_p0 <= mul6_i_i_reg_726;
        else 
            grp_fu_184_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_184_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, p_r_M_imag_reg_686_pp0_iter2_reg, p_r_M_imag_2_reg_692_pp0_iter3_reg, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_184_p1 <= p_r_M_imag_2_reg_692_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_184_p1 <= p_r_M_imag_reg_686_pp0_iter2_reg;
        else 
            grp_fu_184_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_188_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, mul6_i_i3_reg_746, p_r_M_imag_6_fu_517_p1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_188_p0 <= p_r_M_imag_6_fu_517_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_188_p0 <= mul6_i_i3_reg_746;
        else 
            grp_fu_188_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_188_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, p_r_M_imag_4_reg_715_pp0_iter3_reg, p_r_M_imag_18_reg_789, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_188_p1 <= p_r_M_imag_18_reg_789;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_188_p1 <= p_r_M_imag_4_reg_715_pp0_iter3_reg;
        else 
            grp_fu_188_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_192_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, p_r_reg_761, p_r_M_real_6_fu_512_p1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter6 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_192_p0 <= p_r_reg_761;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_192_p0 <= p_r_M_real_6_fu_512_p1;
            else 
                grp_fu_192_p0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_192_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_192_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, p_r_1_reg_773, p_r_2_reg_795, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter6 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_192_p1 <= p_r_2_reg_795;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_192_p1 <= p_r_1_reg_773;
            else 
                grp_fu_192_p1 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_192_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_196_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, p_r_M_imag_8_reg_767, p_r_M_real_15_reg_819, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_196_p0 <= p_r_M_real_15_reg_819;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_196_p0 <= p_r_M_imag_8_reg_767;
        else 
            grp_fu_196_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_196_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, p_r_M_imag_19_reg_801, p_r_M_real_18_reg_837, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_196_p1 <= p_r_M_real_18_reg_837;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_196_p1 <= p_r_M_imag_19_reg_801;
        else 
            grp_fu_196_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_212_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, p_r_M_real_reg_680_pp0_iter2_reg, p_r_M_real_4_reg_709_pp0_iter3_reg, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_212_p0 <= p_r_M_real_4_reg_709_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_212_p0 <= p_r_M_real_reg_680_pp0_iter2_reg;
        else 
            grp_fu_212_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_212_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, mul3_i_i_reg_721, mul3_i_i3_reg_741, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_212_p1 <= mul3_i_i3_reg_741;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_212_p1 <= mul3_i_i_reg_721;
        else 
            grp_fu_212_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_216_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, p_r_M_real_2_reg_703_pp0_iter3_reg, p_r_M_real_6_fu_512_p1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_216_p0 <= p_r_M_real_6_fu_512_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_216_p0 <= p_r_M_real_2_reg_703_pp0_iter3_reg;
        else 
            grp_fu_216_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_216_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, mul3_i_i2_reg_731, p_r_1_reg_773, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_216_p1 <= p_r_1_reg_773;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_216_p1 <= mul3_i_i2_reg_731;
        else 
            grp_fu_216_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_220_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, p_r_M_imag_6_fu_517_p1, p_r_M_real_15_reg_819, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_220_p0 <= p_r_M_real_15_reg_819;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_220_p0 <= p_r_M_imag_6_fu_517_p1;
        else 
            grp_fu_220_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_220_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, p_r_M_imag_18_reg_789, p_r_M_real_18_reg_837, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_220_p1 <= p_r_M_real_18_reg_837;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_220_p1 <= p_r_M_imag_18_reg_789;
        else 
            grp_fu_220_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_224_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, p_r_reg_761, p_r_M_imag_15_reg_831, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_224_p0 <= p_r_M_imag_15_reg_831;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_224_p0 <= p_r_reg_761;
        else 
            grp_fu_224_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_224_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, p_r_2_reg_795, p_r_M_imag_20_reg_843, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_224_p1 <= p_r_M_imag_20_reg_843;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_224_p1 <= p_r_2_reg_795;
        else 
            grp_fu_224_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_240_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, p_r_M_imag_fu_478_p1, p_r_M_real_2_fu_491_p1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_240_p0 <= p_r_M_real_2_fu_491_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_240_p0 <= p_r_M_imag_fu_478_p1;
        else 
            grp_fu_240_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_245_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, p_r_M_real_fu_474_p1, p_r_M_imag_4_fu_499_p1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_245_p0 <= p_r_M_imag_4_fu_499_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_245_p0 <= p_r_M_real_fu_474_p1;
        else 
            grp_fu_245_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_250_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, p_r_M_imag_2_fu_483_p1, p_r_M_real_4_fu_495_p1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_250_p0 <= p_r_M_real_4_fu_495_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_250_p0 <= p_r_M_imag_2_fu_483_p1;
        else 
            grp_fu_250_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln1027_4_fu_326_p2 <= "1" when (ap_sig_allocacmp_k2_load = trunc_ln17) else "0";
    icmp_ln1027_fu_302_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = bound) else "0";
    k2_1_fu_350_p3 <= 
        ap_const_lv7_1 when (icmp_ln1027_4_fu_326_p2(0) = '1') else 
        add_ln22_fu_344_p2;
    or_ln1027_fu_390_p2 <= (trunc_ln388_reg_619 or ap_const_lv6_1);
    or_ln30_fu_424_p2 <= (select_ln1027_fu_376_p3 or ap_const_lv8_1);
    p_r_M_imag_2_fu_483_p1 <= trunc_ln388_3_reg_675;
    p_r_M_imag_4_fu_499_p1 <= reg_275;
    p_r_M_imag_6_fu_517_p1 <= trunc_ln328_6_reg_784;
    p_r_M_imag_fu_478_p1 <= reg_275;
    p_r_M_real_2_fu_491_p1 <= trunc_ln388_2_reg_670;
    p_r_M_real_4_fu_495_p1 <= trunc_ln388_4_reg_698;
    p_r_M_real_6_fu_512_p1 <= trunc_ln328_reg_779;
    p_r_M_real_fu_474_p1 <= trunc_ln388_1_reg_655;
    select_ln1027_2_fu_332_p3 <= 
        add_ln57_fu_320_p2 when (icmp_ln1027_4_fu_326_p2(0) = '1') else 
        ap_sig_allocacmp_m1_load;
    select_ln1027_fu_376_p3 <= 
        ap_const_lv8_0 when (icmp_ln1027_4_reg_614(0) = '1') else 
        m2_fu_78;
    sub3_i_i298_partset_fu_558_p3 <= (bitcast_ln38_1_fu_555_p1 & bitcast_ln38_fu_552_p1);
    sub3_i_i302_partset_fu_573_p3 <= (bitcast_ln39_1_fu_570_p1 & bitcast_ln39_fu_567_p1);
    tmp_6_fu_395_p3 <= (or_ln1027_fu_390_p2 & ap_const_lv6_0);
    tmp_s_fu_383_p3 <= (trunc_ln388_reg_619 & ap_const_lv6_0);
    trunc_ln328_fu_508_p1 <= I_q0(16 - 1 downto 0);
    trunc_ln388_1_fu_462_p1 <= I_q1(16 - 1 downto 0);
    trunc_ln388_2_fu_470_p1 <= I_q0(16 - 1 downto 0);
    trunc_ln388_4_fu_487_p1 <= I_q1(16 - 1 downto 0);
    trunc_ln388_fu_340_p1 <= select_ln1027_2_fu_332_p3(6 - 1 downto 0);
    zext_ln328_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln328_reg_635_pp0_iter4_reg),64));
    zext_ln388_1_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln388_fu_407_p2),64));
    zext_ln388_2_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln30_fu_424_p2),12));
    zext_ln388_3_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln388_1_fu_434_p2),64));
    zext_ln388_4_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln388_2_reg_650),64));
    zext_ln388_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1027_fu_376_p3),12));
end behav;
