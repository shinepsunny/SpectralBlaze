-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity IFFT_AP_pool_Pipeline_VITIS_LOOP_178_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln541 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln178 : IN STD_LOGIC_VECTOR (31 downto 0);
    O_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    O_ce0 : OUT STD_LOGIC;
    O_we0 : OUT STD_LOGIC;
    O_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    zext_ln175 : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln151_2 : IN STD_LOGIC_VECTOR (9 downto 0);
    I_0_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    I_0_0_ce0 : OUT STD_LOGIC;
    I_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    I_0_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    I_0_0_ce1 : OUT STD_LOGIC;
    I_0_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln151_3 : IN STD_LOGIC_VECTOR (9 downto 0);
    I_0_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    I_0_1_ce0 : OUT STD_LOGIC;
    I_0_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    I_0_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    I_0_1_ce1 : OUT STD_LOGIC;
    I_0_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    I_1_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    I_1_0_ce0 : OUT STD_LOGIC;
    I_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    I_1_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    I_1_0_ce1 : OUT STD_LOGIC;
    I_1_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    I_1_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    I_1_1_ce0 : OUT STD_LOGIC;
    I_1_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    I_1_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    I_1_1_ce1 : OUT STD_LOGIC;
    I_1_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_cast : IN STD_LOGIC_VECTOR (0 downto 0);
    or_ln112 : IN STD_LOGIC_VECTOR (0 downto 0);
    empty : IN STD_LOGIC_VECTOR (0 downto 0);
    mul : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of IFFT_AP_pool_Pipeline_VITIS_LOOP_178_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1027_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_4_reg_1352 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln112_read_reg_1360 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_cast_read_reg_1372 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln175_cast_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_cast_reg_1392 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1027_reg_1397 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_1397_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_1397_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_1397_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_1397_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_1397_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_1397_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_1397_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_1397_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_1397_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_1397_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_1397_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_1397_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_1397_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_1397_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_1397_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_1397_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_1397_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_1397_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln188_fu_452_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln188_reg_1401 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln188_reg_1401_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln_reg_1414 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln151_5_reg_1420 : STD_LOGIC_VECTOR (9 downto 0);
    signal arg_assign_fu_615_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg_assign_reg_1506 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg_assign_reg_1506_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal arg_assign_1_fu_674_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg_assign_1_reg_1513 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg_assign_1_reg_1513_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal arg_assign_0_1_fu_764_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg_assign_0_1_reg_1520 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg_assign_0_1_reg_1520_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal arg_assign_1_0_1_fu_825_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg_assign_1_0_1_reg_1527 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg_assign_1_0_1_reg_1527_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal arg_assign_s_fu_908_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg_assign_s_reg_1534 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg_assign_s_reg_1534_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal arg_assign_1_1_fu_967_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg_assign_1_1_reg_1541 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg_assign_1_1_reg_1541_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal arg_assign_17_1_fu_1052_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg_assign_17_1_reg_1548 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg_assign_17_1_reg_1548_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal arg_assign_1_1_1_fu_1113_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg_assign_1_1_1_reg_1555 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg_assign_1_1_1_reg_1555_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_fu_1136_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_reg_1562 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_reg_1562_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_1_fu_1142_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_1_reg_1568 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_1_reg_1568_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_2_fu_1162_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_2_reg_1574 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_2_reg_1574_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_2_reg_1574_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_2_reg_1574_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_3_fu_1168_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_3_reg_1580 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_3_reg_1580_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_3_reg_1580_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_3_reg_1580_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_4_fu_1188_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_4_reg_1586 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_4_reg_1586_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_4_reg_1586_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_4_reg_1586_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_4_reg_1586_pp0_iter9_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_4_reg_1586_pp0_iter10_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_5_fu_1194_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_5_reg_1592 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_5_reg_1592_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_5_reg_1592_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_5_reg_1592_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_5_reg_1592_pp0_iter9_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_5_reg_1592_pp0_iter10_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_6_fu_1214_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_6_reg_1598 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_6_reg_1598_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_6_reg_1598_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_6_reg_1598_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_6_reg_1598_pp0_iter9_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_6_reg_1598_pp0_iter10_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_6_reg_1598_pp0_iter11_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_6_reg_1598_pp0_iter12_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_7_fu_1220_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_7_reg_1604 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_7_reg_1604_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_7_reg_1604_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_7_reg_1604_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_7_reg_1604_pp0_iter9_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_7_reg_1604_pp0_iter10_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_7_reg_1604_pp0_iter11_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln112_7_reg_1604_pp0_iter12_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln189_fu_1226_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln189_reg_1610 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln189_reg_1610_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln191_fu_1233_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln191_reg_1616 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln191_reg_1616_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln189_1_fu_1240_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln189_1_reg_1622 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln189_1_reg_1622_pp0_iter10_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln191_1_fu_1246_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln191_1_reg_1628 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln191_1_reg_1628_pp0_iter10_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln189_2_fu_1252_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln189_2_reg_1634 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln189_2_reg_1634_pp0_iter12_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln191_2_fu_1258_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln191_2_reg_1640 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln191_2_reg_1640_pp0_iter12_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln189_3_fu_1264_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln189_3_reg_1646 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln191_3_fu_1270_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln191_3_reg_1651 : STD_LOGIC_VECTOR (15 downto 0);
    signal O_addr_reg_1656 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_336_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal div_reg_1661 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_340_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal div1_reg_1666 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_exit_pp0_iter20_stage0 : STD_LOGIC;
    signal zext_ln151_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln151_1_fu_509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln151_4_fu_521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln151_5_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln196_fu_1301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x1_fu_98 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln196_fu_1306_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln178_cast_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal x_fu_102 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln178_fu_482_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_cast_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_64_fu_448_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln188_fu_466_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln151_fu_493_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln151_1_fu_505_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln151_2_fu_517_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln151_3_fu_529_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln8_fu_541_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln151_1_fu_555_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_569_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_569_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln151_2_fu_578_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln151_3_fu_592_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_606_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_606_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_569_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_606_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln147_fu_624_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln147_1_fu_632_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_640_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_640_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln147_2_fu_649_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln147_3_fu_657_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_665_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_665_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_640_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_665_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln151_4_fu_688_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln151_5_fu_702_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_0_1_fu_716_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_0_1_fu_716_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln151_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln151_6_fu_726_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln151_7_fu_740_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_0_1_65_fu_754_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_0_1_65_fu_754_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_0_1_fu_716_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_0_1_65_fu_754_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln147_4_fu_773_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln147_5_fu_781_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_0_1_fu_789_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_0_1_fu_789_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln147_6_fu_799_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln147_7_fu_807_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_0_1_fu_815_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_0_1_fu_815_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_0_1_fu_789_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_0_1_fu_815_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln151_8_fu_834_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln151_9_fu_848_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_862_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_862_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln151_s_fu_871_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln151_10_fu_885_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_66_fu_899_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_66_fu_899_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_862_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_66_fu_899_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln147_8_fu_917_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln147_9_fu_925_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_1_fu_933_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_1_fu_933_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln147_10_fu_942_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln147_11_fu_950_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_1_fu_958_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_1_fu_958_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_1_fu_933_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_1_fu_958_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln151_11_fu_976_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln151_12_fu_990_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_1_fu_1004_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_1_fu_1004_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln151_13_fu_1014_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln151_14_fu_1028_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_1_67_fu_1042_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_1_67_fu_1042_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_1_fu_1004_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_1_67_fu_1042_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln147_12_fu_1061_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln147_13_fu_1069_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_1_1_fu_1077_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_1_1_fu_1077_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln147_14_fu_1087_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln147_15_fu_1095_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_1_1_fu_1103_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_1_1_fu_1103_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_1_1_fu_1077_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_1_1_fu_1103_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln116_fu_1122_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln116_1_fu_1129_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln116_2_fu_1148_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln116_3_fu_1155_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln116_4_fu_1174_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln116_5_fu_1181_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln116_6_fu_1200_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln116_7_fu_1207_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln196_1_fu_1283_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_1287_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln196_fu_1279_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln196_1_fu_1295_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln196_1_fu_1320_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln196_fu_1317_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_1315 : BOOLEAN;
    signal ap_condition_1318 : BOOLEAN;
    signal ap_condition_1321 : BOOLEAN;
    signal ap_condition_1324 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component IFFT_AP_hdiv_16ns_16ns_16_7_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component IFFT_AP_hcmp_16ns_16ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component IFFT_AP_mux_21_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component IFFT_AP_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    hdiv_16ns_16ns_16_7_no_dsp_1_U241 : component IFFT_AP_hdiv_16ns_16ns_16_7_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln189_3_reg_1646,
        din1 => mul,
        ce => ap_const_logic_1,
        dout => grp_fu_336_p2);

    hdiv_16ns_16ns_16_7_no_dsp_1_U242 : component IFFT_AP_hdiv_16ns_16ns_16_7_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln191_3_reg_1651,
        din1 => mul,
        ce => ap_const_logic_1,
        dout => grp_fu_340_p2);

    hcmp_16ns_16ns_1_2_no_dsp_1_U243 : component IFFT_AP_hcmp_16ns_16ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => arg_assign_reg_1506,
        din1 => ap_const_lv16_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_344_p2);

    hcmp_16ns_16ns_1_2_no_dsp_1_U244 : component IFFT_AP_hcmp_16ns_16ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => arg_assign_1_reg_1513,
        din1 => ap_const_lv16_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_349_p2);

    hcmp_16ns_16ns_1_2_no_dsp_1_U245 : component IFFT_AP_hcmp_16ns_16ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => arg_assign_0_1_reg_1520,
        din1 => ap_const_lv16_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_354_p2);

    hcmp_16ns_16ns_1_2_no_dsp_1_U246 : component IFFT_AP_hcmp_16ns_16ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => arg_assign_1_0_1_reg_1527,
        din1 => ap_const_lv16_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_359_p2);

    hcmp_16ns_16ns_1_2_no_dsp_1_U247 : component IFFT_AP_hcmp_16ns_16ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => arg_assign_s_reg_1534,
        din1 => ap_const_lv16_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_364_p2);

    hcmp_16ns_16ns_1_2_no_dsp_1_U248 : component IFFT_AP_hcmp_16ns_16ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => arg_assign_1_1_reg_1541,
        din1 => ap_const_lv16_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_369_p2);

    hcmp_16ns_16ns_1_2_no_dsp_1_U249 : component IFFT_AP_hcmp_16ns_16ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => arg_assign_17_1_reg_1548,
        din1 => ap_const_lv16_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_374_p2);

    hcmp_16ns_16ns_1_2_no_dsp_1_U250 : component IFFT_AP_hcmp_16ns_16ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => arg_assign_1_1_1_reg_1555,
        din1 => ap_const_lv16_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_379_p2);

    hcmp_16ns_16ns_1_2_no_dsp_1_U251 : component IFFT_AP_hcmp_16ns_16ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln112_reg_1562,
        din1 => ap_const_lv16_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_384_p2);

    hcmp_16ns_16ns_1_2_no_dsp_1_U252 : component IFFT_AP_hcmp_16ns_16ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln112_1_reg_1568,
        din1 => ap_const_lv16_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_389_p2);

    hcmp_16ns_16ns_1_2_no_dsp_1_U253 : component IFFT_AP_hcmp_16ns_16ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln112_2_reg_1574_pp0_iter7_reg,
        din1 => select_ln189_reg_1610,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_394_p2);

    hcmp_16ns_16ns_1_2_no_dsp_1_U254 : component IFFT_AP_hcmp_16ns_16ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln112_3_reg_1580_pp0_iter7_reg,
        din1 => select_ln191_reg_1616,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_398_p2);

    hcmp_16ns_16ns_1_2_no_dsp_1_U255 : component IFFT_AP_hcmp_16ns_16ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln112_4_reg_1586_pp0_iter9_reg,
        din1 => select_ln189_1_reg_1622,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_402_p2);

    hcmp_16ns_16ns_1_2_no_dsp_1_U256 : component IFFT_AP_hcmp_16ns_16ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln112_5_reg_1592_pp0_iter9_reg,
        din1 => select_ln191_1_reg_1628,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_406_p2);

    hcmp_16ns_16ns_1_2_no_dsp_1_U257 : component IFFT_AP_hcmp_16ns_16ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln112_6_reg_1598_pp0_iter11_reg,
        din1 => select_ln189_2_reg_1634,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_410_p2);

    hcmp_16ns_16ns_1_2_no_dsp_1_U258 : component IFFT_AP_hcmp_16ns_16ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln112_7_reg_1604_pp0_iter11_reg,
        din1 => select_ln191_2_reg_1640,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_414_p2);

    mux_21_16_1_1_U259 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_fu_569_p1,
        din1 => tmp_fu_569_p2,
        din2 => trunc_ln188_reg_1401_pp0_iter2_reg,
        dout => tmp_fu_569_p4);

    mux_21_16_1_1_U260 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_s_fu_606_p1,
        din1 => tmp_s_fu_606_p2,
        din2 => trunc_ln188_reg_1401_pp0_iter2_reg,
        dout => tmp_s_fu_606_p4);

    mux_21_16_1_1_U261 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_fu_569_p4,
        din1 => tmp_s_fu_606_p4,
        din2 => y_cast,
        dout => arg_assign_fu_615_p4);

    mux_21_16_1_1_U262 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_2_fu_640_p1,
        din1 => tmp_2_fu_640_p2,
        din2 => trunc_ln188_reg_1401_pp0_iter2_reg,
        dout => tmp_2_fu_640_p4);

    mux_21_16_1_1_U263 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_3_fu_665_p1,
        din1 => tmp_3_fu_665_p2,
        din2 => trunc_ln188_reg_1401_pp0_iter2_reg,
        dout => tmp_3_fu_665_p4);

    mux_21_16_1_1_U264 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_2_fu_640_p4,
        din1 => tmp_3_fu_665_p4,
        din2 => y_cast,
        dout => arg_assign_1_fu_674_p4);

    mux_21_16_1_1_U265 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_0_1_fu_716_p1,
        din1 => tmp_0_1_fu_716_p2,
        din2 => xor_ln151_fu_683_p2,
        dout => tmp_0_1_fu_716_p4);

    mux_21_16_1_1_U266 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_0_1_65_fu_754_p1,
        din1 => tmp_0_1_65_fu_754_p2,
        din2 => xor_ln151_fu_683_p2,
        dout => tmp_0_1_65_fu_754_p4);

    mux_21_16_1_1_U267 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_0_1_fu_716_p4,
        din1 => tmp_0_1_65_fu_754_p4,
        din2 => y_cast,
        dout => arg_assign_0_1_fu_764_p4);

    mux_21_16_1_1_U268 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_35_0_1_fu_789_p1,
        din1 => tmp_35_0_1_fu_789_p2,
        din2 => xor_ln151_fu_683_p2,
        dout => tmp_35_0_1_fu_789_p4);

    mux_21_16_1_1_U269 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_36_0_1_fu_815_p1,
        din1 => tmp_36_0_1_fu_815_p2,
        din2 => xor_ln151_fu_683_p2,
        dout => tmp_36_0_1_fu_815_p4);

    mux_21_16_1_1_U270 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_35_0_1_fu_789_p4,
        din1 => tmp_36_0_1_fu_815_p4,
        din2 => y_cast,
        dout => arg_assign_1_0_1_fu_825_p4);

    mux_21_16_1_1_U271 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_1_fu_862_p1,
        din1 => tmp_1_fu_862_p2,
        din2 => trunc_ln188_reg_1401_pp0_iter2_reg,
        dout => tmp_1_fu_862_p4);

    mux_21_16_1_1_U272 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_1_66_fu_899_p1,
        din1 => tmp_1_66_fu_899_p2,
        din2 => trunc_ln188_reg_1401_pp0_iter2_reg,
        dout => tmp_1_66_fu_899_p4);

    mux_21_16_1_1_U273 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_1_fu_862_p4,
        din1 => tmp_1_66_fu_899_p4,
        din2 => empty,
        dout => arg_assign_s_fu_908_p4);

    mux_21_16_1_1_U274 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_35_1_fu_933_p1,
        din1 => tmp_35_1_fu_933_p2,
        din2 => trunc_ln188_reg_1401_pp0_iter2_reg,
        dout => tmp_35_1_fu_933_p4);

    mux_21_16_1_1_U275 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_36_1_fu_958_p1,
        din1 => tmp_36_1_fu_958_p2,
        din2 => trunc_ln188_reg_1401_pp0_iter2_reg,
        dout => tmp_36_1_fu_958_p4);

    mux_21_16_1_1_U276 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_35_1_fu_933_p4,
        din1 => tmp_36_1_fu_958_p4,
        din2 => empty,
        dout => arg_assign_1_1_fu_967_p4);

    mux_21_16_1_1_U277 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_1_1_fu_1004_p1,
        din1 => tmp_1_1_fu_1004_p2,
        din2 => xor_ln151_fu_683_p2,
        dout => tmp_1_1_fu_1004_p4);

    mux_21_16_1_1_U278 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_1_1_67_fu_1042_p1,
        din1 => tmp_1_1_67_fu_1042_p2,
        din2 => xor_ln151_fu_683_p2,
        dout => tmp_1_1_67_fu_1042_p4);

    mux_21_16_1_1_U279 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_1_1_fu_1004_p4,
        din1 => tmp_1_1_67_fu_1042_p4,
        din2 => empty,
        dout => arg_assign_17_1_fu_1052_p4);

    mux_21_16_1_1_U280 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_35_1_1_fu_1077_p1,
        din1 => tmp_35_1_1_fu_1077_p2,
        din2 => xor_ln151_fu_683_p2,
        dout => tmp_35_1_1_fu_1077_p4);

    mux_21_16_1_1_U281 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_36_1_1_fu_1103_p1,
        din1 => tmp_36_1_1_fu_1103_p2,
        din2 => xor_ln151_fu_683_p2,
        dout => tmp_36_1_1_fu_1103_p4);

    mux_21_16_1_1_U282 : component IFFT_AP_mux_21_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_35_1_1_fu_1077_p4,
        din1 => tmp_36_1_1_fu_1103_p4,
        din2 => empty,
        dout => arg_assign_1_1_1_fu_1113_p4);

    flow_control_loop_pipe_sequential_init_U : component IFFT_AP_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter20_stage0)) then 
                    ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    x1_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x1_fu_98 <= sext_ln178_cast_fu_422_p1;
                elsif (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (icmp_ln1027_reg_1397_pp0_iter19_reg = ap_const_lv1_1))) then 
                    x1_fu_98 <= add_ln196_fu_1306_p2;
                end if;
            end if; 
        end if;
    end process;

    x_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_102 <= zext_ln541_cast_fu_426_p1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_fu_443_p2 = ap_const_lv1_1))) then 
                    x_fu_102 <= add_ln178_fu_482_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                O_addr_reg_1656 <= zext_ln196_fu_1301_p1(12 - 1 downto 0);
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                arg_assign_0_1_reg_1520_pp0_iter4_reg <= arg_assign_0_1_reg_1520;
                arg_assign_17_1_reg_1548_pp0_iter4_reg <= arg_assign_17_1_reg_1548;
                arg_assign_1_0_1_reg_1527_pp0_iter4_reg <= arg_assign_1_0_1_reg_1527;
                arg_assign_1_1_1_reg_1555_pp0_iter4_reg <= arg_assign_1_1_1_reg_1555;
                arg_assign_1_1_reg_1541_pp0_iter4_reg <= arg_assign_1_1_reg_1541;
                arg_assign_1_reg_1513_pp0_iter4_reg <= arg_assign_1_reg_1513;
                arg_assign_reg_1506_pp0_iter4_reg <= arg_assign_reg_1506;
                arg_assign_s_reg_1534_pp0_iter4_reg <= arg_assign_s_reg_1534;
                icmp_ln1027_reg_1397_pp0_iter10_reg <= icmp_ln1027_reg_1397_pp0_iter9_reg;
                icmp_ln1027_reg_1397_pp0_iter11_reg <= icmp_ln1027_reg_1397_pp0_iter10_reg;
                icmp_ln1027_reg_1397_pp0_iter12_reg <= icmp_ln1027_reg_1397_pp0_iter11_reg;
                icmp_ln1027_reg_1397_pp0_iter13_reg <= icmp_ln1027_reg_1397_pp0_iter12_reg;
                icmp_ln1027_reg_1397_pp0_iter14_reg <= icmp_ln1027_reg_1397_pp0_iter13_reg;
                icmp_ln1027_reg_1397_pp0_iter15_reg <= icmp_ln1027_reg_1397_pp0_iter14_reg;
                icmp_ln1027_reg_1397_pp0_iter16_reg <= icmp_ln1027_reg_1397_pp0_iter15_reg;
                icmp_ln1027_reg_1397_pp0_iter17_reg <= icmp_ln1027_reg_1397_pp0_iter16_reg;
                icmp_ln1027_reg_1397_pp0_iter18_reg <= icmp_ln1027_reg_1397_pp0_iter17_reg;
                icmp_ln1027_reg_1397_pp0_iter19_reg <= icmp_ln1027_reg_1397_pp0_iter18_reg;
                icmp_ln1027_reg_1397_pp0_iter2_reg <= icmp_ln1027_reg_1397;
                icmp_ln1027_reg_1397_pp0_iter3_reg <= icmp_ln1027_reg_1397_pp0_iter2_reg;
                icmp_ln1027_reg_1397_pp0_iter4_reg <= icmp_ln1027_reg_1397_pp0_iter3_reg;
                icmp_ln1027_reg_1397_pp0_iter5_reg <= icmp_ln1027_reg_1397_pp0_iter4_reg;
                icmp_ln1027_reg_1397_pp0_iter6_reg <= icmp_ln1027_reg_1397_pp0_iter5_reg;
                icmp_ln1027_reg_1397_pp0_iter7_reg <= icmp_ln1027_reg_1397_pp0_iter6_reg;
                icmp_ln1027_reg_1397_pp0_iter8_reg <= icmp_ln1027_reg_1397_pp0_iter7_reg;
                icmp_ln1027_reg_1397_pp0_iter9_reg <= icmp_ln1027_reg_1397_pp0_iter8_reg;
                select_ln112_1_reg_1568_pp0_iter6_reg <= select_ln112_1_reg_1568;
                select_ln112_2_reg_1574_pp0_iter6_reg <= select_ln112_2_reg_1574;
                select_ln112_2_reg_1574_pp0_iter7_reg <= select_ln112_2_reg_1574_pp0_iter6_reg;
                select_ln112_2_reg_1574_pp0_iter8_reg <= select_ln112_2_reg_1574_pp0_iter7_reg;
                select_ln112_3_reg_1580_pp0_iter6_reg <= select_ln112_3_reg_1580;
                select_ln112_3_reg_1580_pp0_iter7_reg <= select_ln112_3_reg_1580_pp0_iter6_reg;
                select_ln112_3_reg_1580_pp0_iter8_reg <= select_ln112_3_reg_1580_pp0_iter7_reg;
                select_ln112_4_reg_1586_pp0_iter10_reg <= select_ln112_4_reg_1586_pp0_iter9_reg;
                select_ln112_4_reg_1586_pp0_iter6_reg <= select_ln112_4_reg_1586;
                select_ln112_4_reg_1586_pp0_iter7_reg <= select_ln112_4_reg_1586_pp0_iter6_reg;
                select_ln112_4_reg_1586_pp0_iter8_reg <= select_ln112_4_reg_1586_pp0_iter7_reg;
                select_ln112_4_reg_1586_pp0_iter9_reg <= select_ln112_4_reg_1586_pp0_iter8_reg;
                select_ln112_5_reg_1592_pp0_iter10_reg <= select_ln112_5_reg_1592_pp0_iter9_reg;
                select_ln112_5_reg_1592_pp0_iter6_reg <= select_ln112_5_reg_1592;
                select_ln112_5_reg_1592_pp0_iter7_reg <= select_ln112_5_reg_1592_pp0_iter6_reg;
                select_ln112_5_reg_1592_pp0_iter8_reg <= select_ln112_5_reg_1592_pp0_iter7_reg;
                select_ln112_5_reg_1592_pp0_iter9_reg <= select_ln112_5_reg_1592_pp0_iter8_reg;
                select_ln112_6_reg_1598_pp0_iter10_reg <= select_ln112_6_reg_1598_pp0_iter9_reg;
                select_ln112_6_reg_1598_pp0_iter11_reg <= select_ln112_6_reg_1598_pp0_iter10_reg;
                select_ln112_6_reg_1598_pp0_iter12_reg <= select_ln112_6_reg_1598_pp0_iter11_reg;
                select_ln112_6_reg_1598_pp0_iter6_reg <= select_ln112_6_reg_1598;
                select_ln112_6_reg_1598_pp0_iter7_reg <= select_ln112_6_reg_1598_pp0_iter6_reg;
                select_ln112_6_reg_1598_pp0_iter8_reg <= select_ln112_6_reg_1598_pp0_iter7_reg;
                select_ln112_6_reg_1598_pp0_iter9_reg <= select_ln112_6_reg_1598_pp0_iter8_reg;
                select_ln112_7_reg_1604_pp0_iter10_reg <= select_ln112_7_reg_1604_pp0_iter9_reg;
                select_ln112_7_reg_1604_pp0_iter11_reg <= select_ln112_7_reg_1604_pp0_iter10_reg;
                select_ln112_7_reg_1604_pp0_iter12_reg <= select_ln112_7_reg_1604_pp0_iter11_reg;
                select_ln112_7_reg_1604_pp0_iter6_reg <= select_ln112_7_reg_1604;
                select_ln112_7_reg_1604_pp0_iter7_reg <= select_ln112_7_reg_1604_pp0_iter6_reg;
                select_ln112_7_reg_1604_pp0_iter8_reg <= select_ln112_7_reg_1604_pp0_iter7_reg;
                select_ln112_7_reg_1604_pp0_iter9_reg <= select_ln112_7_reg_1604_pp0_iter8_reg;
                select_ln112_reg_1562_pp0_iter6_reg <= select_ln112_reg_1562;
                select_ln189_1_reg_1622_pp0_iter10_reg <= select_ln189_1_reg_1622;
                select_ln189_2_reg_1634_pp0_iter12_reg <= select_ln189_2_reg_1634;
                select_ln189_reg_1610_pp0_iter8_reg <= select_ln189_reg_1610;
                select_ln191_1_reg_1628_pp0_iter10_reg <= select_ln191_1_reg_1628;
                select_ln191_2_reg_1640_pp0_iter12_reg <= select_ln191_2_reg_1640;
                select_ln191_reg_1616_pp0_iter8_reg <= select_ln191_reg_1616;
                trunc_ln188_reg_1401_pp0_iter2_reg <= trunc_ln188_reg_1401;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln1027_reg_1397 <= icmp_ln1027_fu_443_p2;
                    zext_ln175_cast_reg_1392(7 downto 0) <= zext_ln175_cast_fu_418_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_reg_1397_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                arg_assign_0_1_reg_1520 <= arg_assign_0_1_fu_764_p4;
                arg_assign_17_1_reg_1548 <= arg_assign_17_1_fu_1052_p4;
                arg_assign_1_0_1_reg_1527 <= arg_assign_1_0_1_fu_825_p4;
                arg_assign_1_1_1_reg_1555 <= arg_assign_1_1_1_fu_1113_p4;
                arg_assign_1_1_reg_1541 <= arg_assign_1_1_fu_967_p4;
                arg_assign_1_reg_1513 <= arg_assign_1_fu_674_p4;
                arg_assign_reg_1506 <= arg_assign_fu_615_p4;
                arg_assign_s_reg_1534 <= arg_assign_s_fu_908_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_reg_1397_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                div1_reg_1666 <= grp_fu_340_p2;
                div_reg_1661 <= grp_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_fu_443_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                lshr_ln151_5_reg_1420 <= add_ln188_fu_466_p2(10 downto 1);
                lshr_ln_reg_1414 <= x_fu_102(10 downto 1);
                trunc_ln188_reg_1401 <= trunc_ln188_fu_452_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_reg_1397_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln112_1_reg_1568 <= select_ln112_1_fu_1142_p3;
                select_ln112_2_reg_1574 <= select_ln112_2_fu_1162_p3;
                select_ln112_3_reg_1580 <= select_ln112_3_fu_1168_p3;
                select_ln112_4_reg_1586 <= select_ln112_4_fu_1188_p3;
                select_ln112_5_reg_1592 <= select_ln112_5_fu_1194_p3;
                select_ln112_6_reg_1598 <= select_ln112_6_fu_1214_p3;
                select_ln112_7_reg_1604 <= select_ln112_7_fu_1220_p3;
                select_ln112_reg_1562 <= select_ln112_fu_1136_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_reg_1397_pp0_iter8_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln189_1_reg_1622 <= select_ln189_1_fu_1240_p3;
                select_ln191_1_reg_1628 <= select_ln191_1_fu_1246_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_reg_1397_pp0_iter10_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln189_2_reg_1634 <= select_ln189_2_fu_1252_p3;
                select_ln191_2_reg_1640 <= select_ln191_2_fu_1258_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_reg_1397_pp0_iter12_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln189_3_reg_1646 <= select_ln189_3_fu_1264_p3;
                select_ln191_3_reg_1651 <= select_ln191_3_fu_1270_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_reg_1397_pp0_iter6_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln189_reg_1610 <= select_ln189_fu_1226_p3;
                select_ln191_reg_1616 <= select_ln191_fu_1233_p3;
            end if;
        end if;
    end process;
    zext_ln175_cast_reg_1392(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    I_0_0_address0_assign_proc : process(trunc_ln188_reg_1401, zext_ln151_1_fu_509_p1, zext_ln151_5_fu_533_p1, ap_condition_1315)
    begin
        if ((ap_const_boolean_1 = ap_condition_1315)) then
            if ((trunc_ln188_reg_1401 = ap_const_lv1_1)) then 
                I_0_0_address0 <= zext_ln151_5_fu_533_p1(10 - 1 downto 0);
            elsif ((trunc_ln188_reg_1401 = ap_const_lv1_0)) then 
                I_0_0_address0 <= zext_ln151_1_fu_509_p1(10 - 1 downto 0);
            else 
                I_0_0_address0 <= "XXXXXXXXXX";
            end if;
        else 
            I_0_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    I_0_0_address1_assign_proc : process(trunc_ln188_reg_1401, zext_ln151_fu_497_p1, zext_ln151_4_fu_521_p1, ap_condition_1318)
    begin
        if ((ap_const_boolean_1 = ap_condition_1318)) then
            if ((trunc_ln188_reg_1401 = ap_const_lv1_1)) then 
                I_0_0_address1 <= zext_ln151_4_fu_521_p1(10 - 1 downto 0);
            elsif ((trunc_ln188_reg_1401 = ap_const_lv1_0)) then 
                I_0_0_address1 <= zext_ln151_fu_497_p1(10 - 1 downto 0);
            else 
                I_0_0_address1 <= "XXXXXXXXXX";
            end if;
        else 
            I_0_0_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    I_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, tmp_4_reg_1352, icmp_ln1027_reg_1397, trunc_ln188_reg_1401)
    begin
        if ((((trunc_ln188_reg_1401 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_reg_1397 = ap_const_lv1_1) and (tmp_4_reg_1352 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((trunc_ln188_reg_1401 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_reg_1397 = ap_const_lv1_1) and (tmp_4_reg_1352 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            I_0_0_ce0 <= ap_const_logic_1;
        else 
            I_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    I_0_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, y_cast_read_reg_1372, icmp_ln1027_reg_1397, trunc_ln188_reg_1401)
    begin
        if ((((trunc_ln188_reg_1401 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_reg_1397 = ap_const_lv1_1) and (y_cast_read_reg_1372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((trunc_ln188_reg_1401 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_reg_1397 = ap_const_lv1_1) and (y_cast_read_reg_1372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            I_0_0_ce1 <= ap_const_logic_1;
        else 
            I_0_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    I_0_1_address0_assign_proc : process(trunc_ln188_reg_1401, zext_ln151_1_fu_509_p1, zext_ln151_5_fu_533_p1, ap_condition_1315)
    begin
        if ((ap_const_boolean_1 = ap_condition_1315)) then
            if ((trunc_ln188_reg_1401 = ap_const_lv1_0)) then 
                I_0_1_address0 <= zext_ln151_5_fu_533_p1(10 - 1 downto 0);
            elsif ((trunc_ln188_reg_1401 = ap_const_lv1_1)) then 
                I_0_1_address0 <= zext_ln151_1_fu_509_p1(10 - 1 downto 0);
            else 
                I_0_1_address0 <= "XXXXXXXXXX";
            end if;
        else 
            I_0_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    I_0_1_address1_assign_proc : process(trunc_ln188_reg_1401, zext_ln151_fu_497_p1, zext_ln151_4_fu_521_p1, ap_condition_1318)
    begin
        if ((ap_const_boolean_1 = ap_condition_1318)) then
            if ((trunc_ln188_reg_1401 = ap_const_lv1_0)) then 
                I_0_1_address1 <= zext_ln151_4_fu_521_p1(10 - 1 downto 0);
            elsif ((trunc_ln188_reg_1401 = ap_const_lv1_1)) then 
                I_0_1_address1 <= zext_ln151_fu_497_p1(10 - 1 downto 0);
            else 
                I_0_1_address1 <= "XXXXXXXXXX";
            end if;
        else 
            I_0_1_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    I_0_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, tmp_4_reg_1352, icmp_ln1027_reg_1397, trunc_ln188_reg_1401)
    begin
        if ((((trunc_ln188_reg_1401 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_reg_1397 = ap_const_lv1_1) and (tmp_4_reg_1352 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((trunc_ln188_reg_1401 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_reg_1397 = ap_const_lv1_1) and (tmp_4_reg_1352 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            I_0_1_ce0 <= ap_const_logic_1;
        else 
            I_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    I_0_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, y_cast_read_reg_1372, icmp_ln1027_reg_1397, trunc_ln188_reg_1401)
    begin
        if ((((trunc_ln188_reg_1401 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_reg_1397 = ap_const_lv1_1) and (y_cast_read_reg_1372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((trunc_ln188_reg_1401 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_reg_1397 = ap_const_lv1_1) and (y_cast_read_reg_1372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            I_0_1_ce1 <= ap_const_logic_1;
        else 
            I_0_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    I_1_0_address0_assign_proc : process(trunc_ln188_reg_1401, zext_ln151_1_fu_509_p1, zext_ln151_5_fu_533_p1, ap_condition_1321)
    begin
        if ((ap_const_boolean_1 = ap_condition_1321)) then
            if ((trunc_ln188_reg_1401 = ap_const_lv1_1)) then 
                I_1_0_address0 <= zext_ln151_5_fu_533_p1(10 - 1 downto 0);
            elsif ((trunc_ln188_reg_1401 = ap_const_lv1_0)) then 
                I_1_0_address0 <= zext_ln151_1_fu_509_p1(10 - 1 downto 0);
            else 
                I_1_0_address0 <= "XXXXXXXXXX";
            end if;
        else 
            I_1_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    I_1_0_address1_assign_proc : process(trunc_ln188_reg_1401, zext_ln151_fu_497_p1, zext_ln151_4_fu_521_p1, ap_condition_1324)
    begin
        if ((ap_const_boolean_1 = ap_condition_1324)) then
            if ((trunc_ln188_reg_1401 = ap_const_lv1_1)) then 
                I_1_0_address1 <= zext_ln151_4_fu_521_p1(10 - 1 downto 0);
            elsif ((trunc_ln188_reg_1401 = ap_const_lv1_0)) then 
                I_1_0_address1 <= zext_ln151_fu_497_p1(10 - 1 downto 0);
            else 
                I_1_0_address1 <= "XXXXXXXXXX";
            end if;
        else 
            I_1_0_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    I_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, tmp_4_reg_1352, icmp_ln1027_reg_1397, trunc_ln188_reg_1401)
    begin
        if ((((trunc_ln188_reg_1401 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_reg_1397 = ap_const_lv1_1) and (tmp_4_reg_1352 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((trunc_ln188_reg_1401 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_reg_1397 = ap_const_lv1_1) and (tmp_4_reg_1352 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            I_1_0_ce0 <= ap_const_logic_1;
        else 
            I_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    I_1_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, y_cast_read_reg_1372, icmp_ln1027_reg_1397, trunc_ln188_reg_1401)
    begin
        if ((((trunc_ln188_reg_1401 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_reg_1397 = ap_const_lv1_1) and (y_cast_read_reg_1372 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((trunc_ln188_reg_1401 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_reg_1397 = ap_const_lv1_1) and (y_cast_read_reg_1372 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            I_1_0_ce1 <= ap_const_logic_1;
        else 
            I_1_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    I_1_1_address0_assign_proc : process(trunc_ln188_reg_1401, zext_ln151_1_fu_509_p1, zext_ln151_5_fu_533_p1, ap_condition_1321)
    begin
        if ((ap_const_boolean_1 = ap_condition_1321)) then
            if ((trunc_ln188_reg_1401 = ap_const_lv1_0)) then 
                I_1_1_address0 <= zext_ln151_5_fu_533_p1(10 - 1 downto 0);
            elsif ((trunc_ln188_reg_1401 = ap_const_lv1_1)) then 
                I_1_1_address0 <= zext_ln151_1_fu_509_p1(10 - 1 downto 0);
            else 
                I_1_1_address0 <= "XXXXXXXXXX";
            end if;
        else 
            I_1_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    I_1_1_address1_assign_proc : process(trunc_ln188_reg_1401, zext_ln151_fu_497_p1, zext_ln151_4_fu_521_p1, ap_condition_1324)
    begin
        if ((ap_const_boolean_1 = ap_condition_1324)) then
            if ((trunc_ln188_reg_1401 = ap_const_lv1_0)) then 
                I_1_1_address1 <= zext_ln151_4_fu_521_p1(10 - 1 downto 0);
            elsif ((trunc_ln188_reg_1401 = ap_const_lv1_1)) then 
                I_1_1_address1 <= zext_ln151_fu_497_p1(10 - 1 downto 0);
            else 
                I_1_1_address1 <= "XXXXXXXXXX";
            end if;
        else 
            I_1_1_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    I_1_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, tmp_4_reg_1352, icmp_ln1027_reg_1397, trunc_ln188_reg_1401)
    begin
        if ((((trunc_ln188_reg_1401 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_reg_1397 = ap_const_lv1_1) and (tmp_4_reg_1352 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((trunc_ln188_reg_1401 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_reg_1397 = ap_const_lv1_1) and (tmp_4_reg_1352 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            I_1_1_ce0 <= ap_const_logic_1;
        else 
            I_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    I_1_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, y_cast_read_reg_1372, icmp_ln1027_reg_1397, trunc_ln188_reg_1401)
    begin
        if ((((trunc_ln188_reg_1401 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_reg_1397 = ap_const_lv1_1) and (y_cast_read_reg_1372 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((trunc_ln188_reg_1401 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_reg_1397 = ap_const_lv1_1) and (y_cast_read_reg_1372 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            I_1_1_ce1 <= ap_const_logic_1;
        else 
            I_1_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    O_address0 <= O_addr_reg_1656;

    O_ce0_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            O_ce0 <= ap_const_logic_1;
        else 
            O_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    O_d0 <= (bitcast_ln196_1_fu_1320_p1 & bitcast_ln196_fu_1317_p1);

    O_we0_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            O_we0 <= ap_const_logic_1;
        else 
            O_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln151_1_fu_505_p2 <= std_logic_vector(unsigned(zext_ln151_3) + unsigned(lshr_ln_reg_1414));
    add_ln151_2_fu_517_p2 <= std_logic_vector(unsigned(zext_ln151_2) + unsigned(lshr_ln151_5_reg_1420));
    add_ln151_3_fu_529_p2 <= std_logic_vector(unsigned(zext_ln151_3) + unsigned(lshr_ln151_5_reg_1420));
    add_ln151_fu_493_p2 <= std_logic_vector(unsigned(zext_ln151_2) + unsigned(lshr_ln_reg_1414));
    add_ln178_fu_482_p2 <= std_logic_vector(unsigned(x_fu_102) + unsigned(ap_const_lv64_2));
    add_ln188_fu_466_p2 <= std_logic_vector(unsigned(empty_64_fu_448_p1) + unsigned(ap_const_lv11_1));
    add_ln196_1_fu_1295_p2 <= std_logic_vector(unsigned(tmp_5_fu_1287_p3) + unsigned(trunc_ln196_fu_1279_p1));
    add_ln196_fu_1306_p2 <= std_logic_vector(unsigned(x1_fu_98) + unsigned(ap_const_lv64_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1315_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_4_reg_1352, icmp_ln1027_reg_1397, ap_block_pp0_stage0)
    begin
                ap_condition_1315 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_reg_1397 = ap_const_lv1_1) and (tmp_4_reg_1352 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_1318_assign_proc : process(ap_enable_reg_pp0_iter2, y_cast_read_reg_1372, icmp_ln1027_reg_1397, ap_block_pp0_stage0)
    begin
                ap_condition_1318 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_reg_1397 = ap_const_lv1_1) and (y_cast_read_reg_1372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_1321_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_4_reg_1352, icmp_ln1027_reg_1397, ap_block_pp0_stage0)
    begin
                ap_condition_1321 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_reg_1397 = ap_const_lv1_1) and (tmp_4_reg_1352 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_1324_assign_proc : process(ap_enable_reg_pp0_iter2, y_cast_read_reg_1372, icmp_ln1027_reg_1397, ap_block_pp0_stage0)
    begin
                ap_condition_1324 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1027_reg_1397 = ap_const_lv1_1) and (y_cast_read_reg_1372 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1027_fu_443_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_fu_443_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter20_stage0_assign_proc : process(ap_enable_reg_pp0_iter20, ap_block_pp0_stage0_subdone, icmp_ln1027_reg_1397_pp0_iter19_reg)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (icmp_ln1027_reg_1397_pp0_iter19_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter20_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter20_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter20_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln196_1_fu_1320_p1 <= div1_reg_1666;
    bitcast_ln196_fu_1317_p1 <= div_reg_1661;
    empty_64_fu_448_p1 <= x_fu_102(11 - 1 downto 0);
    icmp_ln1027_fu_443_p2 <= "1" when (unsigned(x_fu_102) < unsigned(zext_ln175_cast_reg_1392)) else "0";
    or_ln112_read_reg_1360 <= or_ln112;
    select_ln112_1_fu_1142_p3 <= 
        arg_assign_1_reg_1513_pp0_iter4_reg when (or_ln112(0) = '1') else 
        select_ln116_1_fu_1129_p3;
    select_ln112_2_fu_1162_p3 <= 
        arg_assign_0_1_reg_1520_pp0_iter4_reg when (or_ln112(0) = '1') else 
        select_ln116_2_fu_1148_p3;
    select_ln112_3_fu_1168_p3 <= 
        arg_assign_1_0_1_reg_1527_pp0_iter4_reg when (or_ln112(0) = '1') else 
        select_ln116_3_fu_1155_p3;
    select_ln112_4_fu_1188_p3 <= 
        arg_assign_s_reg_1534_pp0_iter4_reg when (or_ln112(0) = '1') else 
        select_ln116_4_fu_1174_p3;
    select_ln112_5_fu_1194_p3 <= 
        arg_assign_1_1_reg_1541_pp0_iter4_reg when (or_ln112(0) = '1') else 
        select_ln116_5_fu_1181_p3;
    select_ln112_6_fu_1214_p3 <= 
        arg_assign_17_1_reg_1548_pp0_iter4_reg when (or_ln112(0) = '1') else 
        select_ln116_6_fu_1200_p3;
    select_ln112_7_fu_1220_p3 <= 
        arg_assign_1_1_1_reg_1555_pp0_iter4_reg when (or_ln112(0) = '1') else 
        select_ln116_7_fu_1207_p3;
    select_ln112_fu_1136_p3 <= 
        arg_assign_reg_1506_pp0_iter4_reg when (or_ln112(0) = '1') else 
        select_ln116_fu_1122_p3;
    select_ln116_1_fu_1129_p3 <= 
        arg_assign_1_reg_1513_pp0_iter4_reg when (grp_fu_349_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln116_2_fu_1148_p3 <= 
        arg_assign_0_1_reg_1520_pp0_iter4_reg when (grp_fu_354_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln116_3_fu_1155_p3 <= 
        arg_assign_1_0_1_reg_1527_pp0_iter4_reg when (grp_fu_359_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln116_4_fu_1174_p3 <= 
        arg_assign_s_reg_1534_pp0_iter4_reg when (grp_fu_364_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln116_5_fu_1181_p3 <= 
        arg_assign_1_1_reg_1541_pp0_iter4_reg when (grp_fu_369_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln116_6_fu_1200_p3 <= 
        arg_assign_17_1_reg_1548_pp0_iter4_reg when (grp_fu_374_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln116_7_fu_1207_p3 <= 
        arg_assign_1_1_1_reg_1555_pp0_iter4_reg when (grp_fu_379_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln116_fu_1122_p3 <= 
        arg_assign_reg_1506_pp0_iter4_reg when (grp_fu_344_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln189_1_fu_1240_p3 <= 
        select_ln112_2_reg_1574_pp0_iter8_reg when (grp_fu_394_p2(0) = '1') else 
        select_ln189_reg_1610_pp0_iter8_reg;
    select_ln189_2_fu_1252_p3 <= 
        select_ln112_4_reg_1586_pp0_iter10_reg when (grp_fu_402_p2(0) = '1') else 
        select_ln189_1_reg_1622_pp0_iter10_reg;
    select_ln189_3_fu_1264_p3 <= 
        select_ln112_6_reg_1598_pp0_iter12_reg when (grp_fu_410_p2(0) = '1') else 
        select_ln189_2_reg_1634_pp0_iter12_reg;
    select_ln189_fu_1226_p3 <= 
        select_ln112_reg_1562_pp0_iter6_reg when (grp_fu_384_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln191_1_fu_1246_p3 <= 
        select_ln112_3_reg_1580_pp0_iter8_reg when (grp_fu_398_p2(0) = '1') else 
        select_ln191_reg_1616_pp0_iter8_reg;
    select_ln191_2_fu_1258_p3 <= 
        select_ln112_5_reg_1592_pp0_iter10_reg when (grp_fu_406_p2(0) = '1') else 
        select_ln191_1_reg_1628_pp0_iter10_reg;
    select_ln191_3_fu_1270_p3 <= 
        select_ln112_7_reg_1604_pp0_iter12_reg when (grp_fu_414_p2(0) = '1') else 
        select_ln191_2_reg_1640_pp0_iter12_reg;
    select_ln191_fu_1233_p3 <= 
        select_ln112_1_reg_1568_pp0_iter6_reg when (grp_fu_389_p2(0) = '1') else 
        ap_const_lv16_0;
        sext_ln178_cast_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln178),64));

    tmp_0_1_65_fu_754_p1 <= trunc_ln151_6_fu_726_p4;
    tmp_0_1_65_fu_754_p2 <= trunc_ln151_7_fu_740_p4;
    tmp_0_1_fu_716_p1 <= trunc_ln151_4_fu_688_p4;
    tmp_0_1_fu_716_p2 <= trunc_ln151_5_fu_702_p4;
    tmp_1_1_67_fu_1042_p1 <= trunc_ln151_13_fu_1014_p4;
    tmp_1_1_67_fu_1042_p2 <= trunc_ln151_14_fu_1028_p4;
    tmp_1_1_fu_1004_p1 <= trunc_ln151_11_fu_976_p4;
    tmp_1_1_fu_1004_p2 <= trunc_ln151_12_fu_990_p4;
    tmp_1_66_fu_899_p1 <= trunc_ln151_s_fu_871_p4;
    tmp_1_66_fu_899_p2 <= trunc_ln151_10_fu_885_p4;
    tmp_1_fu_862_p1 <= trunc_ln151_8_fu_834_p4;
    tmp_1_fu_862_p2 <= trunc_ln151_9_fu_848_p4;
    tmp_2_fu_640_p1 <= trunc_ln147_fu_624_p1;
    tmp_2_fu_640_p2 <= trunc_ln147_1_fu_632_p1;
    tmp_35_0_1_fu_789_p1 <= trunc_ln147_4_fu_773_p1;
    tmp_35_0_1_fu_789_p2 <= trunc_ln147_5_fu_781_p1;
    tmp_35_1_1_fu_1077_p1 <= trunc_ln147_12_fu_1061_p1;
    tmp_35_1_1_fu_1077_p2 <= trunc_ln147_13_fu_1069_p1;
    tmp_35_1_fu_933_p1 <= trunc_ln147_8_fu_917_p1;
    tmp_35_1_fu_933_p2 <= trunc_ln147_9_fu_925_p1;
    tmp_36_0_1_fu_815_p1 <= trunc_ln147_6_fu_799_p1;
    tmp_36_0_1_fu_815_p2 <= trunc_ln147_7_fu_807_p1;
    tmp_36_1_1_fu_1103_p1 <= trunc_ln147_14_fu_1087_p1;
    tmp_36_1_1_fu_1103_p2 <= trunc_ln147_15_fu_1095_p1;
    tmp_36_1_fu_958_p1 <= trunc_ln147_10_fu_942_p1;
    tmp_36_1_fu_958_p2 <= trunc_ln147_11_fu_950_p1;
    tmp_3_fu_665_p1 <= trunc_ln147_2_fu_649_p1;
    tmp_3_fu_665_p2 <= trunc_ln147_3_fu_657_p1;
    tmp_4_reg_1352 <= empty;
    tmp_5_fu_1287_p3 <= (trunc_ln196_1_fu_1283_p1 & ap_const_lv6_0);
    tmp_fu_569_p1 <= trunc_ln8_fu_541_p4;
    tmp_fu_569_p2 <= trunc_ln151_1_fu_555_p4;
    tmp_s_fu_606_p1 <= trunc_ln151_2_fu_578_p4;
    tmp_s_fu_606_p2 <= trunc_ln151_3_fu_592_p4;
    trunc_ln147_10_fu_942_p1 <= I_1_0_q0(16 - 1 downto 0);
    trunc_ln147_11_fu_950_p1 <= I_1_1_q0(16 - 1 downto 0);
    trunc_ln147_12_fu_1061_p1 <= I_0_0_q0(16 - 1 downto 0);
    trunc_ln147_13_fu_1069_p1 <= I_0_1_q0(16 - 1 downto 0);
    trunc_ln147_14_fu_1087_p1 <= I_1_0_q0(16 - 1 downto 0);
    trunc_ln147_15_fu_1095_p1 <= I_1_1_q0(16 - 1 downto 0);
    trunc_ln147_1_fu_632_p1 <= I_0_1_q1(16 - 1 downto 0);
    trunc_ln147_2_fu_649_p1 <= I_1_0_q1(16 - 1 downto 0);
    trunc_ln147_3_fu_657_p1 <= I_1_1_q1(16 - 1 downto 0);
    trunc_ln147_4_fu_773_p1 <= I_0_0_q1(16 - 1 downto 0);
    trunc_ln147_5_fu_781_p1 <= I_0_1_q1(16 - 1 downto 0);
    trunc_ln147_6_fu_799_p1 <= I_1_0_q1(16 - 1 downto 0);
    trunc_ln147_7_fu_807_p1 <= I_1_1_q1(16 - 1 downto 0);
    trunc_ln147_8_fu_917_p1 <= I_0_0_q0(16 - 1 downto 0);
    trunc_ln147_9_fu_925_p1 <= I_0_1_q0(16 - 1 downto 0);
    trunc_ln147_fu_624_p1 <= I_0_0_q1(16 - 1 downto 0);
    trunc_ln151_10_fu_885_p4 <= I_1_1_q0(31 downto 16);
    trunc_ln151_11_fu_976_p4 <= I_0_0_q0(31 downto 16);
    trunc_ln151_12_fu_990_p4 <= I_0_1_q0(31 downto 16);
    trunc_ln151_13_fu_1014_p4 <= I_1_0_q0(31 downto 16);
    trunc_ln151_14_fu_1028_p4 <= I_1_1_q0(31 downto 16);
    trunc_ln151_1_fu_555_p4 <= I_0_1_q1(31 downto 16);
    trunc_ln151_2_fu_578_p4 <= I_1_0_q1(31 downto 16);
    trunc_ln151_3_fu_592_p4 <= I_1_1_q1(31 downto 16);
    trunc_ln151_4_fu_688_p4 <= I_0_0_q1(31 downto 16);
    trunc_ln151_5_fu_702_p4 <= I_0_1_q1(31 downto 16);
    trunc_ln151_6_fu_726_p4 <= I_1_0_q1(31 downto 16);
    trunc_ln151_7_fu_740_p4 <= I_1_1_q1(31 downto 16);
    trunc_ln151_8_fu_834_p4 <= I_0_0_q0(31 downto 16);
    trunc_ln151_9_fu_848_p4 <= I_0_1_q0(31 downto 16);
    trunc_ln151_s_fu_871_p4 <= I_1_0_q0(31 downto 16);
    trunc_ln188_fu_452_p1 <= x_fu_102(1 - 1 downto 0);
    trunc_ln196_1_fu_1283_p1 <= x1_fu_98(6 - 1 downto 0);
    trunc_ln196_fu_1279_p1 <= x1_fu_98(12 - 1 downto 0);
    trunc_ln8_fu_541_p4 <= I_0_0_q1(31 downto 16);
    xor_ln151_fu_683_p2 <= (trunc_ln188_reg_1401_pp0_iter2_reg xor ap_const_lv1_1);
    y_cast_read_reg_1372 <= y_cast;
    zext_ln151_1_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln151_1_fu_505_p2),64));
    zext_ln151_4_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln151_2_fu_517_p2),64));
    zext_ln151_5_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln151_3_fu_529_p2),64));
    zext_ln151_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln151_fu_493_p2),64));
    zext_ln175_cast_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln175),64));
    zext_ln196_fu_1301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln196_1_fu_1295_p2),64));
    zext_ln541_cast_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln541),64));
end behav;
