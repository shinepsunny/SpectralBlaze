-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity IFFT_AP_buffer_Pipeline_VITIS_LOOP_304_1_VITIS_LOOP_307_2_VITIS_LOOP_310_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_st_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    out_st_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    out_st_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    out_st_empty_n : IN STD_LOGIC;
    out_st_read : OUT STD_LOGIC;
    bound4 : IN STD_LOGIC_VECTOR (46 downto 0);
    buffer1_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    buffer1_0_ce0 : OUT STD_LOGIC;
    buffer1_0_we0 : OUT STD_LOGIC;
    buffer1_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buffer1_1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    buffer1_1_ce0 : OUT STD_LOGIC;
    buffer1_1_we0 : OUT STD_LOGIC;
    buffer1_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bound : IN STD_LOGIC_VECTOR (38 downto 0);
    div_cast : IN STD_LOGIC_VECTOR (7 downto 0);
    conv_i_i72 : IN STD_LOGIC_VECTOR (7 downto 0);
    icmp_ln1027 : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of IFFT_AP_buffer_Pipeline_VITIS_LOOP_304_1_VITIS_LOOP_307_2_VITIS_LOOP_310_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv40_0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    constant ap_const_lv47_0 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv47_1 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv40_1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal icmp_ln1027_11_reg_546 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_11_reg_546_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1027_11_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal out_st_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal conv_i_i72_cast_fu_188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_i_i72_cast_reg_531 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_cast_cast_fu_192_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal div_cast_cast_reg_536 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_cast_fu_196_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal bound_cast_reg_541 : STD_LOGIC_VECTOR (39 downto 0);
    signal icmp_ln307_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln307_reg_550 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln307_reg_550_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln302_2_fu_256_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln302_2_reg_558 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln302_1_fu_311_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln302_1_reg_563 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln302_2_fu_315_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln302_2_reg_568 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln302_2_reg_568_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln302_3_fu_324_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln302_3_reg_572 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln307_fu_330_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln307_reg_578 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1495_fu_338_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln1495_reg_583 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln313_fu_395_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln313_reg_588 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln313_2_reg_593 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln314_fu_423_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln314_reg_598 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln316_fu_445_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln316_reg_603 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal zext_ln314_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln316_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs_V_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_rhs_V_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal y_fu_94 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln307_1_fu_388_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_fu_98 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln307_2_fu_270_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal pn_x_fu_102 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten13_fu_106 : STD_LOGIC_VECTOR (46 downto 0);
    signal add_ln1027_fu_236_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal bitcast_ln313_fu_466_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln313_1_fu_471_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal pn_x_2_fu_245_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln307_1_fu_264_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln302_fu_306_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln302_fu_306_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln302_fu_306_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1027_12_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln302_1_fu_296_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln302_fu_349_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln307_fu_356_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln302_fu_345_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln302_4_fu_366_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_362_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln314_fu_373_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_4_fu_409_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_fu_380_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln_fu_413_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ret_V_fu_429_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln2_fu_435_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln302_fu_306_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component IFFT_AP_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component IFFT_AP_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_8ns_8ns_16_1_1_U369 : component IFFT_AP_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln302_fu_306_p0,
        din1 => mul_ln302_fu_306_p1,
        dout => mul_ln302_fu_306_p2);

    flow_control_loop_pipe_sequential_init_U : component IFFT_AP_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten13_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten13_fu_106 <= ap_const_lv47_0;
                elsif (((icmp_ln1027_11_fu_231_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten13_fu_106 <= add_ln1027_fu_236_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_98 <= ap_const_lv40_0;
                elsif (((icmp_ln1027_11_fu_231_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_98 <= select_ln307_2_fu_270_p3;
                end if;
            end if; 
        end if;
    end process;

    pn_x_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    pn_x_fu_102 <= ap_const_lv8_0;
                elsif (((icmp_ln1027_11_fu_231_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    pn_x_fu_102 <= select_ln302_2_fu_256_p3;
                end if;
            end if; 
        end if;
    end process;

    rhs_V_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    rhs_V_fu_90 <= ap_const_lv32_0;
                elsif (((icmp_ln1027_11_reg_546_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    rhs_V_fu_90 <= x_fu_451_p2;
                end if;
            end if; 
        end if;
    end process;

    y_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    y_fu_94 <= ap_const_lv8_0;
                elsif (((icmp_ln1027_11_reg_546_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    y_fu_94 <= select_ln307_1_fu_388_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1027_11_reg_546_pp0_iter2_reg = ap_const_lv1_0))) then
                add_ln314_reg_598 <= add_ln314_fu_423_p2;
                add_ln316_reg_603 <= add_ln316_fu_445_p2;
                trunc_ln313_2_reg_593 <= out_st_dout(47 downto 32);
                trunc_ln313_reg_588 <= trunc_ln313_fu_395_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                    bound_cast_reg_541(38 downto 0) <= bound_cast_fu_196_p1(38 downto 0);
                    conv_i_i72_cast_reg_531(7 downto 0) <= conv_i_i72_cast_fu_188_p1(7 downto 0);
                    div_cast_cast_reg_536(7 downto 0) <= div_cast_cast_fu_192_p1(7 downto 0);
                icmp_ln1027_11_reg_546 <= icmp_ln1027_11_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                icmp_ln1027_11_reg_546_pp0_iter2_reg <= icmp_ln1027_11_reg_546;
                icmp_ln307_reg_550_pp0_iter2_reg <= icmp_ln307_reg_550;
                trunc_ln302_2_reg_568_pp0_iter3_reg <= trunc_ln302_2_reg_568;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_11_fu_231_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln307_reg_550 <= icmp_ln307_fu_251_p2;
                select_ln302_2_reg_558 <= select_ln302_2_fu_256_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1027_11_reg_546 = ap_const_lv1_0))) then
                select_ln302_3_reg_572 <= select_ln302_3_fu_324_p3;
                select_ln307_reg_578 <= select_ln307_fu_330_p3;
                trunc_ln1495_reg_583 <= trunc_ln1495_fu_338_p1;
                trunc_ln302_1_reg_563 <= trunc_ln302_1_fu_311_p1;
                trunc_ln302_2_reg_568 <= trunc_ln302_2_fu_315_p1;
            end if;
        end if;
    end process;
    conv_i_i72_cast_reg_531(31 downto 8) <= "000000000000000000000000";
    div_cast_cast_reg_536(15 downto 8) <= "00000000";
    bound_cast_reg_541(39) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1027_fu_236_p2 <= std_logic_vector(unsigned(indvar_flatten13_fu_106) + unsigned(ap_const_lv47_1));
    add_ln307_1_fu_264_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_98) + unsigned(ap_const_lv40_1));
    add_ln307_fu_356_p2 <= std_logic_vector(unsigned(select_ln302_fu_349_p3) + unsigned(ap_const_lv8_1));
    add_ln314_fu_423_p2 <= std_logic_vector(unsigned(tmp_s_fu_380_p3) + unsigned(lshr_ln_fu_413_p4));
    add_ln316_fu_445_p2 <= std_logic_vector(unsigned(tmp_s_fu_380_p3) + unsigned(lshr_ln2_fu_435_p4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, out_st_empty_n, icmp_ln1027_11_reg_546_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln1027_11_reg_546_pp0_iter2_reg = ap_const_lv1_0) and (out_st_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, out_st_empty_n, icmp_ln1027_11_reg_546_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln1027_11_reg_546_pp0_iter2_reg = ap_const_lv1_0) and (out_st_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter3_assign_proc : process(out_st_empty_n, icmp_ln1027_11_reg_546_pp0_iter2_reg)
    begin
                ap_block_state4_pp0_stage0_iter3 <= ((icmp_ln1027_11_reg_546_pp0_iter2_reg = ap_const_lv1_0) and (out_st_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1027_11_fu_231_p2)
    begin
        if (((icmp_ln1027_11_fu_231_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln1027_11_reg_546_pp0_iter2_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln1027_11_reg_546_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_rhs_V_load_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln1027_11_reg_546_pp0_iter2_reg, ap_block_pp0_stage0, rhs_V_fu_90, x_fu_451_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln1027_11_reg_546_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_sig_allocacmp_rhs_V_load <= x_fu_451_p2;
        else 
            ap_sig_allocacmp_rhs_V_load <= rhs_V_fu_90;
        end if; 
    end process;

    bitcast_ln313_1_fu_471_p1 <= trunc_ln313_2_reg_593;
    bitcast_ln313_fu_466_p1 <= trunc_ln313_reg_588;
    bound_cast_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound),40));

    buffer1_0_address0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, trunc_ln302_2_reg_568_pp0_iter3_reg, zext_ln314_fu_476_p1, zext_ln316_fu_481_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
            if ((trunc_ln302_2_reg_568_pp0_iter3_reg = ap_const_lv1_1)) then 
                buffer1_0_address0 <= zext_ln316_fu_481_p1(13 - 1 downto 0);
            elsif ((trunc_ln302_2_reg_568_pp0_iter3_reg = ap_const_lv1_0)) then 
                buffer1_0_address0 <= zext_ln314_fu_476_p1(13 - 1 downto 0);
            else 
                buffer1_0_address0 <= "XXXXXXXXXXXXX";
            end if;
        else 
            buffer1_0_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    buffer1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, trunc_ln302_2_reg_568_pp0_iter3_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln302_2_reg_568_pp0_iter3_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln302_2_reg_568_pp0_iter3_reg = ap_const_lv1_0)))) then 
            buffer1_0_ce0 <= ap_const_logic_1;
        else 
            buffer1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer1_0_d0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, trunc_ln302_2_reg_568_pp0_iter3_reg, bitcast_ln313_fu_466_p1, bitcast_ln313_1_fu_471_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
            if ((trunc_ln302_2_reg_568_pp0_iter3_reg = ap_const_lv1_1)) then 
                buffer1_0_d0 <= bitcast_ln313_1_fu_471_p1;
            elsif ((trunc_ln302_2_reg_568_pp0_iter3_reg = ap_const_lv1_0)) then 
                buffer1_0_d0 <= bitcast_ln313_fu_466_p1;
            else 
                buffer1_0_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            buffer1_0_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buffer1_0_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, trunc_ln302_2_reg_568_pp0_iter3_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln302_2_reg_568_pp0_iter3_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln302_2_reg_568_pp0_iter3_reg = ap_const_lv1_0)))) then 
            buffer1_0_we0 <= ap_const_logic_1;
        else 
            buffer1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer1_1_address0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, trunc_ln302_2_reg_568_pp0_iter3_reg, zext_ln314_fu_476_p1, zext_ln316_fu_481_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
            if ((trunc_ln302_2_reg_568_pp0_iter3_reg = ap_const_lv1_0)) then 
                buffer1_1_address0 <= zext_ln316_fu_481_p1(13 - 1 downto 0);
            elsif ((trunc_ln302_2_reg_568_pp0_iter3_reg = ap_const_lv1_1)) then 
                buffer1_1_address0 <= zext_ln314_fu_476_p1(13 - 1 downto 0);
            else 
                buffer1_1_address0 <= "XXXXXXXXXXXXX";
            end if;
        else 
            buffer1_1_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    buffer1_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, trunc_ln302_2_reg_568_pp0_iter3_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln302_2_reg_568_pp0_iter3_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln302_2_reg_568_pp0_iter3_reg = ap_const_lv1_0)))) then 
            buffer1_1_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer1_1_d0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, trunc_ln302_2_reg_568_pp0_iter3_reg, bitcast_ln313_fu_466_p1, bitcast_ln313_1_fu_471_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
            if ((trunc_ln302_2_reg_568_pp0_iter3_reg = ap_const_lv1_0)) then 
                buffer1_1_d0 <= bitcast_ln313_1_fu_471_p1;
            elsif ((trunc_ln302_2_reg_568_pp0_iter3_reg = ap_const_lv1_1)) then 
                buffer1_1_d0 <= bitcast_ln313_fu_466_p1;
            else 
                buffer1_1_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            buffer1_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buffer1_1_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, trunc_ln302_2_reg_568_pp0_iter3_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln302_2_reg_568_pp0_iter3_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln302_2_reg_568_pp0_iter3_reg = ap_const_lv1_0)))) then 
            buffer1_1_we0 <= ap_const_logic_1;
        else 
            buffer1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_i_i72_cast_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_i_i72),32));
    div_cast_cast_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div_cast),16));
    empty_fu_362_p1 <= add_ln307_fu_356_p2(6 - 1 downto 0);
    icmp_ln1027_11_fu_231_p2 <= "1" when (indvar_flatten13_fu_106 = bound4) else "0";
    icmp_ln1027_12_fu_319_p2 <= "1" when (unsigned(ap_sig_allocacmp_rhs_V_load) < unsigned(conv_i_i72_cast_reg_531)) else "0";
    icmp_ln307_fu_251_p2 <= "1" when (indvar_flatten_fu_98 = bound_cast_reg_541) else "0";
    lshr_ln2_fu_435_p4 <= ret_V_fu_429_p2(13 downto 1);
    lshr_ln_fu_413_p4 <= ret_V_4_fu_409_p2(13 downto 1);
    mul_ln302_fu_306_p0 <= mul_ln302_fu_306_p00(8 - 1 downto 0);
    mul_ln302_fu_306_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln302_2_reg_558),16));
    mul_ln302_fu_306_p1 <= div_cast_cast_reg_536(8 - 1 downto 0);

    out_st_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, out_st_empty_n, icmp_ln1027_11_reg_546_pp0_iter2_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln1027_11_reg_546_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_st_blk_n <= out_st_empty_n;
        else 
            out_st_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_st_read_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln1027_11_reg_546_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1027_11_reg_546_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_st_read <= ap_const_logic_1;
        else 
            out_st_read <= ap_const_logic_0;
        end if; 
    end process;

    pn_x_2_fu_245_p2 <= std_logic_vector(unsigned(pn_x_fu_102) + unsigned(ap_const_lv8_1));
    ret_V_4_fu_409_p2 <= std_logic_vector(unsigned(trunc_ln1495_reg_583) + unsigned(trunc_ln302_1_reg_563));
    ret_V_fu_429_p2 <= std_logic_vector(unsigned(ret_V_4_fu_409_p2) + unsigned(ap_const_lv14_1));
    select_ln302_1_fu_296_p3 <= 
        ap_const_lv32_0 when (icmp_ln307_reg_550(0) = '1') else 
        ap_sig_allocacmp_rhs_V_load;
    select_ln302_2_fu_256_p3 <= 
        pn_x_2_fu_245_p2 when (icmp_ln307_fu_251_p2(0) = '1') else 
        pn_x_fu_102;
    select_ln302_3_fu_324_p3 <= 
        icmp_ln1027 when (icmp_ln307_reg_550(0) = '1') else 
        icmp_ln1027_12_fu_319_p2;
    select_ln302_4_fu_366_p3 <= 
        ap_const_lv6_0 when (icmp_ln307_reg_550_pp0_iter2_reg(0) = '1') else 
        trunc_ln302_fu_345_p1;
    select_ln302_fu_349_p3 <= 
        ap_const_lv8_0 when (icmp_ln307_reg_550_pp0_iter2_reg(0) = '1') else 
        y_fu_94;
    select_ln307_1_fu_388_p3 <= 
        select_ln302_fu_349_p3 when (select_ln302_3_reg_572(0) = '1') else 
        add_ln307_fu_356_p2;
    select_ln307_2_fu_270_p3 <= 
        ap_const_lv40_1 when (icmp_ln307_fu_251_p2(0) = '1') else 
        add_ln307_1_fu_264_p2;
    select_ln307_fu_330_p3 <= 
        select_ln302_1_fu_296_p3 when (select_ln302_3_fu_324_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln314_fu_373_p3 <= 
        select_ln302_4_fu_366_p3 when (select_ln302_3_reg_572(0) = '1') else 
        empty_fu_362_p1;
    tmp_s_fu_380_p3 <= (select_ln314_fu_373_p3 & ap_const_lv7_0);
    trunc_ln1495_fu_338_p1 <= select_ln307_fu_330_p3(14 - 1 downto 0);
    trunc_ln302_1_fu_311_p1 <= mul_ln302_fu_306_p2(14 - 1 downto 0);
    trunc_ln302_2_fu_315_p1 <= mul_ln302_fu_306_p2(1 - 1 downto 0);
    trunc_ln302_fu_345_p1 <= y_fu_94(6 - 1 downto 0);
    trunc_ln313_fu_395_p1 <= out_st_dout(16 - 1 downto 0);
    x_fu_451_p2 <= std_logic_vector(unsigned(select_ln307_reg_578) + unsigned(ap_const_lv32_2));
    zext_ln314_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln314_reg_598),64));
    zext_ln316_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln316_reg_603),64));
end behav;
