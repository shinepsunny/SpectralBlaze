-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity IFFT_AP_vr_ifft is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r : IN STD_LOGIC_VECTOR (63 downto 0);
    out_st_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_st_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    out_st_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    out_st_full_n : IN STD_LOGIC;
    out_st_write : OUT STD_LOGIC;
    ctrl1_regp : IN STD_LOGIC_VECTOR (31 downto 0);
    ctrl2_regp : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_regp : IN STD_LOGIC_VECTOR (31 downto 0);
    actp_regp : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of IFFT_AP_vr_ifft is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln208_reg_177 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_86_out_st_din : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_86_out_st_write : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_86_ap_start : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_86_ap_done : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_86_ap_ready : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_86_ap_idle : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_86_ap_continue : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_86_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_sync_grp_dataflow_parent_loop_proc_fu_86_ap_ready : STD_LOGIC;
    signal ap_sync_grp_dataflow_parent_loop_proc_fu_86_ap_done : STD_LOGIC;
    signal ap_block_state5_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_done : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal empty_fu_123_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv3_i_fu_131_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctrl2_regp_load_cast_cast_fu_127_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv3_i_fu_131_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv3_i_fu_131_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_141_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_155_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_155_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_155_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal grp_fu_155_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_155_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component IFFT_AP_dataflow_parent_loop_proc IS
    port (
        mul_ln208 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r : IN STD_LOGIC_VECTOR (63 downto 0);
        ctrl1_regp : IN STD_LOGIC_VECTOR (31 downto 0);
        actp_regp : IN STD_LOGIC_VECTOR (31 downto 0);
        out_st_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_st_full_n : IN STD_LOGIC;
        out_st_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        in_r_ap_vld : IN STD_LOGIC;
        ctrl1_regp_ap_vld : IN STD_LOGIC;
        actp_regp_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component IFFT_AP_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component IFFT_AP_mul_mul_16ns_16ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_dataflow_parent_loop_proc_fu_86 : component IFFT_AP_dataflow_parent_loop_proc
    port map (
        mul_ln208 => mul_ln208_reg_177,
        m_axi_gmem_AWVALID => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => m_axi_gmem_RVALID,
        m_axi_gmem_RREADY => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => m_axi_gmem_RDATA,
        m_axi_gmem_RLAST => m_axi_gmem_RLAST,
        m_axi_gmem_RID => m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM => m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER => m_axi_gmem_RUSER,
        m_axi_gmem_RRESP => m_axi_gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        in_r => in_r,
        ctrl1_regp => ctrl1_regp,
        actp_regp => actp_regp,
        out_st_din => grp_dataflow_parent_loop_proc_fu_86_out_st_din,
        out_st_full_n => out_st_full_n,
        out_st_write => grp_dataflow_parent_loop_proc_fu_86_out_st_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        in_r_ap_vld => ap_const_logic_1,
        ctrl1_regp_ap_vld => ap_const_logic_1,
        actp_regp_ap_vld => ap_const_logic_1,
        ap_start => grp_dataflow_parent_loop_proc_fu_86_ap_start,
        ap_done => grp_dataflow_parent_loop_proc_fu_86_ap_done,
        ap_ready => grp_dataflow_parent_loop_proc_fu_86_ap_ready,
        ap_idle => grp_dataflow_parent_loop_proc_fu_86_ap_idle,
        ap_continue => grp_dataflow_parent_loop_proc_fu_86_ap_continue);

    mul_8ns_8ns_16_1_1_U352 : component IFFT_AP_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => conv3_i_fu_131_p0,
        din1 => conv3_i_fu_131_p1,
        dout => conv3_i_fu_131_p2);

    mul_mul_16ns_16ns_32_4_1_U353 : component IFFT_AP_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_155_p0,
        din1 => grp_fu_155_p1,
        ce => grp_fu_155_ce,
        dout => grp_fu_155_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_done <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc_fu_86_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_ready <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc_fu_86_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dataflow_parent_loop_proc_fu_86_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dataflow_parent_loop_proc_fu_86_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_sync_grp_dataflow_parent_loop_proc_fu_86_ap_ready = ap_const_logic_0)))) then 
                    grp_dataflow_parent_loop_proc_fu_86_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dataflow_parent_loop_proc_fu_86_ap_ready = ap_const_logic_1)) then 
                    grp_dataflow_parent_loop_proc_fu_86_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                mul_ln208_reg_177 <= grp_fu_155_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(ap_block_state5_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state5_on_subcall_done)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state5_on_subcall_done_assign_proc : process(ap_sync_grp_dataflow_parent_loop_proc_fu_86_ap_ready, ap_sync_grp_dataflow_parent_loop_proc_fu_86_ap_done)
    begin
                ap_block_state5_on_subcall_done <= ((ap_sync_grp_dataflow_parent_loop_proc_fu_86_ap_ready and ap_sync_grp_dataflow_parent_loop_proc_fu_86_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_dataflow_parent_loop_proc_fu_86_ap_done <= (grp_dataflow_parent_loop_proc_fu_86_ap_done or ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_done);
    ap_sync_grp_dataflow_parent_loop_proc_fu_86_ap_ready <= (grp_dataflow_parent_loop_proc_fu_86_ap_ready or ap_sync_reg_grp_dataflow_parent_loop_proc_fu_86_ap_ready);
    conv3_i_fu_131_p0 <= ctrl2_regp_load_cast_cast_fu_127_p1(8 - 1 downto 0);
    conv3_i_fu_131_p1 <= ctrl2_regp_load_cast_cast_fu_127_p1(8 - 1 downto 0);
    ctrl2_regp_load_cast_cast_fu_127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_123_p1),16));
    empty_fu_123_p1 <= ctrl2_regp(8 - 1 downto 0);

    grp_dataflow_parent_loop_proc_fu_86_ap_continue_assign_proc : process(ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
            grp_dataflow_parent_loop_proc_fu_86_ap_continue <= ap_const_logic_1;
        else 
            grp_dataflow_parent_loop_proc_fu_86_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_dataflow_parent_loop_proc_fu_86_ap_start <= grp_dataflow_parent_loop_proc_fu_86_ap_start_reg;

    grp_fu_155_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state1) and ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))))) then 
            grp_fu_155_ce <= ap_const_logic_0;
        else 
            grp_fu_155_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_155_p0 <= grp_fu_155_p00(16 - 1 downto 0);
    grp_fu_155_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_141_p4),32));
    grp_fu_155_p1 <= grp_fu_155_p10(16 - 1 downto 0);
    grp_fu_155_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv3_i_fu_131_p2),32));
    m_axi_gmem_ARADDR <= grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARADDR;
    m_axi_gmem_ARBURST <= grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARBURST;
    m_axi_gmem_ARCACHE <= grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARCACHE;
    m_axi_gmem_ARID <= grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARID;
    m_axi_gmem_ARLEN <= grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARLEN;
    m_axi_gmem_ARLOCK <= grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARLOCK;
    m_axi_gmem_ARPROT <= grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARPROT;
    m_axi_gmem_ARQOS <= grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARQOS;
    m_axi_gmem_ARREGION <= grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARREGION;
    m_axi_gmem_ARSIZE <= grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARSIZE;
    m_axi_gmem_ARUSER <= grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARUSER;

    m_axi_gmem_ARVALID_assign_proc : process(ap_CS_fsm_state4, grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARVALID, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_gmem_ARVALID <= grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_ARVALID;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_CS_fsm_state4, grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_RREADY, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_gmem_RREADY <= grp_dataflow_parent_loop_proc_fu_86_m_axi_gmem_RREADY;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv128_lc_1;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv16_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    out_st_din <= grp_dataflow_parent_loop_proc_fu_86_out_st_din;

    out_st_write_assign_proc : process(grp_dataflow_parent_loop_proc_fu_86_out_st_write, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_st_write <= grp_dataflow_parent_loop_proc_fu_86_out_st_write;
        else 
            out_st_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_141_p4 <= layer1_regp(31 downto 16);
end behav;
